/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateAccountingTemplateArgs } from "./CreateAccountingTemplateArgs";
import { UpdateAccountingTemplateArgs } from "./UpdateAccountingTemplateArgs";
import { DeleteAccountingTemplateArgs } from "./DeleteAccountingTemplateArgs";
import { AccountingTemplateCountArgs } from "./AccountingTemplateCountArgs";
import { AccountingTemplateFindManyArgs } from "./AccountingTemplateFindManyArgs";
import { AccountingTemplateFindUniqueArgs } from "./AccountingTemplateFindUniqueArgs";
import { AccountingTemplate } from "./AccountingTemplate";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { AccountingTemplateService } from "../accountingTemplate.service";
@graphql.Resolver(() => AccountingTemplate)
export class AccountingTemplateResolverBase {
  constructor(protected readonly service: AccountingTemplateService) {}

  async _accountingTemplatesMeta(
    @graphql.Args() args: AccountingTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AccountingTemplate])
  async accountingTemplates(
    @graphql.Args() args: AccountingTemplateFindManyArgs
  ): Promise<AccountingTemplate[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => AccountingTemplate, { nullable: true })
  async accountingTemplate(
    @graphql.Args() args: AccountingTemplateFindUniqueArgs
  ): Promise<AccountingTemplate | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AccountingTemplate)
  async createAccountingTemplate(
    @graphql.Args() args: CreateAccountingTemplateArgs
  ): Promise<AccountingTemplate> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AccountingTemplate)
  async updateAccountingTemplate(
    @graphql.Args() args: UpdateAccountingTemplateArgs
  ): Promise<AccountingTemplate | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccountingTemplate)
  async deleteAccountingTemplate(
    @graphql.Args() args: DeleteAccountingTemplateArgs
  ): Promise<AccountingTemplate | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: AccountingTemplate
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: AccountingTemplate
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
