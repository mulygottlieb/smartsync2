/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateActivityArgs } from "./CreateActivityArgs";
import { UpdateActivityArgs } from "./UpdateActivityArgs";
import { DeleteActivityArgs } from "./DeleteActivityArgs";
import { ActivityCountArgs } from "./ActivityCountArgs";
import { ActivityFindManyArgs } from "./ActivityFindManyArgs";
import { ActivityFindUniqueArgs } from "./ActivityFindUniqueArgs";
import { Activity } from "./Activity";
import { Task } from "../../task/base/Task";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { Employee } from "../../employee/base/Employee";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { ActivityService } from "../activity.service";
@graphql.Resolver(() => Activity)
export class ActivityResolverBase {
  constructor(protected readonly service: ActivityService) {}

  async _activitiesMeta(
    @graphql.Args() args: ActivityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Activity])
  async activities(
    @graphql.Args() args: ActivityFindManyArgs
  ): Promise<Activity[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Activity, { nullable: true })
  async activity(
    @graphql.Args() args: ActivityFindUniqueArgs
  ): Promise<Activity | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Activity)
  async createActivity(
    @graphql.Args() args: CreateActivityArgs
  ): Promise<Activity> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        task: args.data.task
          ? {
              connect: args.data.task,
            }
          : undefined,

        timeSlot: args.data.timeSlot
          ? {
              connect: args.data.timeSlot,
            }
          : undefined,

        organizationProject: args.data.organizationProject
          ? {
              connect: args.data.organizationProject,
            }
          : undefined,

        employee: {
          connect: args.data.employee,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Activity)
  async updateActivity(
    @graphql.Args() args: UpdateActivityArgs
  ): Promise<Activity | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          task: args.data.task
            ? {
                connect: args.data.task,
              }
            : undefined,

          timeSlot: args.data.timeSlot
            ? {
                connect: args.data.timeSlot,
              }
            : undefined,

          organizationProject: args.data.organizationProject
            ? {
                connect: args.data.organizationProject,
              }
            : undefined,

          employee: {
            connect: args.data.employee,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Activity)
  async deleteActivity(
    @graphql.Args() args: DeleteActivityArgs
  ): Promise<Activity | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Task, {
    nullable: true,
    name: "task",
  })
  async resolveFieldTask(
    @graphql.Parent() parent: Activity
  ): Promise<Task | null> {
    const result = await this.service.getTask(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => TimeSlot, {
    nullable: true,
    name: "timeSlot",
  })
  async resolveFieldTimeSlot(
    @graphql.Parent() parent: Activity
  ): Promise<TimeSlot | null> {
    const result = await this.service.getTimeSlot(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationProject, {
    nullable: true,
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: Activity
  ): Promise<OrganizationProject | null> {
    const result = await this.service.getOrganizationProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: Activity
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: Activity
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: Activity
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
