/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateAppointmentEmployeeArgs } from "./CreateAppointmentEmployeeArgs";
import { UpdateAppointmentEmployeeArgs } from "./UpdateAppointmentEmployeeArgs";
import { DeleteAppointmentEmployeeArgs } from "./DeleteAppointmentEmployeeArgs";
import { AppointmentEmployeeCountArgs } from "./AppointmentEmployeeCountArgs";
import { AppointmentEmployeeFindManyArgs } from "./AppointmentEmployeeFindManyArgs";
import { AppointmentEmployeeFindUniqueArgs } from "./AppointmentEmployeeFindUniqueArgs";
import { AppointmentEmployee } from "./AppointmentEmployee";
import { Employee } from "../../employee/base/Employee";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { EmployeeAppointment } from "../../employeeAppointment/base/EmployeeAppointment";
import { AppointmentEmployeeService } from "../appointmentEmployee.service";
@graphql.Resolver(() => AppointmentEmployee)
export class AppointmentEmployeeResolverBase {
  constructor(protected readonly service: AppointmentEmployeeService) {}

  async _appointmentEmployeesMeta(
    @graphql.Args() args: AppointmentEmployeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AppointmentEmployee])
  async appointmentEmployees(
    @graphql.Args() args: AppointmentEmployeeFindManyArgs
  ): Promise<AppointmentEmployee[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => AppointmentEmployee, { nullable: true })
  async appointmentEmployee(
    @graphql.Args() args: AppointmentEmployeeFindUniqueArgs
  ): Promise<AppointmentEmployee | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AppointmentEmployee)
  async createAppointmentEmployee(
    @graphql.Args() args: CreateAppointmentEmployeeArgs
  ): Promise<AppointmentEmployee> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        employee: {
          connect: args.data.employee,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        employeeAppointment: args.data.employeeAppointment
          ? {
              connect: args.data.employeeAppointment,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AppointmentEmployee)
  async updateAppointmentEmployee(
    @graphql.Args() args: UpdateAppointmentEmployeeArgs
  ): Promise<AppointmentEmployee | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          employee: {
            connect: args.data.employee,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          employeeAppointment: args.data.employeeAppointment
            ? {
                connect: args.data.employeeAppointment,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AppointmentEmployee)
  async deleteAppointmentEmployee(
    @graphql.Args() args: DeleteAppointmentEmployeeArgs
  ): Promise<AppointmentEmployee | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: AppointmentEmployee
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: AppointmentEmployee
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: AppointmentEmployee
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => EmployeeAppointment, {
    nullable: true,
    name: "employeeAppointment",
  })
  async resolveFieldEmployeeAppointment(
    @graphql.Parent() parent: AppointmentEmployee
  ): Promise<EmployeeAppointment | null> {
    const result = await this.service.getEmployeeAppointment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
