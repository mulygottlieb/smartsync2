/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateApprovalPolicyArgs } from "./CreateApprovalPolicyArgs";
import { UpdateApprovalPolicyArgs } from "./UpdateApprovalPolicyArgs";
import { DeleteApprovalPolicyArgs } from "./DeleteApprovalPolicyArgs";
import { ApprovalPolicyCountArgs } from "./ApprovalPolicyCountArgs";
import { ApprovalPolicyFindManyArgs } from "./ApprovalPolicyFindManyArgs";
import { ApprovalPolicyFindUniqueArgs } from "./ApprovalPolicyFindUniqueArgs";
import { ApprovalPolicy } from "./ApprovalPolicy";
import { RequestApprovalFindManyArgs } from "../../requestApproval/base/RequestApprovalFindManyArgs";
import { RequestApproval } from "../../requestApproval/base/RequestApproval";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { ApprovalPolicyService } from "../approvalPolicy.service";
@graphql.Resolver(() => ApprovalPolicy)
export class ApprovalPolicyResolverBase {
  constructor(protected readonly service: ApprovalPolicyService) {}

  async _approvalPoliciesMeta(
    @graphql.Args() args: ApprovalPolicyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApprovalPolicy])
  async approvalPolicies(
    @graphql.Args() args: ApprovalPolicyFindManyArgs
  ): Promise<ApprovalPolicy[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ApprovalPolicy, { nullable: true })
  async approvalPolicy(
    @graphql.Args() args: ApprovalPolicyFindUniqueArgs
  ): Promise<ApprovalPolicy | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApprovalPolicy)
  async createApprovalPolicy(
    @graphql.Args() args: CreateApprovalPolicyArgs
  ): Promise<ApprovalPolicy> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ApprovalPolicy)
  async updateApprovalPolicy(
    @graphql.Args() args: UpdateApprovalPolicyArgs
  ): Promise<ApprovalPolicy | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApprovalPolicy)
  async deleteApprovalPolicy(
    @graphql.Args() args: DeleteApprovalPolicyArgs
  ): Promise<ApprovalPolicy | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [RequestApproval], { name: "requestApproval" })
  async resolveFieldRequestApproval(
    @graphql.Parent() parent: ApprovalPolicy,
    @graphql.Args() args: RequestApprovalFindManyArgs
  ): Promise<RequestApproval[]> {
    const results = await this.service.findRequestApproval(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: ApprovalPolicy
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: ApprovalPolicy
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
