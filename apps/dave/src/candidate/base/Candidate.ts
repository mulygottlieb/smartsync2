/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsDate,
  IsNumber,
  IsOptional,
  IsInt,
  IsBoolean,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { Decimal } from "decimal.js";
import { Organization } from "../../organization/base/Organization";
import { OrganizationPosition } from "../../organizationPosition/base/OrganizationPosition";
import { User } from "../../user/base/User";
import { CandidateSource } from "../../candidateSource/base/CandidateSource";
import { Tenant } from "../../tenant/base/Tenant";
import { Employee } from "../../employee/base/Employee";
import { Contact } from "../../contact/base/Contact";
import { CandidateDepartment } from "../../candidateDepartment/base/CandidateDepartment";
import { CandidateDocument } from "../../candidateDocument/base/CandidateDocument";
import { CandidateEducation } from "../../candidateEducation/base/CandidateEducation";
import { CandidateEmploymentType } from "../../candidateEmploymentType/base/CandidateEmploymentType";
import { CandidateExperience } from "../../candidateExperience/base/CandidateExperience";
import { CandidateFeedback } from "../../candidateFeedback/base/CandidateFeedback";
import { CandidateInterview } from "../../candidateInterview/base/CandidateInterview";
import { CandidateSkill } from "../../candidateSkill/base/CandidateSkill";
import { TagCandidate } from "../../tagCandidate/base/TagCandidate";

@ObjectType()
class Candidate {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  rating!: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  valueDate!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  appliedDate!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  hiredDate!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  status!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  rejectDate!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  candidateLevel!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  reWeeklyLimit!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  billRateCurrency!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  billRateValue!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  payPeriod!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  cvUrl!: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isArchived!: boolean | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  minimumBillingRate!: number | null;

  @ApiProperty({
    required: false,
    type: () => Organization,
  })
  @ValidateNested()
  @Type(() => Organization)
  @IsOptional()
  organization?: Organization | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationPosition,
  })
  @ValidateNested()
  @Type(() => OrganizationPosition)
  @IsOptional()
  organizationPosition?: OrganizationPosition | null;

  @ApiProperty({
    required: true,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  user?: User;

  @ApiProperty({
    required: false,
    type: () => CandidateSource,
  })
  @ValidateNested()
  @Type(() => CandidateSource)
  @IsOptional()
  candidateSource?: CandidateSource | null;

  @ApiProperty({
    required: false,
    type: () => Tenant,
  })
  @ValidateNested()
  @Type(() => Tenant)
  @IsOptional()
  tenant?: Tenant | null;

  @ApiProperty({
    required: false,
    type: () => Employee,
  })
  @ValidateNested()
  @Type(() => Employee)
  @IsOptional()
  employee?: Employee | null;

  @ApiProperty({
    required: false,
    type: () => Contact,
  })
  @ValidateNested()
  @Type(() => Contact)
  @IsOptional()
  contact?: Contact | null;

  @ApiProperty({
    required: false,
    type: () => [CandidateDepartment],
  })
  @ValidateNested()
  @Type(() => CandidateDepartment)
  @IsOptional()
  candidateDepartment?: Array<CandidateDepartment>;

  @ApiProperty({
    required: false,
    type: () => [CandidateDocument],
  })
  @ValidateNested()
  @Type(() => CandidateDocument)
  @IsOptional()
  candidateDocument?: Array<CandidateDocument>;

  @ApiProperty({
    required: false,
    type: () => [CandidateEducation],
  })
  @ValidateNested()
  @Type(() => CandidateEducation)
  @IsOptional()
  candidateEducation?: Array<CandidateEducation>;

  @ApiProperty({
    required: false,
    type: () => [CandidateEmploymentType],
  })
  @ValidateNested()
  @Type(() => CandidateEmploymentType)
  @IsOptional()
  candidateEmploymentType?: Array<CandidateEmploymentType>;

  @ApiProperty({
    required: false,
    type: () => [CandidateExperience],
  })
  @ValidateNested()
  @Type(() => CandidateExperience)
  @IsOptional()
  candidateExperience?: Array<CandidateExperience>;

  @ApiProperty({
    required: false,
    type: () => [CandidateFeedback],
  })
  @ValidateNested()
  @Type(() => CandidateFeedback)
  @IsOptional()
  candidateFeedback?: Array<CandidateFeedback>;

  @ApiProperty({
    required: false,
    type: () => [CandidateInterview],
  })
  @ValidateNested()
  @Type(() => CandidateInterview)
  @IsOptional()
  candidateInterview?: Array<CandidateInterview>;

  @ApiProperty({
    required: false,
    type: () => [CandidateSkill],
  })
  @ValidateNested()
  @Type(() => CandidateSkill)
  @IsOptional()
  candidateSkill?: Array<CandidateSkill>;

  @ApiProperty({
    required: false,
    type: () => [TagCandidate],
  })
  @ValidateNested()
  @Type(() => TagCandidate)
  @IsOptional()
  tagCandidate?: Array<TagCandidate>;
}

export { Candidate as Candidate };
