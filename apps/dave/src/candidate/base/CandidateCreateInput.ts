/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsNumber,
  IsOptional,
  IsDate,
  IsString,
  IsInt,
  IsBoolean,
  ValidateNested,
} from "class-validator";
import { Decimal } from "decimal.js";
import { Type } from "class-transformer";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { OrganizationPositionWhereUniqueInput } from "../../organizationPosition/base/OrganizationPositionWhereUniqueInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { CandidateSourceWhereUniqueInput } from "../../candidateSource/base/CandidateSourceWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { EmployeeWhereUniqueInput } from "../../employee/base/EmployeeWhereUniqueInput";
import { ContactWhereUniqueInput } from "../../contact/base/ContactWhereUniqueInput";
import { CandidateDepartmentCreateNestedManyWithoutCandidatesInput } from "./CandidateDepartmentCreateNestedManyWithoutCandidatesInput";
import { CandidateDocumentCreateNestedManyWithoutCandidatesInput } from "./CandidateDocumentCreateNestedManyWithoutCandidatesInput";
import { CandidateEducationCreateNestedManyWithoutCandidatesInput } from "./CandidateEducationCreateNestedManyWithoutCandidatesInput";
import { CandidateEmploymentTypeCreateNestedManyWithoutCandidatesInput } from "./CandidateEmploymentTypeCreateNestedManyWithoutCandidatesInput";
import { CandidateExperienceCreateNestedManyWithoutCandidatesInput } from "./CandidateExperienceCreateNestedManyWithoutCandidatesInput";
import { CandidateFeedbackCreateNestedManyWithoutCandidatesInput } from "./CandidateFeedbackCreateNestedManyWithoutCandidatesInput";
import { CandidateInterviewCreateNestedManyWithoutCandidatesInput } from "./CandidateInterviewCreateNestedManyWithoutCandidatesInput";
import { CandidateSkillCreateNestedManyWithoutCandidatesInput } from "./CandidateSkillCreateNestedManyWithoutCandidatesInput";
import { TagCandidateCreateNestedManyWithoutCandidatesInput } from "./TagCandidateCreateNestedManyWithoutCandidatesInput";

@InputType()
class CandidateCreateInput {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  rating?: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  valueDate?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  appliedDate?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  hiredDate?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  status?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  rejectDate?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  candidateLevel?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  reWeeklyLimit?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  billRateCurrency?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  billRateValue?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  payPeriod?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  cvUrl?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isArchived?: boolean | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  minimumBillingRate?: number | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organization?: OrganizationWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationPositionWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationPositionWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationPositionWhereUniqueInput, {
    nullable: true,
  })
  organizationPosition?: OrganizationPositionWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @Field(() => UserWhereUniqueInput)
  user!: UserWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => CandidateSourceWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CandidateSourceWhereUniqueInput)
  @IsOptional()
  @Field(() => CandidateSourceWhereUniqueInput, {
    nullable: true,
  })
  candidateSource?: CandidateSourceWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => EmployeeWhereUniqueInput)
  @IsOptional()
  @Field(() => EmployeeWhereUniqueInput, {
    nullable: true,
  })
  employee?: EmployeeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ContactWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ContactWhereUniqueInput)
  @IsOptional()
  @Field(() => ContactWhereUniqueInput, {
    nullable: true,
  })
  contact?: ContactWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => CandidateDepartmentCreateNestedManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateDepartmentCreateNestedManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateDepartmentCreateNestedManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateDepartment?: CandidateDepartmentCreateNestedManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => CandidateDocumentCreateNestedManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateDocumentCreateNestedManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateDocumentCreateNestedManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateDocument?: CandidateDocumentCreateNestedManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => CandidateEducationCreateNestedManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateEducationCreateNestedManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateEducationCreateNestedManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateEducation?: CandidateEducationCreateNestedManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => CandidateEmploymentTypeCreateNestedManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateEmploymentTypeCreateNestedManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateEmploymentTypeCreateNestedManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateEmploymentType?: CandidateEmploymentTypeCreateNestedManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => CandidateExperienceCreateNestedManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateExperienceCreateNestedManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateExperienceCreateNestedManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateExperience?: CandidateExperienceCreateNestedManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => CandidateFeedbackCreateNestedManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateFeedbackCreateNestedManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateFeedbackCreateNestedManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateFeedback?: CandidateFeedbackCreateNestedManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => CandidateInterviewCreateNestedManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateInterviewCreateNestedManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateInterviewCreateNestedManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateInterview?: CandidateInterviewCreateNestedManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => CandidateSkillCreateNestedManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateSkillCreateNestedManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateSkillCreateNestedManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateSkill?: CandidateSkillCreateNestedManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => TagCandidateCreateNestedManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => TagCandidateCreateNestedManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => TagCandidateCreateNestedManyWithoutCandidatesInput, {
    nullable: true,
  })
  tagCandidate?: TagCandidateCreateNestedManyWithoutCandidatesInput;
}

export { CandidateCreateInput as CandidateCreateInput };
