/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsNumber,
  IsOptional,
  IsDate,
  IsString,
  IsInt,
  IsBoolean,
  ValidateNested,
} from "class-validator";
import { Decimal } from "decimal.js";
import { Type } from "class-transformer";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { OrganizationPositionWhereUniqueInput } from "../../organizationPosition/base/OrganizationPositionWhereUniqueInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { CandidateSourceWhereUniqueInput } from "../../candidateSource/base/CandidateSourceWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { EmployeeWhereUniqueInput } from "../../employee/base/EmployeeWhereUniqueInput";
import { ContactWhereUniqueInput } from "../../contact/base/ContactWhereUniqueInput";
import { CandidateDepartmentUpdateManyWithoutCandidatesInput } from "./CandidateDepartmentUpdateManyWithoutCandidatesInput";
import { CandidateDocumentUpdateManyWithoutCandidatesInput } from "./CandidateDocumentUpdateManyWithoutCandidatesInput";
import { CandidateEducationUpdateManyWithoutCandidatesInput } from "./CandidateEducationUpdateManyWithoutCandidatesInput";
import { CandidateEmploymentTypeUpdateManyWithoutCandidatesInput } from "./CandidateEmploymentTypeUpdateManyWithoutCandidatesInput";
import { CandidateExperienceUpdateManyWithoutCandidatesInput } from "./CandidateExperienceUpdateManyWithoutCandidatesInput";
import { CandidateFeedbackUpdateManyWithoutCandidatesInput } from "./CandidateFeedbackUpdateManyWithoutCandidatesInput";
import { CandidateInterviewUpdateManyWithoutCandidatesInput } from "./CandidateInterviewUpdateManyWithoutCandidatesInput";
import { CandidateSkillUpdateManyWithoutCandidatesInput } from "./CandidateSkillUpdateManyWithoutCandidatesInput";
import { TagCandidateUpdateManyWithoutCandidatesInput } from "./TagCandidateUpdateManyWithoutCandidatesInput";

@InputType()
class CandidateUpdateInput {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  rating?: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  valueDate?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  appliedDate?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  hiredDate?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  status?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  rejectDate?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  candidateLevel?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  reWeeklyLimit?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  billRateCurrency?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  billRateValue?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  payPeriod?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  cvUrl?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isArchived?: boolean | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  minimumBillingRate?: number | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organization?: OrganizationWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationPositionWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationPositionWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationPositionWhereUniqueInput, {
    nullable: true,
  })
  organizationPosition?: OrganizationPositionWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => CandidateSourceWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CandidateSourceWhereUniqueInput)
  @IsOptional()
  @Field(() => CandidateSourceWhereUniqueInput, {
    nullable: true,
  })
  candidateSource?: CandidateSourceWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => EmployeeWhereUniqueInput)
  @IsOptional()
  @Field(() => EmployeeWhereUniqueInput, {
    nullable: true,
  })
  employee?: EmployeeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ContactWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ContactWhereUniqueInput)
  @IsOptional()
  @Field(() => ContactWhereUniqueInput, {
    nullable: true,
  })
  contact?: ContactWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => CandidateDepartmentUpdateManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateDepartmentUpdateManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateDepartmentUpdateManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateDepartment?: CandidateDepartmentUpdateManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => CandidateDocumentUpdateManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateDocumentUpdateManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateDocumentUpdateManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateDocument?: CandidateDocumentUpdateManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => CandidateEducationUpdateManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateEducationUpdateManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateEducationUpdateManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateEducation?: CandidateEducationUpdateManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => CandidateEmploymentTypeUpdateManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateEmploymentTypeUpdateManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateEmploymentTypeUpdateManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateEmploymentType?: CandidateEmploymentTypeUpdateManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => CandidateExperienceUpdateManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateExperienceUpdateManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateExperienceUpdateManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateExperience?: CandidateExperienceUpdateManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => CandidateFeedbackUpdateManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateFeedbackUpdateManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateFeedbackUpdateManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateFeedback?: CandidateFeedbackUpdateManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => CandidateInterviewUpdateManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateInterviewUpdateManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateInterviewUpdateManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateInterview?: CandidateInterviewUpdateManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => CandidateSkillUpdateManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => CandidateSkillUpdateManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => CandidateSkillUpdateManyWithoutCandidatesInput, {
    nullable: true,
  })
  candidateSkill?: CandidateSkillUpdateManyWithoutCandidatesInput;

  @ApiProperty({
    required: false,
    type: () => TagCandidateUpdateManyWithoutCandidatesInput,
  })
  @ValidateNested()
  @Type(() => TagCandidateUpdateManyWithoutCandidatesInput)
  @IsOptional()
  @Field(() => TagCandidateUpdateManyWithoutCandidatesInput, {
    nullable: true,
  })
  tagCandidate?: TagCandidateUpdateManyWithoutCandidatesInput;
}

export { CandidateUpdateInput as CandidateUpdateInput };
