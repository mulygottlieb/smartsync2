/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested } from "class-validator";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { DecimalNullableFilter } from "../../util/DecimalNullableFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { BooleanNullableFilter } from "../../util/BooleanNullableFilter";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { OrganizationPositionWhereUniqueInput } from "../../organizationPosition/base/OrganizationPositionWhereUniqueInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { CandidateSourceWhereUniqueInput } from "../../candidateSource/base/CandidateSourceWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { EmployeeWhereUniqueInput } from "../../employee/base/EmployeeWhereUniqueInput";
import { ContactWhereUniqueInput } from "../../contact/base/ContactWhereUniqueInput";
import { CandidateDepartmentListRelationFilter } from "../../candidateDepartment/base/CandidateDepartmentListRelationFilter";
import { CandidateDocumentListRelationFilter } from "../../candidateDocument/base/CandidateDocumentListRelationFilter";
import { CandidateEducationListRelationFilter } from "../../candidateEducation/base/CandidateEducationListRelationFilter";
import { CandidateEmploymentTypeListRelationFilter } from "../../candidateEmploymentType/base/CandidateEmploymentTypeListRelationFilter";
import { CandidateExperienceListRelationFilter } from "../../candidateExperience/base/CandidateExperienceListRelationFilter";
import { CandidateFeedbackListRelationFilter } from "../../candidateFeedback/base/CandidateFeedbackListRelationFilter";
import { CandidateInterviewListRelationFilter } from "../../candidateInterview/base/CandidateInterviewListRelationFilter";
import { CandidateSkillListRelationFilter } from "../../candidateSkill/base/CandidateSkillListRelationFilter";
import { TagCandidateListRelationFilter } from "../../tagCandidate/base/TagCandidateListRelationFilter";

@InputType()
class CandidateWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  createdAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: DecimalNullableFilter,
  })
  @Type(() => DecimalNullableFilter)
  @IsOptional()
  @Field(() => DecimalNullableFilter, {
    nullable: true,
  })
  rating?: DecimalNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  valueDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  appliedDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  hiredDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  status?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  rejectDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  candidateLevel?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  reWeeklyLimit?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  billRateCurrency?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  billRateValue?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  payPeriod?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  cvUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isArchived?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  minimumBillingRate?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organization?: OrganizationWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationPositionWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationPositionWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationPositionWhereUniqueInput, {
    nullable: true,
  })
  organizationPosition?: OrganizationPositionWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => CandidateSourceWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CandidateSourceWhereUniqueInput)
  @IsOptional()
  @Field(() => CandidateSourceWhereUniqueInput, {
    nullable: true,
  })
  candidateSource?: CandidateSourceWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => EmployeeWhereUniqueInput)
  @IsOptional()
  @Field(() => EmployeeWhereUniqueInput, {
    nullable: true,
  })
  employee?: EmployeeWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ContactWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ContactWhereUniqueInput)
  @IsOptional()
  @Field(() => ContactWhereUniqueInput, {
    nullable: true,
  })
  contact?: ContactWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => CandidateDepartmentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CandidateDepartmentListRelationFilter)
  @IsOptional()
  @Field(() => CandidateDepartmentListRelationFilter, {
    nullable: true,
  })
  candidateDepartment?: CandidateDepartmentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => CandidateDocumentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CandidateDocumentListRelationFilter)
  @IsOptional()
  @Field(() => CandidateDocumentListRelationFilter, {
    nullable: true,
  })
  candidateDocument?: CandidateDocumentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => CandidateEducationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CandidateEducationListRelationFilter)
  @IsOptional()
  @Field(() => CandidateEducationListRelationFilter, {
    nullable: true,
  })
  candidateEducation?: CandidateEducationListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => CandidateEmploymentTypeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CandidateEmploymentTypeListRelationFilter)
  @IsOptional()
  @Field(() => CandidateEmploymentTypeListRelationFilter, {
    nullable: true,
  })
  candidateEmploymentType?: CandidateEmploymentTypeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => CandidateExperienceListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CandidateExperienceListRelationFilter)
  @IsOptional()
  @Field(() => CandidateExperienceListRelationFilter, {
    nullable: true,
  })
  candidateExperience?: CandidateExperienceListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => CandidateFeedbackListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CandidateFeedbackListRelationFilter)
  @IsOptional()
  @Field(() => CandidateFeedbackListRelationFilter, {
    nullable: true,
  })
  candidateFeedback?: CandidateFeedbackListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => CandidateInterviewListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CandidateInterviewListRelationFilter)
  @IsOptional()
  @Field(() => CandidateInterviewListRelationFilter, {
    nullable: true,
  })
  candidateInterview?: CandidateInterviewListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => CandidateSkillListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CandidateSkillListRelationFilter)
  @IsOptional()
  @Field(() => CandidateSkillListRelationFilter, {
    nullable: true,
  })
  candidateSkill?: CandidateSkillListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TagCandidateListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TagCandidateListRelationFilter)
  @IsOptional()
  @Field(() => TagCandidateListRelationFilter, {
    nullable: true,
  })
  tagCandidate?: TagCandidateListRelationFilter;
}

export { CandidateWhereInput as CandidateWhereInput };
