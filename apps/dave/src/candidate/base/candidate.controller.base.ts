/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CandidateService } from "../candidate.service";
import { CandidateCreateInput } from "./CandidateCreateInput";
import { CandidateWhereInput } from "./CandidateWhereInput";
import { CandidateWhereUniqueInput } from "./CandidateWhereUniqueInput";
import { CandidateFindManyArgs } from "./CandidateFindManyArgs";
import { CandidateUpdateInput } from "./CandidateUpdateInput";
import { Candidate } from "./Candidate";
import { CandidateDepartmentFindManyArgs } from "../../candidateDepartment/base/CandidateDepartmentFindManyArgs";
import { CandidateDepartment } from "../../candidateDepartment/base/CandidateDepartment";
import { CandidateDepartmentWhereUniqueInput } from "../../candidateDepartment/base/CandidateDepartmentWhereUniqueInput";
import { CandidateDocumentFindManyArgs } from "../../candidateDocument/base/CandidateDocumentFindManyArgs";
import { CandidateDocument } from "../../candidateDocument/base/CandidateDocument";
import { CandidateDocumentWhereUniqueInput } from "../../candidateDocument/base/CandidateDocumentWhereUniqueInput";
import { CandidateEducationFindManyArgs } from "../../candidateEducation/base/CandidateEducationFindManyArgs";
import { CandidateEducation } from "../../candidateEducation/base/CandidateEducation";
import { CandidateEducationWhereUniqueInput } from "../../candidateEducation/base/CandidateEducationWhereUniqueInput";
import { CandidateEmploymentTypeFindManyArgs } from "../../candidateEmploymentType/base/CandidateEmploymentTypeFindManyArgs";
import { CandidateEmploymentType } from "../../candidateEmploymentType/base/CandidateEmploymentType";
import { CandidateEmploymentTypeWhereUniqueInput } from "../../candidateEmploymentType/base/CandidateEmploymentTypeWhereUniqueInput";
import { CandidateExperienceFindManyArgs } from "../../candidateExperience/base/CandidateExperienceFindManyArgs";
import { CandidateExperience } from "../../candidateExperience/base/CandidateExperience";
import { CandidateExperienceWhereUniqueInput } from "../../candidateExperience/base/CandidateExperienceWhereUniqueInput";
import { CandidateFeedbackFindManyArgs } from "../../candidateFeedback/base/CandidateFeedbackFindManyArgs";
import { CandidateFeedback } from "../../candidateFeedback/base/CandidateFeedback";
import { CandidateFeedbackWhereUniqueInput } from "../../candidateFeedback/base/CandidateFeedbackWhereUniqueInput";
import { CandidateInterviewFindManyArgs } from "../../candidateInterview/base/CandidateInterviewFindManyArgs";
import { CandidateInterview } from "../../candidateInterview/base/CandidateInterview";
import { CandidateInterviewWhereUniqueInput } from "../../candidateInterview/base/CandidateInterviewWhereUniqueInput";
import { CandidateSkillFindManyArgs } from "../../candidateSkill/base/CandidateSkillFindManyArgs";
import { CandidateSkill } from "../../candidateSkill/base/CandidateSkill";
import { CandidateSkillWhereUniqueInput } from "../../candidateSkill/base/CandidateSkillWhereUniqueInput";
import { TagCandidateFindManyArgs } from "../../tagCandidate/base/TagCandidateFindManyArgs";
import { TagCandidate } from "../../tagCandidate/base/TagCandidate";
import { TagCandidateWhereUniqueInput } from "../../tagCandidate/base/TagCandidateWhereUniqueInput";

export class CandidateControllerBase {
  constructor(protected readonly service: CandidateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Candidate })
  async create(@common.Body() data: CandidateCreateInput): Promise<Candidate> {
    return await this.service.create({
      data: {
        ...data,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        organizationPosition: data.organizationPosition
          ? {
              connect: data.organizationPosition,
            }
          : undefined,

        user: {
          connect: data.user,
        },

        candidateSource: data.candidateSource
          ? {
              connect: data.candidateSource,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        employee: data.employee
          ? {
              connect: data.employee,
            }
          : undefined,

        contact: data.contact
          ? {
              connect: data.contact,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        rating: true,
        valueDate: true,
        appliedDate: true,
        hiredDate: true,
        status: true,
        rejectDate: true,
        candidateLevel: true,
        reWeeklyLimit: true,
        billRateCurrency: true,
        billRateValue: true,
        payPeriod: true,
        cvUrl: true,
        isArchived: true,
        minimumBillingRate: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationPosition: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        candidateSource: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Candidate] })
  @ApiNestedQuery(CandidateFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Candidate[]> {
    const args = plainToClass(CandidateFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        rating: true,
        valueDate: true,
        appliedDate: true,
        hiredDate: true,
        status: true,
        rejectDate: true,
        candidateLevel: true,
        reWeeklyLimit: true,
        billRateCurrency: true,
        billRateValue: true,
        payPeriod: true,
        cvUrl: true,
        isArchived: true,
        minimumBillingRate: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationPosition: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        candidateSource: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Candidate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: CandidateWhereUniqueInput
  ): Promise<Candidate | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        rating: true,
        valueDate: true,
        appliedDate: true,
        hiredDate: true,
        status: true,
        rejectDate: true,
        candidateLevel: true,
        reWeeklyLimit: true,
        billRateCurrency: true,
        billRateValue: true,
        payPeriod: true,
        cvUrl: true,
        isArchived: true,
        minimumBillingRate: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationPosition: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        candidateSource: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Candidate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() data: CandidateUpdateInput
  ): Promise<Candidate | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          organizationPosition: data.organizationPosition
            ? {
                connect: data.organizationPosition,
              }
            : undefined,

          user: {
            connect: data.user,
          },

          candidateSource: data.candidateSource
            ? {
                connect: data.candidateSource,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          employee: data.employee
            ? {
                connect: data.employee,
              }
            : undefined,

          contact: data.contact
            ? {
                connect: data.contact,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          rating: true,
          valueDate: true,
          appliedDate: true,
          hiredDate: true,
          status: true,
          rejectDate: true,
          candidateLevel: true,
          reWeeklyLimit: true,
          billRateCurrency: true,
          billRateValue: true,
          payPeriod: true,
          cvUrl: true,
          isArchived: true,
          minimumBillingRate: true,

          organization: {
            select: {
              id: true,
            },
          },

          organizationPosition: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          candidateSource: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          contact: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Candidate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: CandidateWhereUniqueInput
  ): Promise<Candidate | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          rating: true,
          valueDate: true,
          appliedDate: true,
          hiredDate: true,
          status: true,
          rejectDate: true,
          candidateLevel: true,
          reWeeklyLimit: true,
          billRateCurrency: true,
          billRateValue: true,
          payPeriod: true,
          cvUrl: true,
          isArchived: true,
          minimumBillingRate: true,

          organization: {
            select: {
              id: true,
            },
          },

          organizationPosition: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          candidateSource: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          contact: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/candidateDepartment")
  @ApiNestedQuery(CandidateDepartmentFindManyArgs)
  async findManyCandidateDepartment(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput
  ): Promise<CandidateDepartment[]> {
    const query = plainToClass(CandidateDepartmentFindManyArgs, request.query);
    const results = await this.service.findCandidateDepartment(params.id, {
      ...query,
      select: {
        organizationDepartment: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateDepartment")
  async connectCandidateDepartment(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateDepartment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateDepartment")
  async updateCandidateDepartment(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateDepartment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateDepartment")
  async disconnectCandidateDepartment(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateDepartment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateDocument")
  @ApiNestedQuery(CandidateDocumentFindManyArgs)
  async findManyCandidateDocument(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput
  ): Promise<CandidateDocument[]> {
    const query = plainToClass(CandidateDocumentFindManyArgs, request.query);
    const results = await this.service.findCandidateDocument(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        documentUrl: true,

        candidate: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateDocument")
  async connectCandidateDocument(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateDocument: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateDocument")
  async updateCandidateDocument(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateDocument: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateDocument")
  async disconnectCandidateDocument(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateDocument: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateEducation")
  @ApiNestedQuery(CandidateEducationFindManyArgs)
  async findManyCandidateEducation(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput
  ): Promise<CandidateEducation[]> {
    const query = plainToClass(CandidateEducationFindManyArgs, request.query);
    const results = await this.service.findCandidateEducation(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        schoolName: true,
        degree: true,
        field: true,
        completionDate: true,
        notes: true,

        tenant: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateEducation")
  async connectCandidateEducation(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateEducationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateEducation: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateEducation")
  async updateCandidateEducation(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateEducationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateEducation: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateEducation")
  async disconnectCandidateEducation(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateEducationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateEducation: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateEmploymentType")
  @ApiNestedQuery(CandidateEmploymentTypeFindManyArgs)
  async findManyCandidateEmploymentType(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput
  ): Promise<CandidateEmploymentType[]> {
    const query = plainToClass(
      CandidateEmploymentTypeFindManyArgs,
      request.query
    );
    const results = await this.service.findCandidateEmploymentType(params.id, {
      ...query,
      select: {
        candidate: {
          select: {
            id: true,
          },
        },

        organizationEmploymentType: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateEmploymentType")
  async connectCandidateEmploymentType(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateEmploymentTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateEmploymentType: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateEmploymentType")
  async updateCandidateEmploymentType(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateEmploymentTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateEmploymentType: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateEmploymentType")
  async disconnectCandidateEmploymentType(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateEmploymentTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateEmploymentType: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateExperience")
  @ApiNestedQuery(CandidateExperienceFindManyArgs)
  async findManyCandidateExperience(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput
  ): Promise<CandidateExperience[]> {
    const query = plainToClass(CandidateExperienceFindManyArgs, request.query);
    const results = await this.service.findCandidateExperience(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        occupation: true,
        duration: true,
        description: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateExperience")
  async connectCandidateExperience(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateExperience: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateExperience")
  async updateCandidateExperience(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateExperience: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateExperience")
  async disconnectCandidateExperience(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateExperience: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateFeedback")
  @ApiNestedQuery(CandidateFeedbackFindManyArgs)
  async findManyCandidateFeedback(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput
  ): Promise<CandidateFeedback[]> {
    const query = plainToClass(CandidateFeedbackFindManyArgs, request.query);
    const results = await this.service.findCandidateFeedback(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        rating: true,
        status: true,

        candidateInterview: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        candidateInterviewer: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateFeedback")
  async connectCandidateFeedback(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateFeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateFeedback: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateFeedback")
  async updateCandidateFeedback(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateFeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateFeedback: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateFeedback")
  async disconnectCandidateFeedback(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateFeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateFeedback: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateInterview")
  @ApiNestedQuery(CandidateInterviewFindManyArgs)
  async findManyCandidateInterview(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput
  ): Promise<CandidateInterview[]> {
    const query = plainToClass(CandidateInterviewFindManyArgs, request.query);
    const results = await this.service.findCandidateInterview(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        startTime: true,
        endTime: true,
        location: true,
        note: true,
        isArchived: true,
        rating: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateInterview")
  async connectCandidateInterview(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateInterviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateInterview: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateInterview")
  async updateCandidateInterview(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateInterviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateInterview: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateInterview")
  async disconnectCandidateInterview(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateInterviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateInterview: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateSkill")
  @ApiNestedQuery(CandidateSkillFindManyArgs)
  async findManyCandidateSkill(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput
  ): Promise<CandidateSkill[]> {
    const query = plainToClass(CandidateSkillFindManyArgs, request.query);
    const results = await this.service.findCandidateSkill(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        candidate: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateSkill")
  async connectCandidateSkill(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateSkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateSkill: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateSkill")
  async updateCandidateSkill(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateSkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateSkill: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateSkill")
  async disconnectCandidateSkill(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: CandidateSkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateSkill: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagCandidate")
  @ApiNestedQuery(TagCandidateFindManyArgs)
  async findManyTagCandidate(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput
  ): Promise<TagCandidate[]> {
    const query = plainToClass(TagCandidateFindManyArgs, request.query);
    const results = await this.service.findTagCandidate(params.id, {
      ...query,
      select: {
        candidate: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagCandidate")
  async connectTagCandidate(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: TagCandidateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagCandidate: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagCandidate")
  async updateTagCandidate(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: TagCandidateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagCandidate: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagCandidate")
  async disconnectTagCandidate(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: TagCandidateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagCandidate: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
