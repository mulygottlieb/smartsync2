/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCandidateArgs } from "./CreateCandidateArgs";
import { UpdateCandidateArgs } from "./UpdateCandidateArgs";
import { DeleteCandidateArgs } from "./DeleteCandidateArgs";
import { CandidateCountArgs } from "./CandidateCountArgs";
import { CandidateFindManyArgs } from "./CandidateFindManyArgs";
import { CandidateFindUniqueArgs } from "./CandidateFindUniqueArgs";
import { Candidate } from "./Candidate";
import { CandidateDepartmentFindManyArgs } from "../../candidateDepartment/base/CandidateDepartmentFindManyArgs";
import { CandidateDepartment } from "../../candidateDepartment/base/CandidateDepartment";
import { CandidateDocumentFindManyArgs } from "../../candidateDocument/base/CandidateDocumentFindManyArgs";
import { CandidateDocument } from "../../candidateDocument/base/CandidateDocument";
import { CandidateEducationFindManyArgs } from "../../candidateEducation/base/CandidateEducationFindManyArgs";
import { CandidateEducation } from "../../candidateEducation/base/CandidateEducation";
import { CandidateEmploymentTypeFindManyArgs } from "../../candidateEmploymentType/base/CandidateEmploymentTypeFindManyArgs";
import { CandidateEmploymentType } from "../../candidateEmploymentType/base/CandidateEmploymentType";
import { CandidateExperienceFindManyArgs } from "../../candidateExperience/base/CandidateExperienceFindManyArgs";
import { CandidateExperience } from "../../candidateExperience/base/CandidateExperience";
import { CandidateFeedbackFindManyArgs } from "../../candidateFeedback/base/CandidateFeedbackFindManyArgs";
import { CandidateFeedback } from "../../candidateFeedback/base/CandidateFeedback";
import { CandidateInterviewFindManyArgs } from "../../candidateInterview/base/CandidateInterviewFindManyArgs";
import { CandidateInterview } from "../../candidateInterview/base/CandidateInterview";
import { CandidateSkillFindManyArgs } from "../../candidateSkill/base/CandidateSkillFindManyArgs";
import { CandidateSkill } from "../../candidateSkill/base/CandidateSkill";
import { TagCandidateFindManyArgs } from "../../tagCandidate/base/TagCandidateFindManyArgs";
import { TagCandidate } from "../../tagCandidate/base/TagCandidate";
import { Organization } from "../../organization/base/Organization";
import { OrganizationPosition } from "../../organizationPosition/base/OrganizationPosition";
import { User } from "../../user/base/User";
import { CandidateSource } from "../../candidateSource/base/CandidateSource";
import { Tenant } from "../../tenant/base/Tenant";
import { Employee } from "../../employee/base/Employee";
import { Contact } from "../../contact/base/Contact";
import { CandidateService } from "../candidate.service";
@graphql.Resolver(() => Candidate)
export class CandidateResolverBase {
  constructor(protected readonly service: CandidateService) {}

  async _candidatesMeta(
    @graphql.Args() args: CandidateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Candidate])
  async candidates(
    @graphql.Args() args: CandidateFindManyArgs
  ): Promise<Candidate[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Candidate, { nullable: true })
  async candidate(
    @graphql.Args() args: CandidateFindUniqueArgs
  ): Promise<Candidate | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Candidate)
  async createCandidate(
    @graphql.Args() args: CreateCandidateArgs
  ): Promise<Candidate> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        organizationPosition: args.data.organizationPosition
          ? {
              connect: args.data.organizationPosition,
            }
          : undefined,

        user: {
          connect: args.data.user,
        },

        candidateSource: args.data.candidateSource
          ? {
              connect: args.data.candidateSource,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,

        contact: args.data.contact
          ? {
              connect: args.data.contact,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Candidate)
  async updateCandidate(
    @graphql.Args() args: UpdateCandidateArgs
  ): Promise<Candidate | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          organizationPosition: args.data.organizationPosition
            ? {
                connect: args.data.organizationPosition,
              }
            : undefined,

          user: {
            connect: args.data.user,
          },

          candidateSource: args.data.candidateSource
            ? {
                connect: args.data.candidateSource,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,

          contact: args.data.contact
            ? {
                connect: args.data.contact,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Candidate)
  async deleteCandidate(
    @graphql.Args() args: DeleteCandidateArgs
  ): Promise<Candidate | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CandidateDepartment], {
    name: "candidateDepartment",
  })
  async resolveFieldCandidateDepartment(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: CandidateDepartmentFindManyArgs
  ): Promise<CandidateDepartment[]> {
    const results = await this.service.findCandidateDepartment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateDocument], {
    name: "candidateDocument",
  })
  async resolveFieldCandidateDocument(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: CandidateDocumentFindManyArgs
  ): Promise<CandidateDocument[]> {
    const results = await this.service.findCandidateDocument(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateEducation], {
    name: "candidateEducation",
  })
  async resolveFieldCandidateEducation(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: CandidateEducationFindManyArgs
  ): Promise<CandidateEducation[]> {
    const results = await this.service.findCandidateEducation(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateEmploymentType], {
    name: "candidateEmploymentType",
  })
  async resolveFieldCandidateEmploymentType(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: CandidateEmploymentTypeFindManyArgs
  ): Promise<CandidateEmploymentType[]> {
    const results = await this.service.findCandidateEmploymentType(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateExperience], {
    name: "candidateExperience",
  })
  async resolveFieldCandidateExperience(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: CandidateExperienceFindManyArgs
  ): Promise<CandidateExperience[]> {
    const results = await this.service.findCandidateExperience(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateFeedback], {
    name: "candidateFeedback",
  })
  async resolveFieldCandidateFeedback(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: CandidateFeedbackFindManyArgs
  ): Promise<CandidateFeedback[]> {
    const results = await this.service.findCandidateFeedback(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateInterview], {
    name: "candidateInterview",
  })
  async resolveFieldCandidateInterview(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: CandidateInterviewFindManyArgs
  ): Promise<CandidateInterview[]> {
    const results = await this.service.findCandidateInterview(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateSkill], { name: "candidateSkill" })
  async resolveFieldCandidateSkill(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: CandidateSkillFindManyArgs
  ): Promise<CandidateSkill[]> {
    const results = await this.service.findCandidateSkill(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagCandidate], { name: "tagCandidate" })
  async resolveFieldTagCandidate(
    @graphql.Parent() parent: Candidate,
    @graphql.Args() args: TagCandidateFindManyArgs
  ): Promise<TagCandidate[]> {
    const results = await this.service.findTagCandidate(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: Candidate
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationPosition, {
    nullable: true,
    name: "organizationPosition",
  })
  async resolveFieldOrganizationPosition(
    @graphql.Parent() parent: Candidate
  ): Promise<OrganizationPosition | null> {
    const result = await this.service.getOrganizationPosition(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: Candidate
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => CandidateSource, {
    nullable: true,
    name: "candidateSource",
  })
  async resolveFieldCandidateSource(
    @graphql.Parent() parent: Candidate
  ): Promise<CandidateSource | null> {
    const result = await this.service.getCandidateSource(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: Candidate
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: Candidate
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Contact, {
    nullable: true,
    name: "contact",
  })
  async resolveFieldContact(
    @graphql.Parent() parent: Candidate
  ): Promise<Contact | null> {
    const result = await this.service.getContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
