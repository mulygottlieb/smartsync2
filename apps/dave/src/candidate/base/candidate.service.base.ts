/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Candidate,
  CandidateDepartment,
  CandidateDocument,
  CandidateEducation,
  CandidateEmploymentType,
  CandidateExperience,
  CandidateFeedback,
  CandidateInterview,
  CandidateSkill,
  TagCandidate,
  Organization,
  OrganizationPosition,
  User,
  CandidateSource,
  Tenant,
  Employee,
  Contact,
} from "@prisma/client";

export class CandidateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.CandidateCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateCountArgs>
  ): Promise<number> {
    return this.prisma.candidate.count(args);
  }

  async findMany<T extends Prisma.CandidateFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateFindManyArgs>
  ): Promise<Candidate[]> {
    return this.prisma.candidate.findMany(args);
  }
  async findOne<T extends Prisma.CandidateFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateFindUniqueArgs>
  ): Promise<Candidate | null> {
    return this.prisma.candidate.findUnique(args);
  }
  async create<T extends Prisma.CandidateCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateCreateArgs>
  ): Promise<Candidate> {
    return this.prisma.candidate.create<T>(args);
  }
  async update<T extends Prisma.CandidateUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateUpdateArgs>
  ): Promise<Candidate> {
    return this.prisma.candidate.update<T>(args);
  }
  async delete<T extends Prisma.CandidateDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateDeleteArgs>
  ): Promise<Candidate> {
    return this.prisma.candidate.delete(args);
  }

  async findCandidateDepartment(
    parentId: string,
    args: Prisma.CandidateDepartmentFindManyArgs
  ): Promise<CandidateDepartment[]> {
    return this.prisma.candidate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateDepartment(args);
  }

  async findCandidateDocument(
    parentId: string,
    args: Prisma.CandidateDocumentFindManyArgs
  ): Promise<CandidateDocument[]> {
    return this.prisma.candidate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateDocument(args);
  }

  async findCandidateEducation(
    parentId: string,
    args: Prisma.CandidateEducationFindManyArgs
  ): Promise<CandidateEducation[]> {
    return this.prisma.candidate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateEducation(args);
  }

  async findCandidateEmploymentType(
    parentId: string,
    args: Prisma.CandidateEmploymentTypeFindManyArgs
  ): Promise<CandidateEmploymentType[]> {
    return this.prisma.candidate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateEmploymentType(args);
  }

  async findCandidateExperience(
    parentId: string,
    args: Prisma.CandidateExperienceFindManyArgs
  ): Promise<CandidateExperience[]> {
    return this.prisma.candidate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateExperience(args);
  }

  async findCandidateFeedback(
    parentId: string,
    args: Prisma.CandidateFeedbackFindManyArgs
  ): Promise<CandidateFeedback[]> {
    return this.prisma.candidate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateFeedback(args);
  }

  async findCandidateInterview(
    parentId: string,
    args: Prisma.CandidateInterviewFindManyArgs
  ): Promise<CandidateInterview[]> {
    return this.prisma.candidate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateInterview(args);
  }

  async findCandidateSkill(
    parentId: string,
    args: Prisma.CandidateSkillFindManyArgs
  ): Promise<CandidateSkill[]> {
    return this.prisma.candidate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateSkill(args);
  }

  async findTagCandidate(
    parentId: string,
    args: Prisma.TagCandidateFindManyArgs
  ): Promise<TagCandidate[]> {
    return this.prisma.candidate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagCandidate(args);
  }

  async getOrganization(parentId: string): Promise<Organization | null> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .organization();
  }

  async getOrganizationPosition(
    parentId: string
  ): Promise<OrganizationPosition | null> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .organizationPosition();
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getCandidateSource(parentId: string): Promise<CandidateSource | null> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .candidateSource();
  }

  async getTenant(parentId: string): Promise<Tenant | null> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }

  async getEmployee(parentId: string): Promise<Employee | null> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }

  async getContact(parentId: string): Promise<Contact | null> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .contact();
  }
}
