/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCandidateDocumentArgs } from "./CreateCandidateDocumentArgs";
import { UpdateCandidateDocumentArgs } from "./UpdateCandidateDocumentArgs";
import { DeleteCandidateDocumentArgs } from "./DeleteCandidateDocumentArgs";
import { CandidateDocumentCountArgs } from "./CandidateDocumentCountArgs";
import { CandidateDocumentFindManyArgs } from "./CandidateDocumentFindManyArgs";
import { CandidateDocumentFindUniqueArgs } from "./CandidateDocumentFindUniqueArgs";
import { CandidateDocument } from "./CandidateDocument";
import { Candidate } from "../../candidate/base/Candidate";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { CandidateDocumentService } from "../candidateDocument.service";
@graphql.Resolver(() => CandidateDocument)
export class CandidateDocumentResolverBase {
  constructor(protected readonly service: CandidateDocumentService) {}

  async _candidateDocumentsMeta(
    @graphql.Args() args: CandidateDocumentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CandidateDocument])
  async candidateDocuments(
    @graphql.Args() args: CandidateDocumentFindManyArgs
  ): Promise<CandidateDocument[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => CandidateDocument, { nullable: true })
  async candidateDocument(
    @graphql.Args() args: CandidateDocumentFindUniqueArgs
  ): Promise<CandidateDocument | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CandidateDocument)
  async createCandidateDocument(
    @graphql.Args() args: CreateCandidateDocumentArgs
  ): Promise<CandidateDocument> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        candidate: args.data.candidate
          ? {
              connect: args.data.candidate,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CandidateDocument)
  async updateCandidateDocument(
    @graphql.Args() args: UpdateCandidateDocumentArgs
  ): Promise<CandidateDocument | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          candidate: args.data.candidate
            ? {
                connect: args.data.candidate,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CandidateDocument)
  async deleteCandidateDocument(
    @graphql.Args() args: DeleteCandidateDocumentArgs
  ): Promise<CandidateDocument | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Candidate, {
    nullable: true,
    name: "candidate",
  })
  async resolveFieldCandidate(
    @graphql.Parent() parent: CandidateDocument
  ): Promise<Candidate | null> {
    const result = await this.service.getCandidate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: CandidateDocument
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: CandidateDocument
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
