/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCandidateEducationArgs } from "./CreateCandidateEducationArgs";
import { UpdateCandidateEducationArgs } from "./UpdateCandidateEducationArgs";
import { DeleteCandidateEducationArgs } from "./DeleteCandidateEducationArgs";
import { CandidateEducationCountArgs } from "./CandidateEducationCountArgs";
import { CandidateEducationFindManyArgs } from "./CandidateEducationFindManyArgs";
import { CandidateEducationFindUniqueArgs } from "./CandidateEducationFindUniqueArgs";
import { CandidateEducation } from "./CandidateEducation";
import { Tenant } from "../../tenant/base/Tenant";
import { Candidate } from "../../candidate/base/Candidate";
import { Organization } from "../../organization/base/Organization";
import { CandidateEducationService } from "../candidateEducation.service";
@graphql.Resolver(() => CandidateEducation)
export class CandidateEducationResolverBase {
  constructor(protected readonly service: CandidateEducationService) {}

  async _candidateEducationsMeta(
    @graphql.Args() args: CandidateEducationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CandidateEducation])
  async candidateEducations(
    @graphql.Args() args: CandidateEducationFindManyArgs
  ): Promise<CandidateEducation[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => CandidateEducation, { nullable: true })
  async candidateEducation(
    @graphql.Args() args: CandidateEducationFindUniqueArgs
  ): Promise<CandidateEducation | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CandidateEducation)
  async createCandidateEducation(
    @graphql.Args() args: CreateCandidateEducationArgs
  ): Promise<CandidateEducation> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        candidate: args.data.candidate
          ? {
              connect: args.data.candidate,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CandidateEducation)
  async updateCandidateEducation(
    @graphql.Args() args: UpdateCandidateEducationArgs
  ): Promise<CandidateEducation | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          candidate: args.data.candidate
            ? {
                connect: args.data.candidate,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CandidateEducation)
  async deleteCandidateEducation(
    @graphql.Args() args: DeleteCandidateEducationArgs
  ): Promise<CandidateEducation | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: CandidateEducation
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Candidate, {
    nullable: true,
    name: "candidate",
  })
  async resolveFieldCandidate(
    @graphql.Parent() parent: CandidateEducation
  ): Promise<Candidate | null> {
    const result = await this.service.getCandidate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: CandidateEducation
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
