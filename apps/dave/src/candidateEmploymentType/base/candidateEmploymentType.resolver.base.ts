/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCandidateEmploymentTypeArgs } from "./CreateCandidateEmploymentTypeArgs";
import { UpdateCandidateEmploymentTypeArgs } from "./UpdateCandidateEmploymentTypeArgs";
import { DeleteCandidateEmploymentTypeArgs } from "./DeleteCandidateEmploymentTypeArgs";
import { CandidateEmploymentTypeCountArgs } from "./CandidateEmploymentTypeCountArgs";
import { CandidateEmploymentTypeFindManyArgs } from "./CandidateEmploymentTypeFindManyArgs";
import { CandidateEmploymentTypeFindUniqueArgs } from "./CandidateEmploymentTypeFindUniqueArgs";
import { CandidateEmploymentType } from "./CandidateEmploymentType";
import { Candidate } from "../../candidate/base/Candidate";
import { OrganizationEmploymentType } from "../../organizationEmploymentType/base/OrganizationEmploymentType";
import { CandidateEmploymentTypeService } from "../candidateEmploymentType.service";
@graphql.Resolver(() => CandidateEmploymentType)
export class CandidateEmploymentTypeResolverBase {
  constructor(protected readonly service: CandidateEmploymentTypeService) {}

  async _candidateEmploymentTypesMeta(
    @graphql.Args() args: CandidateEmploymentTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CandidateEmploymentType])
  async candidateEmploymentTypes(
    @graphql.Args() args: CandidateEmploymentTypeFindManyArgs
  ): Promise<CandidateEmploymentType[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => CandidateEmploymentType, { nullable: true })
  async candidateEmploymentType(
    @graphql.Args() args: CandidateEmploymentTypeFindUniqueArgs
  ): Promise<CandidateEmploymentType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CandidateEmploymentType)
  async createCandidateEmploymentType(
    @graphql.Args() args: CreateCandidateEmploymentTypeArgs
  ): Promise<CandidateEmploymentType> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        candidate: {
          connect: args.data.candidate,
        },

        organizationEmploymentType: {
          connect: args.data.organizationEmploymentType,
        },
      },
    });
  }

  @graphql.Mutation(() => CandidateEmploymentType)
  async updateCandidateEmploymentType(
    @graphql.Args() args: UpdateCandidateEmploymentTypeArgs
  ): Promise<CandidateEmploymentType | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          candidate: {
            connect: args.data.candidate,
          },

          organizationEmploymentType: {
            connect: args.data.organizationEmploymentType,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CandidateEmploymentType)
  async deleteCandidateEmploymentType(
    @graphql.Args() args: DeleteCandidateEmploymentTypeArgs
  ): Promise<CandidateEmploymentType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Candidate, {
    nullable: true,
    name: "candidate",
  })
  async resolveFieldCandidate(
    @graphql.Parent() parent: CandidateEmploymentType
  ): Promise<Candidate | null> {
    const result = await this.service.getCandidate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationEmploymentType, {
    nullable: true,
    name: "organizationEmploymentType",
  })
  async resolveFieldOrganizationEmploymentType(
    @graphql.Parent() parent: CandidateEmploymentType
  ): Promise<OrganizationEmploymentType | null> {
    const result = await this.service.getOrganizationEmploymentType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
