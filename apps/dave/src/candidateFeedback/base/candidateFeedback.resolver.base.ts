/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCandidateFeedbackArgs } from "./CreateCandidateFeedbackArgs";
import { UpdateCandidateFeedbackArgs } from "./UpdateCandidateFeedbackArgs";
import { DeleteCandidateFeedbackArgs } from "./DeleteCandidateFeedbackArgs";
import { CandidateFeedbackCountArgs } from "./CandidateFeedbackCountArgs";
import { CandidateFeedbackFindManyArgs } from "./CandidateFeedbackFindManyArgs";
import { CandidateFeedbackFindUniqueArgs } from "./CandidateFeedbackFindUniqueArgs";
import { CandidateFeedback } from "./CandidateFeedback";
import { CandidateCriterionRatingFindManyArgs } from "../../candidateCriterionRating/base/CandidateCriterionRatingFindManyArgs";
import { CandidateCriterionRating } from "../../candidateCriterionRating/base/CandidateCriterionRating";
import { CandidateInterview } from "../../candidateInterview/base/CandidateInterview";
import { Organization } from "../../organization/base/Organization";
import { CandidateInterviewer } from "../../candidateInterviewer/base/CandidateInterviewer";
import { Tenant } from "../../tenant/base/Tenant";
import { Candidate } from "../../candidate/base/Candidate";
import { CandidateFeedbackService } from "../candidateFeedback.service";
@graphql.Resolver(() => CandidateFeedback)
export class CandidateFeedbackResolverBase {
  constructor(protected readonly service: CandidateFeedbackService) {}

  async _candidateFeedbacksMeta(
    @graphql.Args() args: CandidateFeedbackCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CandidateFeedback])
  async candidateFeedbacks(
    @graphql.Args() args: CandidateFeedbackFindManyArgs
  ): Promise<CandidateFeedback[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => CandidateFeedback, { nullable: true })
  async candidateFeedback(
    @graphql.Args() args: CandidateFeedbackFindUniqueArgs
  ): Promise<CandidateFeedback | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CandidateFeedback)
  async createCandidateFeedback(
    @graphql.Args() args: CreateCandidateFeedbackArgs
  ): Promise<CandidateFeedback> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        candidateInterview: args.data.candidateInterview
          ? {
              connect: args.data.candidateInterview,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        candidateInterviewer: args.data.candidateInterviewer
          ? {
              connect: args.data.candidateInterviewer,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        candidate: args.data.candidate
          ? {
              connect: args.data.candidate,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CandidateFeedback)
  async updateCandidateFeedback(
    @graphql.Args() args: UpdateCandidateFeedbackArgs
  ): Promise<CandidateFeedback | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          candidateInterview: args.data.candidateInterview
            ? {
                connect: args.data.candidateInterview,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          candidateInterviewer: args.data.candidateInterviewer
            ? {
                connect: args.data.candidateInterviewer,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          candidate: args.data.candidate
            ? {
                connect: args.data.candidate,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CandidateFeedback)
  async deleteCandidateFeedback(
    @graphql.Args() args: DeleteCandidateFeedbackArgs
  ): Promise<CandidateFeedback | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CandidateCriterionRating], {
    name: "candidateCriterionRating",
  })
  async resolveFieldCandidateCriterionRating(
    @graphql.Parent() parent: CandidateFeedback,
    @graphql.Args() args: CandidateCriterionRatingFindManyArgs
  ): Promise<CandidateCriterionRating[]> {
    const results = await this.service.findCandidateCriterionRating(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => CandidateInterview, {
    nullable: true,
    name: "candidateInterview",
  })
  async resolveFieldCandidateInterview(
    @graphql.Parent() parent: CandidateFeedback
  ): Promise<CandidateInterview | null> {
    const result = await this.service.getCandidateInterview(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: CandidateFeedback
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => CandidateInterviewer, {
    nullable: true,
    name: "candidateInterviewer",
  })
  async resolveFieldCandidateInterviewer(
    @graphql.Parent() parent: CandidateFeedback
  ): Promise<CandidateInterviewer | null> {
    const result = await this.service.getCandidateInterviewer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: CandidateFeedback
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Candidate, {
    nullable: true,
    name: "candidate",
  })
  async resolveFieldCandidate(
    @graphql.Parent() parent: CandidateFeedback
  ): Promise<Candidate | null> {
    const result = await this.service.getCandidate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
