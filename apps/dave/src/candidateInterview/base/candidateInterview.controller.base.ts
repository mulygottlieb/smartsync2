/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CandidateInterviewService } from "../candidateInterview.service";
import { CandidateInterviewCreateInput } from "./CandidateInterviewCreateInput";
import { CandidateInterviewWhereInput } from "./CandidateInterviewWhereInput";
import { CandidateInterviewWhereUniqueInput } from "./CandidateInterviewWhereUniqueInput";
import { CandidateInterviewFindManyArgs } from "./CandidateInterviewFindManyArgs";
import { CandidateInterviewUpdateInput } from "./CandidateInterviewUpdateInput";
import { CandidateInterview } from "./CandidateInterview";
import { CandidateFeedbackFindManyArgs } from "../../candidateFeedback/base/CandidateFeedbackFindManyArgs";
import { CandidateFeedback } from "../../candidateFeedback/base/CandidateFeedback";
import { CandidateFeedbackWhereUniqueInput } from "../../candidateFeedback/base/CandidateFeedbackWhereUniqueInput";
import { CandidateInterviewerFindManyArgs } from "../../candidateInterviewer/base/CandidateInterviewerFindManyArgs";
import { CandidateInterviewer } from "../../candidateInterviewer/base/CandidateInterviewer";
import { CandidateInterviewerWhereUniqueInput } from "../../candidateInterviewer/base/CandidateInterviewerWhereUniqueInput";
import { CandidatePersonalQualityFindManyArgs } from "../../candidatePersonalQuality/base/CandidatePersonalQualityFindManyArgs";
import { CandidatePersonalQuality } from "../../candidatePersonalQuality/base/CandidatePersonalQuality";
import { CandidatePersonalQualityWhereUniqueInput } from "../../candidatePersonalQuality/base/CandidatePersonalQualityWhereUniqueInput";
import { CandidateTechnologyFindManyArgs } from "../../candidateTechnology/base/CandidateTechnologyFindManyArgs";
import { CandidateTechnology } from "../../candidateTechnology/base/CandidateTechnology";
import { CandidateTechnologyWhereUniqueInput } from "../../candidateTechnology/base/CandidateTechnologyWhereUniqueInput";

export class CandidateInterviewControllerBase {
  constructor(protected readonly service: CandidateInterviewService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CandidateInterview })
  async create(
    @common.Body() data: CandidateInterviewCreateInput
  ): Promise<CandidateInterview> {
    return await this.service.create({
      data: {
        ...data,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        candidate: data.candidate
          ? {
              connect: data.candidate,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        startTime: true,
        endTime: true,
        location: true,
        note: true,
        isArchived: true,
        rating: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CandidateInterview] })
  @ApiNestedQuery(CandidateInterviewFindManyArgs)
  async findMany(
    @common.Req() request: Request
  ): Promise<CandidateInterview[]> {
    const args = plainToClass(CandidateInterviewFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        startTime: true,
        endTime: true,
        location: true,
        note: true,
        isArchived: true,
        rating: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CandidateInterview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: CandidateInterviewWhereUniqueInput
  ): Promise<CandidateInterview | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        startTime: true,
        endTime: true,
        location: true,
        note: true,
        isArchived: true,
        rating: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CandidateInterview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: CandidateInterviewWhereUniqueInput,
    @common.Body() data: CandidateInterviewUpdateInput
  ): Promise<CandidateInterview | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          candidate: data.candidate
            ? {
                connect: data.candidate,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          startTime: true,
          endTime: true,
          location: true,
          note: true,
          isArchived: true,
          rating: true,

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          candidate: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CandidateInterview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: CandidateInterviewWhereUniqueInput
  ): Promise<CandidateInterview | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          startTime: true,
          endTime: true,
          location: true,
          note: true,
          isArchived: true,
          rating: true,

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          candidate: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/candidateFeedback")
  @ApiNestedQuery(CandidateFeedbackFindManyArgs)
  async findManyCandidateFeedback(
    @common.Req() request: Request,
    @common.Param() params: CandidateInterviewWhereUniqueInput
  ): Promise<CandidateFeedback[]> {
    const query = plainToClass(CandidateFeedbackFindManyArgs, request.query);
    const results = await this.service.findCandidateFeedback(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        rating: true,
        status: true,

        candidateInterview: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        candidateInterviewer: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateFeedback")
  async connectCandidateFeedback(
    @common.Param() params: CandidateInterviewWhereUniqueInput,
    @common.Body() body: CandidateFeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateFeedback: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateFeedback")
  async updateCandidateFeedback(
    @common.Param() params: CandidateInterviewWhereUniqueInput,
    @common.Body() body: CandidateFeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateFeedback: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateFeedback")
  async disconnectCandidateFeedback(
    @common.Param() params: CandidateInterviewWhereUniqueInput,
    @common.Body() body: CandidateFeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateFeedback: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateInterviewer")
  @ApiNestedQuery(CandidateInterviewerFindManyArgs)
  async findManyCandidateInterviewer(
    @common.Req() request: Request,
    @common.Param() params: CandidateInterviewWhereUniqueInput
  ): Promise<CandidateInterviewer[]> {
    const query = plainToClass(CandidateInterviewerFindManyArgs, request.query);
    const results = await this.service.findCandidateInterviewer(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        organization: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        candidateInterview: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        candidateFeedback: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateInterviewer")
  async connectCandidateInterviewer(
    @common.Param() params: CandidateInterviewWhereUniqueInput,
    @common.Body() body: CandidateInterviewerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateInterviewer: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateInterviewer")
  async updateCandidateInterviewer(
    @common.Param() params: CandidateInterviewWhereUniqueInput,
    @common.Body() body: CandidateInterviewerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateInterviewer: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateInterviewer")
  async disconnectCandidateInterviewer(
    @common.Param() params: CandidateInterviewWhereUniqueInput,
    @common.Body() body: CandidateInterviewerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateInterviewer: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidatePersonalQuality")
  @ApiNestedQuery(CandidatePersonalQualityFindManyArgs)
  async findManyCandidatePersonalQuality(
    @common.Req() request: Request,
    @common.Param() params: CandidateInterviewWhereUniqueInput
  ): Promise<CandidatePersonalQuality[]> {
    const query = plainToClass(
      CandidatePersonalQualityFindManyArgs,
      request.query
    );
    const results = await this.service.findCandidatePersonalQuality(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        rating: true,

        tenant: {
          select: {
            id: true,
          },
        },

        candidateInterview: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidatePersonalQuality")
  async connectCandidatePersonalQuality(
    @common.Param() params: CandidateInterviewWhereUniqueInput,
    @common.Body() body: CandidatePersonalQualityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidatePersonalQuality: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidatePersonalQuality")
  async updateCandidatePersonalQuality(
    @common.Param() params: CandidateInterviewWhereUniqueInput,
    @common.Body() body: CandidatePersonalQualityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidatePersonalQuality: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidatePersonalQuality")
  async disconnectCandidatePersonalQuality(
    @common.Param() params: CandidateInterviewWhereUniqueInput,
    @common.Body() body: CandidatePersonalQualityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidatePersonalQuality: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateTechnology")
  @ApiNestedQuery(CandidateTechnologyFindManyArgs)
  async findManyCandidateTechnology(
    @common.Req() request: Request,
    @common.Param() params: CandidateInterviewWhereUniqueInput
  ): Promise<CandidateTechnology[]> {
    const query = plainToClass(CandidateTechnologyFindManyArgs, request.query);
    const results = await this.service.findCandidateTechnology(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        rating: true,

        candidateInterview: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateTechnology")
  async connectCandidateTechnology(
    @common.Param() params: CandidateInterviewWhereUniqueInput,
    @common.Body() body: CandidateTechnologyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateTechnology: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateTechnology")
  async updateCandidateTechnology(
    @common.Param() params: CandidateInterviewWhereUniqueInput,
    @common.Body() body: CandidateTechnologyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateTechnology: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateTechnology")
  async disconnectCandidateTechnology(
    @common.Param() params: CandidateInterviewWhereUniqueInput,
    @common.Body() body: CandidateTechnologyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateTechnology: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
