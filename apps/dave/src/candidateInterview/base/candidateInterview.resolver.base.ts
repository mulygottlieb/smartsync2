/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCandidateInterviewArgs } from "./CreateCandidateInterviewArgs";
import { UpdateCandidateInterviewArgs } from "./UpdateCandidateInterviewArgs";
import { DeleteCandidateInterviewArgs } from "./DeleteCandidateInterviewArgs";
import { CandidateInterviewCountArgs } from "./CandidateInterviewCountArgs";
import { CandidateInterviewFindManyArgs } from "./CandidateInterviewFindManyArgs";
import { CandidateInterviewFindUniqueArgs } from "./CandidateInterviewFindUniqueArgs";
import { CandidateInterview } from "./CandidateInterview";
import { CandidateFeedbackFindManyArgs } from "../../candidateFeedback/base/CandidateFeedbackFindManyArgs";
import { CandidateFeedback } from "../../candidateFeedback/base/CandidateFeedback";
import { CandidateInterviewerFindManyArgs } from "../../candidateInterviewer/base/CandidateInterviewerFindManyArgs";
import { CandidateInterviewer } from "../../candidateInterviewer/base/CandidateInterviewer";
import { CandidatePersonalQualityFindManyArgs } from "../../candidatePersonalQuality/base/CandidatePersonalQualityFindManyArgs";
import { CandidatePersonalQuality } from "../../candidatePersonalQuality/base/CandidatePersonalQuality";
import { CandidateTechnologyFindManyArgs } from "../../candidateTechnology/base/CandidateTechnologyFindManyArgs";
import { CandidateTechnology } from "../../candidateTechnology/base/CandidateTechnology";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { Candidate } from "../../candidate/base/Candidate";
import { CandidateInterviewService } from "../candidateInterview.service";
@graphql.Resolver(() => CandidateInterview)
export class CandidateInterviewResolverBase {
  constructor(protected readonly service: CandidateInterviewService) {}

  async _candidateInterviewsMeta(
    @graphql.Args() args: CandidateInterviewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CandidateInterview])
  async candidateInterviews(
    @graphql.Args() args: CandidateInterviewFindManyArgs
  ): Promise<CandidateInterview[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => CandidateInterview, { nullable: true })
  async candidateInterview(
    @graphql.Args() args: CandidateInterviewFindUniqueArgs
  ): Promise<CandidateInterview | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CandidateInterview)
  async createCandidateInterview(
    @graphql.Args() args: CreateCandidateInterviewArgs
  ): Promise<CandidateInterview> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        candidate: args.data.candidate
          ? {
              connect: args.data.candidate,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CandidateInterview)
  async updateCandidateInterview(
    @graphql.Args() args: UpdateCandidateInterviewArgs
  ): Promise<CandidateInterview | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          candidate: args.data.candidate
            ? {
                connect: args.data.candidate,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CandidateInterview)
  async deleteCandidateInterview(
    @graphql.Args() args: DeleteCandidateInterviewArgs
  ): Promise<CandidateInterview | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CandidateFeedback], {
    name: "candidateFeedback",
  })
  async resolveFieldCandidateFeedback(
    @graphql.Parent() parent: CandidateInterview,
    @graphql.Args() args: CandidateFeedbackFindManyArgs
  ): Promise<CandidateFeedback[]> {
    const results = await this.service.findCandidateFeedback(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateInterviewer], {
    name: "candidateInterviewer",
  })
  async resolveFieldCandidateInterviewer(
    @graphql.Parent() parent: CandidateInterview,
    @graphql.Args() args: CandidateInterviewerFindManyArgs
  ): Promise<CandidateInterviewer[]> {
    const results = await this.service.findCandidateInterviewer(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidatePersonalQuality], {
    name: "candidatePersonalQuality",
  })
  async resolveFieldCandidatePersonalQuality(
    @graphql.Parent() parent: CandidateInterview,
    @graphql.Args() args: CandidatePersonalQualityFindManyArgs
  ): Promise<CandidatePersonalQuality[]> {
    const results = await this.service.findCandidatePersonalQuality(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateTechnology], {
    name: "candidateTechnology",
  })
  async resolveFieldCandidateTechnology(
    @graphql.Parent() parent: CandidateInterview,
    @graphql.Args() args: CandidateTechnologyFindManyArgs
  ): Promise<CandidateTechnology[]> {
    const results = await this.service.findCandidateTechnology(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: CandidateInterview
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: CandidateInterview
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Candidate, {
    nullable: true,
    name: "candidate",
  })
  async resolveFieldCandidate(
    @graphql.Parent() parent: CandidateInterview
  ): Promise<Candidate | null> {
    const result = await this.service.getCandidate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
