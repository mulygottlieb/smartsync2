/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCandidateInterviewerArgs } from "./CreateCandidateInterviewerArgs";
import { UpdateCandidateInterviewerArgs } from "./UpdateCandidateInterviewerArgs";
import { DeleteCandidateInterviewerArgs } from "./DeleteCandidateInterviewerArgs";
import { CandidateInterviewerCountArgs } from "./CandidateInterviewerCountArgs";
import { CandidateInterviewerFindManyArgs } from "./CandidateInterviewerFindManyArgs";
import { CandidateInterviewerFindUniqueArgs } from "./CandidateInterviewerFindUniqueArgs";
import { CandidateInterviewer } from "./CandidateInterviewer";
import { Organization } from "../../organization/base/Organization";
import { Employee } from "../../employee/base/Employee";
import { CandidateInterview } from "../../candidateInterview/base/CandidateInterview";
import { Tenant } from "../../tenant/base/Tenant";
import { CandidateFeedback } from "../../candidateFeedback/base/CandidateFeedback";
import { CandidateInterviewerService } from "../candidateInterviewer.service";
@graphql.Resolver(() => CandidateInterviewer)
export class CandidateInterviewerResolverBase {
  constructor(protected readonly service: CandidateInterviewerService) {}

  async _candidateInterviewersMeta(
    @graphql.Args() args: CandidateInterviewerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CandidateInterviewer])
  async candidateInterviewers(
    @graphql.Args() args: CandidateInterviewerFindManyArgs
  ): Promise<CandidateInterviewer[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => CandidateInterviewer, { nullable: true })
  async candidateInterviewer(
    @graphql.Args() args: CandidateInterviewerFindUniqueArgs
  ): Promise<CandidateInterviewer | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CandidateInterviewer)
  async createCandidateInterviewer(
    @graphql.Args() args: CreateCandidateInterviewerArgs
  ): Promise<CandidateInterviewer> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,

        candidateInterview: {
          connect: args.data.candidateInterview,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        candidateFeedback: args.data.candidateFeedback
          ? {
              connect: args.data.candidateFeedback,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CandidateInterviewer)
  async updateCandidateInterviewer(
    @graphql.Args() args: UpdateCandidateInterviewerArgs
  ): Promise<CandidateInterviewer | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,

          candidateInterview: {
            connect: args.data.candidateInterview,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          candidateFeedback: args.data.candidateFeedback
            ? {
                connect: args.data.candidateFeedback,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CandidateInterviewer)
  async deleteCandidateInterviewer(
    @graphql.Args() args: DeleteCandidateInterviewerArgs
  ): Promise<CandidateInterviewer | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: CandidateInterviewer
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: CandidateInterviewer
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => CandidateInterview, {
    nullable: true,
    name: "candidateInterview",
  })
  async resolveFieldCandidateInterview(
    @graphql.Parent() parent: CandidateInterviewer
  ): Promise<CandidateInterview | null> {
    const result = await this.service.getCandidateInterview(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: CandidateInterviewer
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => CandidateFeedback, {
    nullable: true,
    name: "candidateFeedback",
  })
  async resolveFieldCandidateFeedback(
    @graphql.Parent() parent: CandidateInterviewer
  ): Promise<CandidateFeedback | null> {
    const result = await this.service.getCandidateFeedback(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
