/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCandidatePersonalQualityArgs } from "./CreateCandidatePersonalQualityArgs";
import { UpdateCandidatePersonalQualityArgs } from "./UpdateCandidatePersonalQualityArgs";
import { DeleteCandidatePersonalQualityArgs } from "./DeleteCandidatePersonalQualityArgs";
import { CandidatePersonalQualityCountArgs } from "./CandidatePersonalQualityCountArgs";
import { CandidatePersonalQualityFindManyArgs } from "./CandidatePersonalQualityFindManyArgs";
import { CandidatePersonalQualityFindUniqueArgs } from "./CandidatePersonalQualityFindUniqueArgs";
import { CandidatePersonalQuality } from "./CandidatePersonalQuality";
import { CandidateCriterionRatingFindManyArgs } from "../../candidateCriterionRating/base/CandidateCriterionRatingFindManyArgs";
import { CandidateCriterionRating } from "../../candidateCriterionRating/base/CandidateCriterionRating";
import { Tenant } from "../../tenant/base/Tenant";
import { CandidateInterview } from "../../candidateInterview/base/CandidateInterview";
import { Organization } from "../../organization/base/Organization";
import { CandidatePersonalQualityService } from "../candidatePersonalQuality.service";
@graphql.Resolver(() => CandidatePersonalQuality)
export class CandidatePersonalQualityResolverBase {
  constructor(protected readonly service: CandidatePersonalQualityService) {}

  async _candidatePersonalQualitiesMeta(
    @graphql.Args() args: CandidatePersonalQualityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CandidatePersonalQuality])
  async candidatePersonalQualities(
    @graphql.Args() args: CandidatePersonalQualityFindManyArgs
  ): Promise<CandidatePersonalQuality[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => CandidatePersonalQuality, { nullable: true })
  async candidatePersonalQuality(
    @graphql.Args() args: CandidatePersonalQualityFindUniqueArgs
  ): Promise<CandidatePersonalQuality | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CandidatePersonalQuality)
  async createCandidatePersonalQuality(
    @graphql.Args() args: CreateCandidatePersonalQualityArgs
  ): Promise<CandidatePersonalQuality> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        candidateInterview: args.data.candidateInterview
          ? {
              connect: args.data.candidateInterview,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CandidatePersonalQuality)
  async updateCandidatePersonalQuality(
    @graphql.Args() args: UpdateCandidatePersonalQualityArgs
  ): Promise<CandidatePersonalQuality | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          candidateInterview: args.data.candidateInterview
            ? {
                connect: args.data.candidateInterview,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CandidatePersonalQuality)
  async deleteCandidatePersonalQuality(
    @graphql.Args() args: DeleteCandidatePersonalQualityArgs
  ): Promise<CandidatePersonalQuality | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CandidateCriterionRating], {
    name: "candidateCriterionRating",
  })
  async resolveFieldCandidateCriterionRating(
    @graphql.Parent() parent: CandidatePersonalQuality,
    @graphql.Args() args: CandidateCriterionRatingFindManyArgs
  ): Promise<CandidateCriterionRating[]> {
    const results = await this.service.findCandidateCriterionRating(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: CandidatePersonalQuality
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => CandidateInterview, {
    nullable: true,
    name: "candidateInterview",
  })
  async resolveFieldCandidateInterview(
    @graphql.Parent() parent: CandidatePersonalQuality
  ): Promise<CandidateInterview | null> {
    const result = await this.service.getCandidateInterview(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: CandidatePersonalQuality
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
