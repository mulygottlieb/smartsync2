/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCandidateSourceArgs } from "./CreateCandidateSourceArgs";
import { UpdateCandidateSourceArgs } from "./UpdateCandidateSourceArgs";
import { DeleteCandidateSourceArgs } from "./DeleteCandidateSourceArgs";
import { CandidateSourceCountArgs } from "./CandidateSourceCountArgs";
import { CandidateSourceFindManyArgs } from "./CandidateSourceFindManyArgs";
import { CandidateSourceFindUniqueArgs } from "./CandidateSourceFindUniqueArgs";
import { CandidateSource } from "./CandidateSource";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { Candidate } from "../../candidate/base/Candidate";
import { CandidateSourceService } from "../candidateSource.service";
@graphql.Resolver(() => CandidateSource)
export class CandidateSourceResolverBase {
  constructor(protected readonly service: CandidateSourceService) {}

  async _candidateSourcesMeta(
    @graphql.Args() args: CandidateSourceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CandidateSource])
  async candidateSources(
    @graphql.Args() args: CandidateSourceFindManyArgs
  ): Promise<CandidateSource[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => CandidateSource, { nullable: true })
  async candidateSource(
    @graphql.Args() args: CandidateSourceFindUniqueArgs
  ): Promise<CandidateSource | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CandidateSource)
  async createCandidateSource(
    @graphql.Args() args: CreateCandidateSourceArgs
  ): Promise<CandidateSource> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        candidate: args.data.candidate
          ? {
              connect: args.data.candidate,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CandidateSource)
  async updateCandidateSource(
    @graphql.Args() args: UpdateCandidateSourceArgs
  ): Promise<CandidateSource | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          candidate: args.data.candidate
            ? {
                connect: args.data.candidate,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CandidateSource)
  async deleteCandidateSource(
    @graphql.Args() args: DeleteCandidateSourceArgs
  ): Promise<CandidateSource | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: CandidateSource
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: CandidateSource
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Candidate, {
    nullable: true,
    name: "candidate",
  })
  async resolveFieldCandidate(
    @graphql.Parent() parent: CandidateSource
  ): Promise<Candidate | null> {
    const result = await this.service.getCandidate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
