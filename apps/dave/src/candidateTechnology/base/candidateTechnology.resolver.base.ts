/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCandidateTechnologyArgs } from "./CreateCandidateTechnologyArgs";
import { UpdateCandidateTechnologyArgs } from "./UpdateCandidateTechnologyArgs";
import { DeleteCandidateTechnologyArgs } from "./DeleteCandidateTechnologyArgs";
import { CandidateTechnologyCountArgs } from "./CandidateTechnologyCountArgs";
import { CandidateTechnologyFindManyArgs } from "./CandidateTechnologyFindManyArgs";
import { CandidateTechnologyFindUniqueArgs } from "./CandidateTechnologyFindUniqueArgs";
import { CandidateTechnology } from "./CandidateTechnology";
import { CandidateCriterionRatingFindManyArgs } from "../../candidateCriterionRating/base/CandidateCriterionRatingFindManyArgs";
import { CandidateCriterionRating } from "../../candidateCriterionRating/base/CandidateCriterionRating";
import { CandidateInterview } from "../../candidateInterview/base/CandidateInterview";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { CandidateTechnologyService } from "../candidateTechnology.service";
@graphql.Resolver(() => CandidateTechnology)
export class CandidateTechnologyResolverBase {
  constructor(protected readonly service: CandidateTechnologyService) {}

  async _candidateTechnologiesMeta(
    @graphql.Args() args: CandidateTechnologyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CandidateTechnology])
  async candidateTechnologies(
    @graphql.Args() args: CandidateTechnologyFindManyArgs
  ): Promise<CandidateTechnology[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => CandidateTechnology, { nullable: true })
  async candidateTechnology(
    @graphql.Args() args: CandidateTechnologyFindUniqueArgs
  ): Promise<CandidateTechnology | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CandidateTechnology)
  async createCandidateTechnology(
    @graphql.Args() args: CreateCandidateTechnologyArgs
  ): Promise<CandidateTechnology> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        candidateInterview: args.data.candidateInterview
          ? {
              connect: args.data.candidateInterview,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CandidateTechnology)
  async updateCandidateTechnology(
    @graphql.Args() args: UpdateCandidateTechnologyArgs
  ): Promise<CandidateTechnology | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          candidateInterview: args.data.candidateInterview
            ? {
                connect: args.data.candidateInterview,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CandidateTechnology)
  async deleteCandidateTechnology(
    @graphql.Args() args: DeleteCandidateTechnologyArgs
  ): Promise<CandidateTechnology | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CandidateCriterionRating], {
    name: "candidateCriterionRating",
  })
  async resolveFieldCandidateCriterionRating(
    @graphql.Parent() parent: CandidateTechnology,
    @graphql.Args() args: CandidateCriterionRatingFindManyArgs
  ): Promise<CandidateCriterionRating[]> {
    const results = await this.service.findCandidateCriterionRating(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => CandidateInterview, {
    nullable: true,
    name: "candidateInterview",
  })
  async resolveFieldCandidateInterview(
    @graphql.Parent() parent: CandidateTechnology
  ): Promise<CandidateInterview | null> {
    const result = await this.service.getCandidateInterview(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: CandidateTechnology
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: CandidateTechnology
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
