/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContactService } from "../contact.service";
import { ContactCreateInput } from "./ContactCreateInput";
import { ContactWhereInput } from "./ContactWhereInput";
import { ContactWhereUniqueInput } from "./ContactWhereUniqueInput";
import { ContactFindManyArgs } from "./ContactFindManyArgs";
import { ContactUpdateInput } from "./ContactUpdateInput";
import { Contact } from "./Contact";
import { OrganizationFindManyArgs } from "../../organization/base/OrganizationFindManyArgs";
import { Organization } from "../../organization/base/Organization";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";

export class ContactControllerBase {
  constructor(protected readonly service: ContactService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Contact })
  async create(@common.Body() data: ContactCreateInput): Promise<Contact> {
    return await this.service.create({
      data: {
        ...data,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        organizationContactOrganizationIdToorganization:
          data.organizationContactOrganizationIdToorganization
            ? {
                connect: data.organizationContactOrganizationIdToorganization,
              }
            : undefined,

        candidate: data.candidate
          ? {
              connect: data.candidate,
            }
          : undefined,

        employee: data.employee
          ? {
              connect: data.employee,
            }
          : undefined,

        merchant: data.merchant
          ? {
              connect: data.merchant,
            }
          : undefined,

        organizationContact: data.organizationContact
          ? {
              connect: data.organizationContact,
            }
          : undefined,

        warehouse: data.warehouse
          ? {
              connect: data.warehouse,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        firstName: true,
        lastName: true,
        country: true,
        city: true,
        address: true,
        address2: true,
        postcode: true,
        regionCode: true,
        fax: true,
        fiscalInformation: true,
        website: true,
        latitude: true,
        longitude: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organizationContactOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        merchant: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        warehouse: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Contact] })
  @ApiNestedQuery(ContactFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Contact[]> {
    const args = plainToClass(ContactFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        firstName: true,
        lastName: true,
        country: true,
        city: true,
        address: true,
        address2: true,
        postcode: true,
        regionCode: true,
        fax: true,
        fiscalInformation: true,
        website: true,
        latitude: true,
        longitude: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organizationContactOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        merchant: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        warehouse: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Contact })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: ContactWhereUniqueInput
  ): Promise<Contact | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        firstName: true,
        lastName: true,
        country: true,
        city: true,
        address: true,
        address2: true,
        postcode: true,
        regionCode: true,
        fax: true,
        fiscalInformation: true,
        website: true,
        latitude: true,
        longitude: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organizationContactOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        merchant: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        warehouse: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Contact })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: ContactWhereUniqueInput,
    @common.Body() data: ContactUpdateInput
  ): Promise<Contact | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          organizationContactOrganizationIdToorganization:
            data.organizationContactOrganizationIdToorganization
              ? {
                  connect: data.organizationContactOrganizationIdToorganization,
                }
              : undefined,

          candidate: data.candidate
            ? {
                connect: data.candidate,
              }
            : undefined,

          employee: data.employee
            ? {
                connect: data.employee,
              }
            : undefined,

          merchant: data.merchant
            ? {
                connect: data.merchant,
              }
            : undefined,

          organizationContact: data.organizationContact
            ? {
                connect: data.organizationContact,
              }
            : undefined,

          warehouse: data.warehouse
            ? {
                connect: data.warehouse,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          firstName: true,
          lastName: true,
          country: true,
          city: true,
          address: true,
          address2: true,
          postcode: true,
          regionCode: true,
          fax: true,
          fiscalInformation: true,
          website: true,
          latitude: true,
          longitude: true,

          tenant: {
            select: {
              id: true,
            },
          },

          organizationContactOrganizationIdToorganization: {
            select: {
              id: true,
            },
          },

          candidate: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          merchant: {
            select: {
              id: true,
            },
          },

          organizationContact: {
            select: {
              id: true,
            },
          },

          warehouse: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Contact })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: ContactWhereUniqueInput
  ): Promise<Contact | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          firstName: true,
          lastName: true,
          country: true,
          city: true,
          address: true,
          address2: true,
          postcode: true,
          regionCode: true,
          fax: true,
          fiscalInformation: true,
          website: true,
          latitude: true,
          longitude: true,

          tenant: {
            select: {
              id: true,
            },
          },

          organizationContactOrganizationIdToorganization: {
            select: {
              id: true,
            },
          },

          candidate: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          merchant: {
            select: {
              id: true,
            },
          },

          organizationContact: {
            select: {
              id: true,
            },
          },

          warehouse: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/organizationOrganizationContactIdTocontact")
  @ApiNestedQuery(OrganizationFindManyArgs)
  async findManyOrganizationOrganizationContactIdTocontact(
    @common.Req() request: Request,
    @common.Param() params: ContactWhereUniqueInput
  ): Promise<Organization[]> {
    const query = plainToClass(OrganizationFindManyArgs, request.query);
    const results =
      await this.service.findOrganizationOrganizationContactIdTocontact(
        params.id,
        {
          ...query,
          select: {
            activityProofDuration: true,
            allowDeleteTime: true,
            allowManualTime: true,
            allowModifyTime: true,
            allowScreenshotCapture: true,
            allowTrackInactivity: true,
            banner: true,
            bonusPercentage: true,
            bonusType: true,
            brandColor: true,
            clientFocus: true,

            contactOrganizationContactIdTocontact: {
              select: {
                id: true,
              },
            },

            convertAcceptedEstimates: true,
            createdAt: true,
            currency: true,
            currencyPosition: true,
            dateFormat: true,
            daysUntilDue: true,
            defaultAlignmentType: true,
            defaultEndTime: true,
            defaultInvoiceEstimateTerms: true,
            defaultStartTime: true,
            defaultValueDateType: true,
            discountAfterTax: true,
            fiscalEndDate: true,
            fiscalInformation: true,
            fiscalStartDate: true,
            futureDateAllowed: true,
            id: true,

            imageAssetOrganizationImageIdToimageAsset: {
              select: {
                id: true,
              },
            },

            imageUrl: true,
            inactivityTimeLimit: true,
            inviteExpiryPeriod: true,
            invitesAllowed: true,
            isActive: true,
            isDefault: true,
            isRemoveIdleTime: true,
            minimumProjectSize: true,
            name: true,
            numberFormat: true,
            officialName: true,
            overview: true,
            profileLink: true,
            regionCode: true,
            registrationDate: true,
            requireClient: true,
            requireDescription: true,
            requireProject: true,
            requireReason: true,
            requireTask: true,
            separateInvoiceItemTaxAndDiscount: true,
            shortDescription: true,
            showBonusesPaid: true,
            showClients: true,
            showClientsCount: true,
            showEmployeesCount: true,
            showIncome: true,
            showMinimumProjectSize: true,
            showProfits: true,
            showProjectsCount: true,
            showTotalHours: true,
            startWeekOn: true,
            taxId: true,

            tenant: {
              select: {
                id: true,
              },
            },

            timeFormat: true,
            timeZone: true,
            totalEmployees: true,
            updatedAt: true,
            upworkOrganizationId: true,
            valueDate: true,
            website: true,
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationOrganizationContactIdTocontact")
  async connectOrganizationOrganizationContactIdTocontact(
    @common.Param() params: ContactWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationOrganizationContactIdTocontact: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationOrganizationContactIdTocontact")
  async updateOrganizationOrganizationContactIdTocontact(
    @common.Param() params: ContactWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationOrganizationContactIdTocontact: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationOrganizationContactIdTocontact")
  async disconnectOrganizationOrganizationContactIdTocontact(
    @common.Param() params: ContactWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationOrganizationContactIdTocontact: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
