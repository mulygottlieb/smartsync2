/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateDealArgs } from "./CreateDealArgs";
import { UpdateDealArgs } from "./UpdateDealArgs";
import { DeleteDealArgs } from "./DeleteDealArgs";
import { DealCountArgs } from "./DealCountArgs";
import { DealFindManyArgs } from "./DealFindManyArgs";
import { DealFindUniqueArgs } from "./DealFindUniqueArgs";
import { Deal } from "./Deal";
import { OrganizationContact } from "../../organizationContact/base/OrganizationContact";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { User } from "../../user/base/User";
import { PipelineStage } from "../../pipelineStage/base/PipelineStage";
import { DealService } from "../deal.service";
@graphql.Resolver(() => Deal)
export class DealResolverBase {
  constructor(protected readonly service: DealService) {}

  async _dealsMeta(
    @graphql.Args() args: DealCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Deal])
  async deals(@graphql.Args() args: DealFindManyArgs): Promise<Deal[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Deal, { nullable: true })
  async deal(@graphql.Args() args: DealFindUniqueArgs): Promise<Deal | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Deal)
  async createDeal(@graphql.Args() args: CreateDealArgs): Promise<Deal> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationContact: args.data.organizationContact
          ? {
              connect: args.data.organizationContact,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        user: {
          connect: args.data.user,
        },

        pipelineStage: {
          connect: args.data.pipelineStage,
        },
      },
    });
  }

  @graphql.Mutation(() => Deal)
  async updateDeal(@graphql.Args() args: UpdateDealArgs): Promise<Deal | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationContact: args.data.organizationContact
            ? {
                connect: args.data.organizationContact,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          user: {
            connect: args.data.user,
          },

          pipelineStage: {
            connect: args.data.pipelineStage,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Deal)
  async deleteDeal(@graphql.Args() args: DeleteDealArgs): Promise<Deal | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => OrganizationContact, {
    nullable: true,
    name: "organizationContact",
  })
  async resolveFieldOrganizationContact(
    @graphql.Parent() parent: Deal
  ): Promise<OrganizationContact | null> {
    const result = await this.service.getOrganizationContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: Deal
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: Deal
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(@graphql.Parent() parent: Deal): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => PipelineStage, {
    nullable: true,
    name: "pipelineStage",
  })
  async resolveFieldPipelineStage(
    @graphql.Parent() parent: Deal
  ): Promise<PipelineStage | null> {
    const result = await this.service.getPipelineStage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
