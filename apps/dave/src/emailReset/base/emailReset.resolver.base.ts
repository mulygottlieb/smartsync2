/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEmailResetArgs } from "./CreateEmailResetArgs";
import { UpdateEmailResetArgs } from "./UpdateEmailResetArgs";
import { DeleteEmailResetArgs } from "./DeleteEmailResetArgs";
import { EmailResetCountArgs } from "./EmailResetCountArgs";
import { EmailResetFindManyArgs } from "./EmailResetFindManyArgs";
import { EmailResetFindUniqueArgs } from "./EmailResetFindUniqueArgs";
import { EmailReset } from "./EmailReset";
import { Tenant } from "../../tenant/base/Tenant";
import { User } from "../../user/base/User";
import { EmailResetService } from "../emailReset.service";
@graphql.Resolver(() => EmailReset)
export class EmailResetResolverBase {
  constructor(protected readonly service: EmailResetService) {}

  async _emailResetsMeta(
    @graphql.Args() args: EmailResetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmailReset])
  async emailResets(
    @graphql.Args() args: EmailResetFindManyArgs
  ): Promise<EmailReset[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EmailReset, { nullable: true })
  async emailReset(
    @graphql.Args() args: EmailResetFindUniqueArgs
  ): Promise<EmailReset | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmailReset)
  async createEmailReset(
    @graphql.Args() args: CreateEmailResetArgs
  ): Promise<EmailReset> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EmailReset)
  async updateEmailReset(
    @graphql.Args() args: UpdateEmailResetArgs
  ): Promise<EmailReset | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailReset)
  async deleteEmailReset(
    @graphql.Args() args: DeleteEmailResetArgs
  ): Promise<EmailReset | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: EmailReset
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: EmailReset
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
