/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEmailSentArgs } from "./CreateEmailSentArgs";
import { UpdateEmailSentArgs } from "./UpdateEmailSentArgs";
import { DeleteEmailSentArgs } from "./DeleteEmailSentArgs";
import { EmailSentCountArgs } from "./EmailSentCountArgs";
import { EmailSentFindManyArgs } from "./EmailSentFindManyArgs";
import { EmailSentFindUniqueArgs } from "./EmailSentFindUniqueArgs";
import { EmailSent } from "./EmailSent";
import { Tenant } from "../../tenant/base/Tenant";
import { User } from "../../user/base/User";
import { Organization } from "../../organization/base/Organization";
import { EmailTemplate } from "../../emailTemplate/base/EmailTemplate";
import { EmailSentService } from "../emailSent.service";
@graphql.Resolver(() => EmailSent)
export class EmailSentResolverBase {
  constructor(protected readonly service: EmailSentService) {}

  async _emailSentsMeta(
    @graphql.Args() args: EmailSentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmailSent])
  async emailSents(
    @graphql.Args() args: EmailSentFindManyArgs
  ): Promise<EmailSent[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EmailSent, { nullable: true })
  async emailSent(
    @graphql.Args() args: EmailSentFindUniqueArgs
  ): Promise<EmailSent | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmailSent)
  async createEmailSent(
    @graphql.Args() args: CreateEmailSentArgs
  ): Promise<EmailSent> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        emailTemplate: {
          connect: args.data.emailTemplate,
        },
      },
    });
  }

  @graphql.Mutation(() => EmailSent)
  async updateEmailSent(
    @graphql.Args() args: UpdateEmailSentArgs
  ): Promise<EmailSent | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          emailTemplate: {
            connect: args.data.emailTemplate,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailSent)
  async deleteEmailSent(
    @graphql.Args() args: DeleteEmailSentArgs
  ): Promise<EmailSent | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: EmailSent
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: EmailSent
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: EmailSent
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => EmailTemplate, {
    nullable: true,
    name: "emailTemplate",
  })
  async resolveFieldEmailTemplate(
    @graphql.Parent() parent: EmailSent
  ): Promise<EmailTemplate | null> {
    const result = await this.service.getEmailTemplate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
