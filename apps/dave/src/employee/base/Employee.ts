/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EmployeeUpworkJobSearchCriterion } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterion";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsBoolean,
  IsNumber,
  IsInt,
} from "class-validator";
import { Type } from "class-transformer";
import { EquipmentSharesEmployee } from "../../equipmentSharesEmployee/base/EquipmentSharesEmployee";
import { EventType } from "../../eventType/base/EventType";
import { Expense } from "../../expense/base/Expense";
import { Goal } from "../../goal/base/Goal";
import { GoalKpi } from "../../goalKpi/base/GoalKpi";
import { GoalKpiTemplate } from "../../goalKpiTemplate/base/GoalKpiTemplate";
import { Income } from "../../income/base/Income";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { Decimal } from "decimal.js";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { KnowledgeBaseAuthor } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthor";
import { Activity } from "../../activity/base/Activity";
import { AppointmentEmployee } from "../../appointmentEmployee/base/AppointmentEmployee";
import { AvailabilitySlot } from "../../availabilitySlot/base/AvailabilitySlot";
import { Candidate } from "../../candidate/base/Candidate";
import { CandidateInterviewer } from "../../candidateInterviewer/base/CandidateInterviewer";
import { Contact } from "../../contact/base/Contact";
import { EmployeeAppointment } from "../../employeeAppointment/base/EmployeeAppointment";
import { EmployeeAward } from "../../employeeAward/base/EmployeeAward";
import { EmployeeJobPreset } from "../../employeeJobPreset/base/EmployeeJobPreset";
import { EmployeePhone } from "../../employeePhone/base/EmployeePhone";
import { EmployeeProposalTemplate } from "../../employeeProposalTemplate/base/EmployeeProposalTemplate";
import { EmployeeRecurringExpense } from "../../employeeRecurringExpense/base/EmployeeRecurringExpense";
import { EmployeeSetting } from "../../employeeSetting/base/EmployeeSetting";
import { EmployeeTasksTask } from "../../employeeTasksTask/base/EmployeeTasksTask";
import { Organization } from "../../organization/base/Organization";
import { OrganizationContactEmployee } from "../../organizationContactEmployee/base/OrganizationContactEmployee";
import { OrganizationDepartmentEmployee } from "../../organizationDepartmentEmployee/base/OrganizationDepartmentEmployee";
import { OrganizationEmploymentTypeEmployee } from "../../organizationEmploymentTypeEmployee/base/OrganizationEmploymentTypeEmployee";
import { OrganizationPosition } from "../../organizationPosition/base/OrganizationPosition";
import { OrganizationProjectEmployee } from "../../organizationProjectEmployee/base/OrganizationProjectEmployee";
import { OrganizationTeamEmployee } from "../../organizationTeamEmployee/base/OrganizationTeamEmployee";
import { Payment } from "../../payment/base/Payment";
import { Proposal } from "../../proposal/base/Proposal";
import { RequestApprovalEmployee } from "../../requestApprovalEmployee/base/RequestApprovalEmployee";
import { SkillEmployee } from "../../skillEmployee/base/SkillEmployee";
import { TagEmployee } from "../../tagEmployee/base/TagEmployee";
import { TaskEmployee } from "../../taskEmployee/base/TaskEmployee";
import { Tenant } from "../../tenant/base/Tenant";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { TimeOffPolicyEmployee } from "../../timeOffPolicyEmployee/base/TimeOffPolicyEmployee";
import { TimeOffRequestEmployee } from "../../timeOffRequestEmployee/base/TimeOffRequestEmployee";
import { Timesheet } from "../../timesheet/base/Timesheet";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { User } from "../../user/base/User";

@ObjectType()
class Employee {
  @ApiProperty({
    required: false,
    type: () => [EmployeeUpworkJobSearchCriterion],
  })
  @ValidateNested()
  @Type(() => EmployeeUpworkJobSearchCriterion)
  @IsOptional()
  employeeUpworkJobSearchCriterion?: Array<EmployeeUpworkJobSearchCriterion>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  endWork!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [EquipmentSharesEmployee],
  })
  @ValidateNested()
  @Type(() => EquipmentSharesEmployee)
  @IsOptional()
  equipmentSharesEmployees?: Array<EquipmentSharesEmployee>;

  @ApiProperty({
    required: false,
    type: () => [EventType],
  })
  @ValidateNested()
  @Type(() => EventType)
  @IsOptional()
  eventType?: Array<EventType>;

  @ApiProperty({
    required: false,
    type: () => [Expense],
  })
  @ValidateNested()
  @Type(() => Expense)
  @IsOptional()
  expense?: Array<Expense>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  facebookUrl!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  githubUrl!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  gitlabUrl!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Goal],
  })
  @ValidateNested()
  @Type(() => Goal)
  @IsOptional()
  goalGoalLeadIdToemployee?: Array<Goal>;

  @ApiProperty({
    required: false,
    type: () => [Goal],
  })
  @ValidateNested()
  @Type(() => Goal)
  @IsOptional()
  goalGoalOwnerEmployeeIdToemployee?: Array<Goal>;

  @ApiProperty({
    required: false,
    type: () => [GoalKpi],
  })
  @ValidateNested()
  @Type(() => GoalKpi)
  @IsOptional()
  goalKpi?: Array<GoalKpi>;

  @ApiProperty({
    required: false,
    type: () => [GoalKpiTemplate],
  })
  @ValidateNested()
  @Type(() => GoalKpiTemplate)
  @IsOptional()
  goalKpiTemplate?: Array<GoalKpiTemplate>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [Income],
  })
  @ValidateNested()
  @Type(() => Income)
  @IsOptional()
  income?: Array<Income>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  instagramUrl!: string | null;

  @ApiProperty({
    required: false,
    type: () => [InvoiceItem],
  })
  @ValidateNested()
  @Type(() => InvoiceItem)
  @IsOptional()
  invoiceItem?: Array<InvoiceItem>;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isAway!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isJobSearchActive!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isOnline!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isTrackingEnabled!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isTrackingTime!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isVerified!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isVetted!: boolean | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  jobSuccess!: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => [KeyResult],
  })
  @ValidateNested()
  @Type(() => KeyResult)
  @IsOptional()
  keyResultKeyResultLeadIdToemployee?: Array<KeyResult>;

  @ApiProperty({
    required: false,
    type: () => [KeyResult],
  })
  @ValidateNested()
  @Type(() => KeyResult)
  @IsOptional()
  keyResultKeyResultOwnerIdToemployee?: Array<KeyResult>;

  @ApiProperty({
    required: false,
    type: () => [KnowledgeBaseAuthor],
  })
  @ValidateNested()
  @Type(() => KnowledgeBaseAuthor)
  @IsOptional()
  knowledgeBaseAuthor?: Array<KnowledgeBaseAuthor>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  acceptDate!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [Activity],
  })
  @ValidateNested()
  @Type(() => Activity)
  @IsOptional()
  activity?: Array<Activity>;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  allowScreenshotCapture!: boolean;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  anonymousBonus!: boolean | null;

  @ApiProperty({
    required: false,
    type: () => [AppointmentEmployee],
  })
  @ValidateNested()
  @Type(() => AppointmentEmployee)
  @IsOptional()
  appointmentEmployee?: Array<AppointmentEmployee>;

  @ApiProperty({
    required: false,
    type: () => [AvailabilitySlot],
  })
  @ValidateNested()
  @Type(() => AvailabilitySlot)
  @IsOptional()
  availabilitySlot?: Array<AvailabilitySlot>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  averageBonus!: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  averageExpenses!: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  averageIncome!: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  billRateCurrency!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  billRateValue!: number | null;

  @ApiProperty({
    required: false,
    type: () => Candidate,
  })
  @ValidateNested()
  @Type(() => Candidate)
  @IsOptional()
  candidate?: Candidate | null;

  @ApiProperty({
    required: false,
    type: () => [CandidateInterviewer],
  })
  @ValidateNested()
  @Type(() => CandidateInterviewer)
  @IsOptional()
  candidateInterviewer?: Array<CandidateInterviewer>;

  @ApiProperty({
    required: false,
    type: () => Contact,
  })
  @ValidateNested()
  @Type(() => Contact)
  @IsOptional()
  contact?: Contact | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  deletedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: false,
    type: () => [EmployeeAppointment],
  })
  @ValidateNested()
  @Type(() => EmployeeAppointment)
  @IsOptional()
  employeeAppointment?: Array<EmployeeAppointment>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeAward],
  })
  @ValidateNested()
  @Type(() => EmployeeAward)
  @IsOptional()
  employeeAward?: Array<EmployeeAward>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeJobPreset],
  })
  @ValidateNested()
  @Type(() => EmployeeJobPreset)
  @IsOptional()
  employeeJobPreset?: Array<EmployeeJobPreset>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  employeeLevel!: string | null;

  @ApiProperty({
    required: false,
    type: () => [EmployeePhone],
  })
  @ValidateNested()
  @Type(() => EmployeePhone)
  @IsOptional()
  employeePhone?: Array<EmployeePhone>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeProposalTemplate],
  })
  @ValidateNested()
  @Type(() => EmployeeProposalTemplate)
  @IsOptional()
  employeeProposalTemplate?: Array<EmployeeProposalTemplate>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeRecurringExpense],
  })
  @ValidateNested()
  @Type(() => EmployeeRecurringExpense)
  @IsOptional()
  employeeRecurringExpense?: Array<EmployeeRecurringExpense>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeSetting],
  })
  @ValidateNested()
  @Type(() => EmployeeSetting)
  @IsOptional()
  employeeSetting?: Array<EmployeeSetting>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeTasksTask],
  })
  @ValidateNested()
  @Type(() => EmployeeTasksTask)
  @IsOptional()
  employeeTasksTask?: Array<EmployeeTasksTask>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  linkedInId!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  linkedInUrl!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  minimumBillingRate!: number | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  offerDate!: Date | null;

  @ApiProperty({
    required: false,
    type: () => Organization,
  })
  @ValidateNested()
  @Type(() => Organization)
  @IsOptional()
  organization?: Organization | null;

  @ApiProperty({
    required: false,
    type: () => [OrganizationContactEmployee],
  })
  @ValidateNested()
  @Type(() => OrganizationContactEmployee)
  @IsOptional()
  organizationContactEmployee?: Array<OrganizationContactEmployee>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationDepartmentEmployee],
  })
  @ValidateNested()
  @Type(() => OrganizationDepartmentEmployee)
  @IsOptional()
  organizationDepartmentEmployee?: Array<OrganizationDepartmentEmployee>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationEmploymentTypeEmployee],
  })
  @ValidateNested()
  @Type(() => OrganizationEmploymentTypeEmployee)
  @IsOptional()
  organizationEmploymentTypeEmployee?: Array<OrganizationEmploymentTypeEmployee>;

  @ApiProperty({
    required: false,
    type: () => OrganizationPosition,
  })
  @ValidateNested()
  @Type(() => OrganizationPosition)
  @IsOptional()
  organizationPosition?: OrganizationPosition | null;

  @ApiProperty({
    required: false,
    type: () => [OrganizationProjectEmployee],
  })
  @ValidateNested()
  @Type(() => OrganizationProjectEmployee)
  @IsOptional()
  organizationProjectEmployee?: Array<OrganizationProjectEmployee>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationTeamEmployee],
  })
  @ValidateNested()
  @Type(() => OrganizationTeamEmployee)
  @IsOptional()
  organizationTeamEmployee?: Array<OrganizationTeamEmployee>;

  @ApiProperty({
    required: false,
    type: () => [Payment],
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payment?: Array<Payment>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  payPeriod!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  profileLink!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Proposal],
  })
  @ValidateNested()
  @Type(() => Proposal)
  @IsOptional()
  proposal?: Array<Proposal>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  rejectDate!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [RequestApprovalEmployee],
  })
  @ValidateNested()
  @Type(() => RequestApprovalEmployee)
  @IsOptional()
  requestApprovalEmployee?: Array<RequestApprovalEmployee>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  reWeeklyLimit!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  shortDescription!: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showAnonymousBonus!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showAverageBonus!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showAverageExpenses!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showAverageIncome!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showBillrate!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showPayperiod!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showStartWorkOn!: boolean | null;

  @ApiProperty({
    required: false,
    type: () => [SkillEmployee],
  })
  @ValidateNested()
  @Type(() => SkillEmployee)
  @IsOptional()
  skillEmployee?: Array<SkillEmployee>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  stackoverflowUrl!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  startedWorkOn!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [TagEmployee],
  })
  @ValidateNested()
  @Type(() => TagEmployee)
  @IsOptional()
  tagEmployee?: Array<TagEmployee>;

  @ApiProperty({
    required: false,
    type: () => [TaskEmployee],
  })
  @ValidateNested()
  @Type(() => TaskEmployee)
  @IsOptional()
  taskEmployee?: Array<TaskEmployee>;

  @ApiProperty({
    required: false,
    type: () => Tenant,
  })
  @ValidateNested()
  @Type(() => Tenant)
  @IsOptional()
  tenant?: Tenant | null;

  @ApiProperty({
    required: false,
    type: () => [TimeLog],
  })
  @ValidateNested()
  @Type(() => TimeLog)
  @IsOptional()
  timeLog?: Array<TimeLog>;

  @ApiProperty({
    required: false,
    type: () => [TimeOffPolicyEmployee],
  })
  @ValidateNested()
  @Type(() => TimeOffPolicyEmployee)
  @IsOptional()
  timeOffPolicyEmployee?: Array<TimeOffPolicyEmployee>;

  @ApiProperty({
    required: false,
    type: () => [TimeOffRequestEmployee],
  })
  @ValidateNested()
  @Type(() => TimeOffRequestEmployee)
  @IsOptional()
  timeOffRequestEmployee?: Array<TimeOffRequestEmployee>;

  @ApiProperty({
    required: false,
    type: () => [Timesheet],
  })
  @ValidateNested()
  @Type(() => Timesheet)
  @IsOptional()
  timesheet?: Array<Timesheet>;

  @ApiProperty({
    required: false,
    type: () => [TimeSlot],
  })
  @ValidateNested()
  @Type(() => TimeSlot)
  @IsOptional()
  timeSlot?: Array<TimeSlot>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  totalJobs!: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  totalWorkHours!: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  twitterUrl!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  upworkId!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  upworkUrl!: string | null;

  @ApiProperty({
    required: true,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  user?: User;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  valueDate!: Date | null;
}

export { Employee as Employee };
