/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutEmployeesInput } from "./EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutEmployeesInput";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsBoolean,
  IsNumber,
  IsInt,
} from "class-validator";
import { Type } from "class-transformer";
import { EquipmentSharesEmployeeCreateNestedManyWithoutEmployeesInput } from "./EquipmentSharesEmployeeCreateNestedManyWithoutEmployeesInput";
import { EventTypeCreateNestedManyWithoutEmployeesInput } from "./EventTypeCreateNestedManyWithoutEmployeesInput";
import { ExpenseCreateNestedManyWithoutEmployeesInput } from "./ExpenseCreateNestedManyWithoutEmployeesInput";
import { GoalCreateNestedManyWithoutEmployeesInput } from "./GoalCreateNestedManyWithoutEmployeesInput";
import { GoalKpiCreateNestedManyWithoutEmployeesInput } from "./GoalKpiCreateNestedManyWithoutEmployeesInput";
import { GoalKpiTemplateCreateNestedManyWithoutEmployeesInput } from "./GoalKpiTemplateCreateNestedManyWithoutEmployeesInput";
import { IncomeCreateNestedManyWithoutEmployeesInput } from "./IncomeCreateNestedManyWithoutEmployeesInput";
import { InvoiceItemCreateNestedManyWithoutEmployeesInput } from "./InvoiceItemCreateNestedManyWithoutEmployeesInput";
import { Decimal } from "decimal.js";
import { KeyResultCreateNestedManyWithoutEmployeesInput } from "./KeyResultCreateNestedManyWithoutEmployeesInput";
import { KnowledgeBaseAuthorCreateNestedManyWithoutEmployeesInput } from "./KnowledgeBaseAuthorCreateNestedManyWithoutEmployeesInput";
import { ActivityCreateNestedManyWithoutEmployeesInput } from "./ActivityCreateNestedManyWithoutEmployeesInput";
import { AppointmentEmployeeCreateNestedManyWithoutEmployeesInput } from "./AppointmentEmployeeCreateNestedManyWithoutEmployeesInput";
import { AvailabilitySlotCreateNestedManyWithoutEmployeesInput } from "./AvailabilitySlotCreateNestedManyWithoutEmployeesInput";
import { CandidateWhereUniqueInput } from "../../candidate/base/CandidateWhereUniqueInput";
import { CandidateInterviewerCreateNestedManyWithoutEmployeesInput } from "./CandidateInterviewerCreateNestedManyWithoutEmployeesInput";
import { ContactWhereUniqueInput } from "../../contact/base/ContactWhereUniqueInput";
import { EmployeeAppointmentCreateNestedManyWithoutEmployeesInput } from "./EmployeeAppointmentCreateNestedManyWithoutEmployeesInput";
import { EmployeeAwardCreateNestedManyWithoutEmployeesInput } from "./EmployeeAwardCreateNestedManyWithoutEmployeesInput";
import { EmployeeJobPresetCreateNestedManyWithoutEmployeesInput } from "./EmployeeJobPresetCreateNestedManyWithoutEmployeesInput";
import { EmployeePhoneCreateNestedManyWithoutEmployeesInput } from "./EmployeePhoneCreateNestedManyWithoutEmployeesInput";
import { EmployeeProposalTemplateCreateNestedManyWithoutEmployeesInput } from "./EmployeeProposalTemplateCreateNestedManyWithoutEmployeesInput";
import { EmployeeRecurringExpenseCreateNestedManyWithoutEmployeesInput } from "./EmployeeRecurringExpenseCreateNestedManyWithoutEmployeesInput";
import { EmployeeSettingCreateNestedManyWithoutEmployeesInput } from "./EmployeeSettingCreateNestedManyWithoutEmployeesInput";
import { EmployeeTasksTaskCreateNestedManyWithoutEmployeesInput } from "./EmployeeTasksTaskCreateNestedManyWithoutEmployeesInput";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { OrganizationContactEmployeeCreateNestedManyWithoutEmployeesInput } from "./OrganizationContactEmployeeCreateNestedManyWithoutEmployeesInput";
import { OrganizationDepartmentEmployeeCreateNestedManyWithoutEmployeesInput } from "./OrganizationDepartmentEmployeeCreateNestedManyWithoutEmployeesInput";
import { OrganizationEmploymentTypeEmployeeCreateNestedManyWithoutEmployeesInput } from "./OrganizationEmploymentTypeEmployeeCreateNestedManyWithoutEmployeesInput";
import { OrganizationPositionWhereUniqueInput } from "../../organizationPosition/base/OrganizationPositionWhereUniqueInput";
import { OrganizationProjectEmployeeCreateNestedManyWithoutEmployeesInput } from "./OrganizationProjectEmployeeCreateNestedManyWithoutEmployeesInput";
import { OrganizationTeamEmployeeCreateNestedManyWithoutEmployeesInput } from "./OrganizationTeamEmployeeCreateNestedManyWithoutEmployeesInput";
import { PaymentCreateNestedManyWithoutEmployeesInput } from "./PaymentCreateNestedManyWithoutEmployeesInput";
import { ProposalCreateNestedManyWithoutEmployeesInput } from "./ProposalCreateNestedManyWithoutEmployeesInput";
import { RequestApprovalEmployeeCreateNestedManyWithoutEmployeesInput } from "./RequestApprovalEmployeeCreateNestedManyWithoutEmployeesInput";
import { SkillEmployeeCreateNestedManyWithoutEmployeesInput } from "./SkillEmployeeCreateNestedManyWithoutEmployeesInput";
import { TagEmployeeCreateNestedManyWithoutEmployeesInput } from "./TagEmployeeCreateNestedManyWithoutEmployeesInput";
import { TaskEmployeeCreateNestedManyWithoutEmployeesInput } from "./TaskEmployeeCreateNestedManyWithoutEmployeesInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { TimeLogCreateNestedManyWithoutEmployeesInput } from "./TimeLogCreateNestedManyWithoutEmployeesInput";
import { TimeOffPolicyEmployeeCreateNestedManyWithoutEmployeesInput } from "./TimeOffPolicyEmployeeCreateNestedManyWithoutEmployeesInput";
import { TimeOffRequestEmployeeCreateNestedManyWithoutEmployeesInput } from "./TimeOffRequestEmployeeCreateNestedManyWithoutEmployeesInput";
import { TimesheetCreateNestedManyWithoutEmployeesInput } from "./TimesheetCreateNestedManyWithoutEmployeesInput";
import { TimeSlotCreateNestedManyWithoutEmployeesInput } from "./TimeSlotCreateNestedManyWithoutEmployeesInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class EmployeeCreateInput {
  @ApiProperty({
    required: false,
    type: () =>
      EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(
    () => EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutEmployeesInput
  )
  @IsOptional()
  @Field(
    () => EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutEmployeesInput,
    {
      nullable: true,
    }
  )
  employeeUpworkJobSearchCriterion?: EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  endWork?: Date | null;

  @ApiProperty({
    required: false,
    type: () => EquipmentSharesEmployeeCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EquipmentSharesEmployeeCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EquipmentSharesEmployeeCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  equipmentSharesEmployees?: EquipmentSharesEmployeeCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => EventTypeCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EventTypeCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EventTypeCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  eventType?: EventTypeCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => ExpenseCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => ExpenseCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => ExpenseCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  expense?: ExpenseCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  facebookUrl?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  githubUrl?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  gitlabUrl?: string | null;

  @ApiProperty({
    required: false,
    type: () => GoalCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => GoalCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => GoalCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  goalGoalLeadIdToemployee?: GoalCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => GoalCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => GoalCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => GoalCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  goalGoalOwnerEmployeeIdToemployee?: GoalCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => GoalKpiCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => GoalKpiCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => GoalKpiCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  goalKpi?: GoalKpiCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => GoalKpiTemplateCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => GoalKpiTemplateCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => GoalKpiTemplateCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  goalKpiTemplate?: GoalKpiTemplateCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => IncomeCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => IncomeCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => IncomeCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  income?: IncomeCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  instagramUrl?: string | null;

  @ApiProperty({
    required: false,
    type: () => InvoiceItemCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => InvoiceItemCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => InvoiceItemCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  invoiceItem?: InvoiceItemCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isAway?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isJobSearchActive?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isOnline?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isTrackingEnabled?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isTrackingTime?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isVerified?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isVetted?: boolean | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  jobSuccess?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => KeyResultCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => KeyResultCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => KeyResultCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  keyResultKeyResultLeadIdToemployee?: KeyResultCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => KeyResultCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => KeyResultCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => KeyResultCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  keyResultKeyResultOwnerIdToemployee?: KeyResultCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => KnowledgeBaseAuthorCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => KnowledgeBaseAuthorCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => KnowledgeBaseAuthorCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  knowledgeBaseAuthor?: KnowledgeBaseAuthorCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  acceptDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => ActivityCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => ActivityCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => ActivityCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  activity?: ActivityCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  allowScreenshotCapture!: boolean;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  anonymousBonus?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => AppointmentEmployeeCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => AppointmentEmployeeCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => AppointmentEmployeeCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  appointmentEmployee?: AppointmentEmployeeCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => AvailabilitySlotCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => AvailabilitySlotCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => AvailabilitySlotCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  availabilitySlot?: AvailabilitySlotCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  averageBonus?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  averageExpenses?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  averageIncome?: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  billRateCurrency?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  billRateValue?: number | null;

  @ApiProperty({
    required: false,
    type: () => CandidateWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CandidateWhereUniqueInput)
  @IsOptional()
  @Field(() => CandidateWhereUniqueInput, {
    nullable: true,
  })
  candidate?: CandidateWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => CandidateInterviewerCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => CandidateInterviewerCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => CandidateInterviewerCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  candidateInterviewer?: CandidateInterviewerCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => ContactWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ContactWhereUniqueInput)
  @IsOptional()
  @Field(() => ContactWhereUniqueInput, {
    nullable: true,
  })
  contact?: ContactWhereUniqueInput | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  deletedAt?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeAppointmentCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeAppointmentCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeeAppointmentCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeeAppointment?: EmployeeAppointmentCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeAwardCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeAwardCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeeAwardCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeeAward?: EmployeeAwardCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeJobPresetCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeJobPresetCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeeJobPresetCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeeJobPreset?: EmployeeJobPresetCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  employeeLevel?: string | null;

  @ApiProperty({
    required: false,
    type: () => EmployeePhoneCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeePhoneCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeePhoneCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeePhone?: EmployeePhoneCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeProposalTemplateCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeProposalTemplateCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeeProposalTemplateCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeeProposalTemplate?: EmployeeProposalTemplateCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeRecurringExpenseCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeRecurringExpenseCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeeRecurringExpenseCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeeRecurringExpense?: EmployeeRecurringExpenseCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeSettingCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeSettingCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeeSettingCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeeSetting?: EmployeeSettingCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeTasksTaskCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeTasksTaskCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeeTasksTaskCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeeTasksTask?: EmployeeTasksTaskCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  linkedInId?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  linkedInUrl?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  minimumBillingRate?: number | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  offerDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organization?: OrganizationWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () =>
      OrganizationContactEmployeeCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => OrganizationContactEmployeeCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(
    () => OrganizationContactEmployeeCreateNestedManyWithoutEmployeesInput,
    {
      nullable: true,
    }
  )
  organizationContactEmployee?: OrganizationContactEmployeeCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () =>
      OrganizationDepartmentEmployeeCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(
    () => OrganizationDepartmentEmployeeCreateNestedManyWithoutEmployeesInput
  )
  @IsOptional()
  @Field(
    () => OrganizationDepartmentEmployeeCreateNestedManyWithoutEmployeesInput,
    {
      nullable: true,
    }
  )
  organizationDepartmentEmployee?: OrganizationDepartmentEmployeeCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () =>
      OrganizationEmploymentTypeEmployeeCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(
    () =>
      OrganizationEmploymentTypeEmployeeCreateNestedManyWithoutEmployeesInput
  )
  @IsOptional()
  @Field(
    () =>
      OrganizationEmploymentTypeEmployeeCreateNestedManyWithoutEmployeesInput,
    {
      nullable: true,
    }
  )
  organizationEmploymentTypeEmployee?: OrganizationEmploymentTypeEmployeeCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationPositionWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationPositionWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationPositionWhereUniqueInput, {
    nullable: true,
  })
  organizationPosition?: OrganizationPositionWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () =>
      OrganizationProjectEmployeeCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => OrganizationProjectEmployeeCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(
    () => OrganizationProjectEmployeeCreateNestedManyWithoutEmployeesInput,
    {
      nullable: true,
    }
  )
  organizationProjectEmployee?: OrganizationProjectEmployeeCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamEmployeeCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamEmployeeCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => OrganizationTeamEmployeeCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  organizationTeamEmployee?: OrganizationTeamEmployeeCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => PaymentCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => PaymentCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => PaymentCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  payment?: PaymentCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  payPeriod?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  profileLink?: string | null;

  @ApiProperty({
    required: false,
    type: () => ProposalCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => ProposalCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => ProposalCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  proposal?: ProposalCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  rejectDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => RequestApprovalEmployeeCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => RequestApprovalEmployeeCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => RequestApprovalEmployeeCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  requestApprovalEmployee?: RequestApprovalEmployeeCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  reWeeklyLimit?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  shortDescription?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showAnonymousBonus?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showAverageBonus?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showAverageExpenses?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showAverageIncome?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showBillrate?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showPayperiod?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showStartWorkOn?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => SkillEmployeeCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => SkillEmployeeCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => SkillEmployeeCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  skillEmployee?: SkillEmployeeCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  stackoverflowUrl?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  startedWorkOn?: Date | null;

  @ApiProperty({
    required: false,
    type: () => TagEmployeeCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TagEmployeeCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TagEmployeeCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  tagEmployee?: TagEmployeeCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TaskEmployeeCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TaskEmployeeCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TaskEmployeeCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  taskEmployee?: TaskEmployeeCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => TimeLogCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TimeLogCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TimeLogCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  timeLog?: TimeLogCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TimeOffPolicyEmployeeCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TimeOffPolicyEmployeeCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TimeOffPolicyEmployeeCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  timeOffPolicyEmployee?: TimeOffPolicyEmployeeCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TimeOffRequestEmployeeCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TimeOffRequestEmployeeCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TimeOffRequestEmployeeCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  timeOffRequestEmployee?: TimeOffRequestEmployeeCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TimesheetCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TimesheetCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TimesheetCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  timesheet?: TimesheetCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TimeSlotCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TimeSlotCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TimeSlotCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  timeSlot?: TimeSlotCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  totalJobs?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  totalWorkHours?: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  twitterUrl?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  upworkId?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  upworkUrl?: string | null;

  @ApiProperty({
    required: true,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @Field(() => UserWhereUniqueInput)
  user!: UserWhereUniqueInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  valueDate?: Date | null;
}

export { EmployeeCreateInput as EmployeeCreateInput };
