/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EmployeeUpworkJobSearchCriterionUpdateManyWithoutEmployeesInput } from "./EmployeeUpworkJobSearchCriterionUpdateManyWithoutEmployeesInput";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsBoolean,
  IsNumber,
  IsInt,
} from "class-validator";
import { Type } from "class-transformer";
import { EquipmentSharesEmployeeUpdateManyWithoutEmployeesInput } from "./EquipmentSharesEmployeeUpdateManyWithoutEmployeesInput";
import { EventTypeUpdateManyWithoutEmployeesInput } from "./EventTypeUpdateManyWithoutEmployeesInput";
import { ExpenseUpdateManyWithoutEmployeesInput } from "./ExpenseUpdateManyWithoutEmployeesInput";
import { GoalUpdateManyWithoutEmployeesInput } from "./GoalUpdateManyWithoutEmployeesInput";
import { GoalKpiUpdateManyWithoutEmployeesInput } from "./GoalKpiUpdateManyWithoutEmployeesInput";
import { GoalKpiTemplateUpdateManyWithoutEmployeesInput } from "./GoalKpiTemplateUpdateManyWithoutEmployeesInput";
import { IncomeUpdateManyWithoutEmployeesInput } from "./IncomeUpdateManyWithoutEmployeesInput";
import { InvoiceItemUpdateManyWithoutEmployeesInput } from "./InvoiceItemUpdateManyWithoutEmployeesInput";
import { Decimal } from "decimal.js";
import { KeyResultUpdateManyWithoutEmployeesInput } from "./KeyResultUpdateManyWithoutEmployeesInput";
import { KnowledgeBaseAuthorUpdateManyWithoutEmployeesInput } from "./KnowledgeBaseAuthorUpdateManyWithoutEmployeesInput";
import { ActivityUpdateManyWithoutEmployeesInput } from "./ActivityUpdateManyWithoutEmployeesInput";
import { AppointmentEmployeeUpdateManyWithoutEmployeesInput } from "./AppointmentEmployeeUpdateManyWithoutEmployeesInput";
import { AvailabilitySlotUpdateManyWithoutEmployeesInput } from "./AvailabilitySlotUpdateManyWithoutEmployeesInput";
import { CandidateWhereUniqueInput } from "../../candidate/base/CandidateWhereUniqueInput";
import { CandidateInterviewerUpdateManyWithoutEmployeesInput } from "./CandidateInterviewerUpdateManyWithoutEmployeesInput";
import { ContactWhereUniqueInput } from "../../contact/base/ContactWhereUniqueInput";
import { EmployeeAppointmentUpdateManyWithoutEmployeesInput } from "./EmployeeAppointmentUpdateManyWithoutEmployeesInput";
import { EmployeeAwardUpdateManyWithoutEmployeesInput } from "./EmployeeAwardUpdateManyWithoutEmployeesInput";
import { EmployeeJobPresetUpdateManyWithoutEmployeesInput } from "./EmployeeJobPresetUpdateManyWithoutEmployeesInput";
import { EmployeePhoneUpdateManyWithoutEmployeesInput } from "./EmployeePhoneUpdateManyWithoutEmployeesInput";
import { EmployeeProposalTemplateUpdateManyWithoutEmployeesInput } from "./EmployeeProposalTemplateUpdateManyWithoutEmployeesInput";
import { EmployeeRecurringExpenseUpdateManyWithoutEmployeesInput } from "./EmployeeRecurringExpenseUpdateManyWithoutEmployeesInput";
import { EmployeeSettingUpdateManyWithoutEmployeesInput } from "./EmployeeSettingUpdateManyWithoutEmployeesInput";
import { EmployeeTasksTaskUpdateManyWithoutEmployeesInput } from "./EmployeeTasksTaskUpdateManyWithoutEmployeesInput";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { OrganizationContactEmployeeUpdateManyWithoutEmployeesInput } from "./OrganizationContactEmployeeUpdateManyWithoutEmployeesInput";
import { OrganizationDepartmentEmployeeUpdateManyWithoutEmployeesInput } from "./OrganizationDepartmentEmployeeUpdateManyWithoutEmployeesInput";
import { OrganizationEmploymentTypeEmployeeUpdateManyWithoutEmployeesInput } from "./OrganizationEmploymentTypeEmployeeUpdateManyWithoutEmployeesInput";
import { OrganizationPositionWhereUniqueInput } from "../../organizationPosition/base/OrganizationPositionWhereUniqueInput";
import { OrganizationProjectEmployeeUpdateManyWithoutEmployeesInput } from "./OrganizationProjectEmployeeUpdateManyWithoutEmployeesInput";
import { OrganizationTeamEmployeeUpdateManyWithoutEmployeesInput } from "./OrganizationTeamEmployeeUpdateManyWithoutEmployeesInput";
import { PaymentUpdateManyWithoutEmployeesInput } from "./PaymentUpdateManyWithoutEmployeesInput";
import { ProposalUpdateManyWithoutEmployeesInput } from "./ProposalUpdateManyWithoutEmployeesInput";
import { RequestApprovalEmployeeUpdateManyWithoutEmployeesInput } from "./RequestApprovalEmployeeUpdateManyWithoutEmployeesInput";
import { SkillEmployeeUpdateManyWithoutEmployeesInput } from "./SkillEmployeeUpdateManyWithoutEmployeesInput";
import { TagEmployeeUpdateManyWithoutEmployeesInput } from "./TagEmployeeUpdateManyWithoutEmployeesInput";
import { TaskEmployeeUpdateManyWithoutEmployeesInput } from "./TaskEmployeeUpdateManyWithoutEmployeesInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { TimeLogUpdateManyWithoutEmployeesInput } from "./TimeLogUpdateManyWithoutEmployeesInput";
import { TimeOffPolicyEmployeeUpdateManyWithoutEmployeesInput } from "./TimeOffPolicyEmployeeUpdateManyWithoutEmployeesInput";
import { TimeOffRequestEmployeeUpdateManyWithoutEmployeesInput } from "./TimeOffRequestEmployeeUpdateManyWithoutEmployeesInput";
import { TimesheetUpdateManyWithoutEmployeesInput } from "./TimesheetUpdateManyWithoutEmployeesInput";
import { TimeSlotUpdateManyWithoutEmployeesInput } from "./TimeSlotUpdateManyWithoutEmployeesInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class EmployeeUpdateInput {
  @ApiProperty({
    required: false,
    type: () => EmployeeUpworkJobSearchCriterionUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeUpworkJobSearchCriterionUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(
    () => EmployeeUpworkJobSearchCriterionUpdateManyWithoutEmployeesInput,
    {
      nullable: true,
    }
  )
  employeeUpworkJobSearchCriterion?: EmployeeUpworkJobSearchCriterionUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  endWork?: Date | null;

  @ApiProperty({
    required: false,
    type: () => EquipmentSharesEmployeeUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EquipmentSharesEmployeeUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EquipmentSharesEmployeeUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  equipmentSharesEmployees?: EquipmentSharesEmployeeUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => EventTypeUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EventTypeUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EventTypeUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  eventType?: EventTypeUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => ExpenseUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => ExpenseUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => ExpenseUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  expense?: ExpenseUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  facebookUrl?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  githubUrl?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  gitlabUrl?: string | null;

  @ApiProperty({
    required: false,
    type: () => GoalUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => GoalUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => GoalUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  goalGoalLeadIdToemployee?: GoalUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => GoalUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => GoalUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => GoalUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  goalGoalOwnerEmployeeIdToemployee?: GoalUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => GoalKpiUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => GoalKpiUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => GoalKpiUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  goalKpi?: GoalKpiUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => GoalKpiTemplateUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => GoalKpiTemplateUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => GoalKpiTemplateUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  goalKpiTemplate?: GoalKpiTemplateUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => IncomeUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => IncomeUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => IncomeUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  income?: IncomeUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  instagramUrl?: string | null;

  @ApiProperty({
    required: false,
    type: () => InvoiceItemUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => InvoiceItemUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => InvoiceItemUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  invoiceItem?: InvoiceItemUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isAway?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isJobSearchActive?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isOnline?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isTrackingEnabled?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isTrackingTime?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isVerified?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isVetted?: boolean | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  jobSuccess?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => KeyResultUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => KeyResultUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => KeyResultUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  keyResultKeyResultLeadIdToemployee?: KeyResultUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => KeyResultUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => KeyResultUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => KeyResultUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  keyResultKeyResultOwnerIdToemployee?: KeyResultUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => KnowledgeBaseAuthorUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => KnowledgeBaseAuthorUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => KnowledgeBaseAuthorUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  knowledgeBaseAuthor?: KnowledgeBaseAuthorUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  acceptDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => ActivityUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => ActivityUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => ActivityUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  activity?: ActivityUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  allowScreenshotCapture?: boolean;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  anonymousBonus?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => AppointmentEmployeeUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => AppointmentEmployeeUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => AppointmentEmployeeUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  appointmentEmployee?: AppointmentEmployeeUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => AvailabilitySlotUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => AvailabilitySlotUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => AvailabilitySlotUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  availabilitySlot?: AvailabilitySlotUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  averageBonus?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  averageExpenses?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  averageIncome?: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  billRateCurrency?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  billRateValue?: number | null;

  @ApiProperty({
    required: false,
    type: () => CandidateWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CandidateWhereUniqueInput)
  @IsOptional()
  @Field(() => CandidateWhereUniqueInput, {
    nullable: true,
  })
  candidate?: CandidateWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => CandidateInterviewerUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => CandidateInterviewerUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => CandidateInterviewerUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  candidateInterviewer?: CandidateInterviewerUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => ContactWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ContactWhereUniqueInput)
  @IsOptional()
  @Field(() => ContactWhereUniqueInput, {
    nullable: true,
  })
  contact?: ContactWhereUniqueInput | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  deletedAt?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeAppointmentUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeAppointmentUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeeAppointmentUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeeAppointment?: EmployeeAppointmentUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeAwardUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeAwardUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeeAwardUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeeAward?: EmployeeAwardUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeJobPresetUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeJobPresetUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeeJobPresetUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeeJobPreset?: EmployeeJobPresetUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  employeeLevel?: string | null;

  @ApiProperty({
    required: false,
    type: () => EmployeePhoneUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeePhoneUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeePhoneUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeePhone?: EmployeePhoneUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeProposalTemplateUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeProposalTemplateUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeeProposalTemplateUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeeProposalTemplate?: EmployeeProposalTemplateUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeRecurringExpenseUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeRecurringExpenseUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeeRecurringExpenseUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeeRecurringExpense?: EmployeeRecurringExpenseUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeSettingUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeSettingUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeeSettingUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeeSetting?: EmployeeSettingUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeTasksTaskUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeTasksTaskUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EmployeeTasksTaskUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  employeeTasksTask?: EmployeeTasksTaskUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  linkedInId?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  linkedInUrl?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  minimumBillingRate?: number | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  offerDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organization?: OrganizationWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationContactEmployeeUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => OrganizationContactEmployeeUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => OrganizationContactEmployeeUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  organizationContactEmployee?: OrganizationContactEmployeeUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationDepartmentEmployeeUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => OrganizationDepartmentEmployeeUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => OrganizationDepartmentEmployeeUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  organizationDepartmentEmployee?: OrganizationDepartmentEmployeeUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () =>
      OrganizationEmploymentTypeEmployeeUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => OrganizationEmploymentTypeEmployeeUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(
    () => OrganizationEmploymentTypeEmployeeUpdateManyWithoutEmployeesInput,
    {
      nullable: true,
    }
  )
  organizationEmploymentTypeEmployee?: OrganizationEmploymentTypeEmployeeUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationPositionWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationPositionWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationPositionWhereUniqueInput, {
    nullable: true,
  })
  organizationPosition?: OrganizationPositionWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationProjectEmployeeUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => OrganizationProjectEmployeeUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => OrganizationProjectEmployeeUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  organizationProjectEmployee?: OrganizationProjectEmployeeUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamEmployeeUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamEmployeeUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => OrganizationTeamEmployeeUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  organizationTeamEmployee?: OrganizationTeamEmployeeUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => PaymentUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => PaymentUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => PaymentUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  payment?: PaymentUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  payPeriod?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  profileLink?: string | null;

  @ApiProperty({
    required: false,
    type: () => ProposalUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => ProposalUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => ProposalUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  proposal?: ProposalUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  rejectDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => RequestApprovalEmployeeUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => RequestApprovalEmployeeUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => RequestApprovalEmployeeUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  requestApprovalEmployee?: RequestApprovalEmployeeUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  reWeeklyLimit?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  shortDescription?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showAnonymousBonus?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showAverageBonus?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showAverageExpenses?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showAverageIncome?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showBillrate?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showPayperiod?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showStartWorkOn?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => SkillEmployeeUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => SkillEmployeeUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => SkillEmployeeUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  skillEmployee?: SkillEmployeeUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  stackoverflowUrl?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  startedWorkOn?: Date | null;

  @ApiProperty({
    required: false,
    type: () => TagEmployeeUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TagEmployeeUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TagEmployeeUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  tagEmployee?: TagEmployeeUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TaskEmployeeUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TaskEmployeeUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TaskEmployeeUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  taskEmployee?: TaskEmployeeUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => TimeLogUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TimeLogUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TimeLogUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  timeLog?: TimeLogUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TimeOffPolicyEmployeeUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TimeOffPolicyEmployeeUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TimeOffPolicyEmployeeUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  timeOffPolicyEmployee?: TimeOffPolicyEmployeeUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TimeOffRequestEmployeeUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TimeOffRequestEmployeeUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TimeOffRequestEmployeeUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  timeOffRequestEmployee?: TimeOffRequestEmployeeUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TimesheetUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TimesheetUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TimesheetUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  timesheet?: TimesheetUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TimeSlotUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TimeSlotUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TimeSlotUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  timeSlot?: TimeSlotUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  totalJobs?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  totalWorkHours?: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  twitterUrl?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  upworkId?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  upworkUrl?: string | null;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  valueDate?: Date | null;
}

export { EmployeeUpdateInput as EmployeeUpdateInput };
