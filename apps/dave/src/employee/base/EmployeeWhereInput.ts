/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EmployeeUpworkJobSearchCriterionListRelationFilter } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterionListRelationFilter";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { EquipmentSharesEmployeeListRelationFilter } from "../../equipmentSharesEmployee/base/EquipmentSharesEmployeeListRelationFilter";
import { EventTypeListRelationFilter } from "../../eventType/base/EventTypeListRelationFilter";
import { ExpenseListRelationFilter } from "../../expense/base/ExpenseListRelationFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { GoalListRelationFilter } from "../../goal/base/GoalListRelationFilter";
import { GoalKpiListRelationFilter } from "../../goalKpi/base/GoalKpiListRelationFilter";
import { GoalKpiTemplateListRelationFilter } from "../../goalKpiTemplate/base/GoalKpiTemplateListRelationFilter";
import { StringFilter } from "../../util/StringFilter";
import { IncomeListRelationFilter } from "../../income/base/IncomeListRelationFilter";
import { InvoiceItemListRelationFilter } from "../../invoiceItem/base/InvoiceItemListRelationFilter";
import { BooleanNullableFilter } from "../../util/BooleanNullableFilter";
import { DecimalNullableFilter } from "../../util/DecimalNullableFilter";
import { KeyResultListRelationFilter } from "../../keyResult/base/KeyResultListRelationFilter";
import { KnowledgeBaseAuthorListRelationFilter } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthorListRelationFilter";
import { ActivityListRelationFilter } from "../../activity/base/ActivityListRelationFilter";
import { BooleanFilter } from "../../util/BooleanFilter";
import { AppointmentEmployeeListRelationFilter } from "../../appointmentEmployee/base/AppointmentEmployeeListRelationFilter";
import { AvailabilitySlotListRelationFilter } from "../../availabilitySlot/base/AvailabilitySlotListRelationFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { CandidateWhereUniqueInput } from "../../candidate/base/CandidateWhereUniqueInput";
import { CandidateInterviewerListRelationFilter } from "../../candidateInterviewer/base/CandidateInterviewerListRelationFilter";
import { ContactWhereUniqueInput } from "../../contact/base/ContactWhereUniqueInput";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { EmployeeAppointmentListRelationFilter } from "../../employeeAppointment/base/EmployeeAppointmentListRelationFilter";
import { EmployeeAwardListRelationFilter } from "../../employeeAward/base/EmployeeAwardListRelationFilter";
import { EmployeeJobPresetListRelationFilter } from "../../employeeJobPreset/base/EmployeeJobPresetListRelationFilter";
import { EmployeePhoneListRelationFilter } from "../../employeePhone/base/EmployeePhoneListRelationFilter";
import { EmployeeProposalTemplateListRelationFilter } from "../../employeeProposalTemplate/base/EmployeeProposalTemplateListRelationFilter";
import { EmployeeRecurringExpenseListRelationFilter } from "../../employeeRecurringExpense/base/EmployeeRecurringExpenseListRelationFilter";
import { EmployeeSettingListRelationFilter } from "../../employeeSetting/base/EmployeeSettingListRelationFilter";
import { EmployeeTasksTaskListRelationFilter } from "../../employeeTasksTask/base/EmployeeTasksTaskListRelationFilter";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { OrganizationContactEmployeeListRelationFilter } from "../../organizationContactEmployee/base/OrganizationContactEmployeeListRelationFilter";
import { OrganizationDepartmentEmployeeListRelationFilter } from "../../organizationDepartmentEmployee/base/OrganizationDepartmentEmployeeListRelationFilter";
import { OrganizationEmploymentTypeEmployeeListRelationFilter } from "../../organizationEmploymentTypeEmployee/base/OrganizationEmploymentTypeEmployeeListRelationFilter";
import { OrganizationPositionWhereUniqueInput } from "../../organizationPosition/base/OrganizationPositionWhereUniqueInput";
import { OrganizationProjectEmployeeListRelationFilter } from "../../organizationProjectEmployee/base/OrganizationProjectEmployeeListRelationFilter";
import { OrganizationTeamEmployeeListRelationFilter } from "../../organizationTeamEmployee/base/OrganizationTeamEmployeeListRelationFilter";
import { PaymentListRelationFilter } from "../../payment/base/PaymentListRelationFilter";
import { ProposalListRelationFilter } from "../../proposal/base/ProposalListRelationFilter";
import { RequestApprovalEmployeeListRelationFilter } from "../../requestApprovalEmployee/base/RequestApprovalEmployeeListRelationFilter";
import { SkillEmployeeListRelationFilter } from "../../skillEmployee/base/SkillEmployeeListRelationFilter";
import { TagEmployeeListRelationFilter } from "../../tagEmployee/base/TagEmployeeListRelationFilter";
import { TaskEmployeeListRelationFilter } from "../../taskEmployee/base/TaskEmployeeListRelationFilter";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { TimeLogListRelationFilter } from "../../timeLog/base/TimeLogListRelationFilter";
import { TimeOffPolicyEmployeeListRelationFilter } from "../../timeOffPolicyEmployee/base/TimeOffPolicyEmployeeListRelationFilter";
import { TimeOffRequestEmployeeListRelationFilter } from "../../timeOffRequestEmployee/base/TimeOffRequestEmployeeListRelationFilter";
import { TimesheetListRelationFilter } from "../../timesheet/base/TimesheetListRelationFilter";
import { TimeSlotListRelationFilter } from "../../timeSlot/base/TimeSlotListRelationFilter";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class EmployeeWhereInput {
  @ApiProperty({
    required: false,
    type: () => EmployeeUpworkJobSearchCriterionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmployeeUpworkJobSearchCriterionListRelationFilter)
  @IsOptional()
  @Field(() => EmployeeUpworkJobSearchCriterionListRelationFilter, {
    nullable: true,
  })
  employeeUpworkJobSearchCriterion?: EmployeeUpworkJobSearchCriterionListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  endWork?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => EquipmentSharesEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EquipmentSharesEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => EquipmentSharesEmployeeListRelationFilter, {
    nullable: true,
  })
  equipmentSharesEmployees?: EquipmentSharesEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EventTypeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EventTypeListRelationFilter)
  @IsOptional()
  @Field(() => EventTypeListRelationFilter, {
    nullable: true,
  })
  eventType?: EventTypeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ExpenseListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ExpenseListRelationFilter)
  @IsOptional()
  @Field(() => ExpenseListRelationFilter, {
    nullable: true,
  })
  expense?: ExpenseListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  facebookUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  githubUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  gitlabUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => GoalListRelationFilter,
  })
  @ValidateNested()
  @Type(() => GoalListRelationFilter)
  @IsOptional()
  @Field(() => GoalListRelationFilter, {
    nullable: true,
  })
  goalGoalLeadIdToemployee?: GoalListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => GoalListRelationFilter,
  })
  @ValidateNested()
  @Type(() => GoalListRelationFilter)
  @IsOptional()
  @Field(() => GoalListRelationFilter, {
    nullable: true,
  })
  goalGoalOwnerEmployeeIdToemployee?: GoalListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => GoalKpiListRelationFilter,
  })
  @ValidateNested()
  @Type(() => GoalKpiListRelationFilter)
  @IsOptional()
  @Field(() => GoalKpiListRelationFilter, {
    nullable: true,
  })
  goalKpi?: GoalKpiListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => GoalKpiTemplateListRelationFilter,
  })
  @ValidateNested()
  @Type(() => GoalKpiTemplateListRelationFilter)
  @IsOptional()
  @Field(() => GoalKpiTemplateListRelationFilter, {
    nullable: true,
  })
  goalKpiTemplate?: GoalKpiTemplateListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => IncomeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => IncomeListRelationFilter)
  @IsOptional()
  @Field(() => IncomeListRelationFilter, {
    nullable: true,
  })
  income?: IncomeListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  instagramUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => InvoiceItemListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InvoiceItemListRelationFilter)
  @IsOptional()
  @Field(() => InvoiceItemListRelationFilter, {
    nullable: true,
  })
  invoiceItem?: InvoiceItemListRelationFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isActive?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isAway?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isJobSearchActive?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isOnline?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isTrackingEnabled?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isTrackingTime?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isVerified?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isVetted?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: DecimalNullableFilter,
  })
  @Type(() => DecimalNullableFilter)
  @IsOptional()
  @Field(() => DecimalNullableFilter, {
    nullable: true,
  })
  jobSuccess?: DecimalNullableFilter;

  @ApiProperty({
    required: false,
    type: () => KeyResultListRelationFilter,
  })
  @ValidateNested()
  @Type(() => KeyResultListRelationFilter)
  @IsOptional()
  @Field(() => KeyResultListRelationFilter, {
    nullable: true,
  })
  keyResultKeyResultLeadIdToemployee?: KeyResultListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => KeyResultListRelationFilter,
  })
  @ValidateNested()
  @Type(() => KeyResultListRelationFilter)
  @IsOptional()
  @Field(() => KeyResultListRelationFilter, {
    nullable: true,
  })
  keyResultKeyResultOwnerIdToemployee?: KeyResultListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => KnowledgeBaseAuthorListRelationFilter,
  })
  @ValidateNested()
  @Type(() => KnowledgeBaseAuthorListRelationFilter)
  @IsOptional()
  @Field(() => KnowledgeBaseAuthorListRelationFilter, {
    nullable: true,
  })
  knowledgeBaseAuthor?: KnowledgeBaseAuthorListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  acceptDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ActivityListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ActivityListRelationFilter)
  @IsOptional()
  @Field(() => ActivityListRelationFilter, {
    nullable: true,
  })
  activity?: ActivityListRelationFilter;

  @ApiProperty({
    required: false,
    type: BooleanFilter,
  })
  @Type(() => BooleanFilter)
  @IsOptional()
  @Field(() => BooleanFilter, {
    nullable: true,
  })
  allowScreenshotCapture?: BooleanFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  anonymousBonus?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: () => AppointmentEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AppointmentEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => AppointmentEmployeeListRelationFilter, {
    nullable: true,
  })
  appointmentEmployee?: AppointmentEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => AvailabilitySlotListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AvailabilitySlotListRelationFilter)
  @IsOptional()
  @Field(() => AvailabilitySlotListRelationFilter, {
    nullable: true,
  })
  availabilitySlot?: AvailabilitySlotListRelationFilter;

  @ApiProperty({
    required: false,
    type: DecimalNullableFilter,
  })
  @Type(() => DecimalNullableFilter)
  @IsOptional()
  @Field(() => DecimalNullableFilter, {
    nullable: true,
  })
  averageBonus?: DecimalNullableFilter;

  @ApiProperty({
    required: false,
    type: DecimalNullableFilter,
  })
  @Type(() => DecimalNullableFilter)
  @IsOptional()
  @Field(() => DecimalNullableFilter, {
    nullable: true,
  })
  averageExpenses?: DecimalNullableFilter;

  @ApiProperty({
    required: false,
    type: DecimalNullableFilter,
  })
  @Type(() => DecimalNullableFilter)
  @IsOptional()
  @Field(() => DecimalNullableFilter, {
    nullable: true,
  })
  averageIncome?: DecimalNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  billRateCurrency?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  billRateValue?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => CandidateWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CandidateWhereUniqueInput)
  @IsOptional()
  @Field(() => CandidateWhereUniqueInput, {
    nullable: true,
  })
  candidate?: CandidateWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => CandidateInterviewerListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CandidateInterviewerListRelationFilter)
  @IsOptional()
  @Field(() => CandidateInterviewerListRelationFilter, {
    nullable: true,
  })
  candidateInterviewer?: CandidateInterviewerListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ContactWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ContactWhereUniqueInput)
  @IsOptional()
  @Field(() => ContactWhereUniqueInput, {
    nullable: true,
  })
  contact?: ContactWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  createdAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  deletedAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  description?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => EmployeeAppointmentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmployeeAppointmentListRelationFilter)
  @IsOptional()
  @Field(() => EmployeeAppointmentListRelationFilter, {
    nullable: true,
  })
  employeeAppointment?: EmployeeAppointmentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EmployeeAwardListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmployeeAwardListRelationFilter)
  @IsOptional()
  @Field(() => EmployeeAwardListRelationFilter, {
    nullable: true,
  })
  employeeAward?: EmployeeAwardListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EmployeeJobPresetListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmployeeJobPresetListRelationFilter)
  @IsOptional()
  @Field(() => EmployeeJobPresetListRelationFilter, {
    nullable: true,
  })
  employeeJobPreset?: EmployeeJobPresetListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  employeeLevel?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => EmployeePhoneListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmployeePhoneListRelationFilter)
  @IsOptional()
  @Field(() => EmployeePhoneListRelationFilter, {
    nullable: true,
  })
  employeePhone?: EmployeePhoneListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EmployeeProposalTemplateListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmployeeProposalTemplateListRelationFilter)
  @IsOptional()
  @Field(() => EmployeeProposalTemplateListRelationFilter, {
    nullable: true,
  })
  employeeProposalTemplate?: EmployeeProposalTemplateListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EmployeeRecurringExpenseListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmployeeRecurringExpenseListRelationFilter)
  @IsOptional()
  @Field(() => EmployeeRecurringExpenseListRelationFilter, {
    nullable: true,
  })
  employeeRecurringExpense?: EmployeeRecurringExpenseListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EmployeeSettingListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmployeeSettingListRelationFilter)
  @IsOptional()
  @Field(() => EmployeeSettingListRelationFilter, {
    nullable: true,
  })
  employeeSetting?: EmployeeSettingListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EmployeeTasksTaskListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmployeeTasksTaskListRelationFilter)
  @IsOptional()
  @Field(() => EmployeeTasksTaskListRelationFilter, {
    nullable: true,
  })
  employeeTasksTask?: EmployeeTasksTaskListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  linkedInId?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  linkedInUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  minimumBillingRate?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  offerDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organization?: OrganizationWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationContactEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationContactEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationContactEmployeeListRelationFilter, {
    nullable: true,
  })
  organizationContactEmployee?: OrganizationContactEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationDepartmentEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationDepartmentEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationDepartmentEmployeeListRelationFilter, {
    nullable: true,
  })
  organizationDepartmentEmployee?: OrganizationDepartmentEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationEmploymentTypeEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationEmploymentTypeEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationEmploymentTypeEmployeeListRelationFilter, {
    nullable: true,
  })
  organizationEmploymentTypeEmployee?: OrganizationEmploymentTypeEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationPositionWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationPositionWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationPositionWhereUniqueInput, {
    nullable: true,
  })
  organizationPosition?: OrganizationPositionWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationProjectEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationProjectEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationProjectEmployeeListRelationFilter, {
    nullable: true,
  })
  organizationProjectEmployee?: OrganizationProjectEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationTeamEmployeeListRelationFilter, {
    nullable: true,
  })
  organizationTeamEmployee?: OrganizationTeamEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => PaymentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PaymentListRelationFilter)
  @IsOptional()
  @Field(() => PaymentListRelationFilter, {
    nullable: true,
  })
  payment?: PaymentListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  payPeriod?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  profileLink?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ProposalListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProposalListRelationFilter)
  @IsOptional()
  @Field(() => ProposalListRelationFilter, {
    nullable: true,
  })
  proposal?: ProposalListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  rejectDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => RequestApprovalEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => RequestApprovalEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => RequestApprovalEmployeeListRelationFilter, {
    nullable: true,
  })
  requestApprovalEmployee?: RequestApprovalEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  reWeeklyLimit?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  shortDescription?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  showAnonymousBonus?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  showAverageBonus?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  showAverageExpenses?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  showAverageIncome?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  showBillrate?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  showPayperiod?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  showStartWorkOn?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: () => SkillEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SkillEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => SkillEmployeeListRelationFilter, {
    nullable: true,
  })
  skillEmployee?: SkillEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  stackoverflowUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  startedWorkOn?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => TagEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TagEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => TagEmployeeListRelationFilter, {
    nullable: true,
  })
  tagEmployee?: TagEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TaskEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TaskEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => TaskEmployeeListRelationFilter, {
    nullable: true,
  })
  taskEmployee?: TaskEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => TimeLogListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TimeLogListRelationFilter)
  @IsOptional()
  @Field(() => TimeLogListRelationFilter, {
    nullable: true,
  })
  timeLog?: TimeLogListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TimeOffPolicyEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TimeOffPolicyEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => TimeOffPolicyEmployeeListRelationFilter, {
    nullable: true,
  })
  timeOffPolicyEmployee?: TimeOffPolicyEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TimeOffRequestEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TimeOffRequestEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => TimeOffRequestEmployeeListRelationFilter, {
    nullable: true,
  })
  timeOffRequestEmployee?: TimeOffRequestEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TimesheetListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TimesheetListRelationFilter)
  @IsOptional()
  @Field(() => TimesheetListRelationFilter, {
    nullable: true,
  })
  timesheet?: TimesheetListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TimeSlotListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TimeSlotListRelationFilter)
  @IsOptional()
  @Field(() => TimeSlotListRelationFilter, {
    nullable: true,
  })
  timeSlot?: TimeSlotListRelationFilter;

  @ApiProperty({
    required: false,
    type: DecimalNullableFilter,
  })
  @Type(() => DecimalNullableFilter)
  @IsOptional()
  @Field(() => DecimalNullableFilter, {
    nullable: true,
  })
  totalJobs?: DecimalNullableFilter;

  @ApiProperty({
    required: false,
    type: DecimalNullableFilter,
  })
  @Type(() => DecimalNullableFilter)
  @IsOptional()
  @Field(() => DecimalNullableFilter, {
    nullable: true,
  })
  totalWorkHours?: DecimalNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  twitterUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  upworkId?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  upworkUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  valueDate?: DateTimeNullableFilter;
}

export { EmployeeWhereInput as EmployeeWhereInput };
