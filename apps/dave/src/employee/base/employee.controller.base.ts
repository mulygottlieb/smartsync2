/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmployeeService } from "../employee.service";
import { EmployeeCreateInput } from "./EmployeeCreateInput";
import { EmployeeWhereInput } from "./EmployeeWhereInput";
import { EmployeeWhereUniqueInput } from "./EmployeeWhereUniqueInput";
import { EmployeeFindManyArgs } from "./EmployeeFindManyArgs";
import { EmployeeUpdateInput } from "./EmployeeUpdateInput";
import { Employee } from "./Employee";
import { EmployeeUpworkJobSearchCriterionFindManyArgs } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterionFindManyArgs";
import { EmployeeUpworkJobSearchCriterion } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterion";
import { EmployeeUpworkJobSearchCriterionWhereUniqueInput } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterionWhereUniqueInput";
import { EquipmentSharesEmployeeFindManyArgs } from "../../equipmentSharesEmployee/base/EquipmentSharesEmployeeFindManyArgs";
import { EquipmentSharesEmployee } from "../../equipmentSharesEmployee/base/EquipmentSharesEmployee";
import { EquipmentSharesEmployeeWhereUniqueInput } from "../../equipmentSharesEmployee/base/EquipmentSharesEmployeeWhereUniqueInput";
import { EventTypeFindManyArgs } from "../../eventType/base/EventTypeFindManyArgs";
import { EventType } from "../../eventType/base/EventType";
import { EventTypeWhereUniqueInput } from "../../eventType/base/EventTypeWhereUniqueInput";
import { ExpenseFindManyArgs } from "../../expense/base/ExpenseFindManyArgs";
import { Expense } from "../../expense/base/Expense";
import { ExpenseWhereUniqueInput } from "../../expense/base/ExpenseWhereUniqueInput";
import { GoalFindManyArgs } from "../../goal/base/GoalFindManyArgs";
import { Goal } from "../../goal/base/Goal";
import { GoalWhereUniqueInput } from "../../goal/base/GoalWhereUniqueInput";
import { GoalKpiFindManyArgs } from "../../goalKpi/base/GoalKpiFindManyArgs";
import { GoalKpi } from "../../goalKpi/base/GoalKpi";
import { GoalKpiWhereUniqueInput } from "../../goalKpi/base/GoalKpiWhereUniqueInput";
import { GoalKpiTemplateFindManyArgs } from "../../goalKpiTemplate/base/GoalKpiTemplateFindManyArgs";
import { GoalKpiTemplate } from "../../goalKpiTemplate/base/GoalKpiTemplate";
import { GoalKpiTemplateWhereUniqueInput } from "../../goalKpiTemplate/base/GoalKpiTemplateWhereUniqueInput";
import { IncomeFindManyArgs } from "../../income/base/IncomeFindManyArgs";
import { Income } from "../../income/base/Income";
import { IncomeWhereUniqueInput } from "../../income/base/IncomeWhereUniqueInput";
import { InvoiceItemFindManyArgs } from "../../invoiceItem/base/InvoiceItemFindManyArgs";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { InvoiceItemWhereUniqueInput } from "../../invoiceItem/base/InvoiceItemWhereUniqueInput";
import { KeyResultFindManyArgs } from "../../keyResult/base/KeyResultFindManyArgs";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { KeyResultWhereUniqueInput } from "../../keyResult/base/KeyResultWhereUniqueInput";
import { KnowledgeBaseAuthorFindManyArgs } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthorFindManyArgs";
import { KnowledgeBaseAuthor } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthor";
import { KnowledgeBaseAuthorWhereUniqueInput } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthorWhereUniqueInput";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { ActivityWhereUniqueInput } from "../../activity/base/ActivityWhereUniqueInput";
import { AppointmentEmployeeFindManyArgs } from "../../appointmentEmployee/base/AppointmentEmployeeFindManyArgs";
import { AppointmentEmployee } from "../../appointmentEmployee/base/AppointmentEmployee";
import { AppointmentEmployeeWhereUniqueInput } from "../../appointmentEmployee/base/AppointmentEmployeeWhereUniqueInput";
import { AvailabilitySlotFindManyArgs } from "../../availabilitySlot/base/AvailabilitySlotFindManyArgs";
import { AvailabilitySlot } from "../../availabilitySlot/base/AvailabilitySlot";
import { AvailabilitySlotWhereUniqueInput } from "../../availabilitySlot/base/AvailabilitySlotWhereUniqueInput";
import { CandidateInterviewerFindManyArgs } from "../../candidateInterviewer/base/CandidateInterviewerFindManyArgs";
import { CandidateInterviewer } from "../../candidateInterviewer/base/CandidateInterviewer";
import { CandidateInterviewerWhereUniqueInput } from "../../candidateInterviewer/base/CandidateInterviewerWhereUniqueInput";
import { EmployeeAppointmentFindManyArgs } from "../../employeeAppointment/base/EmployeeAppointmentFindManyArgs";
import { EmployeeAppointment } from "../../employeeAppointment/base/EmployeeAppointment";
import { EmployeeAppointmentWhereUniqueInput } from "../../employeeAppointment/base/EmployeeAppointmentWhereUniqueInput";
import { EmployeeAwardFindManyArgs } from "../../employeeAward/base/EmployeeAwardFindManyArgs";
import { EmployeeAward } from "../../employeeAward/base/EmployeeAward";
import { EmployeeAwardWhereUniqueInput } from "../../employeeAward/base/EmployeeAwardWhereUniqueInput";
import { EmployeeJobPresetFindManyArgs } from "../../employeeJobPreset/base/EmployeeJobPresetFindManyArgs";
import { EmployeeJobPreset } from "../../employeeJobPreset/base/EmployeeJobPreset";
import { EmployeeJobPresetWhereUniqueInput } from "../../employeeJobPreset/base/EmployeeJobPresetWhereUniqueInput";
import { EmployeePhoneFindManyArgs } from "../../employeePhone/base/EmployeePhoneFindManyArgs";
import { EmployeePhone } from "../../employeePhone/base/EmployeePhone";
import { EmployeePhoneWhereUniqueInput } from "../../employeePhone/base/EmployeePhoneWhereUniqueInput";
import { EmployeeProposalTemplateFindManyArgs } from "../../employeeProposalTemplate/base/EmployeeProposalTemplateFindManyArgs";
import { EmployeeProposalTemplate } from "../../employeeProposalTemplate/base/EmployeeProposalTemplate";
import { EmployeeProposalTemplateWhereUniqueInput } from "../../employeeProposalTemplate/base/EmployeeProposalTemplateWhereUniqueInput";
import { EmployeeRecurringExpenseFindManyArgs } from "../../employeeRecurringExpense/base/EmployeeRecurringExpenseFindManyArgs";
import { EmployeeRecurringExpense } from "../../employeeRecurringExpense/base/EmployeeRecurringExpense";
import { EmployeeRecurringExpenseWhereUniqueInput } from "../../employeeRecurringExpense/base/EmployeeRecurringExpenseWhereUniqueInput";
import { EmployeeSettingFindManyArgs } from "../../employeeSetting/base/EmployeeSettingFindManyArgs";
import { EmployeeSetting } from "../../employeeSetting/base/EmployeeSetting";
import { EmployeeSettingWhereUniqueInput } from "../../employeeSetting/base/EmployeeSettingWhereUniqueInput";
import { EmployeeTasksTaskFindManyArgs } from "../../employeeTasksTask/base/EmployeeTasksTaskFindManyArgs";
import { EmployeeTasksTask } from "../../employeeTasksTask/base/EmployeeTasksTask";
import { EmployeeTasksTaskWhereUniqueInput } from "../../employeeTasksTask/base/EmployeeTasksTaskWhereUniqueInput";
import { OrganizationContactEmployeeFindManyArgs } from "../../organizationContactEmployee/base/OrganizationContactEmployeeFindManyArgs";
import { OrganizationContactEmployee } from "../../organizationContactEmployee/base/OrganizationContactEmployee";
import { OrganizationContactEmployeeWhereUniqueInput } from "../../organizationContactEmployee/base/OrganizationContactEmployeeWhereUniqueInput";
import { OrganizationDepartmentEmployeeFindManyArgs } from "../../organizationDepartmentEmployee/base/OrganizationDepartmentEmployeeFindManyArgs";
import { OrganizationDepartmentEmployee } from "../../organizationDepartmentEmployee/base/OrganizationDepartmentEmployee";
import { OrganizationDepartmentEmployeeWhereUniqueInput } from "../../organizationDepartmentEmployee/base/OrganizationDepartmentEmployeeWhereUniqueInput";
import { OrganizationEmploymentTypeEmployeeFindManyArgs } from "../../organizationEmploymentTypeEmployee/base/OrganizationEmploymentTypeEmployeeFindManyArgs";
import { OrganizationEmploymentTypeEmployee } from "../../organizationEmploymentTypeEmployee/base/OrganizationEmploymentTypeEmployee";
import { OrganizationEmploymentTypeEmployeeWhereUniqueInput } from "../../organizationEmploymentTypeEmployee/base/OrganizationEmploymentTypeEmployeeWhereUniqueInput";
import { OrganizationProjectEmployeeFindManyArgs } from "../../organizationProjectEmployee/base/OrganizationProjectEmployeeFindManyArgs";
import { OrganizationProjectEmployee } from "../../organizationProjectEmployee/base/OrganizationProjectEmployee";
import { OrganizationProjectEmployeeWhereUniqueInput } from "../../organizationProjectEmployee/base/OrganizationProjectEmployeeWhereUniqueInput";
import { OrganizationTeamEmployeeFindManyArgs } from "../../organizationTeamEmployee/base/OrganizationTeamEmployeeFindManyArgs";
import { OrganizationTeamEmployee } from "../../organizationTeamEmployee/base/OrganizationTeamEmployee";
import { OrganizationTeamEmployeeWhereUniqueInput } from "../../organizationTeamEmployee/base/OrganizationTeamEmployeeWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { ProposalFindManyArgs } from "../../proposal/base/ProposalFindManyArgs";
import { Proposal } from "../../proposal/base/Proposal";
import { ProposalWhereUniqueInput } from "../../proposal/base/ProposalWhereUniqueInput";
import { RequestApprovalEmployeeFindManyArgs } from "../../requestApprovalEmployee/base/RequestApprovalEmployeeFindManyArgs";
import { RequestApprovalEmployee } from "../../requestApprovalEmployee/base/RequestApprovalEmployee";
import { RequestApprovalEmployeeWhereUniqueInput } from "../../requestApprovalEmployee/base/RequestApprovalEmployeeWhereUniqueInput";
import { SkillEmployeeFindManyArgs } from "../../skillEmployee/base/SkillEmployeeFindManyArgs";
import { SkillEmployee } from "../../skillEmployee/base/SkillEmployee";
import { SkillEmployeeWhereUniqueInput } from "../../skillEmployee/base/SkillEmployeeWhereUniqueInput";
import { TagEmployeeFindManyArgs } from "../../tagEmployee/base/TagEmployeeFindManyArgs";
import { TagEmployee } from "../../tagEmployee/base/TagEmployee";
import { TagEmployeeWhereUniqueInput } from "../../tagEmployee/base/TagEmployeeWhereUniqueInput";
import { TaskEmployeeFindManyArgs } from "../../taskEmployee/base/TaskEmployeeFindManyArgs";
import { TaskEmployee } from "../../taskEmployee/base/TaskEmployee";
import { TaskEmployeeWhereUniqueInput } from "../../taskEmployee/base/TaskEmployeeWhereUniqueInput";
import { TimeLogFindManyArgs } from "../../timeLog/base/TimeLogFindManyArgs";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { TimeLogWhereUniqueInput } from "../../timeLog/base/TimeLogWhereUniqueInput";
import { TimeOffPolicyEmployeeFindManyArgs } from "../../timeOffPolicyEmployee/base/TimeOffPolicyEmployeeFindManyArgs";
import { TimeOffPolicyEmployee } from "../../timeOffPolicyEmployee/base/TimeOffPolicyEmployee";
import { TimeOffPolicyEmployeeWhereUniqueInput } from "../../timeOffPolicyEmployee/base/TimeOffPolicyEmployeeWhereUniqueInput";
import { TimeOffRequestEmployeeFindManyArgs } from "../../timeOffRequestEmployee/base/TimeOffRequestEmployeeFindManyArgs";
import { TimeOffRequestEmployee } from "../../timeOffRequestEmployee/base/TimeOffRequestEmployee";
import { TimeOffRequestEmployeeWhereUniqueInput } from "../../timeOffRequestEmployee/base/TimeOffRequestEmployeeWhereUniqueInput";
import { TimesheetFindManyArgs } from "../../timesheet/base/TimesheetFindManyArgs";
import { Timesheet } from "../../timesheet/base/Timesheet";
import { TimesheetWhereUniqueInput } from "../../timesheet/base/TimesheetWhereUniqueInput";
import { TimeSlotFindManyArgs } from "../../timeSlot/base/TimeSlotFindManyArgs";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { TimeSlotWhereUniqueInput } from "../../timeSlot/base/TimeSlotWhereUniqueInput";

export class EmployeeControllerBase {
  constructor(protected readonly service: EmployeeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Employee })
  async create(@common.Body() data: EmployeeCreateInput): Promise<Employee> {
    return await this.service.create({
      data: {
        ...data,

        candidate: data.candidate
          ? {
              connect: data.candidate,
            }
          : undefined,

        contact: data.contact
          ? {
              connect: data.contact,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        organizationPosition: data.organizationPosition
          ? {
              connect: data.organizationPosition,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        user: {
          connect: data.user,
        },
      },
      select: {
        endWork: true,
        facebookUrl: true,
        githubUrl: true,
        gitlabUrl: true,
        id: true,
        instagramUrl: true,
        isActive: true,
        isAway: true,
        isJobSearchActive: true,
        isOnline: true,
        isTrackingEnabled: true,
        isTrackingTime: true,
        isVerified: true,
        isVetted: true,
        jobSuccess: true,
        acceptDate: true,
        allowScreenshotCapture: true,
        anonymousBonus: true,
        averageBonus: true,
        averageExpenses: true,
        averageIncome: true,
        billRateCurrency: true,
        billRateValue: true,

        candidate: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deletedAt: true,
        description: true,
        employeeLevel: true,
        linkedInId: true,
        linkedInUrl: true,
        minimumBillingRate: true,
        offerDate: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationPosition: {
          select: {
            id: true,
          },
        },

        payPeriod: true,
        profileLink: true,
        rejectDate: true,
        reWeeklyLimit: true,
        shortDescription: true,
        showAnonymousBonus: true,
        showAverageBonus: true,
        showAverageExpenses: true,
        showAverageIncome: true,
        showBillrate: true,
        showPayperiod: true,
        showStartWorkOn: true,
        stackoverflowUrl: true,
        startedWorkOn: true,

        tenant: {
          select: {
            id: true,
          },
        },

        totalJobs: true,
        totalWorkHours: true,
        twitterUrl: true,
        updatedAt: true,
        upworkId: true,
        upworkUrl: true,

        user: {
          select: {
            id: true,
          },
        },

        valueDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Employee] })
  @ApiNestedQuery(EmployeeFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Employee[]> {
    const args = plainToClass(EmployeeFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        endWork: true,
        facebookUrl: true,
        githubUrl: true,
        gitlabUrl: true,
        id: true,
        instagramUrl: true,
        isActive: true,
        isAway: true,
        isJobSearchActive: true,
        isOnline: true,
        isTrackingEnabled: true,
        isTrackingTime: true,
        isVerified: true,
        isVetted: true,
        jobSuccess: true,
        acceptDate: true,
        allowScreenshotCapture: true,
        anonymousBonus: true,
        averageBonus: true,
        averageExpenses: true,
        averageIncome: true,
        billRateCurrency: true,
        billRateValue: true,

        candidate: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deletedAt: true,
        description: true,
        employeeLevel: true,
        linkedInId: true,
        linkedInUrl: true,
        minimumBillingRate: true,
        offerDate: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationPosition: {
          select: {
            id: true,
          },
        },

        payPeriod: true,
        profileLink: true,
        rejectDate: true,
        reWeeklyLimit: true,
        shortDescription: true,
        showAnonymousBonus: true,
        showAverageBonus: true,
        showAverageExpenses: true,
        showAverageIncome: true,
        showBillrate: true,
        showPayperiod: true,
        showStartWorkOn: true,
        stackoverflowUrl: true,
        startedWorkOn: true,

        tenant: {
          select: {
            id: true,
          },
        },

        totalJobs: true,
        totalWorkHours: true,
        twitterUrl: true,
        updatedAt: true,
        upworkId: true,
        upworkUrl: true,

        user: {
          select: {
            id: true,
          },
        },

        valueDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Employee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Employee | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        endWork: true,
        facebookUrl: true,
        githubUrl: true,
        gitlabUrl: true,
        id: true,
        instagramUrl: true,
        isActive: true,
        isAway: true,
        isJobSearchActive: true,
        isOnline: true,
        isTrackingEnabled: true,
        isTrackingTime: true,
        isVerified: true,
        isVetted: true,
        jobSuccess: true,
        acceptDate: true,
        allowScreenshotCapture: true,
        anonymousBonus: true,
        averageBonus: true,
        averageExpenses: true,
        averageIncome: true,
        billRateCurrency: true,
        billRateValue: true,

        candidate: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deletedAt: true,
        description: true,
        employeeLevel: true,
        linkedInId: true,
        linkedInUrl: true,
        minimumBillingRate: true,
        offerDate: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationPosition: {
          select: {
            id: true,
          },
        },

        payPeriod: true,
        profileLink: true,
        rejectDate: true,
        reWeeklyLimit: true,
        shortDescription: true,
        showAnonymousBonus: true,
        showAverageBonus: true,
        showAverageExpenses: true,
        showAverageIncome: true,
        showBillrate: true,
        showPayperiod: true,
        showStartWorkOn: true,
        stackoverflowUrl: true,
        startedWorkOn: true,

        tenant: {
          select: {
            id: true,
          },
        },

        totalJobs: true,
        totalWorkHours: true,
        twitterUrl: true,
        updatedAt: true,
        upworkId: true,
        upworkUrl: true,

        user: {
          select: {
            id: true,
          },
        },

        valueDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Employee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() data: EmployeeUpdateInput
  ): Promise<Employee | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          candidate: data.candidate
            ? {
                connect: data.candidate,
              }
            : undefined,

          contact: data.contact
            ? {
                connect: data.contact,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          organizationPosition: data.organizationPosition
            ? {
                connect: data.organizationPosition,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          user: {
            connect: data.user,
          },
        },
        select: {
          endWork: true,
          facebookUrl: true,
          githubUrl: true,
          gitlabUrl: true,
          id: true,
          instagramUrl: true,
          isActive: true,
          isAway: true,
          isJobSearchActive: true,
          isOnline: true,
          isTrackingEnabled: true,
          isTrackingTime: true,
          isVerified: true,
          isVetted: true,
          jobSuccess: true,
          acceptDate: true,
          allowScreenshotCapture: true,
          anonymousBonus: true,
          averageBonus: true,
          averageExpenses: true,
          averageIncome: true,
          billRateCurrency: true,
          billRateValue: true,

          candidate: {
            select: {
              id: true,
            },
          },

          contact: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          deletedAt: true,
          description: true,
          employeeLevel: true,
          linkedInId: true,
          linkedInUrl: true,
          minimumBillingRate: true,
          offerDate: true,

          organization: {
            select: {
              id: true,
            },
          },

          organizationPosition: {
            select: {
              id: true,
            },
          },

          payPeriod: true,
          profileLink: true,
          rejectDate: true,
          reWeeklyLimit: true,
          shortDescription: true,
          showAnonymousBonus: true,
          showAverageBonus: true,
          showAverageExpenses: true,
          showAverageIncome: true,
          showBillrate: true,
          showPayperiod: true,
          showStartWorkOn: true,
          stackoverflowUrl: true,
          startedWorkOn: true,

          tenant: {
            select: {
              id: true,
            },
          },

          totalJobs: true,
          totalWorkHours: true,
          twitterUrl: true,
          updatedAt: true,
          upworkId: true,
          upworkUrl: true,

          user: {
            select: {
              id: true,
            },
          },

          valueDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Employee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Employee | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          endWork: true,
          facebookUrl: true,
          githubUrl: true,
          gitlabUrl: true,
          id: true,
          instagramUrl: true,
          isActive: true,
          isAway: true,
          isJobSearchActive: true,
          isOnline: true,
          isTrackingEnabled: true,
          isTrackingTime: true,
          isVerified: true,
          isVetted: true,
          jobSuccess: true,
          acceptDate: true,
          allowScreenshotCapture: true,
          anonymousBonus: true,
          averageBonus: true,
          averageExpenses: true,
          averageIncome: true,
          billRateCurrency: true,
          billRateValue: true,

          candidate: {
            select: {
              id: true,
            },
          },

          contact: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          deletedAt: true,
          description: true,
          employeeLevel: true,
          linkedInId: true,
          linkedInUrl: true,
          minimumBillingRate: true,
          offerDate: true,

          organization: {
            select: {
              id: true,
            },
          },

          organizationPosition: {
            select: {
              id: true,
            },
          },

          payPeriod: true,
          profileLink: true,
          rejectDate: true,
          reWeeklyLimit: true,
          shortDescription: true,
          showAnonymousBonus: true,
          showAverageBonus: true,
          showAverageExpenses: true,
          showAverageIncome: true,
          showBillrate: true,
          showPayperiod: true,
          showStartWorkOn: true,
          stackoverflowUrl: true,
          startedWorkOn: true,

          tenant: {
            select: {
              id: true,
            },
          },

          totalJobs: true,
          totalWorkHours: true,
          twitterUrl: true,
          updatedAt: true,
          upworkId: true,
          upworkUrl: true,

          user: {
            select: {
              id: true,
            },
          },

          valueDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/employeeUpworkJobSearchCriterion")
  @ApiNestedQuery(EmployeeUpworkJobSearchCriterionFindManyArgs)
  async findManyEmployeeUpworkJobSearchCriterion(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<EmployeeUpworkJobSearchCriterion[]> {
    const query = plainToClass(
      EmployeeUpworkJobSearchCriterionFindManyArgs,
      request.query
    );
    const results = await this.service.findEmployeeUpworkJobSearchCriterion(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          keyword: true,
          jobType: true,

          jobPreset: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          jobSearchOccupation: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          jobSearchCategory: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeUpworkJobSearchCriterion")
  async connectEmployeeUpworkJobSearchCriterion(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeUpworkJobSearchCriterionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeUpworkJobSearchCriterion: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeUpworkJobSearchCriterion")
  async updateEmployeeUpworkJobSearchCriterion(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeUpworkJobSearchCriterionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeUpworkJobSearchCriterion: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeUpworkJobSearchCriterion")
  async disconnectEmployeeUpworkJobSearchCriterion(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeUpworkJobSearchCriterionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeUpworkJobSearchCriterion: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/equipmentSharesEmployees")
  @ApiNestedQuery(EquipmentSharesEmployeeFindManyArgs)
  async findManyEquipmentSharesEmployees(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<EquipmentSharesEmployee[]> {
    const query = plainToClass(
      EquipmentSharesEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findEquipmentSharesEmployees(params.id, {
      ...query,
      select: {
        employee: {
          select: {
            id: true,
          },
        },

        equipmentSharing: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/equipmentSharesEmployees")
  async connectEquipmentSharesEmployees(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EquipmentSharesEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharesEmployees: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/equipmentSharesEmployees")
  async updateEquipmentSharesEmployees(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EquipmentSharesEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharesEmployees: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/equipmentSharesEmployees")
  async disconnectEquipmentSharesEmployees(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EquipmentSharesEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharesEmployees: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/eventType")
  @ApiNestedQuery(EventTypeFindManyArgs)
  async findManyEventType(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<EventType[]> {
    const query = plainToClass(EventTypeFindManyArgs, request.query);
    const results = await this.service.findEventType(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        durationUnit: true,
        title: true,
        description: true,
        isActive: true,

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/eventType")
  async connectEventType(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventType: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/eventType")
  async updateEventType(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventType: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/eventType")
  async disconnectEventType(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventType: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/expense")
  @ApiNestedQuery(ExpenseFindManyArgs)
  async findManyExpense(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Expense[]> {
    const query = plainToClass(ExpenseFindManyArgs, request.query);
    const results = await this.service.findExpense(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        typeOfExpense: true,
        notes: true,
        currency: true,
        valueDate: true,
        purpose: true,
        taxType: true,
        taxLabel: true,
        rateValue: true,
        receipt: true,
        splitExpense: true,
        reference: true,
        status: true,

        organizationContact: {
          select: {
            id: true,
          },
        },

        expenseCategory: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationVendor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/expense")
  async connectExpense(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expense: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/expense")
  async updateExpense(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expense: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/expense")
  async disconnectExpense(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expense: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/goalGoalLeadIdToemployee")
  @ApiNestedQuery(GoalFindManyArgs)
  async findManyGoalGoalLeadIdToemployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Goal[]> {
    const query = plainToClass(GoalFindManyArgs, request.query);
    const results = await this.service.findGoalGoalLeadIdToemployee(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        deadline: true,
        level: true,
        progress: true,

        employeeGoalOwnerEmployeeIdToemployee: {
          select: {
            id: true,
          },
        },

        keyResultGoalAlignedKeyResultIdTokeyResult: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        employeeGoalLeadIdToemployee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/goalGoalLeadIdToemployee")
  async connectGoalGoalLeadIdToemployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalGoalLeadIdToemployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/goalGoalLeadIdToemployee")
  async updateGoalGoalLeadIdToemployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalGoalLeadIdToemployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/goalGoalLeadIdToemployee")
  async disconnectGoalGoalLeadIdToemployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalGoalLeadIdToemployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/goalGoalOwnerEmployeeIdToemployee")
  @ApiNestedQuery(GoalFindManyArgs)
  async findManyGoalGoalOwnerEmployeeIdToemployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Goal[]> {
    const query = plainToClass(GoalFindManyArgs, request.query);
    const results = await this.service.findGoalGoalOwnerEmployeeIdToemployee(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          deadline: true,
          level: true,
          progress: true,

          employeeGoalOwnerEmployeeIdToemployee: {
            select: {
              id: true,
            },
          },

          keyResultGoalAlignedKeyResultIdTokeyResult: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          organizationTeam: {
            select: {
              id: true,
            },
          },

          employeeGoalLeadIdToemployee: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/goalGoalOwnerEmployeeIdToemployee")
  async connectGoalGoalOwnerEmployeeIdToemployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalGoalOwnerEmployeeIdToemployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/goalGoalOwnerEmployeeIdToemployee")
  async updateGoalGoalOwnerEmployeeIdToemployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalGoalOwnerEmployeeIdToemployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/goalGoalOwnerEmployeeIdToemployee")
  async disconnectGoalGoalOwnerEmployeeIdToemployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalGoalOwnerEmployeeIdToemployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/goalKpi")
  @ApiNestedQuery(GoalKpiFindManyArgs)
  async findManyGoalKpi(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<GoalKpi[]> {
    const query = plainToClass(GoalKpiFindManyArgs, request.query);
    const results = await this.service.findGoalKpi(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        typeField: true,
        unit: true,
        operator: true,
        currentValue: true,
        targetValue: true,

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/goalKpi")
  async connectGoalKpi(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: GoalKpiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalKpi: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/goalKpi")
  async updateGoalKpi(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: GoalKpiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalKpi: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/goalKpi")
  async disconnectGoalKpi(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: GoalKpiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalKpi: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/goalKpiTemplate")
  @ApiNestedQuery(GoalKpiTemplateFindManyArgs)
  async findManyGoalKpiTemplate(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<GoalKpiTemplate[]> {
    const query = plainToClass(GoalKpiTemplateFindManyArgs, request.query);
    const results = await this.service.findGoalKpiTemplate(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        typeField: true,
        unit: true,
        operator: true,
        currentValue: true,
        targetValue: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/goalKpiTemplate")
  async connectGoalKpiTemplate(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: GoalKpiTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalKpiTemplate: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/goalKpiTemplate")
  async updateGoalKpiTemplate(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: GoalKpiTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalKpiTemplate: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/goalKpiTemplate")
  async disconnectGoalKpiTemplate(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: GoalKpiTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalKpiTemplate: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/income")
  @ApiNestedQuery(IncomeFindManyArgs)
  async findManyIncome(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Income[]> {
    const query = plainToClass(IncomeFindManyArgs, request.query);
    const results = await this.service.findIncome(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        currency: true,
        valueDate: true,
        notes: true,
        isBonus: true,
        reference: true,

        organizationContact: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/income")
  async connectIncome(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: IncomeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      income: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/income")
  async updateIncome(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: IncomeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      income: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/income")
  async disconnectIncome(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: IncomeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      income: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/invoiceItem")
  @ApiNestedQuery(InvoiceItemFindManyArgs)
  async findManyInvoiceItem(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<InvoiceItem[]> {
    const query = plainToClass(InvoiceItemFindManyArgs, request.query);
    const results = await this.service.findInvoiceItem(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        price: true,
        quantity: true,
        totalValue: true,
        applyTax: true,
        applyDiscount: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        invoice: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        expense: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoiceItem")
  async connectInvoiceItem(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoiceItem")
  async updateInvoiceItem(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoiceItem")
  async disconnectInvoiceItem(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/keyResultKeyResultLeadIdToemployee")
  @ApiNestedQuery(KeyResultFindManyArgs)
  async findManyKeyResultKeyResultLeadIdToemployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<KeyResult[]> {
    const query = plainToClass(KeyResultFindManyArgs, request.query);
    const results = await this.service.findKeyResultKeyResultLeadIdToemployee(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          typeField: true,
          targetValue: true,
          initialValue: true,
          unit: true,
          update: true,
          progress: true,
          deadline: true,
          hardDeadline: true,
          softDeadline: true,
          status: true,
          weight: true,

          organizationProject: {
            select: {
              id: true,
            },
          },

          goalKpi: {
            select: {
              id: true,
            },
          },

          employeeKeyResultOwnerIdToemployee: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          employeeKeyResultLeadIdToemployee: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          task: {
            select: {
              id: true,
            },
          },

          goalKeyResultGoalIdTogoal: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/keyResultKeyResultLeadIdToemployee")
  async connectKeyResultKeyResultLeadIdToemployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResultKeyResultLeadIdToemployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/keyResultKeyResultLeadIdToemployee")
  async updateKeyResultKeyResultLeadIdToemployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResultKeyResultLeadIdToemployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/keyResultKeyResultLeadIdToemployee")
  async disconnectKeyResultKeyResultLeadIdToemployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResultKeyResultLeadIdToemployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/keyResultKeyResultOwnerIdToemployee")
  @ApiNestedQuery(KeyResultFindManyArgs)
  async findManyKeyResultKeyResultOwnerIdToemployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<KeyResult[]> {
    const query = plainToClass(KeyResultFindManyArgs, request.query);
    const results = await this.service.findKeyResultKeyResultOwnerIdToemployee(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          typeField: true,
          targetValue: true,
          initialValue: true,
          unit: true,
          update: true,
          progress: true,
          deadline: true,
          hardDeadline: true,
          softDeadline: true,
          status: true,
          weight: true,

          organizationProject: {
            select: {
              id: true,
            },
          },

          goalKpi: {
            select: {
              id: true,
            },
          },

          employeeKeyResultOwnerIdToemployee: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          employeeKeyResultLeadIdToemployee: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          task: {
            select: {
              id: true,
            },
          },

          goalKeyResultGoalIdTogoal: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/keyResultKeyResultOwnerIdToemployee")
  async connectKeyResultKeyResultOwnerIdToemployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResultKeyResultOwnerIdToemployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/keyResultKeyResultOwnerIdToemployee")
  async updateKeyResultKeyResultOwnerIdToemployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResultKeyResultOwnerIdToemployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/keyResultKeyResultOwnerIdToemployee")
  async disconnectKeyResultKeyResultOwnerIdToemployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResultKeyResultOwnerIdToemployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/knowledgeBaseAuthor")
  @ApiNestedQuery(KnowledgeBaseAuthorFindManyArgs)
  async findManyKnowledgeBaseAuthor(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<KnowledgeBaseAuthor[]> {
    const query = plainToClass(KnowledgeBaseAuthorFindManyArgs, request.query);
    const results = await this.service.findKnowledgeBaseAuthor(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        tenant: {
          select: {
            id: true,
          },
        },

        knowledgeBaseArticle: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/knowledgeBaseAuthor")
  async connectKnowledgeBaseAuthor(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: KnowledgeBaseAuthorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      knowledgeBaseAuthor: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/knowledgeBaseAuthor")
  async updateKnowledgeBaseAuthor(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: KnowledgeBaseAuthorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      knowledgeBaseAuthor: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/knowledgeBaseAuthor")
  async disconnectKnowledgeBaseAuthor(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: KnowledgeBaseAuthorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      knowledgeBaseAuthor: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/activity")
  @ApiNestedQuery(ActivityFindManyArgs)
  async findManyActivity(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Activity[]> {
    const query = plainToClass(ActivityFindManyArgs, request.query);
    const results = await this.service.findActivity(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        metaData: true,
        date: true,
        time: true,
        duration: true,
        typeField: true,
        source: true,
        deletedAt: true,
        recordedAt: true,

        task: {
          select: {
            id: true,
          },
        },

        timeSlot: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/activity")
  async connectActivity(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/activity")
  async updateActivity(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/activity")
  async disconnectActivity(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/appointmentEmployee")
  @ApiNestedQuery(AppointmentEmployeeFindManyArgs)
  async findManyAppointmentEmployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<AppointmentEmployee[]> {
    const query = plainToClass(AppointmentEmployeeFindManyArgs, request.query);
    const results = await this.service.findAppointmentEmployee(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        appointmentId: true,

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        employeeAppointment: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/appointmentEmployee")
  async connectAppointmentEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: AppointmentEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/appointmentEmployee")
  async updateAppointmentEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: AppointmentEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/appointmentEmployee")
  async disconnectAppointmentEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: AppointmentEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/availabilitySlot")
  @ApiNestedQuery(AvailabilitySlotFindManyArgs)
  async findManyAvailabilitySlot(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<AvailabilitySlot[]> {
    const query = plainToClass(AvailabilitySlotFindManyArgs, request.query);
    const results = await this.service.findAvailabilitySlot(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,
        allDay: true,
        typeField: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/availabilitySlot")
  async connectAvailabilitySlot(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: AvailabilitySlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availabilitySlot: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/availabilitySlot")
  async updateAvailabilitySlot(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: AvailabilitySlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availabilitySlot: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/availabilitySlot")
  async disconnectAvailabilitySlot(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: AvailabilitySlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availabilitySlot: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateInterviewer")
  @ApiNestedQuery(CandidateInterviewerFindManyArgs)
  async findManyCandidateInterviewer(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<CandidateInterviewer[]> {
    const query = plainToClass(CandidateInterviewerFindManyArgs, request.query);
    const results = await this.service.findCandidateInterviewer(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        organization: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        candidateInterview: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        candidateFeedback: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateInterviewer")
  async connectCandidateInterviewer(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: CandidateInterviewerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateInterviewer: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateInterviewer")
  async updateCandidateInterviewer(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: CandidateInterviewerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateInterviewer: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateInterviewer")
  async disconnectCandidateInterviewer(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: CandidateInterviewerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateInterviewer: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeAppointment")
  @ApiNestedQuery(EmployeeAppointmentFindManyArgs)
  async findManyEmployeeAppointment(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<EmployeeAppointment[]> {
    const query = plainToClass(EmployeeAppointmentFindManyArgs, request.query);
    const results = await this.service.findEmployeeAppointment(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        agenda: true,
        description: true,
        location: true,
        startDateTime: true,
        endDateTime: true,
        bufferTimeStart: true,
        bufferTimeEnd: true,
        bufferTimeInMins: true,
        breakTimeInMins: true,
        breakStartTime: true,
        emails: true,
        status: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeAppointment")
  async connectEmployeeAppointment(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeAppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeAppointment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeAppointment")
  async updateEmployeeAppointment(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeAppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeAppointment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeAppointment")
  async disconnectEmployeeAppointment(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeAppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeAppointment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeAward")
  @ApiNestedQuery(EmployeeAwardFindManyArgs)
  async findManyEmployeeAward(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<EmployeeAward[]> {
    const query = plainToClass(EmployeeAwardFindManyArgs, request.query);
    const results = await this.service.findEmployeeAward(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        year: true,

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeAward")
  async connectEmployeeAward(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeAwardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeAward: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeAward")
  async updateEmployeeAward(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeAwardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeAward: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeAward")
  async disconnectEmployeeAward(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeAwardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeAward: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeJobPreset")
  @ApiNestedQuery(EmployeeJobPresetFindManyArgs)
  async findManyEmployeeJobPreset(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<EmployeeJobPreset[]> {
    const query = plainToClass(EmployeeJobPresetFindManyArgs, request.query);
    const results = await this.service.findEmployeeJobPreset(params.id, {
      ...query,
      select: {
        employee: {
          select: {
            id: true,
          },
        },

        jobPreset: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeJobPreset")
  async connectEmployeeJobPreset(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeJobPresetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeJobPreset: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeJobPreset")
  async updateEmployeeJobPreset(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeJobPresetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeJobPreset: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeJobPreset")
  async disconnectEmployeeJobPreset(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeJobPresetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeJobPreset: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeePhone")
  @ApiNestedQuery(EmployeePhoneFindManyArgs)
  async findManyEmployeePhone(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<EmployeePhone[]> {
    const query = plainToClass(EmployeePhoneFindManyArgs, request.query);
    const results = await this.service.findEmployeePhone(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        phoneNumber: true,

        organization: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeePhone")
  async connectEmployeePhone(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeePhoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeePhone: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeePhone")
  async updateEmployeePhone(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeePhoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeePhone: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeePhone")
  async disconnectEmployeePhone(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeePhoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeePhone: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeProposalTemplate")
  @ApiNestedQuery(EmployeeProposalTemplateFindManyArgs)
  async findManyEmployeeProposalTemplate(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<EmployeeProposalTemplate[]> {
    const query = plainToClass(
      EmployeeProposalTemplateFindManyArgs,
      request.query
    );
    const results = await this.service.findEmployeeProposalTemplate(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        content: true,
        isDefault: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeProposalTemplate")
  async connectEmployeeProposalTemplate(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeProposalTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeProposalTemplate: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeProposalTemplate")
  async updateEmployeeProposalTemplate(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeProposalTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeProposalTemplate: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeProposalTemplate")
  async disconnectEmployeeProposalTemplate(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeProposalTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeProposalTemplate: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeRecurringExpense")
  @ApiNestedQuery(EmployeeRecurringExpenseFindManyArgs)
  async findManyEmployeeRecurringExpense(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<EmployeeRecurringExpense[]> {
    const query = plainToClass(
      EmployeeRecurringExpenseFindManyArgs,
      request.query
    );
    const results = await this.service.findEmployeeRecurringExpense(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startDay: true,
        startMonth: true,
        startYear: true,
        startDate: true,
        endDay: true,
        endMonth: true,
        endYear: true,
        endDate: true,
        categoryName: true,
        value: true,
        currency: true,
        parentRecurringExpenseId: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeRecurringExpense")
  async connectEmployeeRecurringExpense(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeRecurringExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeRecurringExpense: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeRecurringExpense")
  async updateEmployeeRecurringExpense(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeRecurringExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeRecurringExpense: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeRecurringExpense")
  async disconnectEmployeeRecurringExpense(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeRecurringExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeRecurringExpense: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeSetting")
  @ApiNestedQuery(EmployeeSettingFindManyArgs)
  async findManyEmployeeSetting(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<EmployeeSetting[]> {
    const query = plainToClass(EmployeeSettingFindManyArgs, request.query);
    const results = await this.service.findEmployeeSetting(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        month: true,
        year: true,
        settingType: true,
        value: true,
        currency: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeSetting")
  async connectEmployeeSetting(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeSetting: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeSetting")
  async updateEmployeeSetting(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeSetting: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeSetting")
  async disconnectEmployeeSetting(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeSetting: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeTasksTask")
  @ApiNestedQuery(EmployeeTasksTaskFindManyArgs)
  async findManyEmployeeTasksTask(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<EmployeeTasksTask[]> {
    const query = plainToClass(EmployeeTasksTaskFindManyArgs, request.query);
    const results = await this.service.findEmployeeTasksTask(params.id, {
      ...query,
      select: {
        task: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeTasksTask")
  async connectEmployeeTasksTask(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeTasksTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasksTask: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeTasksTask")
  async updateEmployeeTasksTask(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeTasksTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasksTask: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeTasksTask")
  async disconnectEmployeeTasksTask(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: EmployeeTasksTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasksTask: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationContactEmployee")
  @ApiNestedQuery(OrganizationContactEmployeeFindManyArgs)
  async findManyOrganizationContactEmployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<OrganizationContactEmployee[]> {
    const query = plainToClass(
      OrganizationContactEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationContactEmployee(
      params.id,
      {
        ...query,
        select: {
          organizationContact: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationContactEmployee")
  async connectOrganizationContactEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: OrganizationContactEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationContactEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationContactEmployee")
  async updateOrganizationContactEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: OrganizationContactEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationContactEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationContactEmployee")
  async disconnectOrganizationContactEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: OrganizationContactEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationContactEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationDepartmentEmployee")
  @ApiNestedQuery(OrganizationDepartmentEmployeeFindManyArgs)
  async findManyOrganizationDepartmentEmployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<OrganizationDepartmentEmployee[]> {
    const query = plainToClass(
      OrganizationDepartmentEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationDepartmentEmployee(
      params.id,
      {
        ...query,
        select: {
          employee: {
            select: {
              id: true,
            },
          },

          organizationDepartment: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationDepartmentEmployee")
  async connectOrganizationDepartmentEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: OrganizationDepartmentEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationDepartmentEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationDepartmentEmployee")
  async updateOrganizationDepartmentEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: OrganizationDepartmentEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationDepartmentEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationDepartmentEmployee")
  async disconnectOrganizationDepartmentEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: OrganizationDepartmentEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationDepartmentEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationEmploymentTypeEmployee")
  @ApiNestedQuery(OrganizationEmploymentTypeEmployeeFindManyArgs)
  async findManyOrganizationEmploymentTypeEmployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<OrganizationEmploymentTypeEmployee[]> {
    const query = plainToClass(
      OrganizationEmploymentTypeEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationEmploymentTypeEmployee(
      params.id,
      {
        ...query,
        select: {
          organizationEmploymentType: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationEmploymentTypeEmployee")
  async connectOrganizationEmploymentTypeEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: OrganizationEmploymentTypeEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationEmploymentTypeEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationEmploymentTypeEmployee")
  async updateOrganizationEmploymentTypeEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: OrganizationEmploymentTypeEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationEmploymentTypeEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationEmploymentTypeEmployee")
  async disconnectOrganizationEmploymentTypeEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: OrganizationEmploymentTypeEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationEmploymentTypeEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationProjectEmployee")
  @ApiNestedQuery(OrganizationProjectEmployeeFindManyArgs)
  async findManyOrganizationProjectEmployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<OrganizationProjectEmployee[]> {
    const query = plainToClass(
      OrganizationProjectEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationProjectEmployee(
      params.id,
      {
        ...query,
        select: {
          organizationProject: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationProjectEmployee")
  async connectOrganizationProjectEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: OrganizationProjectEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationProjectEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationProjectEmployee")
  async updateOrganizationProjectEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: OrganizationProjectEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationProjectEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationProjectEmployee")
  async disconnectOrganizationProjectEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: OrganizationProjectEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationProjectEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationTeamEmployee")
  @ApiNestedQuery(OrganizationTeamEmployeeFindManyArgs)
  async findManyOrganizationTeamEmployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<OrganizationTeamEmployee[]> {
    const query = plainToClass(
      OrganizationTeamEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationTeamEmployee(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        isTrackingEnabled: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationTeamEmployee")
  async connectOrganizationTeamEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: OrganizationTeamEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationTeamEmployee")
  async updateOrganizationTeamEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: OrganizationTeamEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationTeamEmployee")
  async disconnectOrganizationTeamEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: OrganizationTeamEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/payment")
  @ApiNestedQuery(PaymentFindManyArgs)
  async findManyPayment(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayment(params.id, {
      ...query,
      select: {
        invoice: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        id: true,
        createdAt: true,
        updatedAt: true,
        paymentDate: true,
        amount: true,
        note: true,
        currency: true,
        overdue: true,
        paymentMethod: true,

        user: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payment")
  async connectPayment(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payment")
  async updatePayment(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payment")
  async disconnectPayment(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/proposal")
  @ApiNestedQuery(ProposalFindManyArgs)
  async findManyProposal(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Proposal[]> {
    const query = plainToClass(ProposalFindManyArgs, request.query);
    const results = await this.service.findProposal(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        jobPostUrl: true,
        valueDate: true,
        jobPostContent: true,
        proposalContent: true,
        status: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/proposal")
  async connectProposal(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: ProposalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proposal: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/proposal")
  async updateProposal(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: ProposalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proposal: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/proposal")
  async disconnectProposal(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: ProposalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proposal: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/requestApprovalEmployee")
  @ApiNestedQuery(RequestApprovalEmployeeFindManyArgs)
  async findManyRequestApprovalEmployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<RequestApprovalEmployee[]> {
    const query = plainToClass(
      RequestApprovalEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findRequestApprovalEmployee(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        organization: {
          select: {
            id: true,
          },
        },

        requestApproval: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/requestApprovalEmployee")
  async connectRequestApprovalEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: RequestApprovalEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/requestApprovalEmployee")
  async updateRequestApprovalEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: RequestApprovalEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/requestApprovalEmployee")
  async disconnectRequestApprovalEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: RequestApprovalEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/skillEmployee")
  @ApiNestedQuery(SkillEmployeeFindManyArgs)
  async findManySkillEmployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<SkillEmployee[]> {
    const query = plainToClass(SkillEmployeeFindManyArgs, request.query);
    const results = await this.service.findSkillEmployee(params.id, {
      ...query,
      select: {
        employee: {
          select: {
            id: true,
          },
        },

        skill: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/skillEmployee")
  async connectSkillEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: SkillEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      skillEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/skillEmployee")
  async updateSkillEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: SkillEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      skillEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/skillEmployee")
  async disconnectSkillEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: SkillEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      skillEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagEmployee")
  @ApiNestedQuery(TagEmployeeFindManyArgs)
  async findManyTagEmployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<TagEmployee[]> {
    const query = plainToClass(TagEmployeeFindManyArgs, request.query);
    const results = await this.service.findTagEmployee(params.id, {
      ...query,
      select: {
        tag: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagEmployee")
  async connectTagEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TagEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagEmployee")
  async updateTagEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TagEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagEmployee")
  async disconnectTagEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TagEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskEmployee")
  @ApiNestedQuery(TaskEmployeeFindManyArgs)
  async findManyTaskEmployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<TaskEmployee[]> {
    const query = plainToClass(TaskEmployeeFindManyArgs, request.query);
    const results = await this.service.findTaskEmployee(params.id, {
      ...query,
      select: {
        task: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskEmployee")
  async connectTaskEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TaskEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskEmployee")
  async updateTaskEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TaskEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskEmployee")
  async disconnectTaskEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TaskEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeLog")
  @ApiNestedQuery(TimeLogFindManyArgs)
  async findManyTimeLog(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<TimeLog[]> {
    const query = plainToClass(TimeLogFindManyArgs, request.query);
    const results = await this.service.findTimeLog(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startedAt: true,
        stoppedAt: true,
        logType: true,
        source: true,
        description: true,
        reason: true,
        isBillable: true,
        deletedAt: true,
        isRunning: true,
        version: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        timesheet: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeLog")
  async connectTimeLog(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeLog")
  async updateTimeLog(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeLog")
  async disconnectTimeLog(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeOffPolicyEmployee")
  @ApiNestedQuery(TimeOffPolicyEmployeeFindManyArgs)
  async findManyTimeOffPolicyEmployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<TimeOffPolicyEmployee[]> {
    const query = plainToClass(
      TimeOffPolicyEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findTimeOffPolicyEmployee(params.id, {
      ...query,
      select: {
        timeOffPolicy: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeOffPolicyEmployee")
  async connectTimeOffPolicyEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TimeOffPolicyEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffPolicyEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeOffPolicyEmployee")
  async updateTimeOffPolicyEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TimeOffPolicyEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffPolicyEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeOffPolicyEmployee")
  async disconnectTimeOffPolicyEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TimeOffPolicyEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffPolicyEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeOffRequestEmployee")
  @ApiNestedQuery(TimeOffRequestEmployeeFindManyArgs)
  async findManyTimeOffRequestEmployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<TimeOffRequestEmployee[]> {
    const query = plainToClass(
      TimeOffRequestEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findTimeOffRequestEmployee(params.id, {
      ...query,
      select: {
        timeOffRequest: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeOffRequestEmployee")
  async connectTimeOffRequestEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TimeOffRequestEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffRequestEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeOffRequestEmployee")
  async updateTimeOffRequestEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TimeOffRequestEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffRequestEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeOffRequestEmployee")
  async disconnectTimeOffRequestEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TimeOffRequestEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffRequestEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timesheet")
  @ApiNestedQuery(TimesheetFindManyArgs)
  async findManyTimesheet(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Timesheet[]> {
    const query = plainToClass(TimesheetFindManyArgs, request.query);
    const results = await this.service.findTimesheet(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        keyboard: true,
        mouse: true,
        overall: true,
        startedAt: true,
        stoppedAt: true,
        approvedAt: true,
        submittedAt: true,
        lockedAt: true,
        isBilled: true,
        status: true,
        deletedAt: true,

        tenant: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timesheet")
  async connectTimesheet(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TimesheetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timesheet: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timesheet")
  async updateTimesheet(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TimesheetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timesheet: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timesheet")
  async disconnectTimesheet(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TimesheetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timesheet: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeSlot")
  @ApiNestedQuery(TimeSlotFindManyArgs)
  async findManyTimeSlot(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<TimeSlot[]> {
    const query = plainToClass(TimeSlotFindManyArgs, request.query);
    const results = await this.service.findTimeSlot(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        keyboard: true,
        mouse: true,
        overall: true,
        startedAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeSlot")
  async connectTimeSlot(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlot: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeSlot")
  async updateTimeSlot(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlot: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeSlot")
  async disconnectTimeSlot(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlot: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
