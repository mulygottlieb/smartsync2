/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEmployeeArgs } from "./CreateEmployeeArgs";
import { UpdateEmployeeArgs } from "./UpdateEmployeeArgs";
import { DeleteEmployeeArgs } from "./DeleteEmployeeArgs";
import { EmployeeCountArgs } from "./EmployeeCountArgs";
import { EmployeeFindManyArgs } from "./EmployeeFindManyArgs";
import { EmployeeFindUniqueArgs } from "./EmployeeFindUniqueArgs";
import { Employee } from "./Employee";
import { EmployeeUpworkJobSearchCriterionFindManyArgs } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterionFindManyArgs";
import { EmployeeUpworkJobSearchCriterion } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterion";
import { EquipmentSharesEmployeeFindManyArgs } from "../../equipmentSharesEmployee/base/EquipmentSharesEmployeeFindManyArgs";
import { EquipmentSharesEmployee } from "../../equipmentSharesEmployee/base/EquipmentSharesEmployee";
import { EventTypeFindManyArgs } from "../../eventType/base/EventTypeFindManyArgs";
import { EventType } from "../../eventType/base/EventType";
import { ExpenseFindManyArgs } from "../../expense/base/ExpenseFindManyArgs";
import { Expense } from "../../expense/base/Expense";
import { GoalFindManyArgs } from "../../goal/base/GoalFindManyArgs";
import { Goal } from "../../goal/base/Goal";
import { GoalKpiFindManyArgs } from "../../goalKpi/base/GoalKpiFindManyArgs";
import { GoalKpi } from "../../goalKpi/base/GoalKpi";
import { GoalKpiTemplateFindManyArgs } from "../../goalKpiTemplate/base/GoalKpiTemplateFindManyArgs";
import { GoalKpiTemplate } from "../../goalKpiTemplate/base/GoalKpiTemplate";
import { IncomeFindManyArgs } from "../../income/base/IncomeFindManyArgs";
import { Income } from "../../income/base/Income";
import { InvoiceItemFindManyArgs } from "../../invoiceItem/base/InvoiceItemFindManyArgs";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { KeyResultFindManyArgs } from "../../keyResult/base/KeyResultFindManyArgs";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { KnowledgeBaseAuthorFindManyArgs } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthorFindManyArgs";
import { KnowledgeBaseAuthor } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthor";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { AppointmentEmployeeFindManyArgs } from "../../appointmentEmployee/base/AppointmentEmployeeFindManyArgs";
import { AppointmentEmployee } from "../../appointmentEmployee/base/AppointmentEmployee";
import { AvailabilitySlotFindManyArgs } from "../../availabilitySlot/base/AvailabilitySlotFindManyArgs";
import { AvailabilitySlot } from "../../availabilitySlot/base/AvailabilitySlot";
import { CandidateInterviewerFindManyArgs } from "../../candidateInterviewer/base/CandidateInterviewerFindManyArgs";
import { CandidateInterviewer } from "../../candidateInterviewer/base/CandidateInterviewer";
import { EmployeeAppointmentFindManyArgs } from "../../employeeAppointment/base/EmployeeAppointmentFindManyArgs";
import { EmployeeAppointment } from "../../employeeAppointment/base/EmployeeAppointment";
import { EmployeeAwardFindManyArgs } from "../../employeeAward/base/EmployeeAwardFindManyArgs";
import { EmployeeAward } from "../../employeeAward/base/EmployeeAward";
import { EmployeeJobPresetFindManyArgs } from "../../employeeJobPreset/base/EmployeeJobPresetFindManyArgs";
import { EmployeeJobPreset } from "../../employeeJobPreset/base/EmployeeJobPreset";
import { EmployeePhoneFindManyArgs } from "../../employeePhone/base/EmployeePhoneFindManyArgs";
import { EmployeePhone } from "../../employeePhone/base/EmployeePhone";
import { EmployeeProposalTemplateFindManyArgs } from "../../employeeProposalTemplate/base/EmployeeProposalTemplateFindManyArgs";
import { EmployeeProposalTemplate } from "../../employeeProposalTemplate/base/EmployeeProposalTemplate";
import { EmployeeRecurringExpenseFindManyArgs } from "../../employeeRecurringExpense/base/EmployeeRecurringExpenseFindManyArgs";
import { EmployeeRecurringExpense } from "../../employeeRecurringExpense/base/EmployeeRecurringExpense";
import { EmployeeSettingFindManyArgs } from "../../employeeSetting/base/EmployeeSettingFindManyArgs";
import { EmployeeSetting } from "../../employeeSetting/base/EmployeeSetting";
import { EmployeeTasksTaskFindManyArgs } from "../../employeeTasksTask/base/EmployeeTasksTaskFindManyArgs";
import { EmployeeTasksTask } from "../../employeeTasksTask/base/EmployeeTasksTask";
import { OrganizationContactEmployeeFindManyArgs } from "../../organizationContactEmployee/base/OrganizationContactEmployeeFindManyArgs";
import { OrganizationContactEmployee } from "../../organizationContactEmployee/base/OrganizationContactEmployee";
import { OrganizationDepartmentEmployeeFindManyArgs } from "../../organizationDepartmentEmployee/base/OrganizationDepartmentEmployeeFindManyArgs";
import { OrganizationDepartmentEmployee } from "../../organizationDepartmentEmployee/base/OrganizationDepartmentEmployee";
import { OrganizationEmploymentTypeEmployeeFindManyArgs } from "../../organizationEmploymentTypeEmployee/base/OrganizationEmploymentTypeEmployeeFindManyArgs";
import { OrganizationEmploymentTypeEmployee } from "../../organizationEmploymentTypeEmployee/base/OrganizationEmploymentTypeEmployee";
import { OrganizationProjectEmployeeFindManyArgs } from "../../organizationProjectEmployee/base/OrganizationProjectEmployeeFindManyArgs";
import { OrganizationProjectEmployee } from "../../organizationProjectEmployee/base/OrganizationProjectEmployee";
import { OrganizationTeamEmployeeFindManyArgs } from "../../organizationTeamEmployee/base/OrganizationTeamEmployeeFindManyArgs";
import { OrganizationTeamEmployee } from "../../organizationTeamEmployee/base/OrganizationTeamEmployee";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { ProposalFindManyArgs } from "../../proposal/base/ProposalFindManyArgs";
import { Proposal } from "../../proposal/base/Proposal";
import { RequestApprovalEmployeeFindManyArgs } from "../../requestApprovalEmployee/base/RequestApprovalEmployeeFindManyArgs";
import { RequestApprovalEmployee } from "../../requestApprovalEmployee/base/RequestApprovalEmployee";
import { SkillEmployeeFindManyArgs } from "../../skillEmployee/base/SkillEmployeeFindManyArgs";
import { SkillEmployee } from "../../skillEmployee/base/SkillEmployee";
import { TagEmployeeFindManyArgs } from "../../tagEmployee/base/TagEmployeeFindManyArgs";
import { TagEmployee } from "../../tagEmployee/base/TagEmployee";
import { TaskEmployeeFindManyArgs } from "../../taskEmployee/base/TaskEmployeeFindManyArgs";
import { TaskEmployee } from "../../taskEmployee/base/TaskEmployee";
import { TimeLogFindManyArgs } from "../../timeLog/base/TimeLogFindManyArgs";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { TimeOffPolicyEmployeeFindManyArgs } from "../../timeOffPolicyEmployee/base/TimeOffPolicyEmployeeFindManyArgs";
import { TimeOffPolicyEmployee } from "../../timeOffPolicyEmployee/base/TimeOffPolicyEmployee";
import { TimeOffRequestEmployeeFindManyArgs } from "../../timeOffRequestEmployee/base/TimeOffRequestEmployeeFindManyArgs";
import { TimeOffRequestEmployee } from "../../timeOffRequestEmployee/base/TimeOffRequestEmployee";
import { TimesheetFindManyArgs } from "../../timesheet/base/TimesheetFindManyArgs";
import { Timesheet } from "../../timesheet/base/Timesheet";
import { TimeSlotFindManyArgs } from "../../timeSlot/base/TimeSlotFindManyArgs";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { Candidate } from "../../candidate/base/Candidate";
import { Contact } from "../../contact/base/Contact";
import { Organization } from "../../organization/base/Organization";
import { OrganizationPosition } from "../../organizationPosition/base/OrganizationPosition";
import { Tenant } from "../../tenant/base/Tenant";
import { User } from "../../user/base/User";
import { EmployeeService } from "../employee.service";
@graphql.Resolver(() => Employee)
export class EmployeeResolverBase {
  constructor(protected readonly service: EmployeeService) {}

  async _employeesMeta(
    @graphql.Args() args: EmployeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Employee])
  async employees(
    @graphql.Args() args: EmployeeFindManyArgs
  ): Promise<Employee[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Employee, { nullable: true })
  async employee(
    @graphql.Args() args: EmployeeFindUniqueArgs
  ): Promise<Employee | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Employee)
  async createEmployee(
    @graphql.Args() args: CreateEmployeeArgs
  ): Promise<Employee> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        candidate: args.data.candidate
          ? {
              connect: args.data.candidate,
            }
          : undefined,

        contact: args.data.contact
          ? {
              connect: args.data.contact,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        organizationPosition: args.data.organizationPosition
          ? {
              connect: args.data.organizationPosition,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @graphql.Mutation(() => Employee)
  async updateEmployee(
    @graphql.Args() args: UpdateEmployeeArgs
  ): Promise<Employee | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          candidate: args.data.candidate
            ? {
                connect: args.data.candidate,
              }
            : undefined,

          contact: args.data.contact
            ? {
                connect: args.data.contact,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          organizationPosition: args.data.organizationPosition
            ? {
                connect: args.data.organizationPosition,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Employee)
  async deleteEmployee(
    @graphql.Args() args: DeleteEmployeeArgs
  ): Promise<Employee | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EmployeeUpworkJobSearchCriterion], {
    name: "employeeUpworkJobSearchCriterion",
  })
  async resolveFieldEmployeeUpworkJobSearchCriterion(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: EmployeeUpworkJobSearchCriterionFindManyArgs
  ): Promise<EmployeeUpworkJobSearchCriterion[]> {
    const results = await this.service.findEmployeeUpworkJobSearchCriterion(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EquipmentSharesEmployee], {
    name: "equipmentSharesEmployees",
  })
  async resolveFieldEquipmentSharesEmployees(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: EquipmentSharesEmployeeFindManyArgs
  ): Promise<EquipmentSharesEmployee[]> {
    const results = await this.service.findEquipmentSharesEmployees(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EventType], { name: "eventType" })
  async resolveFieldEventType(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: EventTypeFindManyArgs
  ): Promise<EventType[]> {
    const results = await this.service.findEventType(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Expense], { name: "expense" })
  async resolveFieldExpense(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: ExpenseFindManyArgs
  ): Promise<Expense[]> {
    const results = await this.service.findExpense(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Goal], { name: "goalGoalLeadIdToemployee" })
  async resolveFieldGoalGoalLeadIdToemployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: GoalFindManyArgs
  ): Promise<Goal[]> {
    const results = await this.service.findGoalGoalLeadIdToemployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Goal], {
    name: "goalGoalOwnerEmployeeIdToemployee",
  })
  async resolveFieldGoalGoalOwnerEmployeeIdToemployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: GoalFindManyArgs
  ): Promise<Goal[]> {
    const results = await this.service.findGoalGoalOwnerEmployeeIdToemployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [GoalKpi], { name: "goalKpi" })
  async resolveFieldGoalKpi(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: GoalKpiFindManyArgs
  ): Promise<GoalKpi[]> {
    const results = await this.service.findGoalKpi(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [GoalKpiTemplate], { name: "goalKpiTemplate" })
  async resolveFieldGoalKpiTemplate(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: GoalKpiTemplateFindManyArgs
  ): Promise<GoalKpiTemplate[]> {
    const results = await this.service.findGoalKpiTemplate(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Income], { name: "income" })
  async resolveFieldIncome(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: IncomeFindManyArgs
  ): Promise<Income[]> {
    const results = await this.service.findIncome(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [InvoiceItem], { name: "invoiceItem" })
  async resolveFieldInvoiceItem(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: InvoiceItemFindManyArgs
  ): Promise<InvoiceItem[]> {
    const results = await this.service.findInvoiceItem(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [KeyResult], {
    name: "keyResultKeyResultLeadIdToemployee",
  })
  async resolveFieldKeyResultKeyResultLeadIdToemployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: KeyResultFindManyArgs
  ): Promise<KeyResult[]> {
    const results = await this.service.findKeyResultKeyResultLeadIdToemployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [KeyResult], {
    name: "keyResultKeyResultOwnerIdToemployee",
  })
  async resolveFieldKeyResultKeyResultOwnerIdToemployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: KeyResultFindManyArgs
  ): Promise<KeyResult[]> {
    const results = await this.service.findKeyResultKeyResultOwnerIdToemployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [KnowledgeBaseAuthor], {
    name: "knowledgeBaseAuthor",
  })
  async resolveFieldKnowledgeBaseAuthor(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: KnowledgeBaseAuthorFindManyArgs
  ): Promise<KnowledgeBaseAuthor[]> {
    const results = await this.service.findKnowledgeBaseAuthor(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Activity], { name: "activity" })
  async resolveFieldActivity(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: ActivityFindManyArgs
  ): Promise<Activity[]> {
    const results = await this.service.findActivity(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [AppointmentEmployee], {
    name: "appointmentEmployee",
  })
  async resolveFieldAppointmentEmployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: AppointmentEmployeeFindManyArgs
  ): Promise<AppointmentEmployee[]> {
    const results = await this.service.findAppointmentEmployee(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [AvailabilitySlot], { name: "availabilitySlot" })
  async resolveFieldAvailabilitySlot(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: AvailabilitySlotFindManyArgs
  ): Promise<AvailabilitySlot[]> {
    const results = await this.service.findAvailabilitySlot(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateInterviewer], {
    name: "candidateInterviewer",
  })
  async resolveFieldCandidateInterviewer(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: CandidateInterviewerFindManyArgs
  ): Promise<CandidateInterviewer[]> {
    const results = await this.service.findCandidateInterviewer(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeAppointment], {
    name: "employeeAppointment",
  })
  async resolveFieldEmployeeAppointment(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: EmployeeAppointmentFindManyArgs
  ): Promise<EmployeeAppointment[]> {
    const results = await this.service.findEmployeeAppointment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeAward], { name: "employeeAward" })
  async resolveFieldEmployeeAward(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: EmployeeAwardFindManyArgs
  ): Promise<EmployeeAward[]> {
    const results = await this.service.findEmployeeAward(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeJobPreset], {
    name: "employeeJobPreset",
  })
  async resolveFieldEmployeeJobPreset(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: EmployeeJobPresetFindManyArgs
  ): Promise<EmployeeJobPreset[]> {
    const results = await this.service.findEmployeeJobPreset(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeePhone], { name: "employeePhone" })
  async resolveFieldEmployeePhone(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: EmployeePhoneFindManyArgs
  ): Promise<EmployeePhone[]> {
    const results = await this.service.findEmployeePhone(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeProposalTemplate], {
    name: "employeeProposalTemplate",
  })
  async resolveFieldEmployeeProposalTemplate(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: EmployeeProposalTemplateFindManyArgs
  ): Promise<EmployeeProposalTemplate[]> {
    const results = await this.service.findEmployeeProposalTemplate(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeRecurringExpense], {
    name: "employeeRecurringExpense",
  })
  async resolveFieldEmployeeRecurringExpense(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: EmployeeRecurringExpenseFindManyArgs
  ): Promise<EmployeeRecurringExpense[]> {
    const results = await this.service.findEmployeeRecurringExpense(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeSetting], { name: "employeeSetting" })
  async resolveFieldEmployeeSetting(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: EmployeeSettingFindManyArgs
  ): Promise<EmployeeSetting[]> {
    const results = await this.service.findEmployeeSetting(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeTasksTask], {
    name: "employeeTasksTask",
  })
  async resolveFieldEmployeeTasksTask(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: EmployeeTasksTaskFindManyArgs
  ): Promise<EmployeeTasksTask[]> {
    const results = await this.service.findEmployeeTasksTask(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationContactEmployee], {
    name: "organizationContactEmployee",
  })
  async resolveFieldOrganizationContactEmployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: OrganizationContactEmployeeFindManyArgs
  ): Promise<OrganizationContactEmployee[]> {
    const results = await this.service.findOrganizationContactEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationDepartmentEmployee], {
    name: "organizationDepartmentEmployee",
  })
  async resolveFieldOrganizationDepartmentEmployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: OrganizationDepartmentEmployeeFindManyArgs
  ): Promise<OrganizationDepartmentEmployee[]> {
    const results = await this.service.findOrganizationDepartmentEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationEmploymentTypeEmployee], {
    name: "organizationEmploymentTypeEmployee",
  })
  async resolveFieldOrganizationEmploymentTypeEmployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: OrganizationEmploymentTypeEmployeeFindManyArgs
  ): Promise<OrganizationEmploymentTypeEmployee[]> {
    const results = await this.service.findOrganizationEmploymentTypeEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationProjectEmployee], {
    name: "organizationProjectEmployee",
  })
  async resolveFieldOrganizationProjectEmployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: OrganizationProjectEmployeeFindManyArgs
  ): Promise<OrganizationProjectEmployee[]> {
    const results = await this.service.findOrganizationProjectEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationTeamEmployee], {
    name: "organizationTeamEmployee",
  })
  async resolveFieldOrganizationTeamEmployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: OrganizationTeamEmployeeFindManyArgs
  ): Promise<OrganizationTeamEmployee[]> {
    const results = await this.service.findOrganizationTeamEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Payment], { name: "payment" })
  async resolveFieldPayment(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Proposal], { name: "proposal" })
  async resolveFieldProposal(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: ProposalFindManyArgs
  ): Promise<Proposal[]> {
    const results = await this.service.findProposal(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [RequestApprovalEmployee], {
    name: "requestApprovalEmployee",
  })
  async resolveFieldRequestApprovalEmployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: RequestApprovalEmployeeFindManyArgs
  ): Promise<RequestApprovalEmployee[]> {
    const results = await this.service.findRequestApprovalEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [SkillEmployee], { name: "skillEmployee" })
  async resolveFieldSkillEmployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: SkillEmployeeFindManyArgs
  ): Promise<SkillEmployee[]> {
    const results = await this.service.findSkillEmployee(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagEmployee], { name: "tagEmployee" })
  async resolveFieldTagEmployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: TagEmployeeFindManyArgs
  ): Promise<TagEmployee[]> {
    const results = await this.service.findTagEmployee(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskEmployee], { name: "taskEmployee" })
  async resolveFieldTaskEmployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: TaskEmployeeFindManyArgs
  ): Promise<TaskEmployee[]> {
    const results = await this.service.findTaskEmployee(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeLog], { name: "timeLog" })
  async resolveFieldTimeLog(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: TimeLogFindManyArgs
  ): Promise<TimeLog[]> {
    const results = await this.service.findTimeLog(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeOffPolicyEmployee], {
    name: "timeOffPolicyEmployee",
  })
  async resolveFieldTimeOffPolicyEmployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: TimeOffPolicyEmployeeFindManyArgs
  ): Promise<TimeOffPolicyEmployee[]> {
    const results = await this.service.findTimeOffPolicyEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeOffRequestEmployee], {
    name: "timeOffRequestEmployee",
  })
  async resolveFieldTimeOffRequestEmployee(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: TimeOffRequestEmployeeFindManyArgs
  ): Promise<TimeOffRequestEmployee[]> {
    const results = await this.service.findTimeOffRequestEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Timesheet], { name: "timesheet" })
  async resolveFieldTimesheet(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: TimesheetFindManyArgs
  ): Promise<Timesheet[]> {
    const results = await this.service.findTimesheet(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeSlot], { name: "timeSlot" })
  async resolveFieldTimeSlot(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: TimeSlotFindManyArgs
  ): Promise<TimeSlot[]> {
    const results = await this.service.findTimeSlot(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Candidate, {
    nullable: true,
    name: "candidate",
  })
  async resolveFieldCandidate(
    @graphql.Parent() parent: Employee
  ): Promise<Candidate | null> {
    const result = await this.service.getCandidate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Contact, {
    nullable: true,
    name: "contact",
  })
  async resolveFieldContact(
    @graphql.Parent() parent: Employee
  ): Promise<Contact | null> {
    const result = await this.service.getContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: Employee
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationPosition, {
    nullable: true,
    name: "organizationPosition",
  })
  async resolveFieldOrganizationPosition(
    @graphql.Parent() parent: Employee
  ): Promise<OrganizationPosition | null> {
    const result = await this.service.getOrganizationPosition(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: Employee
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: Employee
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
