/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Employee,
  EmployeeUpworkJobSearchCriterion,
  EquipmentSharesEmployee,
  EventType,
  Expense,
  Goal,
  GoalKpi,
  GoalKpiTemplate,
  Income,
  InvoiceItem,
  KeyResult,
  KnowledgeBaseAuthor,
  Activity,
  AppointmentEmployee,
  AvailabilitySlot,
  CandidateInterviewer,
  EmployeeAppointment,
  EmployeeAward,
  EmployeeJobPreset,
  EmployeePhone,
  EmployeeProposalTemplate,
  EmployeeRecurringExpense,
  EmployeeSetting,
  EmployeeTasksTask,
  OrganizationContactEmployee,
  OrganizationDepartmentEmployee,
  OrganizationEmploymentTypeEmployee,
  OrganizationProjectEmployee,
  OrganizationTeamEmployee,
  Payment,
  Proposal,
  RequestApprovalEmployee,
  SkillEmployee,
  TagEmployee,
  TaskEmployee,
  TimeLog,
  TimeOffPolicyEmployee,
  TimeOffRequestEmployee,
  Timesheet,
  TimeSlot,
  Candidate,
  Contact,
  Organization,
  OrganizationPosition,
  Tenant,
  User,
} from "@prisma/client";

export class EmployeeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.EmployeeCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeCountArgs>
  ): Promise<number> {
    return this.prisma.employee.count(args);
  }

  async findMany<T extends Prisma.EmployeeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeFindManyArgs>
  ): Promise<Employee[]> {
    return this.prisma.employee.findMany(args);
  }
  async findOne<T extends Prisma.EmployeeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeFindUniqueArgs>
  ): Promise<Employee | null> {
    return this.prisma.employee.findUnique(args);
  }
  async create<T extends Prisma.EmployeeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeCreateArgs>
  ): Promise<Employee> {
    return this.prisma.employee.create<T>(args);
  }
  async update<T extends Prisma.EmployeeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeUpdateArgs>
  ): Promise<Employee> {
    return this.prisma.employee.update<T>(args);
  }
  async delete<T extends Prisma.EmployeeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeDeleteArgs>
  ): Promise<Employee> {
    return this.prisma.employee.delete(args);
  }

  async findEmployeeUpworkJobSearchCriterion(
    parentId: string,
    args: Prisma.EmployeeUpworkJobSearchCriterionFindManyArgs
  ): Promise<EmployeeUpworkJobSearchCriterion[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeUpworkJobSearchCriterion(args);
  }

  async findEquipmentSharesEmployees(
    parentId: string,
    args: Prisma.EquipmentSharesEmployeeFindManyArgs
  ): Promise<EquipmentSharesEmployee[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .equipmentSharesEmployees(args);
  }

  async findEventType(
    parentId: string,
    args: Prisma.EventTypeFindManyArgs
  ): Promise<EventType[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .eventType(args);
  }

  async findExpense(
    parentId: string,
    args: Prisma.ExpenseFindManyArgs
  ): Promise<Expense[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .expense(args);
  }

  async findGoalGoalLeadIdToemployee(
    parentId: string,
    args: Prisma.GoalFindManyArgs
  ): Promise<Goal[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .goalGoalLeadIdToemployee(args);
  }

  async findGoalGoalOwnerEmployeeIdToemployee(
    parentId: string,
    args: Prisma.GoalFindManyArgs
  ): Promise<Goal[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .goalGoalOwnerEmployeeIdToemployee(args);
  }

  async findGoalKpi(
    parentId: string,
    args: Prisma.GoalKpiFindManyArgs
  ): Promise<GoalKpi[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .goalKpi(args);
  }

  async findGoalKpiTemplate(
    parentId: string,
    args: Prisma.GoalKpiTemplateFindManyArgs
  ): Promise<GoalKpiTemplate[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .goalKpiTemplate(args);
  }

  async findIncome(
    parentId: string,
    args: Prisma.IncomeFindManyArgs
  ): Promise<Income[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .income(args);
  }

  async findInvoiceItem(
    parentId: string,
    args: Prisma.InvoiceItemFindManyArgs
  ): Promise<InvoiceItem[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .invoiceItem(args);
  }

  async findKeyResultKeyResultLeadIdToemployee(
    parentId: string,
    args: Prisma.KeyResultFindManyArgs
  ): Promise<KeyResult[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .keyResultKeyResultLeadIdToemployee(args);
  }

  async findKeyResultKeyResultOwnerIdToemployee(
    parentId: string,
    args: Prisma.KeyResultFindManyArgs
  ): Promise<KeyResult[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .keyResultKeyResultOwnerIdToemployee(args);
  }

  async findKnowledgeBaseAuthor(
    parentId: string,
    args: Prisma.KnowledgeBaseAuthorFindManyArgs
  ): Promise<KnowledgeBaseAuthor[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .knowledgeBaseAuthor(args);
  }

  async findActivity(
    parentId: string,
    args: Prisma.ActivityFindManyArgs
  ): Promise<Activity[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .activity(args);
  }

  async findAppointmentEmployee(
    parentId: string,
    args: Prisma.AppointmentEmployeeFindManyArgs
  ): Promise<AppointmentEmployee[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointmentEmployee(args);
  }

  async findAvailabilitySlot(
    parentId: string,
    args: Prisma.AvailabilitySlotFindManyArgs
  ): Promise<AvailabilitySlot[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .availabilitySlot(args);
  }

  async findCandidateInterviewer(
    parentId: string,
    args: Prisma.CandidateInterviewerFindManyArgs
  ): Promise<CandidateInterviewer[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateInterviewer(args);
  }

  async findEmployeeAppointment(
    parentId: string,
    args: Prisma.EmployeeAppointmentFindManyArgs
  ): Promise<EmployeeAppointment[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeAppointment(args);
  }

  async findEmployeeAward(
    parentId: string,
    args: Prisma.EmployeeAwardFindManyArgs
  ): Promise<EmployeeAward[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeAward(args);
  }

  async findEmployeeJobPreset(
    parentId: string,
    args: Prisma.EmployeeJobPresetFindManyArgs
  ): Promise<EmployeeJobPreset[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeJobPreset(args);
  }

  async findEmployeePhone(
    parentId: string,
    args: Prisma.EmployeePhoneFindManyArgs
  ): Promise<EmployeePhone[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeePhone(args);
  }

  async findEmployeeProposalTemplate(
    parentId: string,
    args: Prisma.EmployeeProposalTemplateFindManyArgs
  ): Promise<EmployeeProposalTemplate[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeProposalTemplate(args);
  }

  async findEmployeeRecurringExpense(
    parentId: string,
    args: Prisma.EmployeeRecurringExpenseFindManyArgs
  ): Promise<EmployeeRecurringExpense[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeRecurringExpense(args);
  }

  async findEmployeeSetting(
    parentId: string,
    args: Prisma.EmployeeSettingFindManyArgs
  ): Promise<EmployeeSetting[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeSetting(args);
  }

  async findEmployeeTasksTask(
    parentId: string,
    args: Prisma.EmployeeTasksTaskFindManyArgs
  ): Promise<EmployeeTasksTask[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeTasksTask(args);
  }

  async findOrganizationContactEmployee(
    parentId: string,
    args: Prisma.OrganizationContactEmployeeFindManyArgs
  ): Promise<OrganizationContactEmployee[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationContactEmployee(args);
  }

  async findOrganizationDepartmentEmployee(
    parentId: string,
    args: Prisma.OrganizationDepartmentEmployeeFindManyArgs
  ): Promise<OrganizationDepartmentEmployee[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationDepartmentEmployee(args);
  }

  async findOrganizationEmploymentTypeEmployee(
    parentId: string,
    args: Prisma.OrganizationEmploymentTypeEmployeeFindManyArgs
  ): Promise<OrganizationEmploymentTypeEmployee[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationEmploymentTypeEmployee(args);
  }

  async findOrganizationProjectEmployee(
    parentId: string,
    args: Prisma.OrganizationProjectEmployeeFindManyArgs
  ): Promise<OrganizationProjectEmployee[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationProjectEmployee(args);
  }

  async findOrganizationTeamEmployee(
    parentId: string,
    args: Prisma.OrganizationTeamEmployeeFindManyArgs
  ): Promise<OrganizationTeamEmployee[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationTeamEmployee(args);
  }

  async findPayment(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<Payment[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payment(args);
  }

  async findProposal(
    parentId: string,
    args: Prisma.ProposalFindManyArgs
  ): Promise<Proposal[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .proposal(args);
  }

  async findRequestApprovalEmployee(
    parentId: string,
    args: Prisma.RequestApprovalEmployeeFindManyArgs
  ): Promise<RequestApprovalEmployee[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requestApprovalEmployee(args);
  }

  async findSkillEmployee(
    parentId: string,
    args: Prisma.SkillEmployeeFindManyArgs
  ): Promise<SkillEmployee[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .skillEmployee(args);
  }

  async findTagEmployee(
    parentId: string,
    args: Prisma.TagEmployeeFindManyArgs
  ): Promise<TagEmployee[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagEmployee(args);
  }

  async findTaskEmployee(
    parentId: string,
    args: Prisma.TaskEmployeeFindManyArgs
  ): Promise<TaskEmployee[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskEmployee(args);
  }

  async findTimeLog(
    parentId: string,
    args: Prisma.TimeLogFindManyArgs
  ): Promise<TimeLog[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeLog(args);
  }

  async findTimeOffPolicyEmployee(
    parentId: string,
    args: Prisma.TimeOffPolicyEmployeeFindManyArgs
  ): Promise<TimeOffPolicyEmployee[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeOffPolicyEmployee(args);
  }

  async findTimeOffRequestEmployee(
    parentId: string,
    args: Prisma.TimeOffRequestEmployeeFindManyArgs
  ): Promise<TimeOffRequestEmployee[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeOffRequestEmployee(args);
  }

  async findTimesheet(
    parentId: string,
    args: Prisma.TimesheetFindManyArgs
  ): Promise<Timesheet[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timesheet(args);
  }

  async findTimeSlot(
    parentId: string,
    args: Prisma.TimeSlotFindManyArgs
  ): Promise<TimeSlot[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeSlot(args);
  }

  async getCandidate(parentId: string): Promise<Candidate | null> {
    return this.prisma.employee
      .findUnique({
        where: { id: parentId },
      })
      .candidate();
  }

  async getContact(parentId: string): Promise<Contact | null> {
    return this.prisma.employee
      .findUnique({
        where: { id: parentId },
      })
      .contact();
  }

  async getOrganization(parentId: string): Promise<Organization | null> {
    return this.prisma.employee
      .findUnique({
        where: { id: parentId },
      })
      .organization();
  }

  async getOrganizationPosition(
    parentId: string
  ): Promise<OrganizationPosition | null> {
    return this.prisma.employee
      .findUnique({
        where: { id: parentId },
      })
      .organizationPosition();
  }

  async getTenant(parentId: string): Promise<Tenant | null> {
    return this.prisma.employee
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.employee
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
