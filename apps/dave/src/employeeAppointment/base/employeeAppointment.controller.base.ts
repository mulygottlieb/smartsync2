/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmployeeAppointmentService } from "../employeeAppointment.service";
import { EmployeeAppointmentCreateInput } from "./EmployeeAppointmentCreateInput";
import { EmployeeAppointmentWhereInput } from "./EmployeeAppointmentWhereInput";
import { EmployeeAppointmentWhereUniqueInput } from "./EmployeeAppointmentWhereUniqueInput";
import { EmployeeAppointmentFindManyArgs } from "./EmployeeAppointmentFindManyArgs";
import { EmployeeAppointmentUpdateInput } from "./EmployeeAppointmentUpdateInput";
import { EmployeeAppointment } from "./EmployeeAppointment";
import { AppointmentEmployeeFindManyArgs } from "../../appointmentEmployee/base/AppointmentEmployeeFindManyArgs";
import { AppointmentEmployee } from "../../appointmentEmployee/base/AppointmentEmployee";
import { AppointmentEmployeeWhereUniqueInput } from "../../appointmentEmployee/base/AppointmentEmployeeWhereUniqueInput";

export class EmployeeAppointmentControllerBase {
  constructor(protected readonly service: EmployeeAppointmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeAppointment })
  async create(
    @common.Body() data: EmployeeAppointmentCreateInput
  ): Promise<EmployeeAppointment> {
    return await this.service.create({
      data: {
        ...data,

        employee: data.employee
          ? {
              connect: data.employee,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        agenda: true,
        description: true,
        location: true,
        startDateTime: true,
        endDateTime: true,
        bufferTimeStart: true,
        bufferTimeEnd: true,
        bufferTimeInMins: true,
        breakTimeInMins: true,
        breakStartTime: true,
        emails: true,
        status: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeAppointment] })
  @ApiNestedQuery(EmployeeAppointmentFindManyArgs)
  async findMany(
    @common.Req() request: Request
  ): Promise<EmployeeAppointment[]> {
    const args = plainToClass(EmployeeAppointmentFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        agenda: true,
        description: true,
        location: true,
        startDateTime: true,
        endDateTime: true,
        bufferTimeStart: true,
        bufferTimeEnd: true,
        bufferTimeInMins: true,
        breakTimeInMins: true,
        breakStartTime: true,
        emails: true,
        status: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeAppointment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: EmployeeAppointmentWhereUniqueInput
  ): Promise<EmployeeAppointment | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        agenda: true,
        description: true,
        location: true,
        startDateTime: true,
        endDateTime: true,
        bufferTimeStart: true,
        bufferTimeEnd: true,
        bufferTimeInMins: true,
        breakTimeInMins: true,
        breakStartTime: true,
        emails: true,
        status: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeAppointment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: EmployeeAppointmentWhereUniqueInput,
    @common.Body() data: EmployeeAppointmentUpdateInput
  ): Promise<EmployeeAppointment | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          employee: data.employee
            ? {
                connect: data.employee,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          agenda: true,
          description: true,
          location: true,
          startDateTime: true,
          endDateTime: true,
          bufferTimeStart: true,
          bufferTimeEnd: true,
          bufferTimeInMins: true,
          breakTimeInMins: true,
          breakStartTime: true,
          emails: true,
          status: true,

          employee: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeAppointment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: EmployeeAppointmentWhereUniqueInput
  ): Promise<EmployeeAppointment | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          agenda: true,
          description: true,
          location: true,
          startDateTime: true,
          endDateTime: true,
          bufferTimeStart: true,
          bufferTimeEnd: true,
          bufferTimeInMins: true,
          breakTimeInMins: true,
          breakStartTime: true,
          emails: true,
          status: true,

          employee: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/appointmentEmployee")
  @ApiNestedQuery(AppointmentEmployeeFindManyArgs)
  async findManyAppointmentEmployee(
    @common.Req() request: Request,
    @common.Param() params: EmployeeAppointmentWhereUniqueInput
  ): Promise<AppointmentEmployee[]> {
    const query = plainToClass(AppointmentEmployeeFindManyArgs, request.query);
    const results = await this.service.findAppointmentEmployee(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        appointmentId: true,

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        employeeAppointment: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/appointmentEmployee")
  async connectAppointmentEmployee(
    @common.Param() params: EmployeeAppointmentWhereUniqueInput,
    @common.Body() body: AppointmentEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/appointmentEmployee")
  async updateAppointmentEmployee(
    @common.Param() params: EmployeeAppointmentWhereUniqueInput,
    @common.Body() body: AppointmentEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/appointmentEmployee")
  async disconnectAppointmentEmployee(
    @common.Param() params: EmployeeAppointmentWhereUniqueInput,
    @common.Body() body: AppointmentEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
