/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEmployeeAppointmentArgs } from "./CreateEmployeeAppointmentArgs";
import { UpdateEmployeeAppointmentArgs } from "./UpdateEmployeeAppointmentArgs";
import { DeleteEmployeeAppointmentArgs } from "./DeleteEmployeeAppointmentArgs";
import { EmployeeAppointmentCountArgs } from "./EmployeeAppointmentCountArgs";
import { EmployeeAppointmentFindManyArgs } from "./EmployeeAppointmentFindManyArgs";
import { EmployeeAppointmentFindUniqueArgs } from "./EmployeeAppointmentFindUniqueArgs";
import { EmployeeAppointment } from "./EmployeeAppointment";
import { AppointmentEmployeeFindManyArgs } from "../../appointmentEmployee/base/AppointmentEmployeeFindManyArgs";
import { AppointmentEmployee } from "../../appointmentEmployee/base/AppointmentEmployee";
import { Employee } from "../../employee/base/Employee";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { EmployeeAppointmentService } from "../employeeAppointment.service";
@graphql.Resolver(() => EmployeeAppointment)
export class EmployeeAppointmentResolverBase {
  constructor(protected readonly service: EmployeeAppointmentService) {}

  async _employeeAppointmentsMeta(
    @graphql.Args() args: EmployeeAppointmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeAppointment])
  async employeeAppointments(
    @graphql.Args() args: EmployeeAppointmentFindManyArgs
  ): Promise<EmployeeAppointment[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EmployeeAppointment, { nullable: true })
  async employeeAppointment(
    @graphql.Args() args: EmployeeAppointmentFindUniqueArgs
  ): Promise<EmployeeAppointment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeAppointment)
  async createEmployeeAppointment(
    @graphql.Args() args: CreateEmployeeAppointmentArgs
  ): Promise<EmployeeAppointment> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EmployeeAppointment)
  async updateEmployeeAppointment(
    @graphql.Args() args: UpdateEmployeeAppointmentArgs
  ): Promise<EmployeeAppointment | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeAppointment)
  async deleteEmployeeAppointment(
    @graphql.Args() args: DeleteEmployeeAppointmentArgs
  ): Promise<EmployeeAppointment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [AppointmentEmployee], {
    name: "appointmentEmployee",
  })
  async resolveFieldAppointmentEmployee(
    @graphql.Parent() parent: EmployeeAppointment,
    @graphql.Args() args: AppointmentEmployeeFindManyArgs
  ): Promise<AppointmentEmployee[]> {
    const results = await this.service.findAppointmentEmployee(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: EmployeeAppointment
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: EmployeeAppointment
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: EmployeeAppointment
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
