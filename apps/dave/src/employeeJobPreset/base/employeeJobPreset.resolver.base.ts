/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEmployeeJobPresetArgs } from "./CreateEmployeeJobPresetArgs";
import { UpdateEmployeeJobPresetArgs } from "./UpdateEmployeeJobPresetArgs";
import { DeleteEmployeeJobPresetArgs } from "./DeleteEmployeeJobPresetArgs";
import { EmployeeJobPresetCountArgs } from "./EmployeeJobPresetCountArgs";
import { EmployeeJobPresetFindManyArgs } from "./EmployeeJobPresetFindManyArgs";
import { EmployeeJobPresetFindUniqueArgs } from "./EmployeeJobPresetFindUniqueArgs";
import { EmployeeJobPreset } from "./EmployeeJobPreset";
import { Employee } from "../../employee/base/Employee";
import { JobPreset } from "../../jobPreset/base/JobPreset";
import { EmployeeJobPresetService } from "../employeeJobPreset.service";
@graphql.Resolver(() => EmployeeJobPreset)
export class EmployeeJobPresetResolverBase {
  constructor(protected readonly service: EmployeeJobPresetService) {}

  async _employeeJobPresetsMeta(
    @graphql.Args() args: EmployeeJobPresetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeJobPreset])
  async employeeJobPresets(
    @graphql.Args() args: EmployeeJobPresetFindManyArgs
  ): Promise<EmployeeJobPreset[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EmployeeJobPreset, { nullable: true })
  async employeeJobPreset(
    @graphql.Args() args: EmployeeJobPresetFindUniqueArgs
  ): Promise<EmployeeJobPreset | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeJobPreset)
  async createEmployeeJobPreset(
    @graphql.Args() args: CreateEmployeeJobPresetArgs
  ): Promise<EmployeeJobPreset> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        employee: {
          connect: args.data.employee,
        },

        jobPreset: {
          connect: args.data.jobPreset,
        },
      },
    });
  }

  @graphql.Mutation(() => EmployeeJobPreset)
  async updateEmployeeJobPreset(
    @graphql.Args() args: UpdateEmployeeJobPresetArgs
  ): Promise<EmployeeJobPreset | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          employee: {
            connect: args.data.employee,
          },

          jobPreset: {
            connect: args.data.jobPreset,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeJobPreset)
  async deleteEmployeeJobPreset(
    @graphql.Args() args: DeleteEmployeeJobPresetArgs
  ): Promise<EmployeeJobPreset | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: EmployeeJobPreset
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => JobPreset, {
    nullable: true,
    name: "jobPreset",
  })
  async resolveFieldJobPreset(
    @graphql.Parent() parent: EmployeeJobPreset
  ): Promise<JobPreset | null> {
    const result = await this.service.getJobPreset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
