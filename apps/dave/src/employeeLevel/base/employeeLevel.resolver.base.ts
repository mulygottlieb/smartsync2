/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEmployeeLevelArgs } from "./CreateEmployeeLevelArgs";
import { UpdateEmployeeLevelArgs } from "./UpdateEmployeeLevelArgs";
import { DeleteEmployeeLevelArgs } from "./DeleteEmployeeLevelArgs";
import { EmployeeLevelCountArgs } from "./EmployeeLevelCountArgs";
import { EmployeeLevelFindManyArgs } from "./EmployeeLevelFindManyArgs";
import { EmployeeLevelFindUniqueArgs } from "./EmployeeLevelFindUniqueArgs";
import { EmployeeLevel } from "./EmployeeLevel";
import { TagEmployeeLevelFindManyArgs } from "../../tagEmployeeLevel/base/TagEmployeeLevelFindManyArgs";
import { TagEmployeeLevel } from "../../tagEmployeeLevel/base/TagEmployeeLevel";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { EmployeeLevelService } from "../employeeLevel.service";
@graphql.Resolver(() => EmployeeLevel)
export class EmployeeLevelResolverBase {
  constructor(protected readonly service: EmployeeLevelService) {}

  async _employeeLevelsMeta(
    @graphql.Args() args: EmployeeLevelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeLevel])
  async employeeLevels(
    @graphql.Args() args: EmployeeLevelFindManyArgs
  ): Promise<EmployeeLevel[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EmployeeLevel, { nullable: true })
  async employeeLevel(
    @graphql.Args() args: EmployeeLevelFindUniqueArgs
  ): Promise<EmployeeLevel | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeLevel)
  async createEmployeeLevel(
    @graphql.Args() args: CreateEmployeeLevelArgs
  ): Promise<EmployeeLevel> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EmployeeLevel)
  async updateEmployeeLevel(
    @graphql.Args() args: UpdateEmployeeLevelArgs
  ): Promise<EmployeeLevel | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeLevel)
  async deleteEmployeeLevel(
    @graphql.Args() args: DeleteEmployeeLevelArgs
  ): Promise<EmployeeLevel | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TagEmployeeLevel], { name: "tagEmployeeLevel" })
  async resolveFieldTagEmployeeLevel(
    @graphql.Parent() parent: EmployeeLevel,
    @graphql.Args() args: TagEmployeeLevelFindManyArgs
  ): Promise<TagEmployeeLevel[]> {
    const results = await this.service.findTagEmployeeLevel(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: EmployeeLevel
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: EmployeeLevel
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
