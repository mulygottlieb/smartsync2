/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEmployeePhoneArgs } from "./CreateEmployeePhoneArgs";
import { UpdateEmployeePhoneArgs } from "./UpdateEmployeePhoneArgs";
import { DeleteEmployeePhoneArgs } from "./DeleteEmployeePhoneArgs";
import { EmployeePhoneCountArgs } from "./EmployeePhoneCountArgs";
import { EmployeePhoneFindManyArgs } from "./EmployeePhoneFindManyArgs";
import { EmployeePhoneFindUniqueArgs } from "./EmployeePhoneFindUniqueArgs";
import { EmployeePhone } from "./EmployeePhone";
import { Organization } from "../../organization/base/Organization";
import { Employee } from "../../employee/base/Employee";
import { Tenant } from "../../tenant/base/Tenant";
import { EmployeePhoneService } from "../employeePhone.service";
@graphql.Resolver(() => EmployeePhone)
export class EmployeePhoneResolverBase {
  constructor(protected readonly service: EmployeePhoneService) {}

  async _employeePhonesMeta(
    @graphql.Args() args: EmployeePhoneCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeePhone])
  async employeePhones(
    @graphql.Args() args: EmployeePhoneFindManyArgs
  ): Promise<EmployeePhone[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EmployeePhone, { nullable: true })
  async employeePhone(
    @graphql.Args() args: EmployeePhoneFindUniqueArgs
  ): Promise<EmployeePhone | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeePhone)
  async createEmployeePhone(
    @graphql.Args() args: CreateEmployeePhoneArgs
  ): Promise<EmployeePhone> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        employee: {
          connect: args.data.employee,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EmployeePhone)
  async updateEmployeePhone(
    @graphql.Args() args: UpdateEmployeePhoneArgs
  ): Promise<EmployeePhone | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          employee: {
            connect: args.data.employee,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeePhone)
  async deleteEmployeePhone(
    @graphql.Args() args: DeleteEmployeePhoneArgs
  ): Promise<EmployeePhone | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: EmployeePhone
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: EmployeePhone
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: EmployeePhone
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
