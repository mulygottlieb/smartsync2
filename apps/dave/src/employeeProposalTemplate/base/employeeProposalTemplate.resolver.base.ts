/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEmployeeProposalTemplateArgs } from "./CreateEmployeeProposalTemplateArgs";
import { UpdateEmployeeProposalTemplateArgs } from "./UpdateEmployeeProposalTemplateArgs";
import { DeleteEmployeeProposalTemplateArgs } from "./DeleteEmployeeProposalTemplateArgs";
import { EmployeeProposalTemplateCountArgs } from "./EmployeeProposalTemplateCountArgs";
import { EmployeeProposalTemplateFindManyArgs } from "./EmployeeProposalTemplateFindManyArgs";
import { EmployeeProposalTemplateFindUniqueArgs } from "./EmployeeProposalTemplateFindUniqueArgs";
import { EmployeeProposalTemplate } from "./EmployeeProposalTemplate";
import { Employee } from "../../employee/base/Employee";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { EmployeeProposalTemplateService } from "../employeeProposalTemplate.service";
@graphql.Resolver(() => EmployeeProposalTemplate)
export class EmployeeProposalTemplateResolverBase {
  constructor(protected readonly service: EmployeeProposalTemplateService) {}

  async _employeeProposalTemplatesMeta(
    @graphql.Args() args: EmployeeProposalTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeProposalTemplate])
  async employeeProposalTemplates(
    @graphql.Args() args: EmployeeProposalTemplateFindManyArgs
  ): Promise<EmployeeProposalTemplate[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EmployeeProposalTemplate, { nullable: true })
  async employeeProposalTemplate(
    @graphql.Args() args: EmployeeProposalTemplateFindUniqueArgs
  ): Promise<EmployeeProposalTemplate | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeProposalTemplate)
  async createEmployeeProposalTemplate(
    @graphql.Args() args: CreateEmployeeProposalTemplateArgs
  ): Promise<EmployeeProposalTemplate> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        employee: {
          connect: args.data.employee,
        },

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EmployeeProposalTemplate)
  async updateEmployeeProposalTemplate(
    @graphql.Args() args: UpdateEmployeeProposalTemplateArgs
  ): Promise<EmployeeProposalTemplate | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          employee: {
            connect: args.data.employee,
          },

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeProposalTemplate)
  async deleteEmployeeProposalTemplate(
    @graphql.Args() args: DeleteEmployeeProposalTemplateArgs
  ): Promise<EmployeeProposalTemplate | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: EmployeeProposalTemplate
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: EmployeeProposalTemplate
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: EmployeeProposalTemplate
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
