/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEmployeeRecurringExpenseArgs } from "./CreateEmployeeRecurringExpenseArgs";
import { UpdateEmployeeRecurringExpenseArgs } from "./UpdateEmployeeRecurringExpenseArgs";
import { DeleteEmployeeRecurringExpenseArgs } from "./DeleteEmployeeRecurringExpenseArgs";
import { EmployeeRecurringExpenseCountArgs } from "./EmployeeRecurringExpenseCountArgs";
import { EmployeeRecurringExpenseFindManyArgs } from "./EmployeeRecurringExpenseFindManyArgs";
import { EmployeeRecurringExpenseFindUniqueArgs } from "./EmployeeRecurringExpenseFindUniqueArgs";
import { EmployeeRecurringExpense } from "./EmployeeRecurringExpense";
import { Employee } from "../../employee/base/Employee";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { EmployeeRecurringExpenseService } from "../employeeRecurringExpense.service";
@graphql.Resolver(() => EmployeeRecurringExpense)
export class EmployeeRecurringExpenseResolverBase {
  constructor(protected readonly service: EmployeeRecurringExpenseService) {}

  async _employeeRecurringExpensesMeta(
    @graphql.Args() args: EmployeeRecurringExpenseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeRecurringExpense])
  async employeeRecurringExpenses(
    @graphql.Args() args: EmployeeRecurringExpenseFindManyArgs
  ): Promise<EmployeeRecurringExpense[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EmployeeRecurringExpense, { nullable: true })
  async employeeRecurringExpense(
    @graphql.Args() args: EmployeeRecurringExpenseFindUniqueArgs
  ): Promise<EmployeeRecurringExpense | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeRecurringExpense)
  async createEmployeeRecurringExpense(
    @graphql.Args() args: CreateEmployeeRecurringExpenseArgs
  ): Promise<EmployeeRecurringExpense> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EmployeeRecurringExpense)
  async updateEmployeeRecurringExpense(
    @graphql.Args() args: UpdateEmployeeRecurringExpenseArgs
  ): Promise<EmployeeRecurringExpense | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeRecurringExpense)
  async deleteEmployeeRecurringExpense(
    @graphql.Args() args: DeleteEmployeeRecurringExpenseArgs
  ): Promise<EmployeeRecurringExpense | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: EmployeeRecurringExpense
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: EmployeeRecurringExpense
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: EmployeeRecurringExpense
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
