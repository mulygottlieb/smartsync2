/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEmployeeSettingArgs } from "./CreateEmployeeSettingArgs";
import { UpdateEmployeeSettingArgs } from "./UpdateEmployeeSettingArgs";
import { DeleteEmployeeSettingArgs } from "./DeleteEmployeeSettingArgs";
import { EmployeeSettingCountArgs } from "./EmployeeSettingCountArgs";
import { EmployeeSettingFindManyArgs } from "./EmployeeSettingFindManyArgs";
import { EmployeeSettingFindUniqueArgs } from "./EmployeeSettingFindUniqueArgs";
import { EmployeeSetting } from "./EmployeeSetting";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { Employee } from "../../employee/base/Employee";
import { EmployeeSettingService } from "../employeeSetting.service";
@graphql.Resolver(() => EmployeeSetting)
export class EmployeeSettingResolverBase {
  constructor(protected readonly service: EmployeeSettingService) {}

  async _employeeSettingsMeta(
    @graphql.Args() args: EmployeeSettingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeSetting])
  async employeeSettings(
    @graphql.Args() args: EmployeeSettingFindManyArgs
  ): Promise<EmployeeSetting[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EmployeeSetting, { nullable: true })
  async employeeSetting(
    @graphql.Args() args: EmployeeSettingFindUniqueArgs
  ): Promise<EmployeeSetting | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeSetting)
  async createEmployeeSetting(
    @graphql.Args() args: CreateEmployeeSettingArgs
  ): Promise<EmployeeSetting> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        employee: {
          connect: args.data.employee,
        },
      },
    });
  }

  @graphql.Mutation(() => EmployeeSetting)
  async updateEmployeeSetting(
    @graphql.Args() args: UpdateEmployeeSettingArgs
  ): Promise<EmployeeSetting | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          employee: {
            connect: args.data.employee,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeSetting)
  async deleteEmployeeSetting(
    @graphql.Args() args: DeleteEmployeeSettingArgs
  ): Promise<EmployeeSetting | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: EmployeeSetting
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: EmployeeSetting
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: EmployeeSetting
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
