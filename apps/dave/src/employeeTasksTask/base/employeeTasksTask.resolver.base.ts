/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEmployeeTasksTaskArgs } from "./CreateEmployeeTasksTaskArgs";
import { UpdateEmployeeTasksTaskArgs } from "./UpdateEmployeeTasksTaskArgs";
import { DeleteEmployeeTasksTaskArgs } from "./DeleteEmployeeTasksTaskArgs";
import { EmployeeTasksTaskCountArgs } from "./EmployeeTasksTaskCountArgs";
import { EmployeeTasksTaskFindManyArgs } from "./EmployeeTasksTaskFindManyArgs";
import { EmployeeTasksTaskFindUniqueArgs } from "./EmployeeTasksTaskFindUniqueArgs";
import { EmployeeTasksTask } from "./EmployeeTasksTask";
import { Task } from "../../task/base/Task";
import { Employee } from "../../employee/base/Employee";
import { EmployeeTasksTaskService } from "../employeeTasksTask.service";
@graphql.Resolver(() => EmployeeTasksTask)
export class EmployeeTasksTaskResolverBase {
  constructor(protected readonly service: EmployeeTasksTaskService) {}

  async _employeeTasksTasksMeta(
    @graphql.Args() args: EmployeeTasksTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeTasksTask])
  async employeeTasksTasks(
    @graphql.Args() args: EmployeeTasksTaskFindManyArgs
  ): Promise<EmployeeTasksTask[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EmployeeTasksTask, { nullable: true })
  async employeeTasksTask(
    @graphql.Args() args: EmployeeTasksTaskFindUniqueArgs
  ): Promise<EmployeeTasksTask | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeTasksTask)
  async createEmployeeTasksTask(
    @graphql.Args() args: CreateEmployeeTasksTaskArgs
  ): Promise<EmployeeTasksTask> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        task: {
          connect: args.data.task,
        },

        employee: {
          connect: args.data.employee,
        },
      },
    });
  }

  @graphql.Mutation(() => EmployeeTasksTask)
  async updateEmployeeTasksTask(
    @graphql.Args() args: UpdateEmployeeTasksTaskArgs
  ): Promise<EmployeeTasksTask | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          task: {
            connect: args.data.task,
          },

          employee: {
            connect: args.data.employee,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeTasksTask)
  async deleteEmployeeTasksTask(
    @graphql.Args() args: DeleteEmployeeTasksTaskArgs
  ): Promise<EmployeeTasksTask | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Task, {
    nullable: true,
    name: "task",
  })
  async resolveFieldTask(
    @graphql.Parent() parent: EmployeeTasksTask
  ): Promise<Task | null> {
    const result = await this.service.getTask(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: EmployeeTasksTask
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
