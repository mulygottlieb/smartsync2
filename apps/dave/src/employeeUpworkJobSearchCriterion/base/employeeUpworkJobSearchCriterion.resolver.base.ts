/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEmployeeUpworkJobSearchCriterionArgs } from "./CreateEmployeeUpworkJobSearchCriterionArgs";
import { UpdateEmployeeUpworkJobSearchCriterionArgs } from "./UpdateEmployeeUpworkJobSearchCriterionArgs";
import { DeleteEmployeeUpworkJobSearchCriterionArgs } from "./DeleteEmployeeUpworkJobSearchCriterionArgs";
import { EmployeeUpworkJobSearchCriterionCountArgs } from "./EmployeeUpworkJobSearchCriterionCountArgs";
import { EmployeeUpworkJobSearchCriterionFindManyArgs } from "./EmployeeUpworkJobSearchCriterionFindManyArgs";
import { EmployeeUpworkJobSearchCriterionFindUniqueArgs } from "./EmployeeUpworkJobSearchCriterionFindUniqueArgs";
import { EmployeeUpworkJobSearchCriterion } from "./EmployeeUpworkJobSearchCriterion";
import { JobPreset } from "../../jobPreset/base/JobPreset";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { JobSearchOccupation } from "../../jobSearchOccupation/base/JobSearchOccupation";
import { Employee } from "../../employee/base/Employee";
import { JobSearchCategory } from "../../jobSearchCategory/base/JobSearchCategory";
import { EmployeeUpworkJobSearchCriterionService } from "../employeeUpworkJobSearchCriterion.service";
@graphql.Resolver(() => EmployeeUpworkJobSearchCriterion)
export class EmployeeUpworkJobSearchCriterionResolverBase {
  constructor(
    protected readonly service: EmployeeUpworkJobSearchCriterionService
  ) {}

  async _employeeUpworkJobSearchCriteriaMeta(
    @graphql.Args() args: EmployeeUpworkJobSearchCriterionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeUpworkJobSearchCriterion])
  async employeeUpworkJobSearchCriteria(
    @graphql.Args() args: EmployeeUpworkJobSearchCriterionFindManyArgs
  ): Promise<EmployeeUpworkJobSearchCriterion[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EmployeeUpworkJobSearchCriterion, { nullable: true })
  async employeeUpworkJobSearchCriterion(
    @graphql.Args() args: EmployeeUpworkJobSearchCriterionFindUniqueArgs
  ): Promise<EmployeeUpworkJobSearchCriterion | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeUpworkJobSearchCriterion)
  async createEmployeeUpworkJobSearchCriterion(
    @graphql.Args() args: CreateEmployeeUpworkJobSearchCriterionArgs
  ): Promise<EmployeeUpworkJobSearchCriterion> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        jobPreset: args.data.jobPreset
          ? {
              connect: args.data.jobPreset,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        jobSearchOccupation: args.data.jobSearchOccupation
          ? {
              connect: args.data.jobSearchOccupation,
            }
          : undefined,

        employee: {
          connect: args.data.employee,
        },

        jobSearchCategory: args.data.jobSearchCategory
          ? {
              connect: args.data.jobSearchCategory,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EmployeeUpworkJobSearchCriterion)
  async updateEmployeeUpworkJobSearchCriterion(
    @graphql.Args() args: UpdateEmployeeUpworkJobSearchCriterionArgs
  ): Promise<EmployeeUpworkJobSearchCriterion | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          jobPreset: args.data.jobPreset
            ? {
                connect: args.data.jobPreset,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          jobSearchOccupation: args.data.jobSearchOccupation
            ? {
                connect: args.data.jobSearchOccupation,
              }
            : undefined,

          employee: {
            connect: args.data.employee,
          },

          jobSearchCategory: args.data.jobSearchCategory
            ? {
                connect: args.data.jobSearchCategory,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeUpworkJobSearchCriterion)
  async deleteEmployeeUpworkJobSearchCriterion(
    @graphql.Args() args: DeleteEmployeeUpworkJobSearchCriterionArgs
  ): Promise<EmployeeUpworkJobSearchCriterion | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => JobPreset, {
    nullable: true,
    name: "jobPreset",
  })
  async resolveFieldJobPreset(
    @graphql.Parent() parent: EmployeeUpworkJobSearchCriterion
  ): Promise<JobPreset | null> {
    const result = await this.service.getJobPreset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: EmployeeUpworkJobSearchCriterion
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: EmployeeUpworkJobSearchCriterion
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => JobSearchOccupation, {
    nullable: true,
    name: "jobSearchOccupation",
  })
  async resolveFieldJobSearchOccupation(
    @graphql.Parent() parent: EmployeeUpworkJobSearchCriterion
  ): Promise<JobSearchOccupation | null> {
    const result = await this.service.getJobSearchOccupation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: EmployeeUpworkJobSearchCriterion
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => JobSearchCategory, {
    nullable: true,
    name: "jobSearchCategory",
  })
  async resolveFieldJobSearchCategory(
    @graphql.Parent() parent: EmployeeUpworkJobSearchCriterion
  ): Promise<JobSearchCategory | null> {
    const result = await this.service.getJobSearchCategory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
