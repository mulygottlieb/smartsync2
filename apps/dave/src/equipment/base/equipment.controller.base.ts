/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EquipmentService } from "../equipment.service";
import { EquipmentCreateInput } from "./EquipmentCreateInput";
import { EquipmentWhereInput } from "./EquipmentWhereInput";
import { EquipmentWhereUniqueInput } from "./EquipmentWhereUniqueInput";
import { EquipmentFindManyArgs } from "./EquipmentFindManyArgs";
import { EquipmentUpdateInput } from "./EquipmentUpdateInput";
import { Equipment } from "./Equipment";
import { EquipmentSharingFindManyArgs } from "../../equipmentSharing/base/EquipmentSharingFindManyArgs";
import { EquipmentSharing } from "../../equipmentSharing/base/EquipmentSharing";
import { EquipmentSharingWhereUniqueInput } from "../../equipmentSharing/base/EquipmentSharingWhereUniqueInput";
import { TagEquipmentFindManyArgs } from "../../tagEquipment/base/TagEquipmentFindManyArgs";
import { TagEquipment } from "../../tagEquipment/base/TagEquipment";
import { TagEquipmentWhereUniqueInput } from "../../tagEquipment/base/TagEquipmentWhereUniqueInput";

export class EquipmentControllerBase {
  constructor(protected readonly service: EquipmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Equipment })
  async create(@common.Body() data: EquipmentCreateInput): Promise<Equipment> {
    return await this.service.create({
      data: {
        ...data,

        imageAsset: data.imageAsset
          ? {
              connect: data.imageAsset,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,
        serialNumber: true,
        manufacturedYear: true,
        initialCost: true,
        currency: true,
        maxSharePeriod: true,
        autoApproveShare: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Equipment] })
  @ApiNestedQuery(EquipmentFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Equipment[]> {
    const args = plainToClass(EquipmentFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,
        serialNumber: true,
        manufacturedYear: true,
        initialCost: true,
        currency: true,
        maxSharePeriod: true,
        autoApproveShare: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Equipment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: EquipmentWhereUniqueInput
  ): Promise<Equipment | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,
        serialNumber: true,
        manufacturedYear: true,
        initialCost: true,
        currency: true,
        maxSharePeriod: true,
        autoApproveShare: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Equipment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: EquipmentWhereUniqueInput,
    @common.Body() data: EquipmentUpdateInput
  ): Promise<Equipment | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          imageAsset: data.imageAsset
            ? {
                connect: data.imageAsset,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          typeField: true,
          serialNumber: true,
          manufacturedYear: true,
          initialCost: true,
          currency: true,
          maxSharePeriod: true,
          autoApproveShare: true,

          imageAsset: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Equipment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: EquipmentWhereUniqueInput
  ): Promise<Equipment | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          typeField: true,
          serialNumber: true,
          manufacturedYear: true,
          initialCost: true,
          currency: true,
          maxSharePeriod: true,
          autoApproveShare: true,

          imageAsset: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/equipmentSharing")
  @ApiNestedQuery(EquipmentSharingFindManyArgs)
  async findManyEquipmentSharing(
    @common.Req() request: Request,
    @common.Param() params: EquipmentWhereUniqueInput
  ): Promise<EquipmentSharing[]> {
    const query = plainToClass(EquipmentSharingFindManyArgs, request.query);
    const results = await this.service.findEquipmentSharing(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        shareRequestDay: true,
        shareStartDay: true,
        shareEndDay: true,
        status: true,
        createdBy: true,
        createdByName: true,

        equipmentSharingPolicy: {
          select: {
            id: true,
          },
        },

        equipment: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/equipmentSharing")
  async connectEquipmentSharing(
    @common.Param() params: EquipmentWhereUniqueInput,
    @common.Body() body: EquipmentSharingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharing: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/equipmentSharing")
  async updateEquipmentSharing(
    @common.Param() params: EquipmentWhereUniqueInput,
    @common.Body() body: EquipmentSharingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharing: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/equipmentSharing")
  async disconnectEquipmentSharing(
    @common.Param() params: EquipmentWhereUniqueInput,
    @common.Body() body: EquipmentSharingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharing: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagEquipment")
  @ApiNestedQuery(TagEquipmentFindManyArgs)
  async findManyTagEquipment(
    @common.Req() request: Request,
    @common.Param() params: EquipmentWhereUniqueInput
  ): Promise<TagEquipment[]> {
    const query = plainToClass(TagEquipmentFindManyArgs, request.query);
    const results = await this.service.findTagEquipment(params.id, {
      ...query,
      select: {
        tag: {
          select: {
            id: true,
          },
        },

        equipment: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagEquipment")
  async connectTagEquipment(
    @common.Param() params: EquipmentWhereUniqueInput,
    @common.Body() body: TagEquipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagEquipment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagEquipment")
  async updateTagEquipment(
    @common.Param() params: EquipmentWhereUniqueInput,
    @common.Body() body: TagEquipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagEquipment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagEquipment")
  async disconnectTagEquipment(
    @common.Param() params: EquipmentWhereUniqueInput,
    @common.Body() body: TagEquipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagEquipment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
