/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEquipmentArgs } from "./CreateEquipmentArgs";
import { UpdateEquipmentArgs } from "./UpdateEquipmentArgs";
import { DeleteEquipmentArgs } from "./DeleteEquipmentArgs";
import { EquipmentCountArgs } from "./EquipmentCountArgs";
import { EquipmentFindManyArgs } from "./EquipmentFindManyArgs";
import { EquipmentFindUniqueArgs } from "./EquipmentFindUniqueArgs";
import { Equipment } from "./Equipment";
import { EquipmentSharingFindManyArgs } from "../../equipmentSharing/base/EquipmentSharingFindManyArgs";
import { EquipmentSharing } from "../../equipmentSharing/base/EquipmentSharing";
import { TagEquipmentFindManyArgs } from "../../tagEquipment/base/TagEquipmentFindManyArgs";
import { TagEquipment } from "../../tagEquipment/base/TagEquipment";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { EquipmentService } from "../equipment.service";
@graphql.Resolver(() => Equipment)
export class EquipmentResolverBase {
  constructor(protected readonly service: EquipmentService) {}

  async _equipmentItemsMeta(
    @graphql.Args() args: EquipmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Equipment])
  async equipmentItems(
    @graphql.Args() args: EquipmentFindManyArgs
  ): Promise<Equipment[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Equipment, { nullable: true })
  async equipment(
    @graphql.Args() args: EquipmentFindUniqueArgs
  ): Promise<Equipment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Equipment)
  async createEquipment(
    @graphql.Args() args: CreateEquipmentArgs
  ): Promise<Equipment> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        imageAsset: args.data.imageAsset
          ? {
              connect: args.data.imageAsset,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Equipment)
  async updateEquipment(
    @graphql.Args() args: UpdateEquipmentArgs
  ): Promise<Equipment | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          imageAsset: args.data.imageAsset
            ? {
                connect: args.data.imageAsset,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Equipment)
  async deleteEquipment(
    @graphql.Args() args: DeleteEquipmentArgs
  ): Promise<Equipment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EquipmentSharing], { name: "equipmentSharing" })
  async resolveFieldEquipmentSharing(
    @graphql.Parent() parent: Equipment,
    @graphql.Args() args: EquipmentSharingFindManyArgs
  ): Promise<EquipmentSharing[]> {
    const results = await this.service.findEquipmentSharing(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagEquipment], { name: "tagEquipment" })
  async resolveFieldTagEquipment(
    @graphql.Parent() parent: Equipment,
    @graphql.Args() args: TagEquipmentFindManyArgs
  ): Promise<TagEquipment[]> {
    const results = await this.service.findTagEquipment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => ImageAsset, {
    nullable: true,
    name: "imageAsset",
  })
  async resolveFieldImageAsset(
    @graphql.Parent() parent: Equipment
  ): Promise<ImageAsset | null> {
    const result = await this.service.getImageAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: Equipment
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: Equipment
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
