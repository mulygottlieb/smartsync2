/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEquipmentSharesEmployeeArgs } from "./CreateEquipmentSharesEmployeeArgs";
import { UpdateEquipmentSharesEmployeeArgs } from "./UpdateEquipmentSharesEmployeeArgs";
import { DeleteEquipmentSharesEmployeeArgs } from "./DeleteEquipmentSharesEmployeeArgs";
import { EquipmentSharesEmployeeCountArgs } from "./EquipmentSharesEmployeeCountArgs";
import { EquipmentSharesEmployeeFindManyArgs } from "./EquipmentSharesEmployeeFindManyArgs";
import { EquipmentSharesEmployeeFindUniqueArgs } from "./EquipmentSharesEmployeeFindUniqueArgs";
import { EquipmentSharesEmployee } from "./EquipmentSharesEmployee";
import { Employee } from "../../employee/base/Employee";
import { EquipmentSharing } from "../../equipmentSharing/base/EquipmentSharing";
import { EquipmentSharesEmployeeService } from "../equipmentSharesEmployee.service";
@graphql.Resolver(() => EquipmentSharesEmployee)
export class EquipmentSharesEmployeeResolverBase {
  constructor(protected readonly service: EquipmentSharesEmployeeService) {}

  async _equipmentSharesEmployeesMeta(
    @graphql.Args() args: EquipmentSharesEmployeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EquipmentSharesEmployee])
  async equipmentSharesEmployees(
    @graphql.Args() args: EquipmentSharesEmployeeFindManyArgs
  ): Promise<EquipmentSharesEmployee[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EquipmentSharesEmployee, { nullable: true })
  async equipmentSharesEmployee(
    @graphql.Args() args: EquipmentSharesEmployeeFindUniqueArgs
  ): Promise<EquipmentSharesEmployee | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EquipmentSharesEmployee)
  async createEquipmentSharesEmployee(
    @graphql.Args() args: CreateEquipmentSharesEmployeeArgs
  ): Promise<EquipmentSharesEmployee> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        employee: {
          connect: args.data.employee,
        },

        equipmentSharing: {
          connect: args.data.equipmentSharing,
        },
      },
    });
  }

  @graphql.Mutation(() => EquipmentSharesEmployee)
  async updateEquipmentSharesEmployee(
    @graphql.Args() args: UpdateEquipmentSharesEmployeeArgs
  ): Promise<EquipmentSharesEmployee | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          employee: {
            connect: args.data.employee,
          },

          equipmentSharing: {
            connect: args.data.equipmentSharing,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EquipmentSharesEmployee)
  async deleteEquipmentSharesEmployee(
    @graphql.Args() args: DeleteEquipmentSharesEmployeeArgs
  ): Promise<EquipmentSharesEmployee | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: EquipmentSharesEmployee
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => EquipmentSharing, {
    nullable: true,
    name: "equipmentSharing",
  })
  async resolveFieldEquipmentSharing(
    @graphql.Parent() parent: EquipmentSharesEmployee
  ): Promise<EquipmentSharing | null> {
    const result = await this.service.getEquipmentSharing(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
