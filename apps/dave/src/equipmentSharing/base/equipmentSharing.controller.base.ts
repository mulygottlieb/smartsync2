/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EquipmentSharingService } from "../equipmentSharing.service";
import { EquipmentSharingCreateInput } from "./EquipmentSharingCreateInput";
import { EquipmentSharingWhereInput } from "./EquipmentSharingWhereInput";
import { EquipmentSharingWhereUniqueInput } from "./EquipmentSharingWhereUniqueInput";
import { EquipmentSharingFindManyArgs } from "./EquipmentSharingFindManyArgs";
import { EquipmentSharingUpdateInput } from "./EquipmentSharingUpdateInput";
import { EquipmentSharing } from "./EquipmentSharing";
import { EquipmentSharesEmployeeFindManyArgs } from "../../equipmentSharesEmployee/base/EquipmentSharesEmployeeFindManyArgs";
import { EquipmentSharesEmployee } from "../../equipmentSharesEmployee/base/EquipmentSharesEmployee";
import { EquipmentSharesEmployeeWhereUniqueInput } from "../../equipmentSharesEmployee/base/EquipmentSharesEmployeeWhereUniqueInput";
import { EquipmentSharesTeamFindManyArgs } from "../../equipmentSharesTeam/base/EquipmentSharesTeamFindManyArgs";
import { EquipmentSharesTeam } from "../../equipmentSharesTeam/base/EquipmentSharesTeam";
import { EquipmentSharesTeamWhereUniqueInput } from "../../equipmentSharesTeam/base/EquipmentSharesTeamWhereUniqueInput";

export class EquipmentSharingControllerBase {
  constructor(protected readonly service: EquipmentSharingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EquipmentSharing })
  async create(
    @common.Body() data: EquipmentSharingCreateInput
  ): Promise<EquipmentSharing> {
    return await this.service.create({
      data: {
        ...data,

        equipmentSharingPolicy: data.equipmentSharingPolicy
          ? {
              connect: data.equipmentSharingPolicy,
            }
          : undefined,

        equipment: data.equipment
          ? {
              connect: data.equipment,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        shareRequestDay: true,
        shareStartDay: true,
        shareEndDay: true,
        status: true,
        createdBy: true,
        createdByName: true,

        equipmentSharingPolicy: {
          select: {
            id: true,
          },
        },

        equipment: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EquipmentSharing] })
  @ApiNestedQuery(EquipmentSharingFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<EquipmentSharing[]> {
    const args = plainToClass(EquipmentSharingFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        shareRequestDay: true,
        shareStartDay: true,
        shareEndDay: true,
        status: true,
        createdBy: true,
        createdByName: true,

        equipmentSharingPolicy: {
          select: {
            id: true,
          },
        },

        equipment: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EquipmentSharing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: EquipmentSharingWhereUniqueInput
  ): Promise<EquipmentSharing | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        shareRequestDay: true,
        shareStartDay: true,
        shareEndDay: true,
        status: true,
        createdBy: true,
        createdByName: true,

        equipmentSharingPolicy: {
          select: {
            id: true,
          },
        },

        equipment: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EquipmentSharing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: EquipmentSharingWhereUniqueInput,
    @common.Body() data: EquipmentSharingUpdateInput
  ): Promise<EquipmentSharing | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          equipmentSharingPolicy: data.equipmentSharingPolicy
            ? {
                connect: data.equipmentSharingPolicy,
              }
            : undefined,

          equipment: data.equipment
            ? {
                connect: data.equipment,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          shareRequestDay: true,
          shareStartDay: true,
          shareEndDay: true,
          status: true,
          createdBy: true,
          createdByName: true,

          equipmentSharingPolicy: {
            select: {
              id: true,
            },
          },

          equipment: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EquipmentSharing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: EquipmentSharingWhereUniqueInput
  ): Promise<EquipmentSharing | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          shareRequestDay: true,
          shareStartDay: true,
          shareEndDay: true,
          status: true,
          createdBy: true,
          createdByName: true,

          equipmentSharingPolicy: {
            select: {
              id: true,
            },
          },

          equipment: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/equipmentSharesEmployees")
  @ApiNestedQuery(EquipmentSharesEmployeeFindManyArgs)
  async findManyEquipmentSharesEmployees(
    @common.Req() request: Request,
    @common.Param() params: EquipmentSharingWhereUniqueInput
  ): Promise<EquipmentSharesEmployee[]> {
    const query = plainToClass(
      EquipmentSharesEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findEquipmentSharesEmployees(params.id, {
      ...query,
      select: {
        employee: {
          select: {
            id: true,
          },
        },

        equipmentSharing: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/equipmentSharesEmployees")
  async connectEquipmentSharesEmployees(
    @common.Param() params: EquipmentSharingWhereUniqueInput,
    @common.Body() body: EquipmentSharesEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharesEmployees: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/equipmentSharesEmployees")
  async updateEquipmentSharesEmployees(
    @common.Param() params: EquipmentSharingWhereUniqueInput,
    @common.Body() body: EquipmentSharesEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharesEmployees: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/equipmentSharesEmployees")
  async disconnectEquipmentSharesEmployees(
    @common.Param() params: EquipmentSharingWhereUniqueInput,
    @common.Body() body: EquipmentSharesEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharesEmployees: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/equipmentSharesTeams")
  @ApiNestedQuery(EquipmentSharesTeamFindManyArgs)
  async findManyEquipmentSharesTeams(
    @common.Req() request: Request,
    @common.Param() params: EquipmentSharingWhereUniqueInput
  ): Promise<EquipmentSharesTeam[]> {
    const query = plainToClass(EquipmentSharesTeamFindManyArgs, request.query);
    const results = await this.service.findEquipmentSharesTeams(params.id, {
      ...query,
      select: {
        organizationTeam: {
          select: {
            id: true,
          },
        },

        equipmentSharing: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/equipmentSharesTeams")
  async connectEquipmentSharesTeams(
    @common.Param() params: EquipmentSharingWhereUniqueInput,
    @common.Body() body: EquipmentSharesTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharesTeams: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/equipmentSharesTeams")
  async updateEquipmentSharesTeams(
    @common.Param() params: EquipmentSharingWhereUniqueInput,
    @common.Body() body: EquipmentSharesTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharesTeams: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/equipmentSharesTeams")
  async disconnectEquipmentSharesTeams(
    @common.Param() params: EquipmentSharingWhereUniqueInput,
    @common.Body() body: EquipmentSharesTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharesTeams: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
