/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEquipmentSharingArgs } from "./CreateEquipmentSharingArgs";
import { UpdateEquipmentSharingArgs } from "./UpdateEquipmentSharingArgs";
import { DeleteEquipmentSharingArgs } from "./DeleteEquipmentSharingArgs";
import { EquipmentSharingCountArgs } from "./EquipmentSharingCountArgs";
import { EquipmentSharingFindManyArgs } from "./EquipmentSharingFindManyArgs";
import { EquipmentSharingFindUniqueArgs } from "./EquipmentSharingFindUniqueArgs";
import { EquipmentSharing } from "./EquipmentSharing";
import { EquipmentSharesEmployeeFindManyArgs } from "../../equipmentSharesEmployee/base/EquipmentSharesEmployeeFindManyArgs";
import { EquipmentSharesEmployee } from "../../equipmentSharesEmployee/base/EquipmentSharesEmployee";
import { EquipmentSharesTeamFindManyArgs } from "../../equipmentSharesTeam/base/EquipmentSharesTeamFindManyArgs";
import { EquipmentSharesTeam } from "../../equipmentSharesTeam/base/EquipmentSharesTeam";
import { EquipmentSharingPolicy } from "../../equipmentSharingPolicy/base/EquipmentSharingPolicy";
import { Equipment } from "../../equipment/base/Equipment";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { EquipmentSharingService } from "../equipmentSharing.service";
@graphql.Resolver(() => EquipmentSharing)
export class EquipmentSharingResolverBase {
  constructor(protected readonly service: EquipmentSharingService) {}

  async _equipmentSharingsMeta(
    @graphql.Args() args: EquipmentSharingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EquipmentSharing])
  async equipmentSharings(
    @graphql.Args() args: EquipmentSharingFindManyArgs
  ): Promise<EquipmentSharing[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EquipmentSharing, { nullable: true })
  async equipmentSharing(
    @graphql.Args() args: EquipmentSharingFindUniqueArgs
  ): Promise<EquipmentSharing | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EquipmentSharing)
  async createEquipmentSharing(
    @graphql.Args() args: CreateEquipmentSharingArgs
  ): Promise<EquipmentSharing> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        equipmentSharingPolicy: args.data.equipmentSharingPolicy
          ? {
              connect: args.data.equipmentSharingPolicy,
            }
          : undefined,

        equipment: args.data.equipment
          ? {
              connect: args.data.equipment,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EquipmentSharing)
  async updateEquipmentSharing(
    @graphql.Args() args: UpdateEquipmentSharingArgs
  ): Promise<EquipmentSharing | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          equipmentSharingPolicy: args.data.equipmentSharingPolicy
            ? {
                connect: args.data.equipmentSharingPolicy,
              }
            : undefined,

          equipment: args.data.equipment
            ? {
                connect: args.data.equipment,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EquipmentSharing)
  async deleteEquipmentSharing(
    @graphql.Args() args: DeleteEquipmentSharingArgs
  ): Promise<EquipmentSharing | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EquipmentSharesEmployee], {
    name: "equipmentSharesEmployees",
  })
  async resolveFieldEquipmentSharesEmployees(
    @graphql.Parent() parent: EquipmentSharing,
    @graphql.Args() args: EquipmentSharesEmployeeFindManyArgs
  ): Promise<EquipmentSharesEmployee[]> {
    const results = await this.service.findEquipmentSharesEmployees(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EquipmentSharesTeam], {
    name: "equipmentSharesTeams",
  })
  async resolveFieldEquipmentSharesTeams(
    @graphql.Parent() parent: EquipmentSharing,
    @graphql.Args() args: EquipmentSharesTeamFindManyArgs
  ): Promise<EquipmentSharesTeam[]> {
    const results = await this.service.findEquipmentSharesTeams(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => EquipmentSharingPolicy, {
    nullable: true,
    name: "equipmentSharingPolicy",
  })
  async resolveFieldEquipmentSharingPolicy(
    @graphql.Parent() parent: EquipmentSharing
  ): Promise<EquipmentSharingPolicy | null> {
    const result = await this.service.getEquipmentSharingPolicy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Equipment, {
    nullable: true,
    name: "equipment",
  })
  async resolveFieldEquipment(
    @graphql.Parent() parent: EquipmentSharing
  ): Promise<Equipment | null> {
    const result = await this.service.getEquipment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: EquipmentSharing
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: EquipmentSharing
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
