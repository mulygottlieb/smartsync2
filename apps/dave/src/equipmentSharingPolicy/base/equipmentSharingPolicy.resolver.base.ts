/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEquipmentSharingPolicyArgs } from "./CreateEquipmentSharingPolicyArgs";
import { UpdateEquipmentSharingPolicyArgs } from "./UpdateEquipmentSharingPolicyArgs";
import { DeleteEquipmentSharingPolicyArgs } from "./DeleteEquipmentSharingPolicyArgs";
import { EquipmentSharingPolicyCountArgs } from "./EquipmentSharingPolicyCountArgs";
import { EquipmentSharingPolicyFindManyArgs } from "./EquipmentSharingPolicyFindManyArgs";
import { EquipmentSharingPolicyFindUniqueArgs } from "./EquipmentSharingPolicyFindUniqueArgs";
import { EquipmentSharingPolicy } from "./EquipmentSharingPolicy";
import { EquipmentSharingFindManyArgs } from "../../equipmentSharing/base/EquipmentSharingFindManyArgs";
import { EquipmentSharing } from "../../equipmentSharing/base/EquipmentSharing";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { EquipmentSharingPolicyService } from "../equipmentSharingPolicy.service";
@graphql.Resolver(() => EquipmentSharingPolicy)
export class EquipmentSharingPolicyResolverBase {
  constructor(protected readonly service: EquipmentSharingPolicyService) {}

  async _equipmentSharingPoliciesMeta(
    @graphql.Args() args: EquipmentSharingPolicyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EquipmentSharingPolicy])
  async equipmentSharingPolicies(
    @graphql.Args() args: EquipmentSharingPolicyFindManyArgs
  ): Promise<EquipmentSharingPolicy[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EquipmentSharingPolicy, { nullable: true })
  async equipmentSharingPolicy(
    @graphql.Args() args: EquipmentSharingPolicyFindUniqueArgs
  ): Promise<EquipmentSharingPolicy | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EquipmentSharingPolicy)
  async createEquipmentSharingPolicy(
    @graphql.Args() args: CreateEquipmentSharingPolicyArgs
  ): Promise<EquipmentSharingPolicy> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EquipmentSharingPolicy)
  async updateEquipmentSharingPolicy(
    @graphql.Args() args: UpdateEquipmentSharingPolicyArgs
  ): Promise<EquipmentSharingPolicy | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EquipmentSharingPolicy)
  async deleteEquipmentSharingPolicy(
    @graphql.Args() args: DeleteEquipmentSharingPolicyArgs
  ): Promise<EquipmentSharingPolicy | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EquipmentSharing], { name: "equipmentSharing" })
  async resolveFieldEquipmentSharing(
    @graphql.Parent() parent: EquipmentSharingPolicy,
    @graphql.Args() args: EquipmentSharingFindManyArgs
  ): Promise<EquipmentSharing[]> {
    const results = await this.service.findEquipmentSharing(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: EquipmentSharingPolicy
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: EquipmentSharingPolicy
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
