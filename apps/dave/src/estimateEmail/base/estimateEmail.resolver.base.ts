/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEstimateEmailArgs } from "./CreateEstimateEmailArgs";
import { UpdateEstimateEmailArgs } from "./UpdateEstimateEmailArgs";
import { DeleteEstimateEmailArgs } from "./DeleteEstimateEmailArgs";
import { EstimateEmailCountArgs } from "./EstimateEmailCountArgs";
import { EstimateEmailFindManyArgs } from "./EstimateEmailFindManyArgs";
import { EstimateEmailFindUniqueArgs } from "./EstimateEmailFindUniqueArgs";
import { EstimateEmail } from "./EstimateEmail";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { EstimateEmailService } from "../estimateEmail.service";
@graphql.Resolver(() => EstimateEmail)
export class EstimateEmailResolverBase {
  constructor(protected readonly service: EstimateEmailService) {}

  async _estimateEmailsMeta(
    @graphql.Args() args: EstimateEmailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EstimateEmail])
  async estimateEmails(
    @graphql.Args() args: EstimateEmailFindManyArgs
  ): Promise<EstimateEmail[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EstimateEmail, { nullable: true })
  async estimateEmail(
    @graphql.Args() args: EstimateEmailFindUniqueArgs
  ): Promise<EstimateEmail | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EstimateEmail)
  async createEstimateEmail(
    @graphql.Args() args: CreateEstimateEmailArgs
  ): Promise<EstimateEmail> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EstimateEmail)
  async updateEstimateEmail(
    @graphql.Args() args: UpdateEstimateEmailArgs
  ): Promise<EstimateEmail | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EstimateEmail)
  async deleteEstimateEmail(
    @graphql.Args() args: DeleteEstimateEmailArgs
  ): Promise<EstimateEmail | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: EstimateEmail
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: EstimateEmail
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
