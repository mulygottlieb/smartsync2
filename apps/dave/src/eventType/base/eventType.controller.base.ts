/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EventTypeService } from "../eventType.service";
import { EventTypeCreateInput } from "./EventTypeCreateInput";
import { EventTypeWhereInput } from "./EventTypeWhereInput";
import { EventTypeWhereUniqueInput } from "./EventTypeWhereUniqueInput";
import { EventTypeFindManyArgs } from "./EventTypeFindManyArgs";
import { EventTypeUpdateInput } from "./EventTypeUpdateInput";
import { EventType } from "./EventType";
import { TagEventTypeFindManyArgs } from "../../tagEventType/base/TagEventTypeFindManyArgs";
import { TagEventType } from "../../tagEventType/base/TagEventType";
import { TagEventTypeWhereUniqueInput } from "../../tagEventType/base/TagEventTypeWhereUniqueInput";

export class EventTypeControllerBase {
  constructor(protected readonly service: EventTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EventType })
  async create(@common.Body() data: EventTypeCreateInput): Promise<EventType> {
    return await this.service.create({
      data: {
        ...data,

        employee: data.employee
          ? {
              connect: data.employee,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        durationUnit: true,
        title: true,
        description: true,
        isActive: true,

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EventType] })
  @ApiNestedQuery(EventTypeFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<EventType[]> {
    const args = plainToClass(EventTypeFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        durationUnit: true,
        title: true,
        description: true,
        isActive: true,

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EventType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: EventTypeWhereUniqueInput
  ): Promise<EventType | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        durationUnit: true,
        title: true,
        description: true,
        isActive: true,

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EventType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: EventTypeWhereUniqueInput,
    @common.Body() data: EventTypeUpdateInput
  ): Promise<EventType | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          employee: data.employee
            ? {
                connect: data.employee,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          duration: true,
          durationUnit: true,
          title: true,
          description: true,
          isActive: true,

          employee: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EventType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: EventTypeWhereUniqueInput
  ): Promise<EventType | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          duration: true,
          durationUnit: true,
          title: true,
          description: true,
          isActive: true,

          employee: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/tagEventType")
  @ApiNestedQuery(TagEventTypeFindManyArgs)
  async findManyTagEventType(
    @common.Req() request: Request,
    @common.Param() params: EventTypeWhereUniqueInput
  ): Promise<TagEventType[]> {
    const query = plainToClass(TagEventTypeFindManyArgs, request.query);
    const results = await this.service.findTagEventType(params.id, {
      ...query,
      select: {
        eventType: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagEventType")
  async connectTagEventType(
    @common.Param() params: EventTypeWhereUniqueInput,
    @common.Body() body: TagEventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagEventType: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagEventType")
  async updateTagEventType(
    @common.Param() params: EventTypeWhereUniqueInput,
    @common.Body() body: TagEventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagEventType: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagEventType")
  async disconnectTagEventType(
    @common.Param() params: EventTypeWhereUniqueInput,
    @common.Body() body: TagEventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagEventType: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
