/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEventTypeArgs } from "./CreateEventTypeArgs";
import { UpdateEventTypeArgs } from "./UpdateEventTypeArgs";
import { DeleteEventTypeArgs } from "./DeleteEventTypeArgs";
import { EventTypeCountArgs } from "./EventTypeCountArgs";
import { EventTypeFindManyArgs } from "./EventTypeFindManyArgs";
import { EventTypeFindUniqueArgs } from "./EventTypeFindUniqueArgs";
import { EventType } from "./EventType";
import { TagEventTypeFindManyArgs } from "../../tagEventType/base/TagEventTypeFindManyArgs";
import { TagEventType } from "../../tagEventType/base/TagEventType";
import { Employee } from "../../employee/base/Employee";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { EventTypeService } from "../eventType.service";
@graphql.Resolver(() => EventType)
export class EventTypeResolverBase {
  constructor(protected readonly service: EventTypeService) {}

  async _eventTypesMeta(
    @graphql.Args() args: EventTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EventType])
  async eventTypes(
    @graphql.Args() args: EventTypeFindManyArgs
  ): Promise<EventType[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EventType, { nullable: true })
  async eventType(
    @graphql.Args() args: EventTypeFindUniqueArgs
  ): Promise<EventType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EventType)
  async createEventType(
    @graphql.Args() args: CreateEventTypeArgs
  ): Promise<EventType> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EventType)
  async updateEventType(
    @graphql.Args() args: UpdateEventTypeArgs
  ): Promise<EventType | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EventType)
  async deleteEventType(
    @graphql.Args() args: DeleteEventTypeArgs
  ): Promise<EventType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TagEventType], { name: "tagEventType" })
  async resolveFieldTagEventType(
    @graphql.Parent() parent: EventType,
    @graphql.Args() args: TagEventTypeFindManyArgs
  ): Promise<TagEventType[]> {
    const results = await this.service.findTagEventType(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: EventType
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: EventType
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: EventType
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
