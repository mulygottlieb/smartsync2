/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsNumber,
  IsOptional,
  IsString,
  IsDate,
  IsBoolean,
  IsEnum,
  ValidateNested,
} from "class-validator";
import { Decimal } from "decimal.js";
import { Type } from "class-transformer";
import { EnumExpenseStatus } from "./EnumExpenseStatus";
import { OrganizationContactWhereUniqueInput } from "../../organizationContact/base/OrganizationContactWhereUniqueInput";
import { ExpenseCategoryWhereUniqueInput } from "../../expenseCategory/base/ExpenseCategoryWhereUniqueInput";
import { EmployeeWhereUniqueInput } from "../../employee/base/EmployeeWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { OrganizationProjectWhereUniqueInput } from "../../organizationProject/base/OrganizationProjectWhereUniqueInput";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { OrganizationVendorWhereUniqueInput } from "../../organizationVendor/base/OrganizationVendorWhereUniqueInput";
import { InvoiceItemUpdateManyWithoutExpensesInput } from "./InvoiceItemUpdateManyWithoutExpensesInput";
import { TagExpenseUpdateManyWithoutExpensesInput } from "./TagExpenseUpdateManyWithoutExpensesInput";

@InputType()
class ExpenseUpdateInput {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  amount?: Decimal;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  typeOfExpense?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  notes?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  currency?: string;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  valueDate?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  purpose?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  taxType?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  taxLabel?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  rateValue?: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  receipt?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  splitExpense?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  reference?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumExpenseStatus,
  })
  @IsEnum(EnumExpenseStatus)
  @IsOptional()
  @Field(() => EnumExpenseStatus, {
    nullable: true,
  })
  status?: "INVOICED" | "UNINVOICED" | "PAID" | "NOT_BILLABLE" | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationContactWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationContactWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationContactWhereUniqueInput, {
    nullable: true,
  })
  organizationContact?: OrganizationContactWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ExpenseCategoryWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ExpenseCategoryWhereUniqueInput)
  @IsOptional()
  @Field(() => ExpenseCategoryWhereUniqueInput, {
    nullable: true,
  })
  expenseCategory?: ExpenseCategoryWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => EmployeeWhereUniqueInput)
  @IsOptional()
  @Field(() => EmployeeWhereUniqueInput, {
    nullable: true,
  })
  employee?: EmployeeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationProjectWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationProjectWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationProjectWhereUniqueInput, {
    nullable: true,
  })
  organizationProject?: OrganizationProjectWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organization?: OrganizationWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationVendorWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationVendorWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationVendorWhereUniqueInput, {
    nullable: true,
  })
  organizationVendor?: OrganizationVendorWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => InvoiceItemUpdateManyWithoutExpensesInput,
  })
  @ValidateNested()
  @Type(() => InvoiceItemUpdateManyWithoutExpensesInput)
  @IsOptional()
  @Field(() => InvoiceItemUpdateManyWithoutExpensesInput, {
    nullable: true,
  })
  invoiceItem?: InvoiceItemUpdateManyWithoutExpensesInput;

  @ApiProperty({
    required: false,
    type: () => TagExpenseUpdateManyWithoutExpensesInput,
  })
  @ValidateNested()
  @Type(() => TagExpenseUpdateManyWithoutExpensesInput)
  @IsOptional()
  @Field(() => TagExpenseUpdateManyWithoutExpensesInput, {
    nullable: true,
  })
  tagExpense?: TagExpenseUpdateManyWithoutExpensesInput;
}

export { ExpenseUpdateInput as ExpenseUpdateInput };
