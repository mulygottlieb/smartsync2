/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExpenseService } from "../expense.service";
import { ExpenseCreateInput } from "./ExpenseCreateInput";
import { ExpenseWhereInput } from "./ExpenseWhereInput";
import { ExpenseWhereUniqueInput } from "./ExpenseWhereUniqueInput";
import { ExpenseFindManyArgs } from "./ExpenseFindManyArgs";
import { ExpenseUpdateInput } from "./ExpenseUpdateInput";
import { Expense } from "./Expense";
import { InvoiceItemFindManyArgs } from "../../invoiceItem/base/InvoiceItemFindManyArgs";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { InvoiceItemWhereUniqueInput } from "../../invoiceItem/base/InvoiceItemWhereUniqueInput";
import { TagExpenseFindManyArgs } from "../../tagExpense/base/TagExpenseFindManyArgs";
import { TagExpense } from "../../tagExpense/base/TagExpense";
import { TagExpenseWhereUniqueInput } from "../../tagExpense/base/TagExpenseWhereUniqueInput";

export class ExpenseControllerBase {
  constructor(protected readonly service: ExpenseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Expense })
  async create(@common.Body() data: ExpenseCreateInput): Promise<Expense> {
    return await this.service.create({
      data: {
        ...data,

        organizationContact: data.organizationContact
          ? {
              connect: data.organizationContact,
            }
          : undefined,

        expenseCategory: data.expenseCategory
          ? {
              connect: data.expenseCategory,
            }
          : undefined,

        employee: data.employee
          ? {
              connect: data.employee,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        organizationProject: data.organizationProject
          ? {
              connect: data.organizationProject,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        organizationVendor: data.organizationVendor
          ? {
              connect: data.organizationVendor,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        typeOfExpense: true,
        notes: true,
        currency: true,
        valueDate: true,
        purpose: true,
        taxType: true,
        taxLabel: true,
        rateValue: true,
        receipt: true,
        splitExpense: true,
        reference: true,
        status: true,

        organizationContact: {
          select: {
            id: true,
          },
        },

        expenseCategory: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationVendor: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Expense] })
  @ApiNestedQuery(ExpenseFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Expense[]> {
    const args = plainToClass(ExpenseFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        typeOfExpense: true,
        notes: true,
        currency: true,
        valueDate: true,
        purpose: true,
        taxType: true,
        taxLabel: true,
        rateValue: true,
        receipt: true,
        splitExpense: true,
        reference: true,
        status: true,

        organizationContact: {
          select: {
            id: true,
          },
        },

        expenseCategory: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationVendor: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Expense })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: ExpenseWhereUniqueInput
  ): Promise<Expense | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        typeOfExpense: true,
        notes: true,
        currency: true,
        valueDate: true,
        purpose: true,
        taxType: true,
        taxLabel: true,
        rateValue: true,
        receipt: true,
        splitExpense: true,
        reference: true,
        status: true,

        organizationContact: {
          select: {
            id: true,
          },
        },

        expenseCategory: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationVendor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Expense })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: ExpenseWhereUniqueInput,
    @common.Body() data: ExpenseUpdateInput
  ): Promise<Expense | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          organizationContact: data.organizationContact
            ? {
                connect: data.organizationContact,
              }
            : undefined,

          expenseCategory: data.expenseCategory
            ? {
                connect: data.expenseCategory,
              }
            : undefined,

          employee: data.employee
            ? {
                connect: data.employee,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          organizationProject: data.organizationProject
            ? {
                connect: data.organizationProject,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          organizationVendor: data.organizationVendor
            ? {
                connect: data.organizationVendor,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          amount: true,
          typeOfExpense: true,
          notes: true,
          currency: true,
          valueDate: true,
          purpose: true,
          taxType: true,
          taxLabel: true,
          rateValue: true,
          receipt: true,
          splitExpense: true,
          reference: true,
          status: true,

          organizationContact: {
            select: {
              id: true,
            },
          },

          expenseCategory: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          organizationProject: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          organizationVendor: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Expense })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: ExpenseWhereUniqueInput
  ): Promise<Expense | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          amount: true,
          typeOfExpense: true,
          notes: true,
          currency: true,
          valueDate: true,
          purpose: true,
          taxType: true,
          taxLabel: true,
          rateValue: true,
          receipt: true,
          splitExpense: true,
          reference: true,
          status: true,

          organizationContact: {
            select: {
              id: true,
            },
          },

          expenseCategory: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          organizationProject: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          organizationVendor: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/invoiceItem")
  @ApiNestedQuery(InvoiceItemFindManyArgs)
  async findManyInvoiceItem(
    @common.Req() request: Request,
    @common.Param() params: ExpenseWhereUniqueInput
  ): Promise<InvoiceItem[]> {
    const query = plainToClass(InvoiceItemFindManyArgs, request.query);
    const results = await this.service.findInvoiceItem(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        price: true,
        quantity: true,
        totalValue: true,
        applyTax: true,
        applyDiscount: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        invoice: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        expense: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoiceItem")
  async connectInvoiceItem(
    @common.Param() params: ExpenseWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoiceItem")
  async updateInvoiceItem(
    @common.Param() params: ExpenseWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoiceItem")
  async disconnectInvoiceItem(
    @common.Param() params: ExpenseWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagExpense")
  @ApiNestedQuery(TagExpenseFindManyArgs)
  async findManyTagExpense(
    @common.Req() request: Request,
    @common.Param() params: ExpenseWhereUniqueInput
  ): Promise<TagExpense[]> {
    const query = plainToClass(TagExpenseFindManyArgs, request.query);
    const results = await this.service.findTagExpense(params.id, {
      ...query,
      select: {
        expense: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagExpense")
  async connectTagExpense(
    @common.Param() params: ExpenseWhereUniqueInput,
    @common.Body() body: TagExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagExpense: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagExpense")
  async updateTagExpense(
    @common.Param() params: ExpenseWhereUniqueInput,
    @common.Body() body: TagExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagExpense: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagExpense")
  async disconnectTagExpense(
    @common.Param() params: ExpenseWhereUniqueInput,
    @common.Body() body: TagExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagExpense: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
