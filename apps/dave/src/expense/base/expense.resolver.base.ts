/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateExpenseArgs } from "./CreateExpenseArgs";
import { UpdateExpenseArgs } from "./UpdateExpenseArgs";
import { DeleteExpenseArgs } from "./DeleteExpenseArgs";
import { ExpenseCountArgs } from "./ExpenseCountArgs";
import { ExpenseFindManyArgs } from "./ExpenseFindManyArgs";
import { ExpenseFindUniqueArgs } from "./ExpenseFindUniqueArgs";
import { Expense } from "./Expense";
import { InvoiceItemFindManyArgs } from "../../invoiceItem/base/InvoiceItemFindManyArgs";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { TagExpenseFindManyArgs } from "../../tagExpense/base/TagExpenseFindManyArgs";
import { TagExpense } from "../../tagExpense/base/TagExpense";
import { OrganizationContact } from "../../organizationContact/base/OrganizationContact";
import { ExpenseCategory } from "../../expenseCategory/base/ExpenseCategory";
import { Employee } from "../../employee/base/Employee";
import { Tenant } from "../../tenant/base/Tenant";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { Organization } from "../../organization/base/Organization";
import { OrganizationVendor } from "../../organizationVendor/base/OrganizationVendor";
import { ExpenseService } from "../expense.service";
@graphql.Resolver(() => Expense)
export class ExpenseResolverBase {
  constructor(protected readonly service: ExpenseService) {}

  async _expensesMeta(
    @graphql.Args() args: ExpenseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Expense])
  async expenses(
    @graphql.Args() args: ExpenseFindManyArgs
  ): Promise<Expense[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Expense, { nullable: true })
  async expense(
    @graphql.Args() args: ExpenseFindUniqueArgs
  ): Promise<Expense | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Expense)
  async createExpense(
    @graphql.Args() args: CreateExpenseArgs
  ): Promise<Expense> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationContact: args.data.organizationContact
          ? {
              connect: args.data.organizationContact,
            }
          : undefined,

        expenseCategory: args.data.expenseCategory
          ? {
              connect: args.data.expenseCategory,
            }
          : undefined,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organizationProject: args.data.organizationProject
          ? {
              connect: args.data.organizationProject,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        organizationVendor: args.data.organizationVendor
          ? {
              connect: args.data.organizationVendor,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Expense)
  async updateExpense(
    @graphql.Args() args: UpdateExpenseArgs
  ): Promise<Expense | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationContact: args.data.organizationContact
            ? {
                connect: args.data.organizationContact,
              }
            : undefined,

          expenseCategory: args.data.expenseCategory
            ? {
                connect: args.data.expenseCategory,
              }
            : undefined,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organizationProject: args.data.organizationProject
            ? {
                connect: args.data.organizationProject,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          organizationVendor: args.data.organizationVendor
            ? {
                connect: args.data.organizationVendor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Expense)
  async deleteExpense(
    @graphql.Args() args: DeleteExpenseArgs
  ): Promise<Expense | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [InvoiceItem], { name: "invoiceItem" })
  async resolveFieldInvoiceItem(
    @graphql.Parent() parent: Expense,
    @graphql.Args() args: InvoiceItemFindManyArgs
  ): Promise<InvoiceItem[]> {
    const results = await this.service.findInvoiceItem(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagExpense], { name: "tagExpense" })
  async resolveFieldTagExpense(
    @graphql.Parent() parent: Expense,
    @graphql.Args() args: TagExpenseFindManyArgs
  ): Promise<TagExpense[]> {
    const results = await this.service.findTagExpense(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => OrganizationContact, {
    nullable: true,
    name: "organizationContact",
  })
  async resolveFieldOrganizationContact(
    @graphql.Parent() parent: Expense
  ): Promise<OrganizationContact | null> {
    const result = await this.service.getOrganizationContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ExpenseCategory, {
    nullable: true,
    name: "expenseCategory",
  })
  async resolveFieldExpenseCategory(
    @graphql.Parent() parent: Expense
  ): Promise<ExpenseCategory | null> {
    const result = await this.service.getExpenseCategory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: Expense
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: Expense
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationProject, {
    nullable: true,
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: Expense
  ): Promise<OrganizationProject | null> {
    const result = await this.service.getOrganizationProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: Expense
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationVendor, {
    nullable: true,
    name: "organizationVendor",
  })
  async resolveFieldOrganizationVendor(
    @graphql.Parent() parent: Expense
  ): Promise<OrganizationVendor | null> {
    const result = await this.service.getOrganizationVendor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
