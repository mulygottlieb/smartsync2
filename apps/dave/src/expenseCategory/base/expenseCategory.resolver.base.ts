/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateExpenseCategoryArgs } from "./CreateExpenseCategoryArgs";
import { UpdateExpenseCategoryArgs } from "./UpdateExpenseCategoryArgs";
import { DeleteExpenseCategoryArgs } from "./DeleteExpenseCategoryArgs";
import { ExpenseCategoryCountArgs } from "./ExpenseCategoryCountArgs";
import { ExpenseCategoryFindManyArgs } from "./ExpenseCategoryFindManyArgs";
import { ExpenseCategoryFindUniqueArgs } from "./ExpenseCategoryFindUniqueArgs";
import { ExpenseCategory } from "./ExpenseCategory";
import { ExpenseFindManyArgs } from "../../expense/base/ExpenseFindManyArgs";
import { Expense } from "../../expense/base/Expense";
import { TagOrganizationExpenseCategoryFindManyArgs } from "../../tagOrganizationExpenseCategory/base/TagOrganizationExpenseCategoryFindManyArgs";
import { TagOrganizationExpenseCategory } from "../../tagOrganizationExpenseCategory/base/TagOrganizationExpenseCategory";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { ExpenseCategoryService } from "../expenseCategory.service";
@graphql.Resolver(() => ExpenseCategory)
export class ExpenseCategoryResolverBase {
  constructor(protected readonly service: ExpenseCategoryService) {}

  async _expenseCategoriesMeta(
    @graphql.Args() args: ExpenseCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ExpenseCategory])
  async expenseCategories(
    @graphql.Args() args: ExpenseCategoryFindManyArgs
  ): Promise<ExpenseCategory[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ExpenseCategory, { nullable: true })
  async expenseCategory(
    @graphql.Args() args: ExpenseCategoryFindUniqueArgs
  ): Promise<ExpenseCategory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ExpenseCategory)
  async createExpenseCategory(
    @graphql.Args() args: CreateExpenseCategoryArgs
  ): Promise<ExpenseCategory> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ExpenseCategory)
  async updateExpenseCategory(
    @graphql.Args() args: UpdateExpenseCategoryArgs
  ): Promise<ExpenseCategory | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExpenseCategory)
  async deleteExpenseCategory(
    @graphql.Args() args: DeleteExpenseCategoryArgs
  ): Promise<ExpenseCategory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Expense], { name: "expense" })
  async resolveFieldExpense(
    @graphql.Parent() parent: ExpenseCategory,
    @graphql.Args() args: ExpenseFindManyArgs
  ): Promise<Expense[]> {
    const results = await this.service.findExpense(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationExpenseCategory], {
    name: "tagOrganizationExpenseCategory",
  })
  async resolveFieldTagOrganizationExpenseCategory(
    @graphql.Parent() parent: ExpenseCategory,
    @graphql.Args() args: TagOrganizationExpenseCategoryFindManyArgs
  ): Promise<TagOrganizationExpenseCategory[]> {
    const results = await this.service.findTagOrganizationExpenseCategory(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: ExpenseCategory
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: ExpenseCategory
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
