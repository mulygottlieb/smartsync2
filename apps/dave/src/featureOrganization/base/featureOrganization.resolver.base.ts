/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateFeatureOrganizationArgs } from "./CreateFeatureOrganizationArgs";
import { UpdateFeatureOrganizationArgs } from "./UpdateFeatureOrganizationArgs";
import { DeleteFeatureOrganizationArgs } from "./DeleteFeatureOrganizationArgs";
import { FeatureOrganizationCountArgs } from "./FeatureOrganizationCountArgs";
import { FeatureOrganizationFindManyArgs } from "./FeatureOrganizationFindManyArgs";
import { FeatureOrganizationFindUniqueArgs } from "./FeatureOrganizationFindUniqueArgs";
import { FeatureOrganization } from "./FeatureOrganization";
import { Organization } from "../../organization/base/Organization";
import { Feature } from "../../feature/base/Feature";
import { Tenant } from "../../tenant/base/Tenant";
import { FeatureOrganizationService } from "../featureOrganization.service";
@graphql.Resolver(() => FeatureOrganization)
export class FeatureOrganizationResolverBase {
  constructor(protected readonly service: FeatureOrganizationService) {}

  async _featureOrganizationsMeta(
    @graphql.Args() args: FeatureOrganizationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FeatureOrganization])
  async featureOrganizations(
    @graphql.Args() args: FeatureOrganizationFindManyArgs
  ): Promise<FeatureOrganization[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => FeatureOrganization, { nullable: true })
  async featureOrganization(
    @graphql.Args() args: FeatureOrganizationFindUniqueArgs
  ): Promise<FeatureOrganization | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FeatureOrganization)
  async createFeatureOrganization(
    @graphql.Args() args: CreateFeatureOrganizationArgs
  ): Promise<FeatureOrganization> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        feature: {
          connect: args.data.feature,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => FeatureOrganization)
  async updateFeatureOrganization(
    @graphql.Args() args: UpdateFeatureOrganizationArgs
  ): Promise<FeatureOrganization | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          feature: {
            connect: args.data.feature,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FeatureOrganization)
  async deleteFeatureOrganization(
    @graphql.Args() args: DeleteFeatureOrganizationArgs
  ): Promise<FeatureOrganization | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: FeatureOrganization
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Feature, {
    nullable: true,
    name: "feature",
  })
  async resolveFieldFeature(
    @graphql.Parent() parent: FeatureOrganization
  ): Promise<Feature | null> {
    const result = await this.service.getFeature(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: FeatureOrganization
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
