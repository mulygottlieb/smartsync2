/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateGoalArgs } from "./CreateGoalArgs";
import { UpdateGoalArgs } from "./UpdateGoalArgs";
import { DeleteGoalArgs } from "./DeleteGoalArgs";
import { GoalCountArgs } from "./GoalCountArgs";
import { GoalFindManyArgs } from "./GoalFindManyArgs";
import { GoalFindUniqueArgs } from "./GoalFindUniqueArgs";
import { Goal } from "./Goal";
import { KeyResultFindManyArgs } from "../../keyResult/base/KeyResultFindManyArgs";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { Employee } from "../../employee/base/Employee";
import { Tenant } from "../../tenant/base/Tenant";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { Organization } from "../../organization/base/Organization";
import { GoalService } from "../goal.service";
@graphql.Resolver(() => Goal)
export class GoalResolverBase {
  constructor(protected readonly service: GoalService) {}

  async _goalsMeta(
    @graphql.Args() args: GoalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Goal])
  async goals(@graphql.Args() args: GoalFindManyArgs): Promise<Goal[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Goal, { nullable: true })
  async goal(@graphql.Args() args: GoalFindUniqueArgs): Promise<Goal | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Goal)
  async createGoal(@graphql.Args() args: CreateGoalArgs): Promise<Goal> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        employeeGoalOwnerEmployeeIdToemployee: args.data
          .employeeGoalOwnerEmployeeIdToemployee
          ? {
              connect: args.data.employeeGoalOwnerEmployeeIdToemployee,
            }
          : undefined,

        keyResultGoalAlignedKeyResultIdTokeyResult: args.data
          .keyResultGoalAlignedKeyResultIdTokeyResult
          ? {
              connect: args.data.keyResultGoalAlignedKeyResultIdTokeyResult,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organizationTeam: args.data.organizationTeam
          ? {
              connect: args.data.organizationTeam,
            }
          : undefined,

        employeeGoalLeadIdToemployee: args.data.employeeGoalLeadIdToemployee
          ? {
              connect: args.data.employeeGoalLeadIdToemployee,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Goal)
  async updateGoal(@graphql.Args() args: UpdateGoalArgs): Promise<Goal | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          employeeGoalOwnerEmployeeIdToemployee: args.data
            .employeeGoalOwnerEmployeeIdToemployee
            ? {
                connect: args.data.employeeGoalOwnerEmployeeIdToemployee,
              }
            : undefined,

          keyResultGoalAlignedKeyResultIdTokeyResult: args.data
            .keyResultGoalAlignedKeyResultIdTokeyResult
            ? {
                connect: args.data.keyResultGoalAlignedKeyResultIdTokeyResult,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organizationTeam: args.data.organizationTeam
            ? {
                connect: args.data.organizationTeam,
              }
            : undefined,

          employeeGoalLeadIdToemployee: args.data.employeeGoalLeadIdToemployee
            ? {
                connect: args.data.employeeGoalLeadIdToemployee,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Goal)
  async deleteGoal(@graphql.Args() args: DeleteGoalArgs): Promise<Goal | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [KeyResult], {
    name: "keyResultKeyResultGoalIdTogoal",
  })
  async resolveFieldKeyResultKeyResultGoalIdTogoal(
    @graphql.Parent() parent: Goal,
    @graphql.Args() args: KeyResultFindManyArgs
  ): Promise<KeyResult[]> {
    const results = await this.service.findKeyResultKeyResultGoalIdTogoal(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employeeGoalOwnerEmployeeIdToemployee",
  })
  async resolveFieldEmployeeGoalOwnerEmployeeIdToemployee(
    @graphql.Parent() parent: Goal
  ): Promise<Employee | null> {
    const result = await this.service.getEmployeeGoalOwnerEmployeeIdToemployee(
      parent.id
    );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => KeyResult, {
    nullable: true,
    name: "keyResultGoalAlignedKeyResultIdTokeyResult",
  })
  async resolveFieldKeyResultGoalAlignedKeyResultIdTokeyResult(
    @graphql.Parent() parent: Goal
  ): Promise<KeyResult | null> {
    const result =
      await this.service.getKeyResultGoalAlignedKeyResultIdTokeyResult(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: Goal
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationTeam, {
    nullable: true,
    name: "organizationTeam",
  })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: Goal
  ): Promise<OrganizationTeam | null> {
    const result = await this.service.getOrganizationTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employeeGoalLeadIdToemployee",
  })
  async resolveFieldEmployeeGoalLeadIdToemployee(
    @graphql.Parent() parent: Goal
  ): Promise<Employee | null> {
    const result = await this.service.getEmployeeGoalLeadIdToemployee(
      parent.id
    );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: Goal
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
