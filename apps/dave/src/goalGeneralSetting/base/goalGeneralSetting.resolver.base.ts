/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateGoalGeneralSettingArgs } from "./CreateGoalGeneralSettingArgs";
import { UpdateGoalGeneralSettingArgs } from "./UpdateGoalGeneralSettingArgs";
import { DeleteGoalGeneralSettingArgs } from "./DeleteGoalGeneralSettingArgs";
import { GoalGeneralSettingCountArgs } from "./GoalGeneralSettingCountArgs";
import { GoalGeneralSettingFindManyArgs } from "./GoalGeneralSettingFindManyArgs";
import { GoalGeneralSettingFindUniqueArgs } from "./GoalGeneralSettingFindUniqueArgs";
import { GoalGeneralSetting } from "./GoalGeneralSetting";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { GoalGeneralSettingService } from "../goalGeneralSetting.service";
@graphql.Resolver(() => GoalGeneralSetting)
export class GoalGeneralSettingResolverBase {
  constructor(protected readonly service: GoalGeneralSettingService) {}

  async _goalGeneralSettingsMeta(
    @graphql.Args() args: GoalGeneralSettingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GoalGeneralSetting])
  async goalGeneralSettings(
    @graphql.Args() args: GoalGeneralSettingFindManyArgs
  ): Promise<GoalGeneralSetting[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => GoalGeneralSetting, { nullable: true })
  async goalGeneralSetting(
    @graphql.Args() args: GoalGeneralSettingFindUniqueArgs
  ): Promise<GoalGeneralSetting | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GoalGeneralSetting)
  async createGoalGeneralSetting(
    @graphql.Args() args: CreateGoalGeneralSettingArgs
  ): Promise<GoalGeneralSetting> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => GoalGeneralSetting)
  async updateGoalGeneralSetting(
    @graphql.Args() args: UpdateGoalGeneralSettingArgs
  ): Promise<GoalGeneralSetting | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GoalGeneralSetting)
  async deleteGoalGeneralSetting(
    @graphql.Args() args: DeleteGoalGeneralSettingArgs
  ): Promise<GoalGeneralSetting | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: GoalGeneralSetting
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: GoalGeneralSetting
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
