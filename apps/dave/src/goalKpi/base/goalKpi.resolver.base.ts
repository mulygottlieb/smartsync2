/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateGoalKpiArgs } from "./CreateGoalKpiArgs";
import { UpdateGoalKpiArgs } from "./UpdateGoalKpiArgs";
import { DeleteGoalKpiArgs } from "./DeleteGoalKpiArgs";
import { GoalKpiCountArgs } from "./GoalKpiCountArgs";
import { GoalKpiFindManyArgs } from "./GoalKpiFindManyArgs";
import { GoalKpiFindUniqueArgs } from "./GoalKpiFindUniqueArgs";
import { GoalKpi } from "./GoalKpi";
import { KeyResultFindManyArgs } from "../../keyResult/base/KeyResultFindManyArgs";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { Tenant } from "../../tenant/base/Tenant";
import { Employee } from "../../employee/base/Employee";
import { Organization } from "../../organization/base/Organization";
import { GoalKpiService } from "../goalKpi.service";
@graphql.Resolver(() => GoalKpi)
export class GoalKpiResolverBase {
  constructor(protected readonly service: GoalKpiService) {}

  async _goalKpisMeta(
    @graphql.Args() args: GoalKpiCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GoalKpi])
  async goalKpis(
    @graphql.Args() args: GoalKpiFindManyArgs
  ): Promise<GoalKpi[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => GoalKpi, { nullable: true })
  async goalKpi(
    @graphql.Args() args: GoalKpiFindUniqueArgs
  ): Promise<GoalKpi | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GoalKpi)
  async createGoalKpi(
    @graphql.Args() args: CreateGoalKpiArgs
  ): Promise<GoalKpi> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => GoalKpi)
  async updateGoalKpi(
    @graphql.Args() args: UpdateGoalKpiArgs
  ): Promise<GoalKpi | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GoalKpi)
  async deleteGoalKpi(
    @graphql.Args() args: DeleteGoalKpiArgs
  ): Promise<GoalKpi | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [KeyResult], { name: "keyResult" })
  async resolveFieldKeyResult(
    @graphql.Parent() parent: GoalKpi,
    @graphql.Args() args: KeyResultFindManyArgs
  ): Promise<KeyResult[]> {
    const results = await this.service.findKeyResult(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: GoalKpi
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: GoalKpi
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: GoalKpi
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
