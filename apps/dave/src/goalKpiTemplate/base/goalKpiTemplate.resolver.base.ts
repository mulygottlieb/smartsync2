/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateGoalKpiTemplateArgs } from "./CreateGoalKpiTemplateArgs";
import { UpdateGoalKpiTemplateArgs } from "./UpdateGoalKpiTemplateArgs";
import { DeleteGoalKpiTemplateArgs } from "./DeleteGoalKpiTemplateArgs";
import { GoalKpiTemplateCountArgs } from "./GoalKpiTemplateCountArgs";
import { GoalKpiTemplateFindManyArgs } from "./GoalKpiTemplateFindManyArgs";
import { GoalKpiTemplateFindUniqueArgs } from "./GoalKpiTemplateFindUniqueArgs";
import { GoalKpiTemplate } from "./GoalKpiTemplate";
import { KeyResultTemplateFindManyArgs } from "../../keyResultTemplate/base/KeyResultTemplateFindManyArgs";
import { KeyResultTemplate } from "../../keyResultTemplate/base/KeyResultTemplate";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { Employee } from "../../employee/base/Employee";
import { GoalKpiTemplateService } from "../goalKpiTemplate.service";
@graphql.Resolver(() => GoalKpiTemplate)
export class GoalKpiTemplateResolverBase {
  constructor(protected readonly service: GoalKpiTemplateService) {}

  async _goalKpiTemplatesMeta(
    @graphql.Args() args: GoalKpiTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GoalKpiTemplate])
  async goalKpiTemplates(
    @graphql.Args() args: GoalKpiTemplateFindManyArgs
  ): Promise<GoalKpiTemplate[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => GoalKpiTemplate, { nullable: true })
  async goalKpiTemplate(
    @graphql.Args() args: GoalKpiTemplateFindUniqueArgs
  ): Promise<GoalKpiTemplate | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GoalKpiTemplate)
  async createGoalKpiTemplate(
    @graphql.Args() args: CreateGoalKpiTemplateArgs
  ): Promise<GoalKpiTemplate> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => GoalKpiTemplate)
  async updateGoalKpiTemplate(
    @graphql.Args() args: UpdateGoalKpiTemplateArgs
  ): Promise<GoalKpiTemplate | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GoalKpiTemplate)
  async deleteGoalKpiTemplate(
    @graphql.Args() args: DeleteGoalKpiTemplateArgs
  ): Promise<GoalKpiTemplate | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [KeyResultTemplate], {
    name: "keyResultTemplate",
  })
  async resolveFieldKeyResultTemplate(
    @graphql.Parent() parent: GoalKpiTemplate,
    @graphql.Args() args: KeyResultTemplateFindManyArgs
  ): Promise<KeyResultTemplate[]> {
    const results = await this.service.findKeyResultTemplate(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: GoalKpiTemplate
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: GoalKpiTemplate
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: GoalKpiTemplate
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
