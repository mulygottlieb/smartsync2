/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateGoalTemplateArgs } from "./CreateGoalTemplateArgs";
import { UpdateGoalTemplateArgs } from "./UpdateGoalTemplateArgs";
import { DeleteGoalTemplateArgs } from "./DeleteGoalTemplateArgs";
import { GoalTemplateCountArgs } from "./GoalTemplateCountArgs";
import { GoalTemplateFindManyArgs } from "./GoalTemplateFindManyArgs";
import { GoalTemplateFindUniqueArgs } from "./GoalTemplateFindUniqueArgs";
import { GoalTemplate } from "./GoalTemplate";
import { KeyResultTemplateFindManyArgs } from "../../keyResultTemplate/base/KeyResultTemplateFindManyArgs";
import { KeyResultTemplate } from "../../keyResultTemplate/base/KeyResultTemplate";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { GoalTemplateService } from "../goalTemplate.service";
@graphql.Resolver(() => GoalTemplate)
export class GoalTemplateResolverBase {
  constructor(protected readonly service: GoalTemplateService) {}

  async _goalTemplatesMeta(
    @graphql.Args() args: GoalTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GoalTemplate])
  async goalTemplates(
    @graphql.Args() args: GoalTemplateFindManyArgs
  ): Promise<GoalTemplate[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => GoalTemplate, { nullable: true })
  async goalTemplate(
    @graphql.Args() args: GoalTemplateFindUniqueArgs
  ): Promise<GoalTemplate | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GoalTemplate)
  async createGoalTemplate(
    @graphql.Args() args: CreateGoalTemplateArgs
  ): Promise<GoalTemplate> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => GoalTemplate)
  async updateGoalTemplate(
    @graphql.Args() args: UpdateGoalTemplateArgs
  ): Promise<GoalTemplate | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GoalTemplate)
  async deleteGoalTemplate(
    @graphql.Args() args: DeleteGoalTemplateArgs
  ): Promise<GoalTemplate | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [KeyResultTemplate], {
    name: "keyResultTemplate",
  })
  async resolveFieldKeyResultTemplate(
    @graphql.Parent() parent: GoalTemplate,
    @graphql.Args() args: KeyResultTemplateFindManyArgs
  ): Promise<KeyResultTemplate[]> {
    const results = await this.service.findKeyResultTemplate(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: GoalTemplate
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: GoalTemplate
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
