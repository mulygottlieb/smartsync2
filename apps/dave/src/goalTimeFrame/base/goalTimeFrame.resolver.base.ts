/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateGoalTimeFrameArgs } from "./CreateGoalTimeFrameArgs";
import { UpdateGoalTimeFrameArgs } from "./UpdateGoalTimeFrameArgs";
import { DeleteGoalTimeFrameArgs } from "./DeleteGoalTimeFrameArgs";
import { GoalTimeFrameCountArgs } from "./GoalTimeFrameCountArgs";
import { GoalTimeFrameFindManyArgs } from "./GoalTimeFrameFindManyArgs";
import { GoalTimeFrameFindUniqueArgs } from "./GoalTimeFrameFindUniqueArgs";
import { GoalTimeFrame } from "./GoalTimeFrame";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { GoalTimeFrameService } from "../goalTimeFrame.service";
@graphql.Resolver(() => GoalTimeFrame)
export class GoalTimeFrameResolverBase {
  constructor(protected readonly service: GoalTimeFrameService) {}

  async _goalTimeFramesMeta(
    @graphql.Args() args: GoalTimeFrameCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GoalTimeFrame])
  async goalTimeFrames(
    @graphql.Args() args: GoalTimeFrameFindManyArgs
  ): Promise<GoalTimeFrame[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => GoalTimeFrame, { nullable: true })
  async goalTimeFrame(
    @graphql.Args() args: GoalTimeFrameFindUniqueArgs
  ): Promise<GoalTimeFrame | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GoalTimeFrame)
  async createGoalTimeFrame(
    @graphql.Args() args: CreateGoalTimeFrameArgs
  ): Promise<GoalTimeFrame> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => GoalTimeFrame)
  async updateGoalTimeFrame(
    @graphql.Args() args: UpdateGoalTimeFrameArgs
  ): Promise<GoalTimeFrame | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GoalTimeFrame)
  async deleteGoalTimeFrame(
    @graphql.Args() args: DeleteGoalTimeFrameArgs
  ): Promise<GoalTimeFrame | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: GoalTimeFrame
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: GoalTimeFrame
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
