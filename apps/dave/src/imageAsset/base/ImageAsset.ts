/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  IsDate,
  IsOptional,
  IsInt,
  IsBoolean,
  IsNumber,
  IsEnum,
  ValidateNested,
} from "class-validator";

import { Type } from "class-transformer";
import { Decimal } from "decimal.js";
import { EnumImageAssetStorageProvider } from "./EnumImageAssetStorageProvider";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { Equipment } from "../../equipment/base/Equipment";
import { IssueType } from "../../issueType/base/IssueType";
import { Merchant } from "../../merchant/base/Merchant";
import { OrganizationContact } from "../../organizationContact/base/OrganizationContact";
import { OrganizationDocument } from "../../organizationDocument/base/OrganizationDocument";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { Product } from "../../product/base/Product";
import { ProductCategory } from "../../productCategory/base/ProductCategory";
import { ProductGalleryItem } from "../../productGalleryItem/base/ProductGalleryItem";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { TimeOffRequest } from "../../timeOffRequest/base/TimeOffRequest";
import { User } from "../../user/base/User";
import { Warehouse } from "../../warehouse/base/Warehouse";

@ObjectType()
class ImageAsset {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  url!: string;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  width!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  height!: number;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isFeatured!: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  thumb!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  size!: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  externalProviderId!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumImageAssetStorageProvider,
  })
  @IsEnum(EnumImageAssetStorageProvider)
  @IsOptional()
  @Field(() => EnumImageAssetStorageProvider, {
    nullable: true,
  })
  storageProvider?: "LOCAL" | "S3" | "WASABI" | "CLOUDINARY" | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  deletedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: () => Tenant,
  })
  @ValidateNested()
  @Type(() => Tenant)
  @IsOptional()
  tenantImageAssetTenantIdTotenant?: Tenant | null;

  @ApiProperty({
    required: false,
    type: () => Organization,
  })
  @ValidateNested()
  @Type(() => Organization)
  @IsOptional()
  organizationImageAssetOrganizationIdToorganization?: Organization | null;

  @ApiProperty({
    required: true,
    type: () => [Organization],
  })
  @ValidateNested()
  @Type(() => Organization)
  @IsOptional()
  organizationOrganizationImageIdToimageAsset?: Array<Organization>;

  @ApiProperty({
    required: true,
    type: () => [Tenant],
  })
  @ValidateNested()
  @Type(() => Tenant)
  @IsOptional()
  tenantTenantImageIdToimageAsset?: Array<Tenant>;

  @ApiProperty({
    required: false,
    type: () => [Equipment],
  })
  @ValidateNested()
  @Type(() => Equipment)
  @IsOptional()
  equipment?: Array<Equipment>;

  @ApiProperty({
    required: false,
    type: () => [IssueType],
  })
  @ValidateNested()
  @Type(() => IssueType)
  @IsOptional()
  issueType?: Array<IssueType>;

  @ApiProperty({
    required: false,
    type: () => [Merchant],
  })
  @ValidateNested()
  @Type(() => Merchant)
  @IsOptional()
  merchant?: Array<Merchant>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationContact],
  })
  @ValidateNested()
  @Type(() => OrganizationContact)
  @IsOptional()
  organizationContact?: Array<OrganizationContact>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationDocument],
  })
  @ValidateNested()
  @Type(() => OrganizationDocument)
  @IsOptional()
  organizationDocument?: Array<OrganizationDocument>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationProject],
  })
  @ValidateNested()
  @Type(() => OrganizationProject)
  @IsOptional()
  organizationProject?: Array<OrganizationProject>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationTeam],
  })
  @ValidateNested()
  @Type(() => OrganizationTeam)
  @IsOptional()
  organizationTeam?: Array<OrganizationTeam>;

  @ApiProperty({
    required: false,
    type: () => [Product],
  })
  @ValidateNested()
  @Type(() => Product)
  @IsOptional()
  product?: Array<Product>;

  @ApiProperty({
    required: false,
    type: () => [ProductCategory],
  })
  @ValidateNested()
  @Type(() => ProductCategory)
  @IsOptional()
  productCategory?: Array<ProductCategory>;

  @ApiProperty({
    required: false,
    type: () => [ProductGalleryItem],
  })
  @ValidateNested()
  @Type(() => ProductGalleryItem)
  @IsOptional()
  productGalleryItem?: Array<ProductGalleryItem>;

  @ApiProperty({
    required: false,
    type: () => [ProductVariant],
  })
  @ValidateNested()
  @Type(() => ProductVariant)
  @IsOptional()
  productVariant?: Array<ProductVariant>;

  @ApiProperty({
    required: false,
    type: () => [TimeOffRequest],
  })
  @ValidateNested()
  @Type(() => TimeOffRequest)
  @IsOptional()
  timeOffRequest?: Array<TimeOffRequest>;

  @ApiProperty({
    required: false,
    type: () => [User],
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  user?: Array<User>;

  @ApiProperty({
    required: false,
    type: () => [Warehouse],
  })
  @ValidateNested()
  @Type(() => Warehouse)
  @IsOptional()
  warehouse?: Array<Warehouse>;
}

export { ImageAsset as ImageAsset };
