/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, IsEnum, ValidateNested } from "class-validator";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { IntFilter } from "../../util/IntFilter";
import { BooleanFilter } from "../../util/BooleanFilter";
import { DecimalNullableFilter } from "../../util/DecimalNullableFilter";
import { EnumImageAssetStorageProvider } from "./EnumImageAssetStorageProvider";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { OrganizationListRelationFilter } from "../../organization/base/OrganizationListRelationFilter";
import { TenantListRelationFilter } from "../../tenant/base/TenantListRelationFilter";
import { EquipmentListRelationFilter } from "../../equipment/base/EquipmentListRelationFilter";
import { IssueTypeListRelationFilter } from "../../issueType/base/IssueTypeListRelationFilter";
import { MerchantListRelationFilter } from "../../merchant/base/MerchantListRelationFilter";
import { OrganizationContactListRelationFilter } from "../../organizationContact/base/OrganizationContactListRelationFilter";
import { OrganizationDocumentListRelationFilter } from "../../organizationDocument/base/OrganizationDocumentListRelationFilter";
import { OrganizationProjectListRelationFilter } from "../../organizationProject/base/OrganizationProjectListRelationFilter";
import { OrganizationTeamListRelationFilter } from "../../organizationTeam/base/OrganizationTeamListRelationFilter";
import { ProductListRelationFilter } from "../../product/base/ProductListRelationFilter";
import { ProductCategoryListRelationFilter } from "../../productCategory/base/ProductCategoryListRelationFilter";
import { ProductGalleryItemListRelationFilter } from "../../productGalleryItem/base/ProductGalleryItemListRelationFilter";
import { ProductVariantListRelationFilter } from "../../productVariant/base/ProductVariantListRelationFilter";
import { TimeOffRequestListRelationFilter } from "../../timeOffRequest/base/TimeOffRequestListRelationFilter";
import { UserListRelationFilter } from "../../user/base/UserListRelationFilter";
import { WarehouseListRelationFilter } from "../../warehouse/base/WarehouseListRelationFilter";

@InputType()
class ImageAssetWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  createdAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  name?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  url?: StringFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  width?: IntFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  height?: IntFilter;

  @ApiProperty({
    required: false,
    type: BooleanFilter,
  })
  @Type(() => BooleanFilter)
  @IsOptional()
  @Field(() => BooleanFilter, {
    nullable: true,
  })
  isFeatured?: BooleanFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  thumb?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DecimalNullableFilter,
  })
  @Type(() => DecimalNullableFilter)
  @IsOptional()
  @Field(() => DecimalNullableFilter, {
    nullable: true,
  })
  size?: DecimalNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  externalProviderId?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumImageAssetStorageProvider,
  })
  @IsEnum(EnumImageAssetStorageProvider)
  @IsOptional()
  @Field(() => EnumImageAssetStorageProvider, {
    nullable: true,
  })
  storageProvider?: "LOCAL" | "S3" | "WASABI" | "CLOUDINARY";

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  deletedAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenantImageAssetTenantIdTotenant?: TenantWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organizationImageAssetOrganizationIdToorganization?: OrganizationWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationListRelationFilter, {
    nullable: true,
  })
  organizationOrganizationImageIdToimageAsset?: OrganizationListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TenantListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TenantListRelationFilter)
  @IsOptional()
  @Field(() => TenantListRelationFilter, {
    nullable: true,
  })
  tenantTenantImageIdToimageAsset?: TenantListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EquipmentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EquipmentListRelationFilter)
  @IsOptional()
  @Field(() => EquipmentListRelationFilter, {
    nullable: true,
  })
  equipment?: EquipmentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => IssueTypeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => IssueTypeListRelationFilter)
  @IsOptional()
  @Field(() => IssueTypeListRelationFilter, {
    nullable: true,
  })
  issueType?: IssueTypeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => MerchantListRelationFilter,
  })
  @ValidateNested()
  @Type(() => MerchantListRelationFilter)
  @IsOptional()
  @Field(() => MerchantListRelationFilter, {
    nullable: true,
  })
  merchant?: MerchantListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationContactListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationContactListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationContactListRelationFilter, {
    nullable: true,
  })
  organizationContact?: OrganizationContactListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationDocumentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationDocumentListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationDocumentListRelationFilter, {
    nullable: true,
  })
  organizationDocument?: OrganizationDocumentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationProjectListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationProjectListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationProjectListRelationFilter, {
    nullable: true,
  })
  organizationProject?: OrganizationProjectListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationTeamListRelationFilter, {
    nullable: true,
  })
  organizationTeam?: OrganizationTeamListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ProductListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProductListRelationFilter)
  @IsOptional()
  @Field(() => ProductListRelationFilter, {
    nullable: true,
  })
  product?: ProductListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ProductCategoryListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProductCategoryListRelationFilter)
  @IsOptional()
  @Field(() => ProductCategoryListRelationFilter, {
    nullable: true,
  })
  productCategory?: ProductCategoryListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ProductGalleryItemListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProductGalleryItemListRelationFilter)
  @IsOptional()
  @Field(() => ProductGalleryItemListRelationFilter, {
    nullable: true,
  })
  productGalleryItem?: ProductGalleryItemListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ProductVariantListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProductVariantListRelationFilter)
  @IsOptional()
  @Field(() => ProductVariantListRelationFilter, {
    nullable: true,
  })
  productVariant?: ProductVariantListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TimeOffRequestListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TimeOffRequestListRelationFilter)
  @IsOptional()
  @Field(() => TimeOffRequestListRelationFilter, {
    nullable: true,
  })
  timeOffRequest?: TimeOffRequestListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UserListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserListRelationFilter)
  @IsOptional()
  @Field(() => UserListRelationFilter, {
    nullable: true,
  })
  user?: UserListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => WarehouseListRelationFilter,
  })
  @ValidateNested()
  @Type(() => WarehouseListRelationFilter)
  @IsOptional()
  @Field(() => WarehouseListRelationFilter, {
    nullable: true,
  })
  warehouse?: WarehouseListRelationFilter;
}

export { ImageAssetWhereInput as ImageAssetWhereInput };
