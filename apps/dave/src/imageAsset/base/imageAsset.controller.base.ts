/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ImageAssetService } from "../imageAsset.service";
import { ImageAssetCreateInput } from "./ImageAssetCreateInput";
import { ImageAssetWhereInput } from "./ImageAssetWhereInput";
import { ImageAssetWhereUniqueInput } from "./ImageAssetWhereUniqueInput";
import { ImageAssetFindManyArgs } from "./ImageAssetFindManyArgs";
import { ImageAssetUpdateInput } from "./ImageAssetUpdateInput";
import { ImageAsset } from "./ImageAsset";
import { OrganizationFindManyArgs } from "../../organization/base/OrganizationFindManyArgs";
import { Organization } from "../../organization/base/Organization";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { TenantFindManyArgs } from "../../tenant/base/TenantFindManyArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { EquipmentFindManyArgs } from "../../equipment/base/EquipmentFindManyArgs";
import { Equipment } from "../../equipment/base/Equipment";
import { EquipmentWhereUniqueInput } from "../../equipment/base/EquipmentWhereUniqueInput";
import { IssueTypeFindManyArgs } from "../../issueType/base/IssueTypeFindManyArgs";
import { IssueType } from "../../issueType/base/IssueType";
import { IssueTypeWhereUniqueInput } from "../../issueType/base/IssueTypeWhereUniqueInput";
import { MerchantFindManyArgs } from "../../merchant/base/MerchantFindManyArgs";
import { Merchant } from "../../merchant/base/Merchant";
import { MerchantWhereUniqueInput } from "../../merchant/base/MerchantWhereUniqueInput";
import { OrganizationContactFindManyArgs } from "../../organizationContact/base/OrganizationContactFindManyArgs";
import { OrganizationContact } from "../../organizationContact/base/OrganizationContact";
import { OrganizationContactWhereUniqueInput } from "../../organizationContact/base/OrganizationContactWhereUniqueInput";
import { OrganizationDocumentFindManyArgs } from "../../organizationDocument/base/OrganizationDocumentFindManyArgs";
import { OrganizationDocument } from "../../organizationDocument/base/OrganizationDocument";
import { OrganizationDocumentWhereUniqueInput } from "../../organizationDocument/base/OrganizationDocumentWhereUniqueInput";
import { OrganizationProjectFindManyArgs } from "../../organizationProject/base/OrganizationProjectFindManyArgs";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { OrganizationProjectWhereUniqueInput } from "../../organizationProject/base/OrganizationProjectWhereUniqueInput";
import { OrganizationTeamFindManyArgs } from "../../organizationTeam/base/OrganizationTeamFindManyArgs";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { OrganizationTeamWhereUniqueInput } from "../../organizationTeam/base/OrganizationTeamWhereUniqueInput";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { ProductWhereUniqueInput } from "../../product/base/ProductWhereUniqueInput";
import { ProductCategoryFindManyArgs } from "../../productCategory/base/ProductCategoryFindManyArgs";
import { ProductCategory } from "../../productCategory/base/ProductCategory";
import { ProductCategoryWhereUniqueInput } from "../../productCategory/base/ProductCategoryWhereUniqueInput";
import { ProductGalleryItemFindManyArgs } from "../../productGalleryItem/base/ProductGalleryItemFindManyArgs";
import { ProductGalleryItem } from "../../productGalleryItem/base/ProductGalleryItem";
import { ProductGalleryItemWhereUniqueInput } from "../../productGalleryItem/base/ProductGalleryItemWhereUniqueInput";
import { ProductVariantFindManyArgs } from "../../productVariant/base/ProductVariantFindManyArgs";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { ProductVariantWhereUniqueInput } from "../../productVariant/base/ProductVariantWhereUniqueInput";
import { TimeOffRequestFindManyArgs } from "../../timeOffRequest/base/TimeOffRequestFindManyArgs";
import { TimeOffRequest } from "../../timeOffRequest/base/TimeOffRequest";
import { TimeOffRequestWhereUniqueInput } from "../../timeOffRequest/base/TimeOffRequestWhereUniqueInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { WarehouseFindManyArgs } from "../../warehouse/base/WarehouseFindManyArgs";
import { Warehouse } from "../../warehouse/base/Warehouse";
import { WarehouseWhereUniqueInput } from "../../warehouse/base/WarehouseWhereUniqueInput";

export class ImageAssetControllerBase {
  constructor(protected readonly service: ImageAssetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ImageAsset })
  async create(
    @common.Body() data: ImageAssetCreateInput
  ): Promise<ImageAsset> {
    return await this.service.create({
      data: {
        ...data,

        tenantImageAssetTenantIdTotenant: data.tenantImageAssetTenantIdTotenant
          ? {
              connect: data.tenantImageAssetTenantIdTotenant,
            }
          : undefined,

        organizationImageAssetOrganizationIdToorganization:
          data.organizationImageAssetOrganizationIdToorganization
            ? {
                connect:
                  data.organizationImageAssetOrganizationIdToorganization,
              }
            : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        url: true,
        width: true,
        height: true,
        isFeatured: true,
        thumb: true,
        size: true,
        externalProviderId: true,
        storageProvider: true,
        deletedAt: true,

        tenantImageAssetTenantIdTotenant: {
          select: {
            id: true,
          },
        },

        organizationImageAssetOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ImageAsset] })
  @ApiNestedQuery(ImageAssetFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<ImageAsset[]> {
    const args = plainToClass(ImageAssetFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        url: true,
        width: true,
        height: true,
        isFeatured: true,
        thumb: true,
        size: true,
        externalProviderId: true,
        storageProvider: true,
        deletedAt: true,

        tenantImageAssetTenantIdTotenant: {
          select: {
            id: true,
          },
        },

        organizationImageAssetOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ImageAsset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<ImageAsset | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        url: true,
        width: true,
        height: true,
        isFeatured: true,
        thumb: true,
        size: true,
        externalProviderId: true,
        storageProvider: true,
        deletedAt: true,

        tenantImageAssetTenantIdTotenant: {
          select: {
            id: true,
          },
        },

        organizationImageAssetOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ImageAsset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() data: ImageAssetUpdateInput
  ): Promise<ImageAsset | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          tenantImageAssetTenantIdTotenant:
            data.tenantImageAssetTenantIdTotenant
              ? {
                  connect: data.tenantImageAssetTenantIdTotenant,
                }
              : undefined,

          organizationImageAssetOrganizationIdToorganization:
            data.organizationImageAssetOrganizationIdToorganization
              ? {
                  connect:
                    data.organizationImageAssetOrganizationIdToorganization,
                }
              : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          url: true,
          width: true,
          height: true,
          isFeatured: true,
          thumb: true,
          size: true,
          externalProviderId: true,
          storageProvider: true,
          deletedAt: true,

          tenantImageAssetTenantIdTotenant: {
            select: {
              id: true,
            },
          },

          organizationImageAssetOrganizationIdToorganization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ImageAsset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<ImageAsset | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          url: true,
          width: true,
          height: true,
          isFeatured: true,
          thumb: true,
          size: true,
          externalProviderId: true,
          storageProvider: true,
          deletedAt: true,

          tenantImageAssetTenantIdTotenant: {
            select: {
              id: true,
            },
          },

          organizationImageAssetOrganizationIdToorganization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/organizationOrganizationImageIdToimageAsset")
  @ApiNestedQuery(OrganizationFindManyArgs)
  async findManyOrganizationOrganizationImageIdToimageAsset(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<Organization[]> {
    const query = plainToClass(OrganizationFindManyArgs, request.query);
    const results =
      await this.service.findOrganizationOrganizationImageIdToimageAsset(
        params.id,
        {
          ...query,
          select: {
            activityProofDuration: true,
            allowDeleteTime: true,
            allowManualTime: true,
            allowModifyTime: true,
            allowScreenshotCapture: true,
            allowTrackInactivity: true,
            banner: true,
            bonusPercentage: true,
            bonusType: true,
            brandColor: true,
            clientFocus: true,

            contactOrganizationContactIdTocontact: {
              select: {
                id: true,
              },
            },

            convertAcceptedEstimates: true,
            createdAt: true,
            currency: true,
            currencyPosition: true,
            dateFormat: true,
            daysUntilDue: true,
            defaultAlignmentType: true,
            defaultEndTime: true,
            defaultInvoiceEstimateTerms: true,
            defaultStartTime: true,
            defaultValueDateType: true,
            discountAfterTax: true,
            fiscalEndDate: true,
            fiscalInformation: true,
            fiscalStartDate: true,
            futureDateAllowed: true,
            id: true,

            imageAssetOrganizationImageIdToimageAsset: {
              select: {
                id: true,
              },
            },

            imageUrl: true,
            inactivityTimeLimit: true,
            inviteExpiryPeriod: true,
            invitesAllowed: true,
            isActive: true,
            isDefault: true,
            isRemoveIdleTime: true,
            minimumProjectSize: true,
            name: true,
            numberFormat: true,
            officialName: true,
            overview: true,
            profileLink: true,
            regionCode: true,
            registrationDate: true,
            requireClient: true,
            requireDescription: true,
            requireProject: true,
            requireReason: true,
            requireTask: true,
            separateInvoiceItemTaxAndDiscount: true,
            shortDescription: true,
            showBonusesPaid: true,
            showClients: true,
            showClientsCount: true,
            showEmployeesCount: true,
            showIncome: true,
            showMinimumProjectSize: true,
            showProfits: true,
            showProjectsCount: true,
            showTotalHours: true,
            startWeekOn: true,
            taxId: true,

            tenant: {
              select: {
                id: true,
              },
            },

            timeFormat: true,
            timeZone: true,
            totalEmployees: true,
            updatedAt: true,
            upworkOrganizationId: true,
            valueDate: true,
            website: true,
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationOrganizationImageIdToimageAsset")
  async connectOrganizationOrganizationImageIdToimageAsset(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationOrganizationImageIdToimageAsset: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationOrganizationImageIdToimageAsset")
  async updateOrganizationOrganizationImageIdToimageAsset(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationOrganizationImageIdToimageAsset: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationOrganizationImageIdToimageAsset")
  async disconnectOrganizationOrganizationImageIdToimageAsset(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationOrganizationImageIdToimageAsset: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tenantTenantImageIdToimageAsset")
  @ApiNestedQuery(TenantFindManyArgs)
  async findManyTenantTenantImageIdToimageAsset(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<Tenant[]> {
    const query = plainToClass(TenantFindManyArgs, request.query);
    const results = await this.service.findTenantTenantImageIdToimageAsset(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          logo: true,

          imageAssetTenantImageIdToimageAsset: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tenantTenantImageIdToimageAsset")
  async connectTenantTenantImageIdToimageAsset(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: TenantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tenantTenantImageIdToimageAsset: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tenantTenantImageIdToimageAsset")
  async updateTenantTenantImageIdToimageAsset(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: TenantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tenantTenantImageIdToimageAsset: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tenantTenantImageIdToimageAsset")
  async disconnectTenantTenantImageIdToimageAsset(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: TenantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tenantTenantImageIdToimageAsset: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/equipment")
  @ApiNestedQuery(EquipmentFindManyArgs)
  async findManyEquipment(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<Equipment[]> {
    const query = plainToClass(EquipmentFindManyArgs, request.query);
    const results = await this.service.findEquipment(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,
        serialNumber: true,
        manufacturedYear: true,
        initialCost: true,
        currency: true,
        maxSharePeriod: true,
        autoApproveShare: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/equipment")
  async connectEquipment(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: EquipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/equipment")
  async updateEquipment(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: EquipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/equipment")
  async disconnectEquipment(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: EquipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/issueType")
  @ApiNestedQuery(IssueTypeFindManyArgs)
  async findManyIssueType(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<IssueType[]> {
    const query = plainToClass(IssueTypeFindManyArgs, request.query);
    const results = await this.service.findIssueType(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/issueType")
  async connectIssueType(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: IssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      issueType: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/issueType")
  async updateIssueType(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: IssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      issueType: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/issueType")
  async disconnectIssueType(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: IssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      issueType: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/merchant")
  @ApiNestedQuery(MerchantFindManyArgs)
  async findManyMerchant(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<Merchant[]> {
    const query = plainToClass(MerchantFindManyArgs, request.query);
    const results = await this.service.findMerchant(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        code: true,
        email: true,
        phone: true,
        description: true,
        active: true,
        currency: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/merchant")
  async connectMerchant(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: MerchantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      merchant: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/merchant")
  async updateMerchant(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: MerchantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      merchant: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/merchant")
  async disconnectMerchant(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: MerchantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      merchant: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationContact")
  @ApiNestedQuery(OrganizationContactFindManyArgs)
  async findManyOrganizationContact(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<OrganizationContact[]> {
    const query = plainToClass(OrganizationContactFindManyArgs, request.query);
    const results = await this.service.findOrganizationContact(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        primaryEmail: true,
        primaryPhone: true,
        notes: true,
        imageUrl: true,
        budget: true,
        createdBy: true,
        inviteStatus: true,
        contactType: true,
        budgetType: true,

        organization: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        deal: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationContact")
  async connectOrganizationContact(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: OrganizationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationContact: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationContact")
  async updateOrganizationContact(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: OrganizationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationContact: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationContact")
  async disconnectOrganizationContact(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: OrganizationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationContact: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationDocument")
  @ApiNestedQuery(OrganizationDocumentFindManyArgs)
  async findManyOrganizationDocument(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<OrganizationDocument[]> {
    const query = plainToClass(OrganizationDocumentFindManyArgs, request.query);
    const results = await this.service.findOrganizationDocument(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        documentUrl: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationDocument")
  async connectOrganizationDocument(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: OrganizationDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationDocument: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationDocument")
  async updateOrganizationDocument(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: OrganizationDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationDocument: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationDocument")
  async disconnectOrganizationDocument(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: OrganizationDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationDocument: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationProject")
  @ApiNestedQuery(OrganizationProjectFindManyArgs)
  async findManyOrganizationProject(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<OrganizationProject[]> {
    const query = plainToClass(OrganizationProjectFindManyArgs, request.query);
    const results = await this.service.findOrganizationProject(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        startDate: true,
        endDate: true,
        billing: true,
        currency: true,
        publicField: true,
        owner: true,
        taskListType: true,
        code: true,
        description: true,
        color: true,
        billable: true,
        billingFlat: true,
        openSource: true,
        projectUrl: true,
        openSourceProjectUrl: true,
        budget: true,
        budgetType: true,
        membersCount: true,
        imageUrl: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationProject")
  async connectOrganizationProject(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: OrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationProject: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationProject")
  async updateOrganizationProject(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: OrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationProject: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationProject")
  async disconnectOrganizationProject(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: OrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationProject: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationTeam")
  @ApiNestedQuery(OrganizationTeamFindManyArgs)
  async findManyOrganizationTeam(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<OrganizationTeam[]> {
    const query = plainToClass(OrganizationTeamFindManyArgs, request.query);
    const results = await this.service.findOrganizationTeam(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        prefix: true,
        publicField: true,
        profileLink: true,
        logo: true,
        color: true,
        emoji: true,
        teamSize: true,

        tenant: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationTeam")
  async connectOrganizationTeam(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: OrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeam: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationTeam")
  async updateOrganizationTeam(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: OrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeam: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationTeam")
  async disconnectOrganizationTeam(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: OrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeam: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/product")
  @ApiNestedQuery(ProductFindManyArgs)
  async findManyProduct(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<Product[]> {
    const query = plainToClass(ProductFindManyArgs, request.query);
    const results = await this.service.findProduct(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        enabled: true,
        code: true,
        imageUrl: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        productType: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        productCategory: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/product")
  async connectProduct(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      product: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/product")
  async updateProduct(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      product: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/product")
  async disconnectProduct(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      product: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productCategory")
  @ApiNestedQuery(ProductCategoryFindManyArgs)
  async findManyProductCategory(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<ProductCategory[]> {
    const query = plainToClass(ProductCategoryFindManyArgs, request.query);
    const results = await this.service.findProductCategory(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        imageUrl: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productCategory")
  async connectProductCategory(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: ProductCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productCategory: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productCategory")
  async updateProductCategory(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: ProductCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productCategory: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productCategory")
  async disconnectProductCategory(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: ProductCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productCategory: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productGalleryItem")
  @ApiNestedQuery(ProductGalleryItemFindManyArgs)
  async findManyProductGalleryItem(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<ProductGalleryItem[]> {
    const query = plainToClass(ProductGalleryItemFindManyArgs, request.query);
    const results = await this.service.findProductGalleryItem(params.id, {
      ...query,
      select: {
        imageAsset: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productGalleryItem")
  async connectProductGalleryItem(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: ProductGalleryItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productGalleryItem: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productGalleryItem")
  async updateProductGalleryItem(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: ProductGalleryItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productGalleryItem: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productGalleryItem")
  async disconnectProductGalleryItem(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: ProductGalleryItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productGalleryItem: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productVariant")
  @ApiNestedQuery(ProductVariantFindManyArgs)
  async findManyProductVariant(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<ProductVariant[]> {
    const query = plainToClass(ProductVariantFindManyArgs, request.query);
    const results = await this.service.findProductVariant(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        taxes: true,
        notes: true,
        quantity: true,
        billingInvoicingPolicy: true,
        internalReference: true,
        enabled: true,

        productVariantPriceProductVariantPriceIdToproductVariantPrice: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productVariantSettingProductVariantSettingIdToproductVariantSetting: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        productVariantPriceProductVariantPriceProductVariantIdToproductVariant:
          {
            select: {
              id: true,
            },
          },

        productVariantSettingProductVariantSettingProductVariantIdToproductVariant:
          {
            select: {
              id: true,
            },
          },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productVariant")
  async connectProductVariant(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: ProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariant: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productVariant")
  async updateProductVariant(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: ProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariant: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productVariant")
  async disconnectProductVariant(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: ProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariant: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeOffRequest")
  @ApiNestedQuery(TimeOffRequestFindManyArgs)
  async findManyTimeOffRequest(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<TimeOffRequest[]> {
    const query = plainToClass(TimeOffRequestFindManyArgs, request.query);
    const results = await this.service.findTimeOffRequest(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        documentUrl: true,
        description: true,
        start: true,
        end: true,
        requestDate: true,
        status: true,
        isHoliday: true,
        isArchived: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        timeOffPolicy: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeOffRequest")
  async connectTimeOffRequest(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: TimeOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffRequest: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeOffRequest")
  async updateTimeOffRequest(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: TimeOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffRequest: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeOffRequest")
  async disconnectTimeOffRequest(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: TimeOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffRequest: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/user")
  @ApiNestedQuery(UserFindManyArgs)
  async findManyUser(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUser(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        thirdPartyId: true,
        firstName: true,
        lastName: true,
        email: true,
        hash: true,
        imageUrl: true,
        preferredLanguage: true,
        refreshToken: true,
        isActive: true,
        preferredComponentLayout: true,
        code: true,
        codeExpireAt: true,
        emailVerifiedAt: true,
        emailToken: true,
        phoneNumber: true,
        timeZone: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/user")
  async connectUser(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      user: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/user")
  async updateUser(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      user: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/user")
  async disconnectUser(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      user: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/warehouse")
  @ApiNestedQuery(WarehouseFindManyArgs)
  async findManyWarehouse(
    @common.Req() request: Request,
    @common.Param() params: ImageAssetWhereUniqueInput
  ): Promise<Warehouse[]> {
    const query = plainToClass(WarehouseFindManyArgs, request.query);
    const results = await this.service.findWarehouse(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        code: true,
        email: true,
        description: true,
        active: true,

        contact: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/warehouse")
  async connectWarehouse(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: WarehouseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouse: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/warehouse")
  async updateWarehouse(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: WarehouseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouse: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/warehouse")
  async disconnectWarehouse(
    @common.Param() params: ImageAssetWhereUniqueInput,
    @common.Body() body: WarehouseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouse: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
