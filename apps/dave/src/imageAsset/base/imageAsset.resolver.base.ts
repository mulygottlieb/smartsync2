/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateImageAssetArgs } from "./CreateImageAssetArgs";
import { UpdateImageAssetArgs } from "./UpdateImageAssetArgs";
import { DeleteImageAssetArgs } from "./DeleteImageAssetArgs";
import { ImageAssetCountArgs } from "./ImageAssetCountArgs";
import { ImageAssetFindManyArgs } from "./ImageAssetFindManyArgs";
import { ImageAssetFindUniqueArgs } from "./ImageAssetFindUniqueArgs";
import { ImageAsset } from "./ImageAsset";
import { OrganizationFindManyArgs } from "../../organization/base/OrganizationFindManyArgs";
import { Organization } from "../../organization/base/Organization";
import { TenantFindManyArgs } from "../../tenant/base/TenantFindManyArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { EquipmentFindManyArgs } from "../../equipment/base/EquipmentFindManyArgs";
import { Equipment } from "../../equipment/base/Equipment";
import { IssueTypeFindManyArgs } from "../../issueType/base/IssueTypeFindManyArgs";
import { IssueType } from "../../issueType/base/IssueType";
import { MerchantFindManyArgs } from "../../merchant/base/MerchantFindManyArgs";
import { Merchant } from "../../merchant/base/Merchant";
import { OrganizationContactFindManyArgs } from "../../organizationContact/base/OrganizationContactFindManyArgs";
import { OrganizationContact } from "../../organizationContact/base/OrganizationContact";
import { OrganizationDocumentFindManyArgs } from "../../organizationDocument/base/OrganizationDocumentFindManyArgs";
import { OrganizationDocument } from "../../organizationDocument/base/OrganizationDocument";
import { OrganizationProjectFindManyArgs } from "../../organizationProject/base/OrganizationProjectFindManyArgs";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { OrganizationTeamFindManyArgs } from "../../organizationTeam/base/OrganizationTeamFindManyArgs";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { ProductCategoryFindManyArgs } from "../../productCategory/base/ProductCategoryFindManyArgs";
import { ProductCategory } from "../../productCategory/base/ProductCategory";
import { ProductGalleryItemFindManyArgs } from "../../productGalleryItem/base/ProductGalleryItemFindManyArgs";
import { ProductGalleryItem } from "../../productGalleryItem/base/ProductGalleryItem";
import { ProductVariantFindManyArgs } from "../../productVariant/base/ProductVariantFindManyArgs";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { TimeOffRequestFindManyArgs } from "../../timeOffRequest/base/TimeOffRequestFindManyArgs";
import { TimeOffRequest } from "../../timeOffRequest/base/TimeOffRequest";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { WarehouseFindManyArgs } from "../../warehouse/base/WarehouseFindManyArgs";
import { Warehouse } from "../../warehouse/base/Warehouse";
import { ImageAssetService } from "../imageAsset.service";
@graphql.Resolver(() => ImageAsset)
export class ImageAssetResolverBase {
  constructor(protected readonly service: ImageAssetService) {}

  async _imageAssetsMeta(
    @graphql.Args() args: ImageAssetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ImageAsset])
  async imageAssets(
    @graphql.Args() args: ImageAssetFindManyArgs
  ): Promise<ImageAsset[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ImageAsset, { nullable: true })
  async imageAsset(
    @graphql.Args() args: ImageAssetFindUniqueArgs
  ): Promise<ImageAsset | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ImageAsset)
  async createImageAsset(
    @graphql.Args() args: CreateImageAssetArgs
  ): Promise<ImageAsset> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenantImageAssetTenantIdTotenant: args.data
          .tenantImageAssetTenantIdTotenant
          ? {
              connect: args.data.tenantImageAssetTenantIdTotenant,
            }
          : undefined,

        organizationImageAssetOrganizationIdToorganization: args.data
          .organizationImageAssetOrganizationIdToorganization
          ? {
              connect:
                args.data.organizationImageAssetOrganizationIdToorganization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ImageAsset)
  async updateImageAsset(
    @graphql.Args() args: UpdateImageAssetArgs
  ): Promise<ImageAsset | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenantImageAssetTenantIdTotenant: args.data
            .tenantImageAssetTenantIdTotenant
            ? {
                connect: args.data.tenantImageAssetTenantIdTotenant,
              }
            : undefined,

          organizationImageAssetOrganizationIdToorganization: args.data
            .organizationImageAssetOrganizationIdToorganization
            ? {
                connect:
                  args.data.organizationImageAssetOrganizationIdToorganization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ImageAsset)
  async deleteImageAsset(
    @graphql.Args() args: DeleteImageAssetArgs
  ): Promise<ImageAsset | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Organization], {
    name: "organizationOrganizationImageIdToimageAsset",
  })
  async resolveFieldOrganizationOrganizationImageIdToimageAsset(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: OrganizationFindManyArgs
  ): Promise<Organization[]> {
    const results =
      await this.service.findOrganizationOrganizationImageIdToimageAsset(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Tenant], {
    name: "tenantTenantImageIdToimageAsset",
  })
  async resolveFieldTenantTenantImageIdToimageAsset(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: TenantFindManyArgs
  ): Promise<Tenant[]> {
    const results = await this.service.findTenantTenantImageIdToimageAsset(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Equipment], { name: "equipment" })
  async resolveFieldEquipment(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: EquipmentFindManyArgs
  ): Promise<Equipment[]> {
    const results = await this.service.findEquipment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [IssueType], { name: "issueType" })
  async resolveFieldIssueType(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: IssueTypeFindManyArgs
  ): Promise<IssueType[]> {
    const results = await this.service.findIssueType(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Merchant], { name: "merchant" })
  async resolveFieldMerchant(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: MerchantFindManyArgs
  ): Promise<Merchant[]> {
    const results = await this.service.findMerchant(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationContact], {
    name: "organizationContact",
  })
  async resolveFieldOrganizationContact(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: OrganizationContactFindManyArgs
  ): Promise<OrganizationContact[]> {
    const results = await this.service.findOrganizationContact(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationDocument], {
    name: "organizationDocument",
  })
  async resolveFieldOrganizationDocument(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: OrganizationDocumentFindManyArgs
  ): Promise<OrganizationDocument[]> {
    const results = await this.service.findOrganizationDocument(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationProject], {
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: OrganizationProjectFindManyArgs
  ): Promise<OrganizationProject[]> {
    const results = await this.service.findOrganizationProject(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationTeam], { name: "organizationTeam" })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: OrganizationTeamFindManyArgs
  ): Promise<OrganizationTeam[]> {
    const results = await this.service.findOrganizationTeam(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Product], { name: "product" })
  async resolveFieldProduct(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProduct(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductCategory], { name: "productCategory" })
  async resolveFieldProductCategory(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: ProductCategoryFindManyArgs
  ): Promise<ProductCategory[]> {
    const results = await this.service.findProductCategory(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductGalleryItem], {
    name: "productGalleryItem",
  })
  async resolveFieldProductGalleryItem(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: ProductGalleryItemFindManyArgs
  ): Promise<ProductGalleryItem[]> {
    const results = await this.service.findProductGalleryItem(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductVariant], { name: "productVariant" })
  async resolveFieldProductVariant(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: ProductVariantFindManyArgs
  ): Promise<ProductVariant[]> {
    const results = await this.service.findProductVariant(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeOffRequest], { name: "timeOffRequest" })
  async resolveFieldTimeOffRequest(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: TimeOffRequestFindManyArgs
  ): Promise<TimeOffRequest[]> {
    const results = await this.service.findTimeOffRequest(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [User], { name: "user" })
  async resolveFieldUser(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUser(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Warehouse], { name: "warehouse" })
  async resolveFieldWarehouse(
    @graphql.Parent() parent: ImageAsset,
    @graphql.Args() args: WarehouseFindManyArgs
  ): Promise<Warehouse[]> {
    const results = await this.service.findWarehouse(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantImageAssetTenantIdTotenant",
  })
  async resolveFieldTenantImageAssetTenantIdTotenant(
    @graphql.Parent() parent: ImageAsset
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantImageAssetTenantIdTotenant(
      parent.id
    );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organizationImageAssetOrganizationIdToorganization",
  })
  async resolveFieldOrganizationImageAssetOrganizationIdToorganization(
    @graphql.Parent() parent: ImageAsset
  ): Promise<Organization | null> {
    const result =
      await this.service.getOrganizationImageAssetOrganizationIdToorganization(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }
}
