/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateImportHistoryArgs } from "./CreateImportHistoryArgs";
import { UpdateImportHistoryArgs } from "./UpdateImportHistoryArgs";
import { DeleteImportHistoryArgs } from "./DeleteImportHistoryArgs";
import { ImportHistoryCountArgs } from "./ImportHistoryCountArgs";
import { ImportHistoryFindManyArgs } from "./ImportHistoryFindManyArgs";
import { ImportHistoryFindUniqueArgs } from "./ImportHistoryFindUniqueArgs";
import { ImportHistory } from "./ImportHistory";
import { Tenant } from "../../tenant/base/Tenant";
import { ImportHistoryService } from "../importHistory.service";
@graphql.Resolver(() => ImportHistory)
export class ImportHistoryResolverBase {
  constructor(protected readonly service: ImportHistoryService) {}

  async _importHistoriesMeta(
    @graphql.Args() args: ImportHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ImportHistory])
  async importHistories(
    @graphql.Args() args: ImportHistoryFindManyArgs
  ): Promise<ImportHistory[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ImportHistory, { nullable: true })
  async importHistory(
    @graphql.Args() args: ImportHistoryFindUniqueArgs
  ): Promise<ImportHistory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ImportHistory)
  async createImportHistory(
    @graphql.Args() args: CreateImportHistoryArgs
  ): Promise<ImportHistory> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ImportHistory)
  async updateImportHistory(
    @graphql.Args() args: UpdateImportHistoryArgs
  ): Promise<ImportHistory | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ImportHistory)
  async deleteImportHistory(
    @graphql.Args() args: DeleteImportHistoryArgs
  ): Promise<ImportHistory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: ImportHistory
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
