/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IncomeService } from "../income.service";
import { IncomeCreateInput } from "./IncomeCreateInput";
import { IncomeWhereInput } from "./IncomeWhereInput";
import { IncomeWhereUniqueInput } from "./IncomeWhereUniqueInput";
import { IncomeFindManyArgs } from "./IncomeFindManyArgs";
import { IncomeUpdateInput } from "./IncomeUpdateInput";
import { Income } from "./Income";
import { TagIncomeFindManyArgs } from "../../tagIncome/base/TagIncomeFindManyArgs";
import { TagIncome } from "../../tagIncome/base/TagIncome";
import { TagIncomeWhereUniqueInput } from "../../tagIncome/base/TagIncomeWhereUniqueInput";

export class IncomeControllerBase {
  constructor(protected readonly service: IncomeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Income })
  async create(@common.Body() data: IncomeCreateInput): Promise<Income> {
    return await this.service.create({
      data: {
        ...data,

        organizationContact: data.organizationContact
          ? {
              connect: data.organizationContact,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        employee: data.employee
          ? {
              connect: data.employee,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        currency: true,
        valueDate: true,
        notes: true,
        isBonus: true,
        reference: true,

        organizationContact: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Income] })
  @ApiNestedQuery(IncomeFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Income[]> {
    const args = plainToClass(IncomeFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        currency: true,
        valueDate: true,
        notes: true,
        isBonus: true,
        reference: true,

        organizationContact: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Income })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: IncomeWhereUniqueInput
  ): Promise<Income | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        currency: true,
        valueDate: true,
        notes: true,
        isBonus: true,
        reference: true,

        organizationContact: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Income })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: IncomeWhereUniqueInput,
    @common.Body() data: IncomeUpdateInput
  ): Promise<Income | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          organizationContact: data.organizationContact
            ? {
                connect: data.organizationContact,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          employee: data.employee
            ? {
                connect: data.employee,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          amount: true,
          currency: true,
          valueDate: true,
          notes: true,
          isBonus: true,
          reference: true,

          organizationContact: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Income })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: IncomeWhereUniqueInput
  ): Promise<Income | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          amount: true,
          currency: true,
          valueDate: true,
          notes: true,
          isBonus: true,
          reference: true,

          organizationContact: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/tagIncome")
  @ApiNestedQuery(TagIncomeFindManyArgs)
  async findManyTagIncome(
    @common.Req() request: Request,
    @common.Param() params: IncomeWhereUniqueInput
  ): Promise<TagIncome[]> {
    const query = plainToClass(TagIncomeFindManyArgs, request.query);
    const results = await this.service.findTagIncome(params.id, {
      ...query,
      select: {
        tag: {
          select: {
            id: true,
          },
        },

        income: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagIncome")
  async connectTagIncome(
    @common.Param() params: IncomeWhereUniqueInput,
    @common.Body() body: TagIncomeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagIncome: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagIncome")
  async updateTagIncome(
    @common.Param() params: IncomeWhereUniqueInput,
    @common.Body() body: TagIncomeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagIncome: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagIncome")
  async disconnectTagIncome(
    @common.Param() params: IncomeWhereUniqueInput,
    @common.Body() body: TagIncomeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagIncome: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
