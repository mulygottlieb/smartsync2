/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateIncomeArgs } from "./CreateIncomeArgs";
import { UpdateIncomeArgs } from "./UpdateIncomeArgs";
import { DeleteIncomeArgs } from "./DeleteIncomeArgs";
import { IncomeCountArgs } from "./IncomeCountArgs";
import { IncomeFindManyArgs } from "./IncomeFindManyArgs";
import { IncomeFindUniqueArgs } from "./IncomeFindUniqueArgs";
import { Income } from "./Income";
import { TagIncomeFindManyArgs } from "../../tagIncome/base/TagIncomeFindManyArgs";
import { TagIncome } from "../../tagIncome/base/TagIncome";
import { OrganizationContact } from "../../organizationContact/base/OrganizationContact";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { Employee } from "../../employee/base/Employee";
import { IncomeService } from "../income.service";
@graphql.Resolver(() => Income)
export class IncomeResolverBase {
  constructor(protected readonly service: IncomeService) {}

  async _incomesMeta(
    @graphql.Args() args: IncomeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Income])
  async incomes(@graphql.Args() args: IncomeFindManyArgs): Promise<Income[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Income, { nullable: true })
  async income(
    @graphql.Args() args: IncomeFindUniqueArgs
  ): Promise<Income | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Income)
  async createIncome(@graphql.Args() args: CreateIncomeArgs): Promise<Income> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationContact: args.data.organizationContact
          ? {
              connect: args.data.organizationContact,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Income)
  async updateIncome(
    @graphql.Args() args: UpdateIncomeArgs
  ): Promise<Income | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationContact: args.data.organizationContact
            ? {
                connect: args.data.organizationContact,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Income)
  async deleteIncome(
    @graphql.Args() args: DeleteIncomeArgs
  ): Promise<Income | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TagIncome], { name: "tagIncome" })
  async resolveFieldTagIncome(
    @graphql.Parent() parent: Income,
    @graphql.Args() args: TagIncomeFindManyArgs
  ): Promise<TagIncome[]> {
    const results = await this.service.findTagIncome(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => OrganizationContact, {
    nullable: true,
    name: "organizationContact",
  })
  async resolveFieldOrganizationContact(
    @graphql.Parent() parent: Income
  ): Promise<OrganizationContact | null> {
    const result = await this.service.getOrganizationContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: Income
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: Income
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: Income
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
