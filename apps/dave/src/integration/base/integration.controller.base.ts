/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IntegrationService } from "../integration.service";
import { IntegrationCreateInput } from "./IntegrationCreateInput";
import { IntegrationWhereInput } from "./IntegrationWhereInput";
import { IntegrationWhereUniqueInput } from "./IntegrationWhereUniqueInput";
import { IntegrationFindManyArgs } from "./IntegrationFindManyArgs";
import { IntegrationUpdateInput } from "./IntegrationUpdateInput";
import { Integration } from "./Integration";
import { IntegrationIntegrationTypeFindManyArgs } from "../../integrationIntegrationType/base/IntegrationIntegrationTypeFindManyArgs";
import { IntegrationIntegrationType } from "../../integrationIntegrationType/base/IntegrationIntegrationType";
import { IntegrationIntegrationTypeWhereUniqueInput } from "../../integrationIntegrationType/base/IntegrationIntegrationTypeWhereUniqueInput";
import { TagIntegrationFindManyArgs } from "../../tagIntegration/base/TagIntegrationFindManyArgs";
import { TagIntegration } from "../../tagIntegration/base/TagIntegration";
import { TagIntegrationWhereUniqueInput } from "../../tagIntegration/base/TagIntegrationWhereUniqueInput";

export class IntegrationControllerBase {
  constructor(protected readonly service: IntegrationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Integration })
  async create(
    @common.Body() data: IntegrationCreateInput
  ): Promise<Integration> {
    return await this.service.create({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        imgSrc: true,
        isComingSoon: true,
        isPaid: true,
        version: true,
        docUrl: true,
        isFreeTrial: true,
        freeTrialPeriod: true,
        order: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Integration] })
  @ApiNestedQuery(IntegrationFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Integration[]> {
    const args = plainToClass(IntegrationFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        imgSrc: true,
        isComingSoon: true,
        isPaid: true,
        version: true,
        docUrl: true,
        isFreeTrial: true,
        freeTrialPeriod: true,
        order: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Integration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: IntegrationWhereUniqueInput
  ): Promise<Integration | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        imgSrc: true,
        isComingSoon: true,
        isPaid: true,
        version: true,
        docUrl: true,
        isFreeTrial: true,
        freeTrialPeriod: true,
        order: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Integration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: IntegrationWhereUniqueInput,
    @common.Body() data: IntegrationUpdateInput
  ): Promise<Integration | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          imgSrc: true,
          isComingSoon: true,
          isPaid: true,
          version: true,
          docUrl: true,
          isFreeTrial: true,
          freeTrialPeriod: true,
          order: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Integration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: IntegrationWhereUniqueInput
  ): Promise<Integration | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          imgSrc: true,
          isComingSoon: true,
          isPaid: true,
          version: true,
          docUrl: true,
          isFreeTrial: true,
          freeTrialPeriod: true,
          order: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/integrationIntegrationType")
  @ApiNestedQuery(IntegrationIntegrationTypeFindManyArgs)
  async findManyIntegrationIntegrationType(
    @common.Req() request: Request,
    @common.Param() params: IntegrationWhereUniqueInput
  ): Promise<IntegrationIntegrationType[]> {
    const query = plainToClass(
      IntegrationIntegrationTypeFindManyArgs,
      request.query
    );
    const results = await this.service.findIntegrationIntegrationType(
      params.id,
      {
        ...query,
        select: {
          integration: {
            select: {
              id: true,
            },
          },

          integrationType: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/integrationIntegrationType")
  async connectIntegrationIntegrationType(
    @common.Param() params: IntegrationWhereUniqueInput,
    @common.Body() body: IntegrationIntegrationTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationIntegrationType: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/integrationIntegrationType")
  async updateIntegrationIntegrationType(
    @common.Param() params: IntegrationWhereUniqueInput,
    @common.Body() body: IntegrationIntegrationTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationIntegrationType: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/integrationIntegrationType")
  async disconnectIntegrationIntegrationType(
    @common.Param() params: IntegrationWhereUniqueInput,
    @common.Body() body: IntegrationIntegrationTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationIntegrationType: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagIntegration")
  @ApiNestedQuery(TagIntegrationFindManyArgs)
  async findManyTagIntegration(
    @common.Req() request: Request,
    @common.Param() params: IntegrationWhereUniqueInput
  ): Promise<TagIntegration[]> {
    const query = plainToClass(TagIntegrationFindManyArgs, request.query);
    const results = await this.service.findTagIntegration(params.id, {
      ...query,
      select: {
        tag: {
          select: {
            id: true,
          },
        },

        integration: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagIntegration")
  async connectTagIntegration(
    @common.Param() params: IntegrationWhereUniqueInput,
    @common.Body() body: TagIntegrationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagIntegration: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagIntegration")
  async updateTagIntegration(
    @common.Param() params: IntegrationWhereUniqueInput,
    @common.Body() body: TagIntegrationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagIntegration: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagIntegration")
  async disconnectTagIntegration(
    @common.Param() params: IntegrationWhereUniqueInput,
    @common.Body() body: TagIntegrationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagIntegration: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
