/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateIntegrationEntitySettingTiedArgs } from "./CreateIntegrationEntitySettingTiedArgs";
import { UpdateIntegrationEntitySettingTiedArgs } from "./UpdateIntegrationEntitySettingTiedArgs";
import { DeleteIntegrationEntitySettingTiedArgs } from "./DeleteIntegrationEntitySettingTiedArgs";
import { IntegrationEntitySettingTiedCountArgs } from "./IntegrationEntitySettingTiedCountArgs";
import { IntegrationEntitySettingTiedFindManyArgs } from "./IntegrationEntitySettingTiedFindManyArgs";
import { IntegrationEntitySettingTiedFindUniqueArgs } from "./IntegrationEntitySettingTiedFindUniqueArgs";
import { IntegrationEntitySettingTied } from "./IntegrationEntitySettingTied";
import { IntegrationEntitySetting } from "../../integrationEntitySetting/base/IntegrationEntitySetting";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { IntegrationEntitySettingTiedService } from "../integrationEntitySettingTied.service";
@graphql.Resolver(() => IntegrationEntitySettingTied)
export class IntegrationEntitySettingTiedResolverBase {
  constructor(
    protected readonly service: IntegrationEntitySettingTiedService
  ) {}

  async _integrationEntitySettingTiedsMeta(
    @graphql.Args() args: IntegrationEntitySettingTiedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IntegrationEntitySettingTied])
  async integrationEntitySettingTieds(
    @graphql.Args() args: IntegrationEntitySettingTiedFindManyArgs
  ): Promise<IntegrationEntitySettingTied[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => IntegrationEntitySettingTied, { nullable: true })
  async integrationEntitySettingTied(
    @graphql.Args() args: IntegrationEntitySettingTiedFindUniqueArgs
  ): Promise<IntegrationEntitySettingTied | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IntegrationEntitySettingTied)
  async createIntegrationEntitySettingTied(
    @graphql.Args() args: CreateIntegrationEntitySettingTiedArgs
  ): Promise<IntegrationEntitySettingTied> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        integrationEntitySetting: args.data.integrationEntitySetting
          ? {
              connect: args.data.integrationEntitySetting,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => IntegrationEntitySettingTied)
  async updateIntegrationEntitySettingTied(
    @graphql.Args() args: UpdateIntegrationEntitySettingTiedArgs
  ): Promise<IntegrationEntitySettingTied | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          integrationEntitySetting: args.data.integrationEntitySetting
            ? {
                connect: args.data.integrationEntitySetting,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IntegrationEntitySettingTied)
  async deleteIntegrationEntitySettingTied(
    @graphql.Args() args: DeleteIntegrationEntitySettingTiedArgs
  ): Promise<IntegrationEntitySettingTied | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => IntegrationEntitySetting, {
    nullable: true,
    name: "integrationEntitySetting",
  })
  async resolveFieldIntegrationEntitySetting(
    @graphql.Parent() parent: IntegrationEntitySettingTied
  ): Promise<IntegrationEntitySetting | null> {
    const result = await this.service.getIntegrationEntitySetting(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: IntegrationEntitySettingTied
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: IntegrationEntitySettingTied
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
