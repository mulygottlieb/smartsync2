/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateIntegrationIntegrationTypeArgs } from "./CreateIntegrationIntegrationTypeArgs";
import { UpdateIntegrationIntegrationTypeArgs } from "./UpdateIntegrationIntegrationTypeArgs";
import { DeleteIntegrationIntegrationTypeArgs } from "./DeleteIntegrationIntegrationTypeArgs";
import { IntegrationIntegrationTypeCountArgs } from "./IntegrationIntegrationTypeCountArgs";
import { IntegrationIntegrationTypeFindManyArgs } from "./IntegrationIntegrationTypeFindManyArgs";
import { IntegrationIntegrationTypeFindUniqueArgs } from "./IntegrationIntegrationTypeFindUniqueArgs";
import { IntegrationIntegrationType } from "./IntegrationIntegrationType";
import { Integration } from "../../integration/base/Integration";
import { IntegrationType } from "../../integrationType/base/IntegrationType";
import { IntegrationIntegrationTypeService } from "../integrationIntegrationType.service";
@graphql.Resolver(() => IntegrationIntegrationType)
export class IntegrationIntegrationTypeResolverBase {
  constructor(protected readonly service: IntegrationIntegrationTypeService) {}

  async _integrationIntegrationTypesMeta(
    @graphql.Args() args: IntegrationIntegrationTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IntegrationIntegrationType])
  async integrationIntegrationTypes(
    @graphql.Args() args: IntegrationIntegrationTypeFindManyArgs
  ): Promise<IntegrationIntegrationType[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => IntegrationIntegrationType, { nullable: true })
  async integrationIntegrationType(
    @graphql.Args() args: IntegrationIntegrationTypeFindUniqueArgs
  ): Promise<IntegrationIntegrationType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IntegrationIntegrationType)
  async createIntegrationIntegrationType(
    @graphql.Args() args: CreateIntegrationIntegrationTypeArgs
  ): Promise<IntegrationIntegrationType> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        integration: {
          connect: args.data.integration,
        },

        integrationType: {
          connect: args.data.integrationType,
        },
      },
    });
  }

  @graphql.Mutation(() => IntegrationIntegrationType)
  async updateIntegrationIntegrationType(
    @graphql.Args() args: UpdateIntegrationIntegrationTypeArgs
  ): Promise<IntegrationIntegrationType | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          integration: {
            connect: args.data.integration,
          },

          integrationType: {
            connect: args.data.integrationType,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IntegrationIntegrationType)
  async deleteIntegrationIntegrationType(
    @graphql.Args() args: DeleteIntegrationIntegrationTypeArgs
  ): Promise<IntegrationIntegrationType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Integration, {
    nullable: true,
    name: "integration",
  })
  async resolveFieldIntegration(
    @graphql.Parent() parent: IntegrationIntegrationType
  ): Promise<Integration | null> {
    const result = await this.service.getIntegration(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => IntegrationType, {
    nullable: true,
    name: "integrationType",
  })
  async resolveFieldIntegrationType(
    @graphql.Parent() parent: IntegrationIntegrationType
  ): Promise<IntegrationType | null> {
    const result = await this.service.getIntegrationType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
