/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateIntegrationSettingArgs } from "./CreateIntegrationSettingArgs";
import { UpdateIntegrationSettingArgs } from "./UpdateIntegrationSettingArgs";
import { DeleteIntegrationSettingArgs } from "./DeleteIntegrationSettingArgs";
import { IntegrationSettingCountArgs } from "./IntegrationSettingCountArgs";
import { IntegrationSettingFindManyArgs } from "./IntegrationSettingFindManyArgs";
import { IntegrationSettingFindUniqueArgs } from "./IntegrationSettingFindUniqueArgs";
import { IntegrationSetting } from "./IntegrationSetting";
import { IntegrationTenant } from "../../integrationTenant/base/IntegrationTenant";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { IntegrationSettingService } from "../integrationSetting.service";
@graphql.Resolver(() => IntegrationSetting)
export class IntegrationSettingResolverBase {
  constructor(protected readonly service: IntegrationSettingService) {}

  async _integrationSettingsMeta(
    @graphql.Args() args: IntegrationSettingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IntegrationSetting])
  async integrationSettings(
    @graphql.Args() args: IntegrationSettingFindManyArgs
  ): Promise<IntegrationSetting[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => IntegrationSetting, { nullable: true })
  async integrationSetting(
    @graphql.Args() args: IntegrationSettingFindUniqueArgs
  ): Promise<IntegrationSetting | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IntegrationSetting)
  async createIntegrationSetting(
    @graphql.Args() args: CreateIntegrationSettingArgs
  ): Promise<IntegrationSetting> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        integrationTenant: {
          connect: args.data.integrationTenant,
        },

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => IntegrationSetting)
  async updateIntegrationSetting(
    @graphql.Args() args: UpdateIntegrationSettingArgs
  ): Promise<IntegrationSetting | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          integrationTenant: {
            connect: args.data.integrationTenant,
          },

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IntegrationSetting)
  async deleteIntegrationSetting(
    @graphql.Args() args: DeleteIntegrationSettingArgs
  ): Promise<IntegrationSetting | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => IntegrationTenant, {
    nullable: true,
    name: "integrationTenant",
  })
  async resolveFieldIntegrationTenant(
    @graphql.Parent() parent: IntegrationSetting
  ): Promise<IntegrationTenant | null> {
    const result = await this.service.getIntegrationTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: IntegrationSetting
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: IntegrationSetting
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
