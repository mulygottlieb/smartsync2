/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateIntegrationTypeArgs } from "./CreateIntegrationTypeArgs";
import { UpdateIntegrationTypeArgs } from "./UpdateIntegrationTypeArgs";
import { DeleteIntegrationTypeArgs } from "./DeleteIntegrationTypeArgs";
import { IntegrationTypeCountArgs } from "./IntegrationTypeCountArgs";
import { IntegrationTypeFindManyArgs } from "./IntegrationTypeFindManyArgs";
import { IntegrationTypeFindUniqueArgs } from "./IntegrationTypeFindUniqueArgs";
import { IntegrationType } from "./IntegrationType";
import { IntegrationIntegrationTypeFindManyArgs } from "../../integrationIntegrationType/base/IntegrationIntegrationTypeFindManyArgs";
import { IntegrationIntegrationType } from "../../integrationIntegrationType/base/IntegrationIntegrationType";
import { IntegrationTypeService } from "../integrationType.service";
@graphql.Resolver(() => IntegrationType)
export class IntegrationTypeResolverBase {
  constructor(protected readonly service: IntegrationTypeService) {}

  async _integrationTypesMeta(
    @graphql.Args() args: IntegrationTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IntegrationType])
  async integrationTypes(
    @graphql.Args() args: IntegrationTypeFindManyArgs
  ): Promise<IntegrationType[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => IntegrationType, { nullable: true })
  async integrationType(
    @graphql.Args() args: IntegrationTypeFindUniqueArgs
  ): Promise<IntegrationType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IntegrationType)
  async createIntegrationType(
    @graphql.Args() args: CreateIntegrationTypeArgs
  ): Promise<IntegrationType> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => IntegrationType)
  async updateIntegrationType(
    @graphql.Args() args: UpdateIntegrationTypeArgs
  ): Promise<IntegrationType | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IntegrationType)
  async deleteIntegrationType(
    @graphql.Args() args: DeleteIntegrationTypeArgs
  ): Promise<IntegrationType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [IntegrationIntegrationType], {
    name: "integrationIntegrationType",
  })
  async resolveFieldIntegrationIntegrationType(
    @graphql.Parent() parent: IntegrationType,
    @graphql.Args() args: IntegrationIntegrationTypeFindManyArgs
  ): Promise<IntegrationIntegrationType[]> {
    const results = await this.service.findIntegrationIntegrationType(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
