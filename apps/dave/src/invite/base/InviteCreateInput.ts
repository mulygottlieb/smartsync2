/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsDate,
  IsOptional,
  IsInt,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { RoleWhereUniqueInput } from "../../role/base/RoleWhereUniqueInput";
import { InviteOrganizationContactCreateNestedManyWithoutInvitesInput } from "./InviteOrganizationContactCreateNestedManyWithoutInvitesInput";
import { InviteOrganizationDepartmentCreateNestedManyWithoutInvitesInput } from "./InviteOrganizationDepartmentCreateNestedManyWithoutInvitesInput";
import { InviteOrganizationProjectCreateNestedManyWithoutInvitesInput } from "./InviteOrganizationProjectCreateNestedManyWithoutInvitesInput";
import { InviteOrganizationTeamCreateNestedManyWithoutInvitesInput } from "./InviteOrganizationTeamCreateNestedManyWithoutInvitesInput";

@InputType()
class InviteCreateInput {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  token!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  email!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  status!: string;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  expireDate?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  actionDate?: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  code?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  fullName?: string | null;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  userInviteInvitedByIdTouser?: UserWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organization?: OrganizationWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => RoleWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => RoleWhereUniqueInput)
  @IsOptional()
  @Field(() => RoleWhereUniqueInput, {
    nullable: true,
  })
  role?: RoleWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  userInviteUserIdTouser?: UserWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => InviteOrganizationContactCreateNestedManyWithoutInvitesInput,
  })
  @ValidateNested()
  @Type(() => InviteOrganizationContactCreateNestedManyWithoutInvitesInput)
  @IsOptional()
  @Field(() => InviteOrganizationContactCreateNestedManyWithoutInvitesInput, {
    nullable: true,
  })
  inviteOrganizationContact?: InviteOrganizationContactCreateNestedManyWithoutInvitesInput;

  @ApiProperty({
    required: false,
    type: () => InviteOrganizationDepartmentCreateNestedManyWithoutInvitesInput,
  })
  @ValidateNested()
  @Type(() => InviteOrganizationDepartmentCreateNestedManyWithoutInvitesInput)
  @IsOptional()
  @Field(
    () => InviteOrganizationDepartmentCreateNestedManyWithoutInvitesInput,
    {
      nullable: true,
    }
  )
  inviteOrganizationDepartment?: InviteOrganizationDepartmentCreateNestedManyWithoutInvitesInput;

  @ApiProperty({
    required: false,
    type: () => InviteOrganizationProjectCreateNestedManyWithoutInvitesInput,
  })
  @ValidateNested()
  @Type(() => InviteOrganizationProjectCreateNestedManyWithoutInvitesInput)
  @IsOptional()
  @Field(() => InviteOrganizationProjectCreateNestedManyWithoutInvitesInput, {
    nullable: true,
  })
  inviteOrganizationProject?: InviteOrganizationProjectCreateNestedManyWithoutInvitesInput;

  @ApiProperty({
    required: false,
    type: () => InviteOrganizationTeamCreateNestedManyWithoutInvitesInput,
  })
  @ValidateNested()
  @Type(() => InviteOrganizationTeamCreateNestedManyWithoutInvitesInput)
  @IsOptional()
  @Field(() => InviteOrganizationTeamCreateNestedManyWithoutInvitesInput, {
    nullable: true,
  })
  inviteOrganizationTeam?: InviteOrganizationTeamCreateNestedManyWithoutInvitesInput;
}

export { InviteCreateInput as InviteCreateInput };
