/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InviteService } from "../invite.service";
import { InviteCreateInput } from "./InviteCreateInput";
import { InviteWhereInput } from "./InviteWhereInput";
import { InviteWhereUniqueInput } from "./InviteWhereUniqueInput";
import { InviteFindManyArgs } from "./InviteFindManyArgs";
import { InviteUpdateInput } from "./InviteUpdateInput";
import { Invite } from "./Invite";
import { InviteOrganizationContactFindManyArgs } from "../../inviteOrganizationContact/base/InviteOrganizationContactFindManyArgs";
import { InviteOrganizationContact } from "../../inviteOrganizationContact/base/InviteOrganizationContact";
import { InviteOrganizationContactWhereUniqueInput } from "../../inviteOrganizationContact/base/InviteOrganizationContactWhereUniqueInput";
import { InviteOrganizationDepartmentFindManyArgs } from "../../inviteOrganizationDepartment/base/InviteOrganizationDepartmentFindManyArgs";
import { InviteOrganizationDepartment } from "../../inviteOrganizationDepartment/base/InviteOrganizationDepartment";
import { InviteOrganizationDepartmentWhereUniqueInput } from "../../inviteOrganizationDepartment/base/InviteOrganizationDepartmentWhereUniqueInput";
import { InviteOrganizationProjectFindManyArgs } from "../../inviteOrganizationProject/base/InviteOrganizationProjectFindManyArgs";
import { InviteOrganizationProject } from "../../inviteOrganizationProject/base/InviteOrganizationProject";
import { InviteOrganizationProjectWhereUniqueInput } from "../../inviteOrganizationProject/base/InviteOrganizationProjectWhereUniqueInput";
import { InviteOrganizationTeamFindManyArgs } from "../../inviteOrganizationTeam/base/InviteOrganizationTeamFindManyArgs";
import { InviteOrganizationTeam } from "../../inviteOrganizationTeam/base/InviteOrganizationTeam";
import { InviteOrganizationTeamWhereUniqueInput } from "../../inviteOrganizationTeam/base/InviteOrganizationTeamWhereUniqueInput";

export class InviteControllerBase {
  constructor(protected readonly service: InviteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Invite })
  async create(@common.Body() data: InviteCreateInput): Promise<Invite> {
    return await this.service.create({
      data: {
        ...data,

        userInviteInvitedByIdTouser: data.userInviteInvitedByIdTouser
          ? {
              connect: data.userInviteInvitedByIdTouser,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        role: data.role
          ? {
              connect: data.role,
            }
          : undefined,

        userInviteUserIdTouser: data.userInviteUserIdTouser
          ? {
              connect: data.userInviteUserIdTouser,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        token: true,
        email: true,
        status: true,
        expireDate: true,
        actionDate: true,
        code: true,
        fullName: true,

        userInviteInvitedByIdTouser: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        userInviteUserIdTouser: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Invite] })
  @ApiNestedQuery(InviteFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Invite[]> {
    const args = plainToClass(InviteFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        token: true,
        email: true,
        status: true,
        expireDate: true,
        actionDate: true,
        code: true,
        fullName: true,

        userInviteInvitedByIdTouser: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        userInviteUserIdTouser: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Invite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: InviteWhereUniqueInput
  ): Promise<Invite | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        token: true,
        email: true,
        status: true,
        expireDate: true,
        actionDate: true,
        code: true,
        fullName: true,

        userInviteInvitedByIdTouser: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        userInviteUserIdTouser: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Invite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: InviteWhereUniqueInput,
    @common.Body() data: InviteUpdateInput
  ): Promise<Invite | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          userInviteInvitedByIdTouser: data.userInviteInvitedByIdTouser
            ? {
                connect: data.userInviteInvitedByIdTouser,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          role: data.role
            ? {
                connect: data.role,
              }
            : undefined,

          userInviteUserIdTouser: data.userInviteUserIdTouser
            ? {
                connect: data.userInviteUserIdTouser,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          token: true,
          email: true,
          status: true,
          expireDate: true,
          actionDate: true,
          code: true,
          fullName: true,

          userInviteInvitedByIdTouser: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          role: {
            select: {
              id: true,
            },
          },

          userInviteUserIdTouser: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Invite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: InviteWhereUniqueInput
  ): Promise<Invite | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          token: true,
          email: true,
          status: true,
          expireDate: true,
          actionDate: true,
          code: true,
          fullName: true,

          userInviteInvitedByIdTouser: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          role: {
            select: {
              id: true,
            },
          },

          userInviteUserIdTouser: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/inviteOrganizationContact")
  @ApiNestedQuery(InviteOrganizationContactFindManyArgs)
  async findManyInviteOrganizationContact(
    @common.Req() request: Request,
    @common.Param() params: InviteWhereUniqueInput
  ): Promise<InviteOrganizationContact[]> {
    const query = plainToClass(
      InviteOrganizationContactFindManyArgs,
      request.query
    );
    const results = await this.service.findInviteOrganizationContact(
      params.id,
      {
        ...query,
        select: {
          invite: {
            select: {
              id: true,
            },
          },

          organizationContact: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/inviteOrganizationContact")
  async connectInviteOrganizationContact(
    @common.Param() params: InviteWhereUniqueInput,
    @common.Body() body: InviteOrganizationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationContact: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/inviteOrganizationContact")
  async updateInviteOrganizationContact(
    @common.Param() params: InviteWhereUniqueInput,
    @common.Body() body: InviteOrganizationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationContact: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/inviteOrganizationContact")
  async disconnectInviteOrganizationContact(
    @common.Param() params: InviteWhereUniqueInput,
    @common.Body() body: InviteOrganizationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationContact: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/inviteOrganizationDepartment")
  @ApiNestedQuery(InviteOrganizationDepartmentFindManyArgs)
  async findManyInviteOrganizationDepartment(
    @common.Req() request: Request,
    @common.Param() params: InviteWhereUniqueInput
  ): Promise<InviteOrganizationDepartment[]> {
    const query = plainToClass(
      InviteOrganizationDepartmentFindManyArgs,
      request.query
    );
    const results = await this.service.findInviteOrganizationDepartment(
      params.id,
      {
        ...query,
        select: {
          invite: {
            select: {
              id: true,
            },
          },

          organizationDepartment: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/inviteOrganizationDepartment")
  async connectInviteOrganizationDepartment(
    @common.Param() params: InviteWhereUniqueInput,
    @common.Body() body: InviteOrganizationDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationDepartment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/inviteOrganizationDepartment")
  async updateInviteOrganizationDepartment(
    @common.Param() params: InviteWhereUniqueInput,
    @common.Body() body: InviteOrganizationDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationDepartment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/inviteOrganizationDepartment")
  async disconnectInviteOrganizationDepartment(
    @common.Param() params: InviteWhereUniqueInput,
    @common.Body() body: InviteOrganizationDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationDepartment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/inviteOrganizationProject")
  @ApiNestedQuery(InviteOrganizationProjectFindManyArgs)
  async findManyInviteOrganizationProject(
    @common.Req() request: Request,
    @common.Param() params: InviteWhereUniqueInput
  ): Promise<InviteOrganizationProject[]> {
    const query = plainToClass(
      InviteOrganizationProjectFindManyArgs,
      request.query
    );
    const results = await this.service.findInviteOrganizationProject(
      params.id,
      {
        ...query,
        select: {
          invite: {
            select: {
              id: true,
            },
          },

          organizationProject: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/inviteOrganizationProject")
  async connectInviteOrganizationProject(
    @common.Param() params: InviteWhereUniqueInput,
    @common.Body() body: InviteOrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationProject: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/inviteOrganizationProject")
  async updateInviteOrganizationProject(
    @common.Param() params: InviteWhereUniqueInput,
    @common.Body() body: InviteOrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationProject: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/inviteOrganizationProject")
  async disconnectInviteOrganizationProject(
    @common.Param() params: InviteWhereUniqueInput,
    @common.Body() body: InviteOrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationProject: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/inviteOrganizationTeam")
  @ApiNestedQuery(InviteOrganizationTeamFindManyArgs)
  async findManyInviteOrganizationTeam(
    @common.Req() request: Request,
    @common.Param() params: InviteWhereUniqueInput
  ): Promise<InviteOrganizationTeam[]> {
    const query = plainToClass(
      InviteOrganizationTeamFindManyArgs,
      request.query
    );
    const results = await this.service.findInviteOrganizationTeam(params.id, {
      ...query,
      select: {
        invite: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/inviteOrganizationTeam")
  async connectInviteOrganizationTeam(
    @common.Param() params: InviteWhereUniqueInput,
    @common.Body() body: InviteOrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationTeam: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/inviteOrganizationTeam")
  async updateInviteOrganizationTeam(
    @common.Param() params: InviteWhereUniqueInput,
    @common.Body() body: InviteOrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationTeam: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/inviteOrganizationTeam")
  async disconnectInviteOrganizationTeam(
    @common.Param() params: InviteWhereUniqueInput,
    @common.Body() body: InviteOrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationTeam: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
