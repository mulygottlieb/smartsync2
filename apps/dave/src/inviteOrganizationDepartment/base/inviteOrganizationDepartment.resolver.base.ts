/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateInviteOrganizationDepartmentArgs } from "./CreateInviteOrganizationDepartmentArgs";
import { UpdateInviteOrganizationDepartmentArgs } from "./UpdateInviteOrganizationDepartmentArgs";
import { DeleteInviteOrganizationDepartmentArgs } from "./DeleteInviteOrganizationDepartmentArgs";
import { InviteOrganizationDepartmentCountArgs } from "./InviteOrganizationDepartmentCountArgs";
import { InviteOrganizationDepartmentFindManyArgs } from "./InviteOrganizationDepartmentFindManyArgs";
import { InviteOrganizationDepartmentFindUniqueArgs } from "./InviteOrganizationDepartmentFindUniqueArgs";
import { InviteOrganizationDepartment } from "./InviteOrganizationDepartment";
import { Invite } from "../../invite/base/Invite";
import { OrganizationDepartment } from "../../organizationDepartment/base/OrganizationDepartment";
import { InviteOrganizationDepartmentService } from "../inviteOrganizationDepartment.service";
@graphql.Resolver(() => InviteOrganizationDepartment)
export class InviteOrganizationDepartmentResolverBase {
  constructor(
    protected readonly service: InviteOrganizationDepartmentService
  ) {}

  async _inviteOrganizationDepartmentsMeta(
    @graphql.Args() args: InviteOrganizationDepartmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InviteOrganizationDepartment])
  async inviteOrganizationDepartments(
    @graphql.Args() args: InviteOrganizationDepartmentFindManyArgs
  ): Promise<InviteOrganizationDepartment[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => InviteOrganizationDepartment, { nullable: true })
  async inviteOrganizationDepartment(
    @graphql.Args() args: InviteOrganizationDepartmentFindUniqueArgs
  ): Promise<InviteOrganizationDepartment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InviteOrganizationDepartment)
  async createInviteOrganizationDepartment(
    @graphql.Args() args: CreateInviteOrganizationDepartmentArgs
  ): Promise<InviteOrganizationDepartment> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        invite: {
          connect: args.data.invite,
        },

        organizationDepartment: {
          connect: args.data.organizationDepartment,
        },
      },
    });
  }

  @graphql.Mutation(() => InviteOrganizationDepartment)
  async updateInviteOrganizationDepartment(
    @graphql.Args() args: UpdateInviteOrganizationDepartmentArgs
  ): Promise<InviteOrganizationDepartment | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          invite: {
            connect: args.data.invite,
          },

          organizationDepartment: {
            connect: args.data.organizationDepartment,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InviteOrganizationDepartment)
  async deleteInviteOrganizationDepartment(
    @graphql.Args() args: DeleteInviteOrganizationDepartmentArgs
  ): Promise<InviteOrganizationDepartment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Invite, {
    nullable: true,
    name: "invite",
  })
  async resolveFieldInvite(
    @graphql.Parent() parent: InviteOrganizationDepartment
  ): Promise<Invite | null> {
    const result = await this.service.getInvite(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationDepartment, {
    nullable: true,
    name: "organizationDepartment",
  })
  async resolveFieldOrganizationDepartment(
    @graphql.Parent() parent: InviteOrganizationDepartment
  ): Promise<OrganizationDepartment | null> {
    const result = await this.service.getOrganizationDepartment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
