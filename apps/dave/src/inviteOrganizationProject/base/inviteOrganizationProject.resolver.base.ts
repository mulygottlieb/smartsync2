/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateInviteOrganizationProjectArgs } from "./CreateInviteOrganizationProjectArgs";
import { UpdateInviteOrganizationProjectArgs } from "./UpdateInviteOrganizationProjectArgs";
import { DeleteInviteOrganizationProjectArgs } from "./DeleteInviteOrganizationProjectArgs";
import { InviteOrganizationProjectCountArgs } from "./InviteOrganizationProjectCountArgs";
import { InviteOrganizationProjectFindManyArgs } from "./InviteOrganizationProjectFindManyArgs";
import { InviteOrganizationProjectFindUniqueArgs } from "./InviteOrganizationProjectFindUniqueArgs";
import { InviteOrganizationProject } from "./InviteOrganizationProject";
import { Invite } from "../../invite/base/Invite";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { InviteOrganizationProjectService } from "../inviteOrganizationProject.service";
@graphql.Resolver(() => InviteOrganizationProject)
export class InviteOrganizationProjectResolverBase {
  constructor(protected readonly service: InviteOrganizationProjectService) {}

  async _inviteOrganizationProjectsMeta(
    @graphql.Args() args: InviteOrganizationProjectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InviteOrganizationProject])
  async inviteOrganizationProjects(
    @graphql.Args() args: InviteOrganizationProjectFindManyArgs
  ): Promise<InviteOrganizationProject[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => InviteOrganizationProject, { nullable: true })
  async inviteOrganizationProject(
    @graphql.Args() args: InviteOrganizationProjectFindUniqueArgs
  ): Promise<InviteOrganizationProject | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InviteOrganizationProject)
  async createInviteOrganizationProject(
    @graphql.Args() args: CreateInviteOrganizationProjectArgs
  ): Promise<InviteOrganizationProject> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        invite: {
          connect: args.data.invite,
        },

        organizationProject: {
          connect: args.data.organizationProject,
        },
      },
    });
  }

  @graphql.Mutation(() => InviteOrganizationProject)
  async updateInviteOrganizationProject(
    @graphql.Args() args: UpdateInviteOrganizationProjectArgs
  ): Promise<InviteOrganizationProject | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          invite: {
            connect: args.data.invite,
          },

          organizationProject: {
            connect: args.data.organizationProject,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InviteOrganizationProject)
  async deleteInviteOrganizationProject(
    @graphql.Args() args: DeleteInviteOrganizationProjectArgs
  ): Promise<InviteOrganizationProject | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Invite, {
    nullable: true,
    name: "invite",
  })
  async resolveFieldInvite(
    @graphql.Parent() parent: InviteOrganizationProject
  ): Promise<Invite | null> {
    const result = await this.service.getInvite(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationProject, {
    nullable: true,
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: InviteOrganizationProject
  ): Promise<OrganizationProject | null> {
    const result = await this.service.getOrganizationProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
