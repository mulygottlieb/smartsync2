/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateInviteOrganizationTeamArgs } from "./CreateInviteOrganizationTeamArgs";
import { UpdateInviteOrganizationTeamArgs } from "./UpdateInviteOrganizationTeamArgs";
import { DeleteInviteOrganizationTeamArgs } from "./DeleteInviteOrganizationTeamArgs";
import { InviteOrganizationTeamCountArgs } from "./InviteOrganizationTeamCountArgs";
import { InviteOrganizationTeamFindManyArgs } from "./InviteOrganizationTeamFindManyArgs";
import { InviteOrganizationTeamFindUniqueArgs } from "./InviteOrganizationTeamFindUniqueArgs";
import { InviteOrganizationTeam } from "./InviteOrganizationTeam";
import { Invite } from "../../invite/base/Invite";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { InviteOrganizationTeamService } from "../inviteOrganizationTeam.service";
@graphql.Resolver(() => InviteOrganizationTeam)
export class InviteOrganizationTeamResolverBase {
  constructor(protected readonly service: InviteOrganizationTeamService) {}

  async _inviteOrganizationTeamsMeta(
    @graphql.Args() args: InviteOrganizationTeamCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InviteOrganizationTeam])
  async inviteOrganizationTeams(
    @graphql.Args() args: InviteOrganizationTeamFindManyArgs
  ): Promise<InviteOrganizationTeam[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => InviteOrganizationTeam, { nullable: true })
  async inviteOrganizationTeam(
    @graphql.Args() args: InviteOrganizationTeamFindUniqueArgs
  ): Promise<InviteOrganizationTeam | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InviteOrganizationTeam)
  async createInviteOrganizationTeam(
    @graphql.Args() args: CreateInviteOrganizationTeamArgs
  ): Promise<InviteOrganizationTeam> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        invite: {
          connect: args.data.invite,
        },

        organizationTeam: {
          connect: args.data.organizationTeam,
        },
      },
    });
  }

  @graphql.Mutation(() => InviteOrganizationTeam)
  async updateInviteOrganizationTeam(
    @graphql.Args() args: UpdateInviteOrganizationTeamArgs
  ): Promise<InviteOrganizationTeam | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          invite: {
            connect: args.data.invite,
          },

          organizationTeam: {
            connect: args.data.organizationTeam,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InviteOrganizationTeam)
  async deleteInviteOrganizationTeam(
    @graphql.Args() args: DeleteInviteOrganizationTeamArgs
  ): Promise<InviteOrganizationTeam | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Invite, {
    nullable: true,
    name: "invite",
  })
  async resolveFieldInvite(
    @graphql.Parent() parent: InviteOrganizationTeam
  ): Promise<Invite | null> {
    const result = await this.service.getInvite(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationTeam, {
    nullable: true,
    name: "organizationTeam",
  })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: InviteOrganizationTeam
  ): Promise<OrganizationTeam | null> {
    const result = await this.service.getOrganizationTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
