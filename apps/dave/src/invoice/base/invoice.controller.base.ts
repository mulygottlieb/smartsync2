/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InvoiceService } from "../invoice.service";
import { InvoiceCreateInput } from "./InvoiceCreateInput";
import { InvoiceWhereInput } from "./InvoiceWhereInput";
import { InvoiceWhereUniqueInput } from "./InvoiceWhereUniqueInput";
import { InvoiceFindManyArgs } from "./InvoiceFindManyArgs";
import { InvoiceUpdateInput } from "./InvoiceUpdateInput";
import { Invoice } from "./Invoice";
import { InvoiceEstimateHistoryFindManyArgs } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistoryFindManyArgs";
import { InvoiceEstimateHistory } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistory";
import { InvoiceEstimateHistoryWhereUniqueInput } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistoryWhereUniqueInput";
import { InvoiceItemFindManyArgs } from "../../invoiceItem/base/InvoiceItemFindManyArgs";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { InvoiceItemWhereUniqueInput } from "../../invoiceItem/base/InvoiceItemWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { TagInvoiceFindManyArgs } from "../../tagInvoice/base/TagInvoiceFindManyArgs";
import { TagInvoice } from "../../tagInvoice/base/TagInvoice";
import { TagInvoiceWhereUniqueInput } from "../../tagInvoice/base/TagInvoiceWhereUniqueInput";

export class InvoiceControllerBase {
  constructor(protected readonly service: InvoiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Invoice })
  async create(@common.Body() data: InvoiceCreateInput): Promise<Invoice> {
    return await this.service.create({
      data: {
        ...data,

        organizationInvoiceOrganizationIdToorganization:
          data.organizationInvoiceOrganizationIdToorganization
            ? {
                connect: data.organizationInvoiceOrganizationIdToorganization,
              }
            : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        organizationInvoiceFromOrganizationIdToorganization: {
          connect: data.organizationInvoiceFromOrganizationIdToorganization,
        },

        organizationContact: data.organizationContact
          ? {
              connect: data.organizationContact,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        invoiceDate: true,
        invoiceNumber: true,
        dueDate: true,
        currency: true,
        discountValue: true,
        paid: true,
        tax: true,
        tax2: true,
        terms: true,
        totalValue: true,
        status: true,
        isEstimate: true,
        isAccepted: true,
        discountType: true,
        taxType: true,
        tax2Type: true,
        invoiceType: true,
        sentTo: true,
        organizationContactId: true,
        internalNote: true,
        alreadyPaid: true,
        amountDue: true,
        hasRemainingAmountInvoiced: true,
        token: true,
        isArchived: true,

        organizationInvoiceOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationInvoiceFromOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Invoice] })
  @ApiNestedQuery(InvoiceFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Invoice[]> {
    const args = plainToClass(InvoiceFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        invoiceDate: true,
        invoiceNumber: true,
        dueDate: true,
        currency: true,
        discountValue: true,
        paid: true,
        tax: true,
        tax2: true,
        terms: true,
        totalValue: true,
        status: true,
        isEstimate: true,
        isAccepted: true,
        discountType: true,
        taxType: true,
        tax2Type: true,
        invoiceType: true,
        sentTo: true,
        organizationContactId: true,
        internalNote: true,
        alreadyPaid: true,
        amountDue: true,
        hasRemainingAmountInvoiced: true,
        token: true,
        isArchived: true,

        organizationInvoiceOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationInvoiceFromOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Invoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: InvoiceWhereUniqueInput
  ): Promise<Invoice | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        invoiceDate: true,
        invoiceNumber: true,
        dueDate: true,
        currency: true,
        discountValue: true,
        paid: true,
        tax: true,
        tax2: true,
        terms: true,
        totalValue: true,
        status: true,
        isEstimate: true,
        isAccepted: true,
        discountType: true,
        taxType: true,
        tax2Type: true,
        invoiceType: true,
        sentTo: true,
        organizationContactId: true,
        internalNote: true,
        alreadyPaid: true,
        amountDue: true,
        hasRemainingAmountInvoiced: true,
        token: true,
        isArchived: true,

        organizationInvoiceOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationInvoiceFromOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Invoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() data: InvoiceUpdateInput
  ): Promise<Invoice | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          organizationInvoiceOrganizationIdToorganization:
            data.organizationInvoiceOrganizationIdToorganization
              ? {
                  connect: data.organizationInvoiceOrganizationIdToorganization,
                }
              : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          organizationInvoiceFromOrganizationIdToorganization: {
            connect: data.organizationInvoiceFromOrganizationIdToorganization,
          },

          organizationContact: data.organizationContact
            ? {
                connect: data.organizationContact,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          invoiceDate: true,
          invoiceNumber: true,
          dueDate: true,
          currency: true,
          discountValue: true,
          paid: true,
          tax: true,
          tax2: true,
          terms: true,
          totalValue: true,
          status: true,
          isEstimate: true,
          isAccepted: true,
          discountType: true,
          taxType: true,
          tax2Type: true,
          invoiceType: true,
          sentTo: true,
          organizationContactId: true,
          internalNote: true,
          alreadyPaid: true,
          amountDue: true,
          hasRemainingAmountInvoiced: true,
          token: true,
          isArchived: true,

          organizationInvoiceOrganizationIdToorganization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          organizationInvoiceFromOrganizationIdToorganization: {
            select: {
              id: true,
            },
          },

          organizationContact: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Invoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: InvoiceWhereUniqueInput
  ): Promise<Invoice | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          invoiceDate: true,
          invoiceNumber: true,
          dueDate: true,
          currency: true,
          discountValue: true,
          paid: true,
          tax: true,
          tax2: true,
          terms: true,
          totalValue: true,
          status: true,
          isEstimate: true,
          isAccepted: true,
          discountType: true,
          taxType: true,
          tax2Type: true,
          invoiceType: true,
          sentTo: true,
          organizationContactId: true,
          internalNote: true,
          alreadyPaid: true,
          amountDue: true,
          hasRemainingAmountInvoiced: true,
          token: true,
          isArchived: true,

          organizationInvoiceOrganizationIdToorganization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          organizationInvoiceFromOrganizationIdToorganization: {
            select: {
              id: true,
            },
          },

          organizationContact: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/invoiceEstimateHistory")
  @ApiNestedQuery(InvoiceEstimateHistoryFindManyArgs)
  async findManyInvoiceEstimateHistory(
    @common.Req() request: Request,
    @common.Param() params: InvoiceWhereUniqueInput
  ): Promise<InvoiceEstimateHistory[]> {
    const query = plainToClass(
      InvoiceEstimateHistoryFindManyArgs,
      request.query
    );
    const results = await this.service.findInvoiceEstimateHistory(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        action: true,

        invoice: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoiceEstimateHistory")
  async connectInvoiceEstimateHistory(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() body: InvoiceEstimateHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceEstimateHistory: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoiceEstimateHistory")
  async updateInvoiceEstimateHistory(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() body: InvoiceEstimateHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceEstimateHistory: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoiceEstimateHistory")
  async disconnectInvoiceEstimateHistory(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() body: InvoiceEstimateHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceEstimateHistory: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/invoiceItem")
  @ApiNestedQuery(InvoiceItemFindManyArgs)
  async findManyInvoiceItem(
    @common.Req() request: Request,
    @common.Param() params: InvoiceWhereUniqueInput
  ): Promise<InvoiceItem[]> {
    const query = plainToClass(InvoiceItemFindManyArgs, request.query);
    const results = await this.service.findInvoiceItem(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        price: true,
        quantity: true,
        totalValue: true,
        applyTax: true,
        applyDiscount: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        invoice: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        expense: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoiceItem")
  async connectInvoiceItem(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoiceItem")
  async updateInvoiceItem(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoiceItem")
  async disconnectInvoiceItem(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/payment")
  @ApiNestedQuery(PaymentFindManyArgs)
  async findManyPayment(
    @common.Req() request: Request,
    @common.Param() params: InvoiceWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayment(params.id, {
      ...query,
      select: {
        invoice: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        id: true,
        createdAt: true,
        updatedAt: true,
        paymentDate: true,
        amount: true,
        note: true,
        currency: true,
        overdue: true,
        paymentMethod: true,

        user: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payment")
  async connectPayment(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payment")
  async updatePayment(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payment")
  async disconnectPayment(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagInvoice")
  @ApiNestedQuery(TagInvoiceFindManyArgs)
  async findManyTagInvoice(
    @common.Req() request: Request,
    @common.Param() params: InvoiceWhereUniqueInput
  ): Promise<TagInvoice[]> {
    const query = plainToClass(TagInvoiceFindManyArgs, request.query);
    const results = await this.service.findTagInvoice(params.id, {
      ...query,
      select: {
        tag: {
          select: {
            id: true,
          },
        },

        invoice: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagInvoice")
  async connectTagInvoice(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() body: TagInvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagInvoice: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagInvoice")
  async updateTagInvoice(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() body: TagInvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagInvoice: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagInvoice")
  async disconnectTagInvoice(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() body: TagInvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagInvoice: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
