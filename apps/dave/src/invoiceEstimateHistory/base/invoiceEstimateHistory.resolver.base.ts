/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateInvoiceEstimateHistoryArgs } from "./CreateInvoiceEstimateHistoryArgs";
import { UpdateInvoiceEstimateHistoryArgs } from "./UpdateInvoiceEstimateHistoryArgs";
import { DeleteInvoiceEstimateHistoryArgs } from "./DeleteInvoiceEstimateHistoryArgs";
import { InvoiceEstimateHistoryCountArgs } from "./InvoiceEstimateHistoryCountArgs";
import { InvoiceEstimateHistoryFindManyArgs } from "./InvoiceEstimateHistoryFindManyArgs";
import { InvoiceEstimateHistoryFindUniqueArgs } from "./InvoiceEstimateHistoryFindUniqueArgs";
import { InvoiceEstimateHistory } from "./InvoiceEstimateHistory";
import { Invoice } from "../../invoice/base/Invoice";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { User } from "../../user/base/User";
import { InvoiceEstimateHistoryService } from "../invoiceEstimateHistory.service";
@graphql.Resolver(() => InvoiceEstimateHistory)
export class InvoiceEstimateHistoryResolverBase {
  constructor(protected readonly service: InvoiceEstimateHistoryService) {}

  async _invoiceEstimateHistoriesMeta(
    @graphql.Args() args: InvoiceEstimateHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InvoiceEstimateHistory])
  async invoiceEstimateHistories(
    @graphql.Args() args: InvoiceEstimateHistoryFindManyArgs
  ): Promise<InvoiceEstimateHistory[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => InvoiceEstimateHistory, { nullable: true })
  async invoiceEstimateHistory(
    @graphql.Args() args: InvoiceEstimateHistoryFindUniqueArgs
  ): Promise<InvoiceEstimateHistory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InvoiceEstimateHistory)
  async createInvoiceEstimateHistory(
    @graphql.Args() args: CreateInvoiceEstimateHistoryArgs
  ): Promise<InvoiceEstimateHistory> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        invoice: {
          connect: args.data.invoice,
        },

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => InvoiceEstimateHistory)
  async updateInvoiceEstimateHistory(
    @graphql.Args() args: UpdateInvoiceEstimateHistoryArgs
  ): Promise<InvoiceEstimateHistory | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          invoice: {
            connect: args.data.invoice,
          },

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InvoiceEstimateHistory)
  async deleteInvoiceEstimateHistory(
    @graphql.Args() args: DeleteInvoiceEstimateHistoryArgs
  ): Promise<InvoiceEstimateHistory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Invoice, {
    nullable: true,
    name: "invoice",
  })
  async resolveFieldInvoice(
    @graphql.Parent() parent: InvoiceEstimateHistory
  ): Promise<Invoice | null> {
    const result = await this.service.getInvoice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: InvoiceEstimateHistory
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: InvoiceEstimateHistory
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: InvoiceEstimateHistory
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
