/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateInvoiceItemArgs } from "./CreateInvoiceItemArgs";
import { UpdateInvoiceItemArgs } from "./UpdateInvoiceItemArgs";
import { DeleteInvoiceItemArgs } from "./DeleteInvoiceItemArgs";
import { InvoiceItemCountArgs } from "./InvoiceItemCountArgs";
import { InvoiceItemFindManyArgs } from "./InvoiceItemFindManyArgs";
import { InvoiceItemFindUniqueArgs } from "./InvoiceItemFindUniqueArgs";
import { InvoiceItem } from "./InvoiceItem";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { Invoice } from "../../invoice/base/Invoice";
import { Task } from "../../task/base/Task";
import { Expense } from "../../expense/base/Expense";
import { Employee } from "../../employee/base/Employee";
import { Product } from "../../product/base/Product";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { InvoiceItemService } from "../invoiceItem.service";
@graphql.Resolver(() => InvoiceItem)
export class InvoiceItemResolverBase {
  constructor(protected readonly service: InvoiceItemService) {}

  async _invoiceItemsMeta(
    @graphql.Args() args: InvoiceItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InvoiceItem])
  async invoiceItems(
    @graphql.Args() args: InvoiceItemFindManyArgs
  ): Promise<InvoiceItem[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => InvoiceItem, { nullable: true })
  async invoiceItem(
    @graphql.Args() args: InvoiceItemFindUniqueArgs
  ): Promise<InvoiceItem | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InvoiceItem)
  async createInvoiceItem(
    @graphql.Args() args: CreateInvoiceItemArgs
  ): Promise<InvoiceItem> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationProject: args.data.organizationProject
          ? {
              connect: args.data.organizationProject,
            }
          : undefined,

        invoice: args.data.invoice
          ? {
              connect: args.data.invoice,
            }
          : undefined,

        task: args.data.task
          ? {
              connect: args.data.task,
            }
          : undefined,

        expense: args.data.expense
          ? {
              connect: args.data.expense,
            }
          : undefined,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => InvoiceItem)
  async updateInvoiceItem(
    @graphql.Args() args: UpdateInvoiceItemArgs
  ): Promise<InvoiceItem | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationProject: args.data.organizationProject
            ? {
                connect: args.data.organizationProject,
              }
            : undefined,

          invoice: args.data.invoice
            ? {
                connect: args.data.invoice,
              }
            : undefined,

          task: args.data.task
            ? {
                connect: args.data.task,
              }
            : undefined,

          expense: args.data.expense
            ? {
                connect: args.data.expense,
              }
            : undefined,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InvoiceItem)
  async deleteInvoiceItem(
    @graphql.Args() args: DeleteInvoiceItemArgs
  ): Promise<InvoiceItem | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => OrganizationProject, {
    nullable: true,
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: InvoiceItem
  ): Promise<OrganizationProject | null> {
    const result = await this.service.getOrganizationProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Invoice, {
    nullable: true,
    name: "invoice",
  })
  async resolveFieldInvoice(
    @graphql.Parent() parent: InvoiceItem
  ): Promise<Invoice | null> {
    const result = await this.service.getInvoice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Task, {
    nullable: true,
    name: "task",
  })
  async resolveFieldTask(
    @graphql.Parent() parent: InvoiceItem
  ): Promise<Task | null> {
    const result = await this.service.getTask(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Expense, {
    nullable: true,
    name: "expense",
  })
  async resolveFieldExpense(
    @graphql.Parent() parent: InvoiceItem
  ): Promise<Expense | null> {
    const result = await this.service.getExpense(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: InvoiceItem
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  async resolveFieldProduct(
    @graphql.Parent() parent: InvoiceItem
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: InvoiceItem
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: InvoiceItem
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
