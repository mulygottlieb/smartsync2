/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateJobPresetArgs } from "./CreateJobPresetArgs";
import { UpdateJobPresetArgs } from "./UpdateJobPresetArgs";
import { DeleteJobPresetArgs } from "./DeleteJobPresetArgs";
import { JobPresetCountArgs } from "./JobPresetCountArgs";
import { JobPresetFindManyArgs } from "./JobPresetFindManyArgs";
import { JobPresetFindUniqueArgs } from "./JobPresetFindUniqueArgs";
import { JobPreset } from "./JobPreset";
import { EmployeeJobPresetFindManyArgs } from "../../employeeJobPreset/base/EmployeeJobPresetFindManyArgs";
import { EmployeeJobPreset } from "../../employeeJobPreset/base/EmployeeJobPreset";
import { EmployeeUpworkJobSearchCriterionFindManyArgs } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterionFindManyArgs";
import { EmployeeUpworkJobSearchCriterion } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterion";
import { JobPresetUpworkJobSearchCriterionFindManyArgs } from "../../jobPresetUpworkJobSearchCriterion/base/JobPresetUpworkJobSearchCriterionFindManyArgs";
import { JobPresetUpworkJobSearchCriterion } from "../../jobPresetUpworkJobSearchCriterion/base/JobPresetUpworkJobSearchCriterion";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { JobPresetService } from "../jobPreset.service";
@graphql.Resolver(() => JobPreset)
export class JobPresetResolverBase {
  constructor(protected readonly service: JobPresetService) {}

  async _jobPresetsMeta(
    @graphql.Args() args: JobPresetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JobPreset])
  async jobPresets(
    @graphql.Args() args: JobPresetFindManyArgs
  ): Promise<JobPreset[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => JobPreset, { nullable: true })
  async jobPreset(
    @graphql.Args() args: JobPresetFindUniqueArgs
  ): Promise<JobPreset | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JobPreset)
  async createJobPreset(
    @graphql.Args() args: CreateJobPresetArgs
  ): Promise<JobPreset> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => JobPreset)
  async updateJobPreset(
    @graphql.Args() args: UpdateJobPresetArgs
  ): Promise<JobPreset | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobPreset)
  async deleteJobPreset(
    @graphql.Args() args: DeleteJobPresetArgs
  ): Promise<JobPreset | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EmployeeJobPreset], {
    name: "employeeJobPreset",
  })
  async resolveFieldEmployeeJobPreset(
    @graphql.Parent() parent: JobPreset,
    @graphql.Args() args: EmployeeJobPresetFindManyArgs
  ): Promise<EmployeeJobPreset[]> {
    const results = await this.service.findEmployeeJobPreset(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeUpworkJobSearchCriterion], {
    name: "employeeUpworkJobSearchCriterion",
  })
  async resolveFieldEmployeeUpworkJobSearchCriterion(
    @graphql.Parent() parent: JobPreset,
    @graphql.Args() args: EmployeeUpworkJobSearchCriterionFindManyArgs
  ): Promise<EmployeeUpworkJobSearchCriterion[]> {
    const results = await this.service.findEmployeeUpworkJobSearchCriterion(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [JobPresetUpworkJobSearchCriterion], {
    name: "jobPresetUpworkJobSearchCriterion",
  })
  async resolveFieldJobPresetUpworkJobSearchCriterion(
    @graphql.Parent() parent: JobPreset,
    @graphql.Args() args: JobPresetUpworkJobSearchCriterionFindManyArgs
  ): Promise<JobPresetUpworkJobSearchCriterion[]> {
    const results = await this.service.findJobPresetUpworkJobSearchCriterion(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: JobPreset
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: JobPreset
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
