/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateJobPresetUpworkJobSearchCriterionArgs } from "./CreateJobPresetUpworkJobSearchCriterionArgs";
import { UpdateJobPresetUpworkJobSearchCriterionArgs } from "./UpdateJobPresetUpworkJobSearchCriterionArgs";
import { DeleteJobPresetUpworkJobSearchCriterionArgs } from "./DeleteJobPresetUpworkJobSearchCriterionArgs";
import { JobPresetUpworkJobSearchCriterionCountArgs } from "./JobPresetUpworkJobSearchCriterionCountArgs";
import { JobPresetUpworkJobSearchCriterionFindManyArgs } from "./JobPresetUpworkJobSearchCriterionFindManyArgs";
import { JobPresetUpworkJobSearchCriterionFindUniqueArgs } from "./JobPresetUpworkJobSearchCriterionFindUniqueArgs";
import { JobPresetUpworkJobSearchCriterion } from "./JobPresetUpworkJobSearchCriterion";
import { Tenant } from "../../tenant/base/Tenant";
import { JobPreset } from "../../jobPreset/base/JobPreset";
import { JobSearchCategory } from "../../jobSearchCategory/base/JobSearchCategory";
import { JobSearchOccupation } from "../../jobSearchOccupation/base/JobSearchOccupation";
import { Organization } from "../../organization/base/Organization";
import { JobPresetUpworkJobSearchCriterionService } from "../jobPresetUpworkJobSearchCriterion.service";
@graphql.Resolver(() => JobPresetUpworkJobSearchCriterion)
export class JobPresetUpworkJobSearchCriterionResolverBase {
  constructor(
    protected readonly service: JobPresetUpworkJobSearchCriterionService
  ) {}

  async _jobPresetUpworkJobSearchCriteriaMeta(
    @graphql.Args() args: JobPresetUpworkJobSearchCriterionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JobPresetUpworkJobSearchCriterion])
  async jobPresetUpworkJobSearchCriteria(
    @graphql.Args() args: JobPresetUpworkJobSearchCriterionFindManyArgs
  ): Promise<JobPresetUpworkJobSearchCriterion[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => JobPresetUpworkJobSearchCriterion, { nullable: true })
  async jobPresetUpworkJobSearchCriterion(
    @graphql.Args() args: JobPresetUpworkJobSearchCriterionFindUniqueArgs
  ): Promise<JobPresetUpworkJobSearchCriterion | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JobPresetUpworkJobSearchCriterion)
  async createJobPresetUpworkJobSearchCriterion(
    @graphql.Args() args: CreateJobPresetUpworkJobSearchCriterionArgs
  ): Promise<JobPresetUpworkJobSearchCriterion> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        jobPreset: {
          connect: args.data.jobPreset,
        },

        jobSearchCategory: args.data.jobSearchCategory
          ? {
              connect: args.data.jobSearchCategory,
            }
          : undefined,

        jobSearchOccupation: args.data.jobSearchOccupation
          ? {
              connect: args.data.jobSearchOccupation,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => JobPresetUpworkJobSearchCriterion)
  async updateJobPresetUpworkJobSearchCriterion(
    @graphql.Args() args: UpdateJobPresetUpworkJobSearchCriterionArgs
  ): Promise<JobPresetUpworkJobSearchCriterion | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          jobPreset: {
            connect: args.data.jobPreset,
          },

          jobSearchCategory: args.data.jobSearchCategory
            ? {
                connect: args.data.jobSearchCategory,
              }
            : undefined,

          jobSearchOccupation: args.data.jobSearchOccupation
            ? {
                connect: args.data.jobSearchOccupation,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobPresetUpworkJobSearchCriterion)
  async deleteJobPresetUpworkJobSearchCriterion(
    @graphql.Args() args: DeleteJobPresetUpworkJobSearchCriterionArgs
  ): Promise<JobPresetUpworkJobSearchCriterion | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: JobPresetUpworkJobSearchCriterion
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => JobPreset, {
    nullable: true,
    name: "jobPreset",
  })
  async resolveFieldJobPreset(
    @graphql.Parent() parent: JobPresetUpworkJobSearchCriterion
  ): Promise<JobPreset | null> {
    const result = await this.service.getJobPreset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => JobSearchCategory, {
    nullable: true,
    name: "jobSearchCategory",
  })
  async resolveFieldJobSearchCategory(
    @graphql.Parent() parent: JobPresetUpworkJobSearchCriterion
  ): Promise<JobSearchCategory | null> {
    const result = await this.service.getJobSearchCategory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => JobSearchOccupation, {
    nullable: true,
    name: "jobSearchOccupation",
  })
  async resolveFieldJobSearchOccupation(
    @graphql.Parent() parent: JobPresetUpworkJobSearchCriterion
  ): Promise<JobSearchOccupation | null> {
    const result = await this.service.getJobSearchOccupation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: JobPresetUpworkJobSearchCriterion
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
