/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateJobSearchCategoryArgs } from "./CreateJobSearchCategoryArgs";
import { UpdateJobSearchCategoryArgs } from "./UpdateJobSearchCategoryArgs";
import { DeleteJobSearchCategoryArgs } from "./DeleteJobSearchCategoryArgs";
import { JobSearchCategoryCountArgs } from "./JobSearchCategoryCountArgs";
import { JobSearchCategoryFindManyArgs } from "./JobSearchCategoryFindManyArgs";
import { JobSearchCategoryFindUniqueArgs } from "./JobSearchCategoryFindUniqueArgs";
import { JobSearchCategory } from "./JobSearchCategory";
import { EmployeeUpworkJobSearchCriterionFindManyArgs } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterionFindManyArgs";
import { EmployeeUpworkJobSearchCriterion } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterion";
import { JobPresetUpworkJobSearchCriterionFindManyArgs } from "../../jobPresetUpworkJobSearchCriterion/base/JobPresetUpworkJobSearchCriterionFindManyArgs";
import { JobPresetUpworkJobSearchCriterion } from "../../jobPresetUpworkJobSearchCriterion/base/JobPresetUpworkJobSearchCriterion";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { JobSearchCategoryService } from "../jobSearchCategory.service";
@graphql.Resolver(() => JobSearchCategory)
export class JobSearchCategoryResolverBase {
  constructor(protected readonly service: JobSearchCategoryService) {}

  async _jobSearchCategoriesMeta(
    @graphql.Args() args: JobSearchCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JobSearchCategory])
  async jobSearchCategories(
    @graphql.Args() args: JobSearchCategoryFindManyArgs
  ): Promise<JobSearchCategory[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => JobSearchCategory, { nullable: true })
  async jobSearchCategory(
    @graphql.Args() args: JobSearchCategoryFindUniqueArgs
  ): Promise<JobSearchCategory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JobSearchCategory)
  async createJobSearchCategory(
    @graphql.Args() args: CreateJobSearchCategoryArgs
  ): Promise<JobSearchCategory> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => JobSearchCategory)
  async updateJobSearchCategory(
    @graphql.Args() args: UpdateJobSearchCategoryArgs
  ): Promise<JobSearchCategory | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobSearchCategory)
  async deleteJobSearchCategory(
    @graphql.Args() args: DeleteJobSearchCategoryArgs
  ): Promise<JobSearchCategory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EmployeeUpworkJobSearchCriterion], {
    name: "employeeUpworkJobSearchCriterion",
  })
  async resolveFieldEmployeeUpworkJobSearchCriterion(
    @graphql.Parent() parent: JobSearchCategory,
    @graphql.Args() args: EmployeeUpworkJobSearchCriterionFindManyArgs
  ): Promise<EmployeeUpworkJobSearchCriterion[]> {
    const results = await this.service.findEmployeeUpworkJobSearchCriterion(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [JobPresetUpworkJobSearchCriterion], {
    name: "jobPresetUpworkJobSearchCriterion",
  })
  async resolveFieldJobPresetUpworkJobSearchCriterion(
    @graphql.Parent() parent: JobSearchCategory,
    @graphql.Args() args: JobPresetUpworkJobSearchCriterionFindManyArgs
  ): Promise<JobPresetUpworkJobSearchCriterion[]> {
    const results = await this.service.findJobPresetUpworkJobSearchCriterion(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: JobSearchCategory
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: JobSearchCategory
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
