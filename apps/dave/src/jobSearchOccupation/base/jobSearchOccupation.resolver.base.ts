/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateJobSearchOccupationArgs } from "./CreateJobSearchOccupationArgs";
import { UpdateJobSearchOccupationArgs } from "./UpdateJobSearchOccupationArgs";
import { DeleteJobSearchOccupationArgs } from "./DeleteJobSearchOccupationArgs";
import { JobSearchOccupationCountArgs } from "./JobSearchOccupationCountArgs";
import { JobSearchOccupationFindManyArgs } from "./JobSearchOccupationFindManyArgs";
import { JobSearchOccupationFindUniqueArgs } from "./JobSearchOccupationFindUniqueArgs";
import { JobSearchOccupation } from "./JobSearchOccupation";
import { EmployeeUpworkJobSearchCriterionFindManyArgs } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterionFindManyArgs";
import { EmployeeUpworkJobSearchCriterion } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterion";
import { JobPresetUpworkJobSearchCriterionFindManyArgs } from "../../jobPresetUpworkJobSearchCriterion/base/JobPresetUpworkJobSearchCriterionFindManyArgs";
import { JobPresetUpworkJobSearchCriterion } from "../../jobPresetUpworkJobSearchCriterion/base/JobPresetUpworkJobSearchCriterion";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { JobSearchOccupationService } from "../jobSearchOccupation.service";
@graphql.Resolver(() => JobSearchOccupation)
export class JobSearchOccupationResolverBase {
  constructor(protected readonly service: JobSearchOccupationService) {}

  async _jobSearchOccupationsMeta(
    @graphql.Args() args: JobSearchOccupationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JobSearchOccupation])
  async jobSearchOccupations(
    @graphql.Args() args: JobSearchOccupationFindManyArgs
  ): Promise<JobSearchOccupation[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => JobSearchOccupation, { nullable: true })
  async jobSearchOccupation(
    @graphql.Args() args: JobSearchOccupationFindUniqueArgs
  ): Promise<JobSearchOccupation | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JobSearchOccupation)
  async createJobSearchOccupation(
    @graphql.Args() args: CreateJobSearchOccupationArgs
  ): Promise<JobSearchOccupation> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => JobSearchOccupation)
  async updateJobSearchOccupation(
    @graphql.Args() args: UpdateJobSearchOccupationArgs
  ): Promise<JobSearchOccupation | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobSearchOccupation)
  async deleteJobSearchOccupation(
    @graphql.Args() args: DeleteJobSearchOccupationArgs
  ): Promise<JobSearchOccupation | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EmployeeUpworkJobSearchCriterion], {
    name: "employeeUpworkJobSearchCriterion",
  })
  async resolveFieldEmployeeUpworkJobSearchCriterion(
    @graphql.Parent() parent: JobSearchOccupation,
    @graphql.Args() args: EmployeeUpworkJobSearchCriterionFindManyArgs
  ): Promise<EmployeeUpworkJobSearchCriterion[]> {
    const results = await this.service.findEmployeeUpworkJobSearchCriterion(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [JobPresetUpworkJobSearchCriterion], {
    name: "jobPresetUpworkJobSearchCriterion",
  })
  async resolveFieldJobPresetUpworkJobSearchCriterion(
    @graphql.Parent() parent: JobSearchOccupation,
    @graphql.Args() args: JobPresetUpworkJobSearchCriterionFindManyArgs
  ): Promise<JobPresetUpworkJobSearchCriterion[]> {
    const results = await this.service.findJobPresetUpworkJobSearchCriterion(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: JobSearchOccupation
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: JobSearchOccupation
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
