/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsInt,
  IsOptional,
  IsDate,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { OrganizationProjectWhereUniqueInput } from "../../organizationProject/base/OrganizationProjectWhereUniqueInput";
import { GoalKpiWhereUniqueInput } from "../../goalKpi/base/GoalKpiWhereUniqueInput";
import { EmployeeWhereUniqueInput } from "../../employee/base/EmployeeWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { TaskWhereUniqueInput } from "../../task/base/TaskWhereUniqueInput";
import { GoalCreateNestedManyWithoutKeyResultsInput } from "./GoalCreateNestedManyWithoutKeyResultsInput";
import { GoalWhereUniqueInput } from "../../goal/base/GoalWhereUniqueInput";
import { KeyResultUpdateCreateNestedManyWithoutKeyResultsInput } from "./KeyResultUpdateCreateNestedManyWithoutKeyResultsInput";

@InputType()
class KeyResultCreateInput {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  description!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  typeField!: string;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  targetValue?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  initialValue?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  unit?: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  update!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  progress!: number;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  deadline!: string;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  hardDeadline?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  softDeadline?: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  status!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  weight?: string | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationProjectWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationProjectWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationProjectWhereUniqueInput, {
    nullable: true,
  })
  organizationProject?: OrganizationProjectWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => GoalKpiWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => GoalKpiWhereUniqueInput)
  @IsOptional()
  @Field(() => GoalKpiWhereUniqueInput, {
    nullable: true,
  })
  goalKpi?: GoalKpiWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: () => EmployeeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => EmployeeWhereUniqueInput)
  @Field(() => EmployeeWhereUniqueInput)
  employeeKeyResultOwnerIdToemployee!: EmployeeWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => EmployeeWhereUniqueInput)
  @IsOptional()
  @Field(() => EmployeeWhereUniqueInput, {
    nullable: true,
  })
  employeeKeyResultLeadIdToemployee?: EmployeeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organization?: OrganizationWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => TaskWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TaskWhereUniqueInput)
  @IsOptional()
  @Field(() => TaskWhereUniqueInput, {
    nullable: true,
  })
  task?: TaskWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => GoalCreateNestedManyWithoutKeyResultsInput,
  })
  @ValidateNested()
  @Type(() => GoalCreateNestedManyWithoutKeyResultsInput)
  @IsOptional()
  @Field(() => GoalCreateNestedManyWithoutKeyResultsInput, {
    nullable: true,
  })
  goalGoalAlignedKeyResultIdTokeyResult?: GoalCreateNestedManyWithoutKeyResultsInput;

  @ApiProperty({
    required: false,
    type: () => GoalWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => GoalWhereUniqueInput)
  @IsOptional()
  @Field(() => GoalWhereUniqueInput, {
    nullable: true,
  })
  goalKeyResultGoalIdTogoal?: GoalWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => KeyResultUpdateCreateNestedManyWithoutKeyResultsInput,
  })
  @ValidateNested()
  @Type(() => KeyResultUpdateCreateNestedManyWithoutKeyResultsInput)
  @IsOptional()
  @Field(() => KeyResultUpdateCreateNestedManyWithoutKeyResultsInput, {
    nullable: true,
  })
  keyResultUpdate?: KeyResultUpdateCreateNestedManyWithoutKeyResultsInput;
}

export { KeyResultCreateInput as KeyResultCreateInput };
