/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { KeyResultService } from "../keyResult.service";
import { KeyResultCreateInput } from "./KeyResultCreateInput";
import { KeyResultWhereInput } from "./KeyResultWhereInput";
import { KeyResultWhereUniqueInput } from "./KeyResultWhereUniqueInput";
import { KeyResultFindManyArgs } from "./KeyResultFindManyArgs";
import { KeyResultUpdateInput } from "./KeyResultUpdateInput";
import { KeyResult } from "./KeyResult";
import { GoalFindManyArgs } from "../../goal/base/GoalFindManyArgs";
import { Goal } from "../../goal/base/Goal";
import { GoalWhereUniqueInput } from "../../goal/base/GoalWhereUniqueInput";
import { KeyResultUpdateFindManyArgs } from "../../keyResultUpdate/base/KeyResultUpdateFindManyArgs";
import { KeyResultUpdate } from "../../keyResultUpdate/base/KeyResultUpdate";
import { KeyResultUpdateWhereUniqueInput } from "../../keyResultUpdate/base/KeyResultUpdateWhereUniqueInput";

export class KeyResultControllerBase {
  constructor(protected readonly service: KeyResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: KeyResult })
  async create(@common.Body() data: KeyResultCreateInput): Promise<KeyResult> {
    return await this.service.create({
      data: {
        ...data,

        organizationProject: data.organizationProject
          ? {
              connect: data.organizationProject,
            }
          : undefined,

        goalKpi: data.goalKpi
          ? {
              connect: data.goalKpi,
            }
          : undefined,

        employeeKeyResultOwnerIdToemployee: {
          connect: data.employeeKeyResultOwnerIdToemployee,
        },

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        employeeKeyResultLeadIdToemployee:
          data.employeeKeyResultLeadIdToemployee
            ? {
                connect: data.employeeKeyResultLeadIdToemployee,
              }
            : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        task: data.task
          ? {
              connect: data.task,
            }
          : undefined,

        goalKeyResultGoalIdTogoal: data.goalKeyResultGoalIdTogoal
          ? {
              connect: data.goalKeyResultGoalIdTogoal,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        typeField: true,
        targetValue: true,
        initialValue: true,
        unit: true,
        update: true,
        progress: true,
        deadline: true,
        hardDeadline: true,
        softDeadline: true,
        status: true,
        weight: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        goalKpi: {
          select: {
            id: true,
          },
        },

        employeeKeyResultOwnerIdToemployee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employeeKeyResultLeadIdToemployee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        goalKeyResultGoalIdTogoal: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [KeyResult] })
  @ApiNestedQuery(KeyResultFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<KeyResult[]> {
    const args = plainToClass(KeyResultFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        typeField: true,
        targetValue: true,
        initialValue: true,
        unit: true,
        update: true,
        progress: true,
        deadline: true,
        hardDeadline: true,
        softDeadline: true,
        status: true,
        weight: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        goalKpi: {
          select: {
            id: true,
          },
        },

        employeeKeyResultOwnerIdToemployee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employeeKeyResultLeadIdToemployee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        goalKeyResultGoalIdTogoal: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: KeyResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: KeyResultWhereUniqueInput
  ): Promise<KeyResult | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        typeField: true,
        targetValue: true,
        initialValue: true,
        unit: true,
        update: true,
        progress: true,
        deadline: true,
        hardDeadline: true,
        softDeadline: true,
        status: true,
        weight: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        goalKpi: {
          select: {
            id: true,
          },
        },

        employeeKeyResultOwnerIdToemployee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employeeKeyResultLeadIdToemployee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        goalKeyResultGoalIdTogoal: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: KeyResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: KeyResultWhereUniqueInput,
    @common.Body() data: KeyResultUpdateInput
  ): Promise<KeyResult | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          organizationProject: data.organizationProject
            ? {
                connect: data.organizationProject,
              }
            : undefined,

          goalKpi: data.goalKpi
            ? {
                connect: data.goalKpi,
              }
            : undefined,

          employeeKeyResultOwnerIdToemployee: {
            connect: data.employeeKeyResultOwnerIdToemployee,
          },

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          employeeKeyResultLeadIdToemployee:
            data.employeeKeyResultLeadIdToemployee
              ? {
                  connect: data.employeeKeyResultLeadIdToemployee,
                }
              : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          task: data.task
            ? {
                connect: data.task,
              }
            : undefined,

          goalKeyResultGoalIdTogoal: data.goalKeyResultGoalIdTogoal
            ? {
                connect: data.goalKeyResultGoalIdTogoal,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          typeField: true,
          targetValue: true,
          initialValue: true,
          unit: true,
          update: true,
          progress: true,
          deadline: true,
          hardDeadline: true,
          softDeadline: true,
          status: true,
          weight: true,

          organizationProject: {
            select: {
              id: true,
            },
          },

          goalKpi: {
            select: {
              id: true,
            },
          },

          employeeKeyResultOwnerIdToemployee: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          employeeKeyResultLeadIdToemployee: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          task: {
            select: {
              id: true,
            },
          },

          goalKeyResultGoalIdTogoal: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: KeyResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: KeyResultWhereUniqueInput
  ): Promise<KeyResult | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          typeField: true,
          targetValue: true,
          initialValue: true,
          unit: true,
          update: true,
          progress: true,
          deadline: true,
          hardDeadline: true,
          softDeadline: true,
          status: true,
          weight: true,

          organizationProject: {
            select: {
              id: true,
            },
          },

          goalKpi: {
            select: {
              id: true,
            },
          },

          employeeKeyResultOwnerIdToemployee: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          employeeKeyResultLeadIdToemployee: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          task: {
            select: {
              id: true,
            },
          },

          goalKeyResultGoalIdTogoal: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/goalGoalAlignedKeyResultIdTokeyResult")
  @ApiNestedQuery(GoalFindManyArgs)
  async findManyGoalGoalAlignedKeyResultIdTokeyResult(
    @common.Req() request: Request,
    @common.Param() params: KeyResultWhereUniqueInput
  ): Promise<Goal[]> {
    const query = plainToClass(GoalFindManyArgs, request.query);
    const results =
      await this.service.findGoalGoalAlignedKeyResultIdTokeyResult(params.id, {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          deadline: true,
          level: true,
          progress: true,

          employeeGoalOwnerEmployeeIdToemployee: {
            select: {
              id: true,
            },
          },

          keyResultGoalAlignedKeyResultIdTokeyResult: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          organizationTeam: {
            select: {
              id: true,
            },
          },

          employeeGoalLeadIdToemployee: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/goalGoalAlignedKeyResultIdTokeyResult")
  async connectGoalGoalAlignedKeyResultIdTokeyResult(
    @common.Param() params: KeyResultWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalGoalAlignedKeyResultIdTokeyResult: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/goalGoalAlignedKeyResultIdTokeyResult")
  async updateGoalGoalAlignedKeyResultIdTokeyResult(
    @common.Param() params: KeyResultWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalGoalAlignedKeyResultIdTokeyResult: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/goalGoalAlignedKeyResultIdTokeyResult")
  async disconnectGoalGoalAlignedKeyResultIdTokeyResult(
    @common.Param() params: KeyResultWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalGoalAlignedKeyResultIdTokeyResult: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/keyResultUpdate")
  @ApiNestedQuery(KeyResultUpdateFindManyArgs)
  async findManyKeyResultUpdate(
    @common.Req() request: Request,
    @common.Param() params: KeyResultWhereUniqueInput
  ): Promise<KeyResultUpdate[]> {
    const query = plainToClass(KeyResultUpdateFindManyArgs, request.query);
    const results = await this.service.findKeyResultUpdate(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        update: true,
        progress: true,
        owner: true,
        status: true,

        keyResult: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/keyResultUpdate")
  async connectKeyResultUpdate(
    @common.Param() params: KeyResultWhereUniqueInput,
    @common.Body() body: KeyResultUpdateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResultUpdate: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/keyResultUpdate")
  async updateKeyResultUpdate(
    @common.Param() params: KeyResultWhereUniqueInput,
    @common.Body() body: KeyResultUpdateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResultUpdate: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/keyResultUpdate")
  async disconnectKeyResultUpdate(
    @common.Param() params: KeyResultWhereUniqueInput,
    @common.Body() body: KeyResultUpdateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResultUpdate: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
