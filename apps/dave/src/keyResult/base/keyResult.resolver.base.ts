/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateKeyResultArgs } from "./CreateKeyResultArgs";
import { UpdateKeyResultArgs } from "./UpdateKeyResultArgs";
import { DeleteKeyResultArgs } from "./DeleteKeyResultArgs";
import { KeyResultCountArgs } from "./KeyResultCountArgs";
import { KeyResultFindManyArgs } from "./KeyResultFindManyArgs";
import { KeyResultFindUniqueArgs } from "./KeyResultFindUniqueArgs";
import { KeyResult } from "./KeyResult";
import { GoalFindManyArgs } from "../../goal/base/GoalFindManyArgs";
import { Goal } from "../../goal/base/Goal";
import { KeyResultUpdateFindManyArgs } from "../../keyResultUpdate/base/KeyResultUpdateFindManyArgs";
import { KeyResultUpdate } from "../../keyResultUpdate/base/KeyResultUpdate";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { GoalKpi } from "../../goalKpi/base/GoalKpi";
import { Employee } from "../../employee/base/Employee";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { Task } from "../../task/base/Task";
import { KeyResultService } from "../keyResult.service";
@graphql.Resolver(() => KeyResult)
export class KeyResultResolverBase {
  constructor(protected readonly service: KeyResultService) {}

  async _keyResultsMeta(
    @graphql.Args() args: KeyResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [KeyResult])
  async keyResults(
    @graphql.Args() args: KeyResultFindManyArgs
  ): Promise<KeyResult[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => KeyResult, { nullable: true })
  async keyResult(
    @graphql.Args() args: KeyResultFindUniqueArgs
  ): Promise<KeyResult | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => KeyResult)
  async createKeyResult(
    @graphql.Args() args: CreateKeyResultArgs
  ): Promise<KeyResult> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationProject: args.data.organizationProject
          ? {
              connect: args.data.organizationProject,
            }
          : undefined,

        goalKpi: args.data.goalKpi
          ? {
              connect: args.data.goalKpi,
            }
          : undefined,

        employeeKeyResultOwnerIdToemployee: {
          connect: args.data.employeeKeyResultOwnerIdToemployee,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        employeeKeyResultLeadIdToemployee: args.data
          .employeeKeyResultLeadIdToemployee
          ? {
              connect: args.data.employeeKeyResultLeadIdToemployee,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        task: args.data.task
          ? {
              connect: args.data.task,
            }
          : undefined,

        goalKeyResultGoalIdTogoal: args.data.goalKeyResultGoalIdTogoal
          ? {
              connect: args.data.goalKeyResultGoalIdTogoal,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => KeyResult)
  async updateKeyResult(
    @graphql.Args() args: UpdateKeyResultArgs
  ): Promise<KeyResult | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationProject: args.data.organizationProject
            ? {
                connect: args.data.organizationProject,
              }
            : undefined,

          goalKpi: args.data.goalKpi
            ? {
                connect: args.data.goalKpi,
              }
            : undefined,

          employeeKeyResultOwnerIdToemployee: {
            connect: args.data.employeeKeyResultOwnerIdToemployee,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          employeeKeyResultLeadIdToemployee: args.data
            .employeeKeyResultLeadIdToemployee
            ? {
                connect: args.data.employeeKeyResultLeadIdToemployee,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          task: args.data.task
            ? {
                connect: args.data.task,
              }
            : undefined,

          goalKeyResultGoalIdTogoal: args.data.goalKeyResultGoalIdTogoal
            ? {
                connect: args.data.goalKeyResultGoalIdTogoal,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => KeyResult)
  async deleteKeyResult(
    @graphql.Args() args: DeleteKeyResultArgs
  ): Promise<KeyResult | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Goal], {
    name: "goalGoalAlignedKeyResultIdTokeyResult",
  })
  async resolveFieldGoalGoalAlignedKeyResultIdTokeyResult(
    @graphql.Parent() parent: KeyResult,
    @graphql.Args() args: GoalFindManyArgs
  ): Promise<Goal[]> {
    const results =
      await this.service.findGoalGoalAlignedKeyResultIdTokeyResult(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [KeyResultUpdate], { name: "keyResultUpdate" })
  async resolveFieldKeyResultUpdate(
    @graphql.Parent() parent: KeyResult,
    @graphql.Args() args: KeyResultUpdateFindManyArgs
  ): Promise<KeyResultUpdate[]> {
    const results = await this.service.findKeyResultUpdate(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => OrganizationProject, {
    nullable: true,
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: KeyResult
  ): Promise<OrganizationProject | null> {
    const result = await this.service.getOrganizationProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => GoalKpi, {
    nullable: true,
    name: "goalKpi",
  })
  async resolveFieldGoalKpi(
    @graphql.Parent() parent: KeyResult
  ): Promise<GoalKpi | null> {
    const result = await this.service.getGoalKpi(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employeeKeyResultOwnerIdToemployee",
  })
  async resolveFieldEmployeeKeyResultOwnerIdToemployee(
    @graphql.Parent() parent: KeyResult
  ): Promise<Employee | null> {
    const result = await this.service.getEmployeeKeyResultOwnerIdToemployee(
      parent.id
    );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: KeyResult
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employeeKeyResultLeadIdToemployee",
  })
  async resolveFieldEmployeeKeyResultLeadIdToemployee(
    @graphql.Parent() parent: KeyResult
  ): Promise<Employee | null> {
    const result = await this.service.getEmployeeKeyResultLeadIdToemployee(
      parent.id
    );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: KeyResult
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Task, {
    nullable: true,
    name: "task",
  })
  async resolveFieldTask(
    @graphql.Parent() parent: KeyResult
  ): Promise<Task | null> {
    const result = await this.service.getTask(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Goal, {
    nullable: true,
    name: "goalKeyResultGoalIdTogoal",
  })
  async resolveFieldGoalKeyResultGoalIdTogoal(
    @graphql.Parent() parent: KeyResult
  ): Promise<Goal | null> {
    const result = await this.service.getGoalKeyResultGoalIdTogoal(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
