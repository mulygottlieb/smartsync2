/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateKeyResultTemplateArgs } from "./CreateKeyResultTemplateArgs";
import { UpdateKeyResultTemplateArgs } from "./UpdateKeyResultTemplateArgs";
import { DeleteKeyResultTemplateArgs } from "./DeleteKeyResultTemplateArgs";
import { KeyResultTemplateCountArgs } from "./KeyResultTemplateCountArgs";
import { KeyResultTemplateFindManyArgs } from "./KeyResultTemplateFindManyArgs";
import { KeyResultTemplateFindUniqueArgs } from "./KeyResultTemplateFindUniqueArgs";
import { KeyResultTemplate } from "./KeyResultTemplate";
import { GoalTemplate } from "../../goalTemplate/base/GoalTemplate";
import { GoalKpiTemplate } from "../../goalKpiTemplate/base/GoalKpiTemplate";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { KeyResultTemplateService } from "../keyResultTemplate.service";
@graphql.Resolver(() => KeyResultTemplate)
export class KeyResultTemplateResolverBase {
  constructor(protected readonly service: KeyResultTemplateService) {}

  async _keyResultTemplatesMeta(
    @graphql.Args() args: KeyResultTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [KeyResultTemplate])
  async keyResultTemplates(
    @graphql.Args() args: KeyResultTemplateFindManyArgs
  ): Promise<KeyResultTemplate[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => KeyResultTemplate, { nullable: true })
  async keyResultTemplate(
    @graphql.Args() args: KeyResultTemplateFindUniqueArgs
  ): Promise<KeyResultTemplate | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => KeyResultTemplate)
  async createKeyResultTemplate(
    @graphql.Args() args: CreateKeyResultTemplateArgs
  ): Promise<KeyResultTemplate> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        goalTemplate: args.data.goalTemplate
          ? {
              connect: args.data.goalTemplate,
            }
          : undefined,

        goalKpiTemplate: args.data.goalKpiTemplate
          ? {
              connect: args.data.goalKpiTemplate,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => KeyResultTemplate)
  async updateKeyResultTemplate(
    @graphql.Args() args: UpdateKeyResultTemplateArgs
  ): Promise<KeyResultTemplate | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          goalTemplate: args.data.goalTemplate
            ? {
                connect: args.data.goalTemplate,
              }
            : undefined,

          goalKpiTemplate: args.data.goalKpiTemplate
            ? {
                connect: args.data.goalKpiTemplate,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => KeyResultTemplate)
  async deleteKeyResultTemplate(
    @graphql.Args() args: DeleteKeyResultTemplateArgs
  ): Promise<KeyResultTemplate | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => GoalTemplate, {
    nullable: true,
    name: "goalTemplate",
  })
  async resolveFieldGoalTemplate(
    @graphql.Parent() parent: KeyResultTemplate
  ): Promise<GoalTemplate | null> {
    const result = await this.service.getGoalTemplate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => GoalKpiTemplate, {
    nullable: true,
    name: "goalKpiTemplate",
  })
  async resolveFieldGoalKpiTemplate(
    @graphql.Parent() parent: KeyResultTemplate
  ): Promise<GoalKpiTemplate | null> {
    const result = await this.service.getGoalKpiTemplate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: KeyResultTemplate
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: KeyResultTemplate
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
