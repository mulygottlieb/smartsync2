/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateKnowledgeBaseArgs } from "./CreateKnowledgeBaseArgs";
import { UpdateKnowledgeBaseArgs } from "./UpdateKnowledgeBaseArgs";
import { DeleteKnowledgeBaseArgs } from "./DeleteKnowledgeBaseArgs";
import { KnowledgeBaseCountArgs } from "./KnowledgeBaseCountArgs";
import { KnowledgeBaseFindManyArgs } from "./KnowledgeBaseFindManyArgs";
import { KnowledgeBaseFindUniqueArgs } from "./KnowledgeBaseFindUniqueArgs";
import { KnowledgeBase } from "./KnowledgeBase";
import { KnowledgeBaseArticleFindManyArgs } from "../../knowledgeBaseArticle/base/KnowledgeBaseArticleFindManyArgs";
import { KnowledgeBaseArticle } from "../../knowledgeBaseArticle/base/KnowledgeBaseArticle";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { KnowledgeBaseService } from "../knowledgeBase.service";
@graphql.Resolver(() => KnowledgeBase)
export class KnowledgeBaseResolverBase {
  constructor(protected readonly service: KnowledgeBaseService) {}

  async _knowledgeBasesMeta(
    @graphql.Args() args: KnowledgeBaseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [KnowledgeBase])
  async knowledgeBases(
    @graphql.Args() args: KnowledgeBaseFindManyArgs
  ): Promise<KnowledgeBase[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => KnowledgeBase, { nullable: true })
  async knowledgeBase(
    @graphql.Args() args: KnowledgeBaseFindUniqueArgs
  ): Promise<KnowledgeBase | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => KnowledgeBase)
  async createKnowledgeBase(
    @graphql.Args() args: CreateKnowledgeBaseArgs
  ): Promise<KnowledgeBase> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        knowledgeBase: args.data.knowledgeBase
          ? {
              connect: args.data.knowledgeBase,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => KnowledgeBase)
  async updateKnowledgeBase(
    @graphql.Args() args: UpdateKnowledgeBaseArgs
  ): Promise<KnowledgeBase | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          knowledgeBase: args.data.knowledgeBase
            ? {
                connect: args.data.knowledgeBase,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => KnowledgeBase)
  async deleteKnowledgeBase(
    @graphql.Args() args: DeleteKnowledgeBaseArgs
  ): Promise<KnowledgeBase | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [KnowledgeBase], { name: "otherKnowledgeBase" })
  async resolveFieldOtherKnowledgeBase(
    @graphql.Parent() parent: KnowledgeBase,
    @graphql.Args() args: KnowledgeBaseFindManyArgs
  ): Promise<KnowledgeBase[]> {
    const results = await this.service.findOtherKnowledgeBase(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [KnowledgeBaseArticle], {
    name: "knowledgeBaseArticle",
  })
  async resolveFieldKnowledgeBaseArticle(
    @graphql.Parent() parent: KnowledgeBase,
    @graphql.Args() args: KnowledgeBaseArticleFindManyArgs
  ): Promise<KnowledgeBaseArticle[]> {
    const results = await this.service.findKnowledgeBaseArticle(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: KnowledgeBase
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: KnowledgeBase
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => KnowledgeBase, {
    nullable: true,
    name: "knowledgeBase",
  })
  async resolveFieldKnowledgeBase(
    @graphql.Parent() parent: KnowledgeBase
  ): Promise<KnowledgeBase | null> {
    const result = await this.service.getKnowledgeBase(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
