/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { KnowledgeBaseArticleService } from "../knowledgeBaseArticle.service";
import { KnowledgeBaseArticleCreateInput } from "./KnowledgeBaseArticleCreateInput";
import { KnowledgeBaseArticleWhereInput } from "./KnowledgeBaseArticleWhereInput";
import { KnowledgeBaseArticleWhereUniqueInput } from "./KnowledgeBaseArticleWhereUniqueInput";
import { KnowledgeBaseArticleFindManyArgs } from "./KnowledgeBaseArticleFindManyArgs";
import { KnowledgeBaseArticleUpdateInput } from "./KnowledgeBaseArticleUpdateInput";
import { KnowledgeBaseArticle } from "./KnowledgeBaseArticle";
import { KnowledgeBaseAuthorFindManyArgs } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthorFindManyArgs";
import { KnowledgeBaseAuthor } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthor";
import { KnowledgeBaseAuthorWhereUniqueInput } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthorWhereUniqueInput";

export class KnowledgeBaseArticleControllerBase {
  constructor(protected readonly service: KnowledgeBaseArticleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: KnowledgeBaseArticle })
  async create(
    @common.Body() data: KnowledgeBaseArticleCreateInput
  ): Promise<KnowledgeBaseArticle> {
    return await this.service.create({
      data: {
        ...data,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        knowledgeBase: {
          connect: data.knowledgeBase,
        },
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        data: true,
        draft: true,
        privacy: true,
        index: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        knowledgeBase: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [KnowledgeBaseArticle] })
  @ApiNestedQuery(KnowledgeBaseArticleFindManyArgs)
  async findMany(
    @common.Req() request: Request
  ): Promise<KnowledgeBaseArticle[]> {
    const args = plainToClass(KnowledgeBaseArticleFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        data: true,
        draft: true,
        privacy: true,
        index: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        knowledgeBase: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: KnowledgeBaseArticle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: KnowledgeBaseArticleWhereUniqueInput
  ): Promise<KnowledgeBaseArticle | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        data: true,
        draft: true,
        privacy: true,
        index: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        knowledgeBase: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: KnowledgeBaseArticle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: KnowledgeBaseArticleWhereUniqueInput,
    @common.Body() data: KnowledgeBaseArticleUpdateInput
  ): Promise<KnowledgeBaseArticle | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          knowledgeBase: {
            connect: data.knowledgeBase,
          },
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          data: true,
          draft: true,
          privacy: true,
          index: true,

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          knowledgeBase: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: KnowledgeBaseArticle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: KnowledgeBaseArticleWhereUniqueInput
  ): Promise<KnowledgeBaseArticle | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          data: true,
          draft: true,
          privacy: true,
          index: true,

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          knowledgeBase: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/knowledgeBaseAuthor")
  @ApiNestedQuery(KnowledgeBaseAuthorFindManyArgs)
  async findManyKnowledgeBaseAuthor(
    @common.Req() request: Request,
    @common.Param() params: KnowledgeBaseArticleWhereUniqueInput
  ): Promise<KnowledgeBaseAuthor[]> {
    const query = plainToClass(KnowledgeBaseAuthorFindManyArgs, request.query);
    const results = await this.service.findKnowledgeBaseAuthor(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        tenant: {
          select: {
            id: true,
          },
        },

        knowledgeBaseArticle: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/knowledgeBaseAuthor")
  async connectKnowledgeBaseAuthor(
    @common.Param() params: KnowledgeBaseArticleWhereUniqueInput,
    @common.Body() body: KnowledgeBaseAuthorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      knowledgeBaseAuthor: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/knowledgeBaseAuthor")
  async updateKnowledgeBaseAuthor(
    @common.Param() params: KnowledgeBaseArticleWhereUniqueInput,
    @common.Body() body: KnowledgeBaseAuthorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      knowledgeBaseAuthor: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/knowledgeBaseAuthor")
  async disconnectKnowledgeBaseAuthor(
    @common.Param() params: KnowledgeBaseArticleWhereUniqueInput,
    @common.Body() body: KnowledgeBaseAuthorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      knowledgeBaseAuthor: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
