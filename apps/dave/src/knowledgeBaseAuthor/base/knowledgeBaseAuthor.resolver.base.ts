/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateKnowledgeBaseAuthorArgs } from "./CreateKnowledgeBaseAuthorArgs";
import { UpdateKnowledgeBaseAuthorArgs } from "./UpdateKnowledgeBaseAuthorArgs";
import { DeleteKnowledgeBaseAuthorArgs } from "./DeleteKnowledgeBaseAuthorArgs";
import { KnowledgeBaseAuthorCountArgs } from "./KnowledgeBaseAuthorCountArgs";
import { KnowledgeBaseAuthorFindManyArgs } from "./KnowledgeBaseAuthorFindManyArgs";
import { KnowledgeBaseAuthorFindUniqueArgs } from "./KnowledgeBaseAuthorFindUniqueArgs";
import { KnowledgeBaseAuthor } from "./KnowledgeBaseAuthor";
import { Tenant } from "../../tenant/base/Tenant";
import { KnowledgeBaseArticle } from "../../knowledgeBaseArticle/base/KnowledgeBaseArticle";
import { Organization } from "../../organization/base/Organization";
import { Employee } from "../../employee/base/Employee";
import { KnowledgeBaseAuthorService } from "../knowledgeBaseAuthor.service";
@graphql.Resolver(() => KnowledgeBaseAuthor)
export class KnowledgeBaseAuthorResolverBase {
  constructor(protected readonly service: KnowledgeBaseAuthorService) {}

  async _knowledgeBaseAuthorsMeta(
    @graphql.Args() args: KnowledgeBaseAuthorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [KnowledgeBaseAuthor])
  async knowledgeBaseAuthors(
    @graphql.Args() args: KnowledgeBaseAuthorFindManyArgs
  ): Promise<KnowledgeBaseAuthor[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => KnowledgeBaseAuthor, { nullable: true })
  async knowledgeBaseAuthor(
    @graphql.Args() args: KnowledgeBaseAuthorFindUniqueArgs
  ): Promise<KnowledgeBaseAuthor | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => KnowledgeBaseAuthor)
  async createKnowledgeBaseAuthor(
    @graphql.Args() args: CreateKnowledgeBaseAuthorArgs
  ): Promise<KnowledgeBaseAuthor> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        knowledgeBaseArticle: {
          connect: args.data.knowledgeBaseArticle,
        },

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        employee: {
          connect: args.data.employee,
        },
      },
    });
  }

  @graphql.Mutation(() => KnowledgeBaseAuthor)
  async updateKnowledgeBaseAuthor(
    @graphql.Args() args: UpdateKnowledgeBaseAuthorArgs
  ): Promise<KnowledgeBaseAuthor | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          knowledgeBaseArticle: {
            connect: args.data.knowledgeBaseArticle,
          },

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          employee: {
            connect: args.data.employee,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => KnowledgeBaseAuthor)
  async deleteKnowledgeBaseAuthor(
    @graphql.Args() args: DeleteKnowledgeBaseAuthorArgs
  ): Promise<KnowledgeBaseAuthor | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: KnowledgeBaseAuthor
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => KnowledgeBaseArticle, {
    nullable: true,
    name: "knowledgeBaseArticle",
  })
  async resolveFieldKnowledgeBaseArticle(
    @graphql.Parent() parent: KnowledgeBaseAuthor
  ): Promise<KnowledgeBaseArticle | null> {
    const result = await this.service.getKnowledgeBaseArticle(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: KnowledgeBaseAuthor
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: KnowledgeBaseAuthor
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
