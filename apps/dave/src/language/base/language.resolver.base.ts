/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateLanguageArgs } from "./CreateLanguageArgs";
import { UpdateLanguageArgs } from "./UpdateLanguageArgs";
import { DeleteLanguageArgs } from "./DeleteLanguageArgs";
import { LanguageCountArgs } from "./LanguageCountArgs";
import { LanguageFindManyArgs } from "./LanguageFindManyArgs";
import { LanguageFindUniqueArgs } from "./LanguageFindUniqueArgs";
import { Language } from "./Language";
import { OrganizationLanguageFindManyArgs } from "../../organizationLanguage/base/OrganizationLanguageFindManyArgs";
import { OrganizationLanguage } from "../../organizationLanguage/base/OrganizationLanguage";
import { LanguageService } from "../language.service";
@graphql.Resolver(() => Language)
export class LanguageResolverBase {
  constructor(protected readonly service: LanguageService) {}

  async _languagesMeta(
    @graphql.Args() args: LanguageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Language])
  async languages(
    @graphql.Args() args: LanguageFindManyArgs
  ): Promise<Language[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Language, { nullable: true })
  async language(
    @graphql.Args() args: LanguageFindUniqueArgs
  ): Promise<Language | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Language)
  async createLanguage(
    @graphql.Args() args: CreateLanguageArgs
  ): Promise<Language> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Language)
  async updateLanguage(
    @graphql.Args() args: UpdateLanguageArgs
  ): Promise<Language | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Language)
  async deleteLanguage(
    @graphql.Args() args: DeleteLanguageArgs
  ): Promise<Language | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [OrganizationLanguage], {
    name: "organizationLanguage",
  })
  async resolveFieldOrganizationLanguage(
    @graphql.Parent() parent: Language,
    @graphql.Args() args: OrganizationLanguageFindManyArgs
  ): Promise<OrganizationLanguage[]> {
    const results = await this.service.findOrganizationLanguage(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
