/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMerchantArgs } from "./CreateMerchantArgs";
import { UpdateMerchantArgs } from "./UpdateMerchantArgs";
import { DeleteMerchantArgs } from "./DeleteMerchantArgs";
import { MerchantCountArgs } from "./MerchantCountArgs";
import { MerchantFindManyArgs } from "./MerchantFindManyArgs";
import { MerchantFindUniqueArgs } from "./MerchantFindUniqueArgs";
import { Merchant } from "./Merchant";
import { TagMerchantFindManyArgs } from "../../tagMerchant/base/TagMerchantFindManyArgs";
import { TagMerchant } from "../../tagMerchant/base/TagMerchant";
import { WarehouseMerchantFindManyArgs } from "../../warehouseMerchant/base/WarehouseMerchantFindManyArgs";
import { WarehouseMerchant } from "../../warehouseMerchant/base/WarehouseMerchant";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { Contact } from "../../contact/base/Contact";
import { MerchantService } from "../merchant.service";
@graphql.Resolver(() => Merchant)
export class MerchantResolverBase {
  constructor(protected readonly service: MerchantService) {}

  async _merchantsMeta(
    @graphql.Args() args: MerchantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Merchant])
  async merchants(
    @graphql.Args() args: MerchantFindManyArgs
  ): Promise<Merchant[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Merchant, { nullable: true })
  async merchant(
    @graphql.Args() args: MerchantFindUniqueArgs
  ): Promise<Merchant | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Merchant)
  async createMerchant(
    @graphql.Args() args: CreateMerchantArgs
  ): Promise<Merchant> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        imageAsset: args.data.imageAsset
          ? {
              connect: args.data.imageAsset,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        contact: args.data.contact
          ? {
              connect: args.data.contact,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Merchant)
  async updateMerchant(
    @graphql.Args() args: UpdateMerchantArgs
  ): Promise<Merchant | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          imageAsset: args.data.imageAsset
            ? {
                connect: args.data.imageAsset,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          contact: args.data.contact
            ? {
                connect: args.data.contact,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Merchant)
  async deleteMerchant(
    @graphql.Args() args: DeleteMerchantArgs
  ): Promise<Merchant | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TagMerchant], { name: "tagMerchant" })
  async resolveFieldTagMerchant(
    @graphql.Parent() parent: Merchant,
    @graphql.Args() args: TagMerchantFindManyArgs
  ): Promise<TagMerchant[]> {
    const results = await this.service.findTagMerchant(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [WarehouseMerchant], {
    name: "warehouseMerchant",
  })
  async resolveFieldWarehouseMerchant(
    @graphql.Parent() parent: Merchant,
    @graphql.Args() args: WarehouseMerchantFindManyArgs
  ): Promise<WarehouseMerchant[]> {
    const results = await this.service.findWarehouseMerchant(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => ImageAsset, {
    nullable: true,
    name: "imageAsset",
  })
  async resolveFieldImageAsset(
    @graphql.Parent() parent: Merchant
  ): Promise<ImageAsset | null> {
    const result = await this.service.getImageAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: Merchant
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: Merchant
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Contact, {
    nullable: true,
    name: "contact",
  })
  async resolveFieldContact(
    @graphql.Parent() parent: Merchant
  ): Promise<Contact | null> {
    const result = await this.service.getContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
