/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMigrationArgs } from "./CreateMigrationArgs";
import { UpdateMigrationArgs } from "./UpdateMigrationArgs";
import { DeleteMigrationArgs } from "./DeleteMigrationArgs";
import { MigrationCountArgs } from "./MigrationCountArgs";
import { MigrationFindManyArgs } from "./MigrationFindManyArgs";
import { MigrationFindUniqueArgs } from "./MigrationFindUniqueArgs";
import { Migration } from "./Migration";
import { MigrationService } from "../migration.service";
@graphql.Resolver(() => Migration)
export class MigrationResolverBase {
  constructor(protected readonly service: MigrationService) {}

  async _migrationsMeta(
    @graphql.Args() args: MigrationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Migration])
  async migrations(
    @graphql.Args() args: MigrationFindManyArgs
  ): Promise<Migration[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Migration, { nullable: true })
  async migration(
    @graphql.Args() args: MigrationFindUniqueArgs
  ): Promise<Migration | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Migration)
  async createMigration(
    @graphql.Args() args: CreateMigrationArgs
  ): Promise<Migration> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Migration)
  async updateMigration(
    @graphql.Args() args: UpdateMigrationArgs
  ): Promise<Migration | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Migration)
  async deleteMigration(
    @graphql.Args() args: DeleteMigrationArgs
  ): Promise<Migration | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
