/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountingTemplateCreateNestedManyWithoutOrganizationsInput } from "./AccountingTemplateCreateNestedManyWithoutOrganizationsInput";
import {
  ValidateNested,
  IsOptional,
  IsInt,
  IsBoolean,
  IsString,
  IsEnum,
  IsDate,
} from "class-validator";
import { Type } from "class-transformer";
import { ActivityCreateNestedManyWithoutOrganizationsInput } from "./ActivityCreateNestedManyWithoutOrganizationsInput";
import { AppointmentEmployeeCreateNestedManyWithoutOrganizationsInput } from "./AppointmentEmployeeCreateNestedManyWithoutOrganizationsInput";
import { ApprovalPolicyCreateNestedManyWithoutOrganizationsInput } from "./ApprovalPolicyCreateNestedManyWithoutOrganizationsInput";
import { AvailabilitySlotCreateNestedManyWithoutOrganizationsInput } from "./AvailabilitySlotCreateNestedManyWithoutOrganizationsInput";
import { CandidateCreateNestedManyWithoutOrganizationsInput } from "./CandidateCreateNestedManyWithoutOrganizationsInput";
import { CandidateCriterionRatingCreateNestedManyWithoutOrganizationsInput } from "./CandidateCriterionRatingCreateNestedManyWithoutOrganizationsInput";
import { CandidateDocumentCreateNestedManyWithoutOrganizationsInput } from "./CandidateDocumentCreateNestedManyWithoutOrganizationsInput";
import { CandidateEducationCreateNestedManyWithoutOrganizationsInput } from "./CandidateEducationCreateNestedManyWithoutOrganizationsInput";
import { CandidateExperienceCreateNestedManyWithoutOrganizationsInput } from "./CandidateExperienceCreateNestedManyWithoutOrganizationsInput";
import { CandidateFeedbackCreateNestedManyWithoutOrganizationsInput } from "./CandidateFeedbackCreateNestedManyWithoutOrganizationsInput";
import { CandidateInterviewCreateNestedManyWithoutOrganizationsInput } from "./CandidateInterviewCreateNestedManyWithoutOrganizationsInput";
import { CandidateInterviewerCreateNestedManyWithoutOrganizationsInput } from "./CandidateInterviewerCreateNestedManyWithoutOrganizationsInput";
import { CandidatePersonalQualityCreateNestedManyWithoutOrganizationsInput } from "./CandidatePersonalQualityCreateNestedManyWithoutOrganizationsInput";
import { CandidateSkillCreateNestedManyWithoutOrganizationsInput } from "./CandidateSkillCreateNestedManyWithoutOrganizationsInput";
import { CandidateSourceCreateNestedManyWithoutOrganizationsInput } from "./CandidateSourceCreateNestedManyWithoutOrganizationsInput";
import { CandidateTechnologyCreateNestedManyWithoutOrganizationsInput } from "./CandidateTechnologyCreateNestedManyWithoutOrganizationsInput";
import { ChangelogCreateNestedManyWithoutOrganizationsInput } from "./ChangelogCreateNestedManyWithoutOrganizationsInput";
import { ContactCreateNestedManyWithoutOrganizationsInput } from "./ContactCreateNestedManyWithoutOrganizationsInput";
import { ContactWhereUniqueInput } from "../../contact/base/ContactWhereUniqueInput";
import { CustomSmtpCreateNestedManyWithoutOrganizationsInput } from "./CustomSmtpCreateNestedManyWithoutOrganizationsInput";
import { DealCreateNestedManyWithoutOrganizationsInput } from "./DealCreateNestedManyWithoutOrganizationsInput";
import { EnumOrganizationDefaultValueDateType } from "./EnumOrganizationDefaultValueDateType";
import { EmailSentCreateNestedManyWithoutOrganizationsInput } from "./EmailSentCreateNestedManyWithoutOrganizationsInput";
import { EmailTemplateCreateNestedManyWithoutOrganizationsInput } from "./EmailTemplateCreateNestedManyWithoutOrganizationsInput";
import { EmployeeCreateNestedManyWithoutOrganizationsInput } from "./EmployeeCreateNestedManyWithoutOrganizationsInput";
import { EmployeeAppointmentCreateNestedManyWithoutOrganizationsInput } from "./EmployeeAppointmentCreateNestedManyWithoutOrganizationsInput";
import { EmployeeAwardCreateNestedManyWithoutOrganizationsInput } from "./EmployeeAwardCreateNestedManyWithoutOrganizationsInput";
import { EmployeeLevelCreateNestedManyWithoutOrganizationsInput } from "./EmployeeLevelCreateNestedManyWithoutOrganizationsInput";
import { EmployeePhoneCreateNestedManyWithoutOrganizationsInput } from "./EmployeePhoneCreateNestedManyWithoutOrganizationsInput";
import { EmployeeProposalTemplateCreateNestedManyWithoutOrganizationsInput } from "./EmployeeProposalTemplateCreateNestedManyWithoutOrganizationsInput";
import { EmployeeRecurringExpenseCreateNestedManyWithoutOrganizationsInput } from "./EmployeeRecurringExpenseCreateNestedManyWithoutOrganizationsInput";
import { EmployeeSettingCreateNestedManyWithoutOrganizationsInput } from "./EmployeeSettingCreateNestedManyWithoutOrganizationsInput";
import { EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutOrganizationsInput } from "./EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutOrganizationsInput";
import { EquipmentCreateNestedManyWithoutOrganizationsInput } from "./EquipmentCreateNestedManyWithoutOrganizationsInput";
import { EquipmentSharingCreateNestedManyWithoutOrganizationsInput } from "./EquipmentSharingCreateNestedManyWithoutOrganizationsInput";
import { EquipmentSharingPolicyCreateNestedManyWithoutOrganizationsInput } from "./EquipmentSharingPolicyCreateNestedManyWithoutOrganizationsInput";
import { EstimateEmailCreateNestedManyWithoutOrganizationsInput } from "./EstimateEmailCreateNestedManyWithoutOrganizationsInput";
import { EventTypeCreateNestedManyWithoutOrganizationsInput } from "./EventTypeCreateNestedManyWithoutOrganizationsInput";
import { ExpenseCreateNestedManyWithoutOrganizationsInput } from "./ExpenseCreateNestedManyWithoutOrganizationsInput";
import { ExpenseCategoryCreateNestedManyWithoutOrganizationsInput } from "./ExpenseCategoryCreateNestedManyWithoutOrganizationsInput";
import { FeatureOrganizationCreateNestedManyWithoutOrganizationsInput } from "./FeatureOrganizationCreateNestedManyWithoutOrganizationsInput";
import { GoalCreateNestedManyWithoutOrganizationsInput } from "./GoalCreateNestedManyWithoutOrganizationsInput";
import { GoalGeneralSettingCreateNestedManyWithoutOrganizationsInput } from "./GoalGeneralSettingCreateNestedManyWithoutOrganizationsInput";
import { GoalKpiCreateNestedManyWithoutOrganizationsInput } from "./GoalKpiCreateNestedManyWithoutOrganizationsInput";
import { GoalKpiTemplateCreateNestedManyWithoutOrganizationsInput } from "./GoalKpiTemplateCreateNestedManyWithoutOrganizationsInput";
import { GoalTemplateCreateNestedManyWithoutOrganizationsInput } from "./GoalTemplateCreateNestedManyWithoutOrganizationsInput";
import { GoalTimeFrameCreateNestedManyWithoutOrganizationsInput } from "./GoalTimeFrameCreateNestedManyWithoutOrganizationsInput";
import { ImageAssetCreateNestedManyWithoutOrganizationsInput } from "./ImageAssetCreateNestedManyWithoutOrganizationsInput";
import { ImageAssetWhereUniqueInput } from "../../imageAsset/base/ImageAssetWhereUniqueInput";
import { IncomeCreateNestedManyWithoutOrganizationsInput } from "./IncomeCreateNestedManyWithoutOrganizationsInput";
import { IntegrationEntitySettingCreateNestedManyWithoutOrganizationsInput } from "./IntegrationEntitySettingCreateNestedManyWithoutOrganizationsInput";
import { IntegrationEntitySettingTiedCreateNestedManyWithoutOrganizationsInput } from "./IntegrationEntitySettingTiedCreateNestedManyWithoutOrganizationsInput";
import { IntegrationMapCreateNestedManyWithoutOrganizationsInput } from "./IntegrationMapCreateNestedManyWithoutOrganizationsInput";
import { IntegrationSettingCreateNestedManyWithoutOrganizationsInput } from "./IntegrationSettingCreateNestedManyWithoutOrganizationsInput";
import { IntegrationTenantCreateNestedManyWithoutOrganizationsInput } from "./IntegrationTenantCreateNestedManyWithoutOrganizationsInput";
import { InviteCreateNestedManyWithoutOrganizationsInput } from "./InviteCreateNestedManyWithoutOrganizationsInput";
import { InvoiceEstimateHistoryCreateNestedManyWithoutOrganizationsInput } from "./InvoiceEstimateHistoryCreateNestedManyWithoutOrganizationsInput";
import { InvoiceCreateNestedManyWithoutOrganizationsInput } from "./InvoiceCreateNestedManyWithoutOrganizationsInput";
import { InvoiceItemCreateNestedManyWithoutOrganizationsInput } from "./InvoiceItemCreateNestedManyWithoutOrganizationsInput";
import { IssueTypeCreateNestedManyWithoutOrganizationsInput } from "./IssueTypeCreateNestedManyWithoutOrganizationsInput";
import { JobPresetCreateNestedManyWithoutOrganizationsInput } from "./JobPresetCreateNestedManyWithoutOrganizationsInput";
import { JobPresetUpworkJobSearchCriterionCreateNestedManyWithoutOrganizationsInput } from "./JobPresetUpworkJobSearchCriterionCreateNestedManyWithoutOrganizationsInput";
import { JobSearchCategoryCreateNestedManyWithoutOrganizationsInput } from "./JobSearchCategoryCreateNestedManyWithoutOrganizationsInput";
import { JobSearchOccupationCreateNestedManyWithoutOrganizationsInput } from "./JobSearchOccupationCreateNestedManyWithoutOrganizationsInput";
import { KeyResultCreateNestedManyWithoutOrganizationsInput } from "./KeyResultCreateNestedManyWithoutOrganizationsInput";
import { KeyResultTemplateCreateNestedManyWithoutOrganizationsInput } from "./KeyResultTemplateCreateNestedManyWithoutOrganizationsInput";
import { KeyResultUpdateCreateNestedManyWithoutOrganizationsInput } from "./KeyResultUpdateCreateNestedManyWithoutOrganizationsInput";
import { KnowledgeBaseCreateNestedManyWithoutOrganizationsInput } from "./KnowledgeBaseCreateNestedManyWithoutOrganizationsInput";
import { KnowledgeBaseArticleCreateNestedManyWithoutOrganizationsInput } from "./KnowledgeBaseArticleCreateNestedManyWithoutOrganizationsInput";
import { KnowledgeBaseAuthorCreateNestedManyWithoutOrganizationsInput } from "./KnowledgeBaseAuthorCreateNestedManyWithoutOrganizationsInput";
import { MerchantCreateNestedManyWithoutOrganizationsInput } from "./MerchantCreateNestedManyWithoutOrganizationsInput";
import { OrganizationAwardCreateNestedManyWithoutOrganizationsInput } from "./OrganizationAwardCreateNestedManyWithoutOrganizationsInput";
import { OrganizationContactCreateNestedManyWithoutOrganizationsInput } from "./OrganizationContactCreateNestedManyWithoutOrganizationsInput";
import { OrganizationDepartmentCreateNestedManyWithoutOrganizationsInput } from "./OrganizationDepartmentCreateNestedManyWithoutOrganizationsInput";
import { OrganizationDocumentCreateNestedManyWithoutOrganizationsInput } from "./OrganizationDocumentCreateNestedManyWithoutOrganizationsInput";
import { OrganizationEmploymentTypeCreateNestedManyWithoutOrganizationsInput } from "./OrganizationEmploymentTypeCreateNestedManyWithoutOrganizationsInput";
import { OrganizationLanguageCreateNestedManyWithoutOrganizationsInput } from "./OrganizationLanguageCreateNestedManyWithoutOrganizationsInput";
import { OrganizationPositionCreateNestedManyWithoutOrganizationsInput } from "./OrganizationPositionCreateNestedManyWithoutOrganizationsInput";
import { OrganizationProjectCreateNestedManyWithoutOrganizationsInput } from "./OrganizationProjectCreateNestedManyWithoutOrganizationsInput";
import { OrganizationRecurringExpenseCreateNestedManyWithoutOrganizationsInput } from "./OrganizationRecurringExpenseCreateNestedManyWithoutOrganizationsInput";
import { OrganizationSprintCreateNestedManyWithoutOrganizationsInput } from "./OrganizationSprintCreateNestedManyWithoutOrganizationsInput";
import { OrganizationTaskSettingCreateNestedManyWithoutOrganizationsInput } from "./OrganizationTaskSettingCreateNestedManyWithoutOrganizationsInput";
import { OrganizationTeamCreateNestedManyWithoutOrganizationsInput } from "./OrganizationTeamCreateNestedManyWithoutOrganizationsInput";
import { OrganizationTeamEmployeeCreateNestedManyWithoutOrganizationsInput } from "./OrganizationTeamEmployeeCreateNestedManyWithoutOrganizationsInput";
import { OrganizationTeamJoinRequestCreateNestedManyWithoutOrganizationsInput } from "./OrganizationTeamJoinRequestCreateNestedManyWithoutOrganizationsInput";
import { OrganizationVendorCreateNestedManyWithoutOrganizationsInput } from "./OrganizationVendorCreateNestedManyWithoutOrganizationsInput";
import { PaymentCreateNestedManyWithoutOrganizationsInput } from "./PaymentCreateNestedManyWithoutOrganizationsInput";
import { PipelineCreateNestedManyWithoutOrganizationsInput } from "./PipelineCreateNestedManyWithoutOrganizationsInput";
import { PipelineStageCreateNestedManyWithoutOrganizationsInput } from "./PipelineStageCreateNestedManyWithoutOrganizationsInput";
import { ProductCreateNestedManyWithoutOrganizationsInput } from "./ProductCreateNestedManyWithoutOrganizationsInput";
import { ProductCategoryCreateNestedManyWithoutOrganizationsInput } from "./ProductCategoryCreateNestedManyWithoutOrganizationsInput";
import { ProductCategoryTranslationCreateNestedManyWithoutOrganizationsInput } from "./ProductCategoryTranslationCreateNestedManyWithoutOrganizationsInput";
import { ProductOptionCreateNestedManyWithoutOrganizationsInput } from "./ProductOptionCreateNestedManyWithoutOrganizationsInput";
import { ProductOptionGroupCreateNestedManyWithoutOrganizationsInput } from "./ProductOptionGroupCreateNestedManyWithoutOrganizationsInput";
import { ProductOptionGroupTranslationCreateNestedManyWithoutOrganizationsInput } from "./ProductOptionGroupTranslationCreateNestedManyWithoutOrganizationsInput";
import { ProductOptionTranslationCreateNestedManyWithoutOrganizationsInput } from "./ProductOptionTranslationCreateNestedManyWithoutOrganizationsInput";
import { ProductTranslationCreateNestedManyWithoutOrganizationsInput } from "./ProductTranslationCreateNestedManyWithoutOrganizationsInput";
import { ProductTypeCreateNestedManyWithoutOrganizationsInput } from "./ProductTypeCreateNestedManyWithoutOrganizationsInput";
import { ProductTypeTranslationCreateNestedManyWithoutOrganizationsInput } from "./ProductTypeTranslationCreateNestedManyWithoutOrganizationsInput";
import { ProductVariantCreateNestedManyWithoutOrganizationsInput } from "./ProductVariantCreateNestedManyWithoutOrganizationsInput";
import { ProductVariantPriceCreateNestedManyWithoutOrganizationsInput } from "./ProductVariantPriceCreateNestedManyWithoutOrganizationsInput";
import { ProductVariantSettingCreateNestedManyWithoutOrganizationsInput } from "./ProductVariantSettingCreateNestedManyWithoutOrganizationsInput";
import { ProposalCreateNestedManyWithoutOrganizationsInput } from "./ProposalCreateNestedManyWithoutOrganizationsInput";
import { ReportOrganizationCreateNestedManyWithoutOrganizationsInput } from "./ReportOrganizationCreateNestedManyWithoutOrganizationsInput";
import { RequestApprovalCreateNestedManyWithoutOrganizationsInput } from "./RequestApprovalCreateNestedManyWithoutOrganizationsInput";
import { RequestApprovalEmployeeCreateNestedManyWithoutOrganizationsInput } from "./RequestApprovalEmployeeCreateNestedManyWithoutOrganizationsInput";
import { RequestApprovalTeamCreateNestedManyWithoutOrganizationsInput } from "./RequestApprovalTeamCreateNestedManyWithoutOrganizationsInput";
import { ScreenshotCreateNestedManyWithoutOrganizationsInput } from "./ScreenshotCreateNestedManyWithoutOrganizationsInput";
import { SkillCreateNestedManyWithoutOrganizationsInput } from "./SkillCreateNestedManyWithoutOrganizationsInput";
import { SkillOrganizationCreateNestedManyWithoutOrganizationsInput } from "./SkillOrganizationCreateNestedManyWithoutOrganizationsInput";
import { TagCreateNestedManyWithoutOrganizationsInput } from "./TagCreateNestedManyWithoutOrganizationsInput";
import { TagOrganizationCreateNestedManyWithoutOrganizationsInput } from "./TagOrganizationCreateNestedManyWithoutOrganizationsInput";
import { TaskCreateNestedManyWithoutOrganizationsInput } from "./TaskCreateNestedManyWithoutOrganizationsInput";
import { TaskLinkedIssueCreateNestedManyWithoutOrganizationsInput } from "./TaskLinkedIssueCreateNestedManyWithoutOrganizationsInput";
import { TaskPriorityCreateNestedManyWithoutOrganizationsInput } from "./TaskPriorityCreateNestedManyWithoutOrganizationsInput";
import { TaskRelatedIssueTypeCreateNestedManyWithoutOrganizationsInput } from "./TaskRelatedIssueTypeCreateNestedManyWithoutOrganizationsInput";
import { TaskSizeCreateNestedManyWithoutOrganizationsInput } from "./TaskSizeCreateNestedManyWithoutOrganizationsInput";
import { TaskStatusCreateNestedManyWithoutOrganizationsInput } from "./TaskStatusCreateNestedManyWithoutOrganizationsInput";
import { TaskVersionCreateNestedManyWithoutOrganizationsInput } from "./TaskVersionCreateNestedManyWithoutOrganizationsInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { TimeLogCreateNestedManyWithoutOrganizationsInput } from "./TimeLogCreateNestedManyWithoutOrganizationsInput";
import { TimeOffPolicyCreateNestedManyWithoutOrganizationsInput } from "./TimeOffPolicyCreateNestedManyWithoutOrganizationsInput";
import { TimeOffRequestCreateNestedManyWithoutOrganizationsInput } from "./TimeOffRequestCreateNestedManyWithoutOrganizationsInput";
import { TimesheetCreateNestedManyWithoutOrganizationsInput } from "./TimesheetCreateNestedManyWithoutOrganizationsInput";
import { TimeSlotCreateNestedManyWithoutOrganizationsInput } from "./TimeSlotCreateNestedManyWithoutOrganizationsInput";
import { TimeSlotMinuteCreateNestedManyWithoutOrganizationsInput } from "./TimeSlotMinuteCreateNestedManyWithoutOrganizationsInput";
import { UserOrganizationCreateNestedManyWithoutOrganizationsInput } from "./UserOrganizationCreateNestedManyWithoutOrganizationsInput";
import { WarehouseCreateNestedManyWithoutOrganizationsInput } from "./WarehouseCreateNestedManyWithoutOrganizationsInput";
import { WarehouseProductCreateNestedManyWithoutOrganizationsInput } from "./WarehouseProductCreateNestedManyWithoutOrganizationsInput";
import { WarehouseProductVariantCreateNestedManyWithoutOrganizationsInput } from "./WarehouseProductVariantCreateNestedManyWithoutOrganizationsInput";

@InputType()
class OrganizationCreateInput {
  @ApiProperty({
    required: false,
    type: () => AccountingTemplateCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => AccountingTemplateCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => AccountingTemplateCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  accountingTemplate?: AccountingTemplateCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ActivityCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ActivityCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ActivityCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  activity?: ActivityCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  activityProofDuration!: number;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  allowDeleteTime!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  allowManualTime!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  allowModifyTime!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  allowScreenshotCapture!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  allowTrackInactivity!: boolean;

  @ApiProperty({
    required: false,
    type: () => AppointmentEmployeeCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => AppointmentEmployeeCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => AppointmentEmployeeCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  appointmentEmployee?: AppointmentEmployeeCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ApprovalPolicyCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ApprovalPolicyCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ApprovalPolicyCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  approvalPolicy?: ApprovalPolicyCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => AvailabilitySlotCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => AvailabilitySlotCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => AvailabilitySlotCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  availabilitySlot?: AvailabilitySlotCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  banner?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  bonusPercentage?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bonusType?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  brandColor?: string | null;

  @ApiProperty({
    required: false,
    type: () => CandidateCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidate?: CandidateCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      CandidateCriterionRatingCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateCriterionRatingCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => CandidateCriterionRatingCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  candidateCriterionRating?: CandidateCriterionRatingCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateDocumentCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateDocumentCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateDocumentCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateDocument?: CandidateDocumentCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateEducationCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateEducationCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateEducationCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateEducation?: CandidateEducationCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateExperienceCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateExperienceCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateExperienceCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateExperience?: CandidateExperienceCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateFeedbackCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateFeedbackCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateFeedbackCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateFeedback?: CandidateFeedbackCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateInterviewCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateInterviewCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateInterviewCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateInterview?: CandidateInterviewCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateInterviewerCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateInterviewerCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateInterviewerCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateInterviewer?: CandidateInterviewerCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      CandidatePersonalQualityCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidatePersonalQualityCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => CandidatePersonalQualityCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  candidatePersonalQuality?: CandidatePersonalQualityCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateSkillCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateSkillCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateSkillCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateSkill?: CandidateSkillCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateSourceCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateSourceCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateSourceCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateSource?: CandidateSourceCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateTechnologyCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateTechnologyCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateTechnologyCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateTechnology?: CandidateTechnologyCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ChangelogCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ChangelogCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ChangelogCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  changelog?: ChangelogCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  clientFocus?: string | null;

  @ApiProperty({
    required: false,
    type: () => ContactCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ContactCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ContactCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  contactContactOrganizationIdToorganization?: ContactCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ContactWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ContactWhereUniqueInput)
  @IsOptional()
  @Field(() => ContactWhereUniqueInput, {
    nullable: true,
  })
  contactOrganizationContactIdTocontact?: ContactWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  convertAcceptedEstimates?: boolean | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  currency!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  currencyPosition!: string;

  @ApiProperty({
    required: false,
    type: () => CustomSmtpCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CustomSmtpCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CustomSmtpCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  customSmtp?: CustomSmtpCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  dateFormat?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  daysUntilDue?: number | null;

  @ApiProperty({
    required: false,
    type: () => DealCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => DealCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => DealCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  deal?: DealCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  defaultAlignmentType?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  defaultEndTime?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  defaultInvoiceEstimateTerms?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  defaultStartTime?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumOrganizationDefaultValueDateType,
  })
  @IsEnum(EnumOrganizationDefaultValueDateType)
  @IsOptional()
  @Field(() => EnumOrganizationDefaultValueDateType, {
    nullable: true,
  })
  defaultValueDateType?: "TODAY" | "END_OF_MONTH" | "START_OF_MONTH" | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  discountAfterTax?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => EmailSentCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmailSentCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmailSentCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  emailSent?: EmailSentCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmailTemplateCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmailTemplateCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmailTemplateCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  emailTemplate?: EmailTemplateCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmployeeCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  employee?: EmployeeCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeAppointmentCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeAppointmentCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmployeeAppointmentCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  employeeAppointment?: EmployeeAppointmentCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeAwardCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeAwardCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmployeeAwardCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  employeeAward?: EmployeeAwardCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeLevelCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeLevelCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmployeeLevelCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  employeeLevel?: EmployeeLevelCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeePhoneCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeePhoneCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmployeePhoneCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  employeePhone?: EmployeePhoneCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      EmployeeProposalTemplateCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeProposalTemplateCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => EmployeeProposalTemplateCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  employeeProposalTemplate?: EmployeeProposalTemplateCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      EmployeeRecurringExpenseCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeRecurringExpenseCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => EmployeeRecurringExpenseCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  employeeRecurringExpense?: EmployeeRecurringExpenseCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeSettingCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeSettingCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmployeeSettingCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  employeeSetting?: EmployeeSettingCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(
    () =>
      EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutOrganizationsInput
  )
  @IsOptional()
  @Field(
    () =>
      EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  employeeUpworkJobSearchCriterion?: EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EquipmentCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EquipmentCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EquipmentCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  equipment?: EquipmentCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EquipmentSharingCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EquipmentSharingCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EquipmentSharingCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  equipmentSharing?: EquipmentSharingCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EquipmentSharingPolicyCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EquipmentSharingPolicyCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => EquipmentSharingPolicyCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  equipmentSharingPolicy?: EquipmentSharingPolicyCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EstimateEmailCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EstimateEmailCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EstimateEmailCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  estimateEmail?: EstimateEmailCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EventTypeCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EventTypeCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EventTypeCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  eventType?: EventTypeCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ExpenseCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ExpenseCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ExpenseCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  expense?: ExpenseCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ExpenseCategoryCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ExpenseCategoryCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ExpenseCategoryCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  expenseCategory?: ExpenseCategoryCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => FeatureOrganizationCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => FeatureOrganizationCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => FeatureOrganizationCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  featureOrganization?: FeatureOrganizationCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fiscalEndDate?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  fiscalInformation?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fiscalStartDate?: Date | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  futureDateAllowed?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => GoalCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => GoalCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => GoalCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  goal?: GoalCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => GoalGeneralSettingCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => GoalGeneralSettingCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => GoalGeneralSettingCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  goalGeneralSetting?: GoalGeneralSettingCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => GoalKpiCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => GoalKpiCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => GoalKpiCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  goalKpi?: GoalKpiCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => GoalKpiTemplateCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => GoalKpiTemplateCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => GoalKpiTemplateCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  goalKpiTemplate?: GoalKpiTemplateCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => GoalTemplateCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => GoalTemplateCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => GoalTemplateCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  goalTemplate?: GoalTemplateCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => GoalTimeFrameCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => GoalTimeFrameCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => GoalTimeFrameCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  goalTimeFrame?: GoalTimeFrameCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ImageAssetCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ImageAssetCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ImageAssetCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  imageAssetImageAssetOrganizationIdToorganization?: ImageAssetCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ImageAssetWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ImageAssetWhereUniqueInput)
  @IsOptional()
  @Field(() => ImageAssetWhereUniqueInput, {
    nullable: true,
  })
  imageAssetOrganizationImageIdToimageAsset?: ImageAssetWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  imageUrl?: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  inactivityTimeLimit!: number;

  @ApiProperty({
    required: false,
    type: () => IncomeCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => IncomeCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => IncomeCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  income?: IncomeCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      IntegrationEntitySettingCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => IntegrationEntitySettingCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => IntegrationEntitySettingCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  integrationEntitySetting?: IntegrationEntitySettingCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      IntegrationEntitySettingTiedCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(
    () => IntegrationEntitySettingTiedCreateNestedManyWithoutOrganizationsInput
  )
  @IsOptional()
  @Field(
    () => IntegrationEntitySettingTiedCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  integrationEntitySettingTied?: IntegrationEntitySettingTiedCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => IntegrationMapCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => IntegrationMapCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => IntegrationMapCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  integrationMap?: IntegrationMapCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => IntegrationSettingCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => IntegrationSettingCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => IntegrationSettingCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  integrationSetting?: IntegrationSettingCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => IntegrationTenantCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => IntegrationTenantCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => IntegrationTenantCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  integrationTenant?: IntegrationTenantCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => InviteCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => InviteCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => InviteCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  invite?: InviteCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  inviteExpiryPeriod?: number | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  invitesAllowed?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => InvoiceEstimateHistoryCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => InvoiceEstimateHistoryCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => InvoiceEstimateHistoryCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  invoiceEstimateHistory?: InvoiceEstimateHistoryCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => InvoiceCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => InvoiceCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => InvoiceCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  invoiceInvoiceFromOrganizationIdToorganization?: InvoiceCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => InvoiceCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => InvoiceCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => InvoiceCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  invoiceInvoiceOrganizationIdToorganization?: InvoiceCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => InvoiceItemCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => InvoiceItemCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => InvoiceItemCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  invoiceItem?: InvoiceItemCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isActive!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isDefault!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isRemoveIdleTime!: boolean;

  @ApiProperty({
    required: false,
    type: () => IssueTypeCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => IssueTypeCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => IssueTypeCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  issueType?: IssueTypeCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => JobPresetCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => JobPresetCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => JobPresetCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  jobPreset?: JobPresetCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      JobPresetUpworkJobSearchCriterionCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(
    () =>
      JobPresetUpworkJobSearchCriterionCreateNestedManyWithoutOrganizationsInput
  )
  @IsOptional()
  @Field(
    () =>
      JobPresetUpworkJobSearchCriterionCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  jobPresetUpworkJobSearchCriterion?: JobPresetUpworkJobSearchCriterionCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => JobSearchCategoryCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => JobSearchCategoryCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => JobSearchCategoryCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  jobSearchCategory?: JobSearchCategoryCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => JobSearchOccupationCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => JobSearchOccupationCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => JobSearchOccupationCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  jobSearchOccupation?: JobSearchOccupationCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => KeyResultCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => KeyResultCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => KeyResultCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  keyResult?: KeyResultCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => KeyResultTemplateCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => KeyResultTemplateCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => KeyResultTemplateCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  keyResultTemplate?: KeyResultTemplateCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => KeyResultUpdateCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => KeyResultUpdateCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => KeyResultUpdateCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  keyResultUpdate?: KeyResultUpdateCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => KnowledgeBaseCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => KnowledgeBaseCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => KnowledgeBaseCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  knowledgeBase?: KnowledgeBaseCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => KnowledgeBaseArticleCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => KnowledgeBaseArticleCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => KnowledgeBaseArticleCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  knowledgeBaseArticle?: KnowledgeBaseArticleCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => KnowledgeBaseAuthorCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => KnowledgeBaseAuthorCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => KnowledgeBaseAuthorCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  knowledgeBaseAuthor?: KnowledgeBaseAuthorCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => MerchantCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => MerchantCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => MerchantCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  merchant?: MerchantCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  minimumProjectSize?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  numberFormat?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  officialName?: string | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationAwardCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationAwardCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationAwardCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationAward?: OrganizationAwardCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationContactCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationContactCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationContactCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationContact?: OrganizationContactCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationDepartmentCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationDepartmentCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => OrganizationDepartmentCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  organizationDepartment?: OrganizationDepartmentCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationDocumentCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationDocumentCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationDocumentCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationDocument?: OrganizationDocumentCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      OrganizationEmploymentTypeCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(
    () => OrganizationEmploymentTypeCreateNestedManyWithoutOrganizationsInput
  )
  @IsOptional()
  @Field(
    () => OrganizationEmploymentTypeCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  organizationEmploymentType?: OrganizationEmploymentTypeCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationLanguageCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationLanguageCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationLanguageCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationLanguage?: OrganizationLanguageCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationPositionCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationPositionCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationPositionCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationPosition?: OrganizationPositionCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationProjectCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationProjectCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationProjectCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationProject?: OrganizationProjectCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      OrganizationRecurringExpenseCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(
    () => OrganizationRecurringExpenseCreateNestedManyWithoutOrganizationsInput
  )
  @IsOptional()
  @Field(
    () => OrganizationRecurringExpenseCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  organizationRecurringExpense?: OrganizationRecurringExpenseCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationSprintCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationSprintCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationSprintCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationSprint?: OrganizationSprintCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      OrganizationTaskSettingCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationTaskSettingCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => OrganizationTaskSettingCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  organizationTaskSetting?: OrganizationTaskSettingCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationTeamCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationTeam?: OrganizationTeamCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      OrganizationTeamEmployeeCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamEmployeeCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => OrganizationTeamEmployeeCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  organizationTeamEmployee?: OrganizationTeamEmployeeCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      OrganizationTeamJoinRequestCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(
    () => OrganizationTeamJoinRequestCreateNestedManyWithoutOrganizationsInput
  )
  @IsOptional()
  @Field(
    () => OrganizationTeamJoinRequestCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  organizationTeamJoinRequest?: OrganizationTeamJoinRequestCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationVendorCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationVendorCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationVendorCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationVendor?: OrganizationVendorCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  overview?: string | null;

  @ApiProperty({
    required: false,
    type: () => PaymentCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => PaymentCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => PaymentCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  payment?: PaymentCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => PipelineCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => PipelineCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => PipelineCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  pipeline?: PipelineCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => PipelineStageCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => PipelineStageCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => PipelineStageCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  pipelineStage?: PipelineStageCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  product?: ProductCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductCategoryCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductCategoryCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductCategoryCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productCategory?: ProductCategoryCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      ProductCategoryTranslationCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(
    () => ProductCategoryTranslationCreateNestedManyWithoutOrganizationsInput
  )
  @IsOptional()
  @Field(
    () => ProductCategoryTranslationCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  productCategoryTranslation?: ProductCategoryTranslationCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductOptionCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductOptionCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductOptionCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productOption?: ProductOptionCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductOptionGroupCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductOptionGroupCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductOptionGroupCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productOptionGroup?: ProductOptionGroupCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      ProductOptionGroupTranslationCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(
    () => ProductOptionGroupTranslationCreateNestedManyWithoutOrganizationsInput
  )
  @IsOptional()
  @Field(
    () =>
      ProductOptionGroupTranslationCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  productOptionGroupTranslation?: ProductOptionGroupTranslationCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      ProductOptionTranslationCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductOptionTranslationCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => ProductOptionTranslationCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  productOptionTranslation?: ProductOptionTranslationCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductTranslationCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductTranslationCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductTranslationCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productTranslation?: ProductTranslationCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductTypeCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductTypeCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductTypeCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productType?: ProductTypeCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductTypeTranslationCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductTypeTranslationCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => ProductTypeTranslationCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  productTypeTranslation?: ProductTypeTranslationCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductVariantCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductVariantCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductVariantCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productVariant?: ProductVariantCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductVariantPriceCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductVariantPriceCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductVariantPriceCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productVariantPrice?: ProductVariantPriceCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductVariantSettingCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductVariantSettingCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductVariantSettingCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productVariantSetting?: ProductVariantSettingCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  profileLink?: string | null;

  @ApiProperty({
    required: false,
    type: () => ProposalCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProposalCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProposalCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  proposal?: ProposalCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  regionCode?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  registrationDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => ReportOrganizationCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ReportOrganizationCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ReportOrganizationCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  reportOrganization?: ReportOrganizationCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => RequestApprovalCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => RequestApprovalCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => RequestApprovalCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  requestApproval?: RequestApprovalCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      RequestApprovalEmployeeCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => RequestApprovalEmployeeCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => RequestApprovalEmployeeCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  requestApprovalEmployee?: RequestApprovalEmployeeCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => RequestApprovalTeamCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => RequestApprovalTeamCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => RequestApprovalTeamCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  requestApprovalTeam?: RequestApprovalTeamCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  requireClient!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  requireDescription!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  requireProject!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  requireReason!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  requireTask!: boolean;

  @ApiProperty({
    required: false,
    type: () => ScreenshotCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ScreenshotCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ScreenshotCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  screenshot?: ScreenshotCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  separateInvoiceItemTaxAndDiscount?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  shortDescription?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showBonusesPaid?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showClients?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showClientsCount?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showEmployeesCount?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showIncome?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showMinimumProjectSize?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showProfits?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showProjectsCount?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showTotalHours?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => SkillCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => SkillCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => SkillCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  skill?: SkillCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => SkillOrganizationCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => SkillOrganizationCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => SkillOrganizationCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  skillOrganization?: SkillOrganizationCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  startWeekOn?: string | null;

  @ApiProperty({
    required: false,
    type: () => TagCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TagCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TagCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  tag?: TagCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TagOrganizationCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TagOrganizationCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TagOrganizationCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  tagOrganization?: TagOrganizationCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TaskCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TaskCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TaskCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  task?: TaskCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TaskLinkedIssueCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TaskLinkedIssueCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TaskLinkedIssueCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  taskLinkedIssues?: TaskLinkedIssueCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TaskPriorityCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TaskPriorityCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TaskPriorityCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  taskPriority?: TaskPriorityCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TaskRelatedIssueTypeCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TaskRelatedIssueTypeCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TaskRelatedIssueTypeCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  taskRelatedIssueType?: TaskRelatedIssueTypeCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TaskSizeCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TaskSizeCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TaskSizeCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  taskSize?: TaskSizeCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TaskStatusCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TaskStatusCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TaskStatusCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  taskStatus?: TaskStatusCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TaskVersionCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TaskVersionCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TaskVersionCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  taskVersion?: TaskVersionCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  taxId?: string | null;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  timeFormat!: number;

  @ApiProperty({
    required: false,
    type: () => TimeLogCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TimeLogCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TimeLogCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  timeLog?: TimeLogCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TimeOffPolicyCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TimeOffPolicyCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TimeOffPolicyCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  timeOffPolicy?: TimeOffPolicyCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TimeOffRequestCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TimeOffRequestCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TimeOffRequestCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  timeOffRequest?: TimeOffRequestCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TimesheetCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TimesheetCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TimesheetCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  timesheet?: TimesheetCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TimeSlotCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TimeSlotCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TimeSlotCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  timeSlot?: TimeSlotCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TimeSlotMinuteCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TimeSlotMinuteCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TimeSlotMinuteCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  timeSlotMinute?: TimeSlotMinuteCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  timeZone?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  totalEmployees?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  upworkOrganizationId?: string | null;

  @ApiProperty({
    required: false,
    type: () => UserOrganizationCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => UserOrganizationCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => UserOrganizationCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  userOrganization?: UserOrganizationCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  valueDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => WarehouseCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => WarehouseCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => WarehouseCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  warehouse?: WarehouseCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => WarehouseProductCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => WarehouseProductCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => WarehouseProductCreateNestedManyWithoutOrganizationsInput, {
    nullable: true,
  })
  warehouseProduct?: WarehouseProductCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      WarehouseProductVariantCreateNestedManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => WarehouseProductVariantCreateNestedManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => WarehouseProductVariantCreateNestedManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  warehouseProductVariant?: WarehouseProductVariantCreateNestedManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  website?: string | null;
}

export { OrganizationCreateInput as OrganizationCreateInput };
