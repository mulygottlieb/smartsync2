/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountingTemplateUpdateManyWithoutOrganizationsInput } from "./AccountingTemplateUpdateManyWithoutOrganizationsInput";
import {
  ValidateNested,
  IsOptional,
  IsInt,
  IsBoolean,
  IsString,
  IsEnum,
  IsDate,
} from "class-validator";
import { Type } from "class-transformer";
import { ActivityUpdateManyWithoutOrganizationsInput } from "./ActivityUpdateManyWithoutOrganizationsInput";
import { AppointmentEmployeeUpdateManyWithoutOrganizationsInput } from "./AppointmentEmployeeUpdateManyWithoutOrganizationsInput";
import { ApprovalPolicyUpdateManyWithoutOrganizationsInput } from "./ApprovalPolicyUpdateManyWithoutOrganizationsInput";
import { AvailabilitySlotUpdateManyWithoutOrganizationsInput } from "./AvailabilitySlotUpdateManyWithoutOrganizationsInput";
import { CandidateUpdateManyWithoutOrganizationsInput } from "./CandidateUpdateManyWithoutOrganizationsInput";
import { CandidateCriterionRatingUpdateManyWithoutOrganizationsInput } from "./CandidateCriterionRatingUpdateManyWithoutOrganizationsInput";
import { CandidateDocumentUpdateManyWithoutOrganizationsInput } from "./CandidateDocumentUpdateManyWithoutOrganizationsInput";
import { CandidateEducationUpdateManyWithoutOrganizationsInput } from "./CandidateEducationUpdateManyWithoutOrganizationsInput";
import { CandidateExperienceUpdateManyWithoutOrganizationsInput } from "./CandidateExperienceUpdateManyWithoutOrganizationsInput";
import { CandidateFeedbackUpdateManyWithoutOrganizationsInput } from "./CandidateFeedbackUpdateManyWithoutOrganizationsInput";
import { CandidateInterviewUpdateManyWithoutOrganizationsInput } from "./CandidateInterviewUpdateManyWithoutOrganizationsInput";
import { CandidateInterviewerUpdateManyWithoutOrganizationsInput } from "./CandidateInterviewerUpdateManyWithoutOrganizationsInput";
import { CandidatePersonalQualityUpdateManyWithoutOrganizationsInput } from "./CandidatePersonalQualityUpdateManyWithoutOrganizationsInput";
import { CandidateSkillUpdateManyWithoutOrganizationsInput } from "./CandidateSkillUpdateManyWithoutOrganizationsInput";
import { CandidateSourceUpdateManyWithoutOrganizationsInput } from "./CandidateSourceUpdateManyWithoutOrganizationsInput";
import { CandidateTechnologyUpdateManyWithoutOrganizationsInput } from "./CandidateTechnologyUpdateManyWithoutOrganizationsInput";
import { ChangelogUpdateManyWithoutOrganizationsInput } from "./ChangelogUpdateManyWithoutOrganizationsInput";
import { ContactUpdateManyWithoutOrganizationsInput } from "./ContactUpdateManyWithoutOrganizationsInput";
import { ContactWhereUniqueInput } from "../../contact/base/ContactWhereUniqueInput";
import { CustomSmtpUpdateManyWithoutOrganizationsInput } from "./CustomSmtpUpdateManyWithoutOrganizationsInput";
import { DealUpdateManyWithoutOrganizationsInput } from "./DealUpdateManyWithoutOrganizationsInput";
import { EnumOrganizationDefaultValueDateType } from "./EnumOrganizationDefaultValueDateType";
import { EmailSentUpdateManyWithoutOrganizationsInput } from "./EmailSentUpdateManyWithoutOrganizationsInput";
import { EmailTemplateUpdateManyWithoutOrganizationsInput } from "./EmailTemplateUpdateManyWithoutOrganizationsInput";
import { EmployeeUpdateManyWithoutOrganizationsInput } from "./EmployeeUpdateManyWithoutOrganizationsInput";
import { EmployeeAppointmentUpdateManyWithoutOrganizationsInput } from "./EmployeeAppointmentUpdateManyWithoutOrganizationsInput";
import { EmployeeAwardUpdateManyWithoutOrganizationsInput } from "./EmployeeAwardUpdateManyWithoutOrganizationsInput";
import { EmployeeLevelUpdateManyWithoutOrganizationsInput } from "./EmployeeLevelUpdateManyWithoutOrganizationsInput";
import { EmployeePhoneUpdateManyWithoutOrganizationsInput } from "./EmployeePhoneUpdateManyWithoutOrganizationsInput";
import { EmployeeProposalTemplateUpdateManyWithoutOrganizationsInput } from "./EmployeeProposalTemplateUpdateManyWithoutOrganizationsInput";
import { EmployeeRecurringExpenseUpdateManyWithoutOrganizationsInput } from "./EmployeeRecurringExpenseUpdateManyWithoutOrganizationsInput";
import { EmployeeSettingUpdateManyWithoutOrganizationsInput } from "./EmployeeSettingUpdateManyWithoutOrganizationsInput";
import { EmployeeUpworkJobSearchCriterionUpdateManyWithoutOrganizationsInput } from "./EmployeeUpworkJobSearchCriterionUpdateManyWithoutOrganizationsInput";
import { EquipmentUpdateManyWithoutOrganizationsInput } from "./EquipmentUpdateManyWithoutOrganizationsInput";
import { EquipmentSharingUpdateManyWithoutOrganizationsInput } from "./EquipmentSharingUpdateManyWithoutOrganizationsInput";
import { EquipmentSharingPolicyUpdateManyWithoutOrganizationsInput } from "./EquipmentSharingPolicyUpdateManyWithoutOrganizationsInput";
import { EstimateEmailUpdateManyWithoutOrganizationsInput } from "./EstimateEmailUpdateManyWithoutOrganizationsInput";
import { EventTypeUpdateManyWithoutOrganizationsInput } from "./EventTypeUpdateManyWithoutOrganizationsInput";
import { ExpenseUpdateManyWithoutOrganizationsInput } from "./ExpenseUpdateManyWithoutOrganizationsInput";
import { ExpenseCategoryUpdateManyWithoutOrganizationsInput } from "./ExpenseCategoryUpdateManyWithoutOrganizationsInput";
import { FeatureOrganizationUpdateManyWithoutOrganizationsInput } from "./FeatureOrganizationUpdateManyWithoutOrganizationsInput";
import { GoalUpdateManyWithoutOrganizationsInput } from "./GoalUpdateManyWithoutOrganizationsInput";
import { GoalGeneralSettingUpdateManyWithoutOrganizationsInput } from "./GoalGeneralSettingUpdateManyWithoutOrganizationsInput";
import { GoalKpiUpdateManyWithoutOrganizationsInput } from "./GoalKpiUpdateManyWithoutOrganizationsInput";
import { GoalKpiTemplateUpdateManyWithoutOrganizationsInput } from "./GoalKpiTemplateUpdateManyWithoutOrganizationsInput";
import { GoalTemplateUpdateManyWithoutOrganizationsInput } from "./GoalTemplateUpdateManyWithoutOrganizationsInput";
import { GoalTimeFrameUpdateManyWithoutOrganizationsInput } from "./GoalTimeFrameUpdateManyWithoutOrganizationsInput";
import { ImageAssetUpdateManyWithoutOrganizationsInput } from "./ImageAssetUpdateManyWithoutOrganizationsInput";
import { ImageAssetWhereUniqueInput } from "../../imageAsset/base/ImageAssetWhereUniqueInput";
import { IncomeUpdateManyWithoutOrganizationsInput } from "./IncomeUpdateManyWithoutOrganizationsInput";
import { IntegrationEntitySettingUpdateManyWithoutOrganizationsInput } from "./IntegrationEntitySettingUpdateManyWithoutOrganizationsInput";
import { IntegrationEntitySettingTiedUpdateManyWithoutOrganizationsInput } from "./IntegrationEntitySettingTiedUpdateManyWithoutOrganizationsInput";
import { IntegrationMapUpdateManyWithoutOrganizationsInput } from "./IntegrationMapUpdateManyWithoutOrganizationsInput";
import { IntegrationSettingUpdateManyWithoutOrganizationsInput } from "./IntegrationSettingUpdateManyWithoutOrganizationsInput";
import { IntegrationTenantUpdateManyWithoutOrganizationsInput } from "./IntegrationTenantUpdateManyWithoutOrganizationsInput";
import { InviteUpdateManyWithoutOrganizationsInput } from "./InviteUpdateManyWithoutOrganizationsInput";
import { InvoiceEstimateHistoryUpdateManyWithoutOrganizationsInput } from "./InvoiceEstimateHistoryUpdateManyWithoutOrganizationsInput";
import { InvoiceUpdateManyWithoutOrganizationsInput } from "./InvoiceUpdateManyWithoutOrganizationsInput";
import { InvoiceItemUpdateManyWithoutOrganizationsInput } from "./InvoiceItemUpdateManyWithoutOrganizationsInput";
import { IssueTypeUpdateManyWithoutOrganizationsInput } from "./IssueTypeUpdateManyWithoutOrganizationsInput";
import { JobPresetUpdateManyWithoutOrganizationsInput } from "./JobPresetUpdateManyWithoutOrganizationsInput";
import { JobPresetUpworkJobSearchCriterionUpdateManyWithoutOrganizationsInput } from "./JobPresetUpworkJobSearchCriterionUpdateManyWithoutOrganizationsInput";
import { JobSearchCategoryUpdateManyWithoutOrganizationsInput } from "./JobSearchCategoryUpdateManyWithoutOrganizationsInput";
import { JobSearchOccupationUpdateManyWithoutOrganizationsInput } from "./JobSearchOccupationUpdateManyWithoutOrganizationsInput";
import { KeyResultUpdateManyWithoutOrganizationsInput } from "./KeyResultUpdateManyWithoutOrganizationsInput";
import { KeyResultTemplateUpdateManyWithoutOrganizationsInput } from "./KeyResultTemplateUpdateManyWithoutOrganizationsInput";
import { KeyResultUpdateUpdateManyWithoutOrganizationsInput } from "./KeyResultUpdateUpdateManyWithoutOrganizationsInput";
import { KnowledgeBaseUpdateManyWithoutOrganizationsInput } from "./KnowledgeBaseUpdateManyWithoutOrganizationsInput";
import { KnowledgeBaseArticleUpdateManyWithoutOrganizationsInput } from "./KnowledgeBaseArticleUpdateManyWithoutOrganizationsInput";
import { KnowledgeBaseAuthorUpdateManyWithoutOrganizationsInput } from "./KnowledgeBaseAuthorUpdateManyWithoutOrganizationsInput";
import { MerchantUpdateManyWithoutOrganizationsInput } from "./MerchantUpdateManyWithoutOrganizationsInput";
import { OrganizationAwardUpdateManyWithoutOrganizationsInput } from "./OrganizationAwardUpdateManyWithoutOrganizationsInput";
import { OrganizationContactUpdateManyWithoutOrganizationsInput } from "./OrganizationContactUpdateManyWithoutOrganizationsInput";
import { OrganizationDepartmentUpdateManyWithoutOrganizationsInput } from "./OrganizationDepartmentUpdateManyWithoutOrganizationsInput";
import { OrganizationDocumentUpdateManyWithoutOrganizationsInput } from "./OrganizationDocumentUpdateManyWithoutOrganizationsInput";
import { OrganizationEmploymentTypeUpdateManyWithoutOrganizationsInput } from "./OrganizationEmploymentTypeUpdateManyWithoutOrganizationsInput";
import { OrganizationLanguageUpdateManyWithoutOrganizationsInput } from "./OrganizationLanguageUpdateManyWithoutOrganizationsInput";
import { OrganizationPositionUpdateManyWithoutOrganizationsInput } from "./OrganizationPositionUpdateManyWithoutOrganizationsInput";
import { OrganizationProjectUpdateManyWithoutOrganizationsInput } from "./OrganizationProjectUpdateManyWithoutOrganizationsInput";
import { OrganizationRecurringExpenseUpdateManyWithoutOrganizationsInput } from "./OrganizationRecurringExpenseUpdateManyWithoutOrganizationsInput";
import { OrganizationSprintUpdateManyWithoutOrganizationsInput } from "./OrganizationSprintUpdateManyWithoutOrganizationsInput";
import { OrganizationTaskSettingUpdateManyWithoutOrganizationsInput } from "./OrganizationTaskSettingUpdateManyWithoutOrganizationsInput";
import { OrganizationTeamUpdateManyWithoutOrganizationsInput } from "./OrganizationTeamUpdateManyWithoutOrganizationsInput";
import { OrganizationTeamEmployeeUpdateManyWithoutOrganizationsInput } from "./OrganizationTeamEmployeeUpdateManyWithoutOrganizationsInput";
import { OrganizationTeamJoinRequestUpdateManyWithoutOrganizationsInput } from "./OrganizationTeamJoinRequestUpdateManyWithoutOrganizationsInput";
import { OrganizationVendorUpdateManyWithoutOrganizationsInput } from "./OrganizationVendorUpdateManyWithoutOrganizationsInput";
import { PaymentUpdateManyWithoutOrganizationsInput } from "./PaymentUpdateManyWithoutOrganizationsInput";
import { PipelineUpdateManyWithoutOrganizationsInput } from "./PipelineUpdateManyWithoutOrganizationsInput";
import { PipelineStageUpdateManyWithoutOrganizationsInput } from "./PipelineStageUpdateManyWithoutOrganizationsInput";
import { ProductUpdateManyWithoutOrganizationsInput } from "./ProductUpdateManyWithoutOrganizationsInput";
import { ProductCategoryUpdateManyWithoutOrganizationsInput } from "./ProductCategoryUpdateManyWithoutOrganizationsInput";
import { ProductCategoryTranslationUpdateManyWithoutOrganizationsInput } from "./ProductCategoryTranslationUpdateManyWithoutOrganizationsInput";
import { ProductOptionUpdateManyWithoutOrganizationsInput } from "./ProductOptionUpdateManyWithoutOrganizationsInput";
import { ProductOptionGroupUpdateManyWithoutOrganizationsInput } from "./ProductOptionGroupUpdateManyWithoutOrganizationsInput";
import { ProductOptionGroupTranslationUpdateManyWithoutOrganizationsInput } from "./ProductOptionGroupTranslationUpdateManyWithoutOrganizationsInput";
import { ProductOptionTranslationUpdateManyWithoutOrganizationsInput } from "./ProductOptionTranslationUpdateManyWithoutOrganizationsInput";
import { ProductTranslationUpdateManyWithoutOrganizationsInput } from "./ProductTranslationUpdateManyWithoutOrganizationsInput";
import { ProductTypeUpdateManyWithoutOrganizationsInput } from "./ProductTypeUpdateManyWithoutOrganizationsInput";
import { ProductTypeTranslationUpdateManyWithoutOrganizationsInput } from "./ProductTypeTranslationUpdateManyWithoutOrganizationsInput";
import { ProductVariantUpdateManyWithoutOrganizationsInput } from "./ProductVariantUpdateManyWithoutOrganizationsInput";
import { ProductVariantPriceUpdateManyWithoutOrganizationsInput } from "./ProductVariantPriceUpdateManyWithoutOrganizationsInput";
import { ProductVariantSettingUpdateManyWithoutOrganizationsInput } from "./ProductVariantSettingUpdateManyWithoutOrganizationsInput";
import { ProposalUpdateManyWithoutOrganizationsInput } from "./ProposalUpdateManyWithoutOrganizationsInput";
import { ReportOrganizationUpdateManyWithoutOrganizationsInput } from "./ReportOrganizationUpdateManyWithoutOrganizationsInput";
import { RequestApprovalUpdateManyWithoutOrganizationsInput } from "./RequestApprovalUpdateManyWithoutOrganizationsInput";
import { RequestApprovalEmployeeUpdateManyWithoutOrganizationsInput } from "./RequestApprovalEmployeeUpdateManyWithoutOrganizationsInput";
import { RequestApprovalTeamUpdateManyWithoutOrganizationsInput } from "./RequestApprovalTeamUpdateManyWithoutOrganizationsInput";
import { ScreenshotUpdateManyWithoutOrganizationsInput } from "./ScreenshotUpdateManyWithoutOrganizationsInput";
import { SkillUpdateManyWithoutOrganizationsInput } from "./SkillUpdateManyWithoutOrganizationsInput";
import { SkillOrganizationUpdateManyWithoutOrganizationsInput } from "./SkillOrganizationUpdateManyWithoutOrganizationsInput";
import { TagUpdateManyWithoutOrganizationsInput } from "./TagUpdateManyWithoutOrganizationsInput";
import { TagOrganizationUpdateManyWithoutOrganizationsInput } from "./TagOrganizationUpdateManyWithoutOrganizationsInput";
import { TaskUpdateManyWithoutOrganizationsInput } from "./TaskUpdateManyWithoutOrganizationsInput";
import { TaskLinkedIssueUpdateManyWithoutOrganizationsInput } from "./TaskLinkedIssueUpdateManyWithoutOrganizationsInput";
import { TaskPriorityUpdateManyWithoutOrganizationsInput } from "./TaskPriorityUpdateManyWithoutOrganizationsInput";
import { TaskRelatedIssueTypeUpdateManyWithoutOrganizationsInput } from "./TaskRelatedIssueTypeUpdateManyWithoutOrganizationsInput";
import { TaskSizeUpdateManyWithoutOrganizationsInput } from "./TaskSizeUpdateManyWithoutOrganizationsInput";
import { TaskStatusUpdateManyWithoutOrganizationsInput } from "./TaskStatusUpdateManyWithoutOrganizationsInput";
import { TaskVersionUpdateManyWithoutOrganizationsInput } from "./TaskVersionUpdateManyWithoutOrganizationsInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { TimeLogUpdateManyWithoutOrganizationsInput } from "./TimeLogUpdateManyWithoutOrganizationsInput";
import { TimeOffPolicyUpdateManyWithoutOrganizationsInput } from "./TimeOffPolicyUpdateManyWithoutOrganizationsInput";
import { TimeOffRequestUpdateManyWithoutOrganizationsInput } from "./TimeOffRequestUpdateManyWithoutOrganizationsInput";
import { TimesheetUpdateManyWithoutOrganizationsInput } from "./TimesheetUpdateManyWithoutOrganizationsInput";
import { TimeSlotUpdateManyWithoutOrganizationsInput } from "./TimeSlotUpdateManyWithoutOrganizationsInput";
import { TimeSlotMinuteUpdateManyWithoutOrganizationsInput } from "./TimeSlotMinuteUpdateManyWithoutOrganizationsInput";
import { UserOrganizationUpdateManyWithoutOrganizationsInput } from "./UserOrganizationUpdateManyWithoutOrganizationsInput";
import { WarehouseUpdateManyWithoutOrganizationsInput } from "./WarehouseUpdateManyWithoutOrganizationsInput";
import { WarehouseProductUpdateManyWithoutOrganizationsInput } from "./WarehouseProductUpdateManyWithoutOrganizationsInput";
import { WarehouseProductVariantUpdateManyWithoutOrganizationsInput } from "./WarehouseProductVariantUpdateManyWithoutOrganizationsInput";

@InputType()
class OrganizationUpdateInput {
  @ApiProperty({
    required: false,
    type: () => AccountingTemplateUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => AccountingTemplateUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => AccountingTemplateUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  accountingTemplate?: AccountingTemplateUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ActivityUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ActivityUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ActivityUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  activity?: ActivityUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  activityProofDuration?: number;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  allowDeleteTime?: boolean;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  allowManualTime?: boolean;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  allowModifyTime?: boolean;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  allowScreenshotCapture?: boolean;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  allowTrackInactivity?: boolean;

  @ApiProperty({
    required: false,
    type: () => AppointmentEmployeeUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => AppointmentEmployeeUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => AppointmentEmployeeUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  appointmentEmployee?: AppointmentEmployeeUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ApprovalPolicyUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ApprovalPolicyUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ApprovalPolicyUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  approvalPolicy?: ApprovalPolicyUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => AvailabilitySlotUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => AvailabilitySlotUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => AvailabilitySlotUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  availabilitySlot?: AvailabilitySlotUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  banner?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  bonusPercentage?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bonusType?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  brandColor?: string | null;

  @ApiProperty({
    required: false,
    type: () => CandidateUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidate?: CandidateUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateCriterionRatingUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateCriterionRatingUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateCriterionRatingUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateCriterionRating?: CandidateCriterionRatingUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateDocumentUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateDocumentUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateDocumentUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateDocument?: CandidateDocumentUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateEducationUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateEducationUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateEducationUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateEducation?: CandidateEducationUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateExperienceUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateExperienceUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateExperienceUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateExperience?: CandidateExperienceUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateFeedbackUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateFeedbackUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateFeedbackUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateFeedback?: CandidateFeedbackUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateInterviewUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateInterviewUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateInterviewUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateInterview?: CandidateInterviewUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateInterviewerUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateInterviewerUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateInterviewerUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateInterviewer?: CandidateInterviewerUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidatePersonalQualityUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidatePersonalQualityUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidatePersonalQualityUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidatePersonalQuality?: CandidatePersonalQualityUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateSkillUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateSkillUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateSkillUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateSkill?: CandidateSkillUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateSourceUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateSourceUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateSourceUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateSource?: CandidateSourceUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateTechnologyUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CandidateTechnologyUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CandidateTechnologyUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  candidateTechnology?: CandidateTechnologyUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ChangelogUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ChangelogUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ChangelogUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  changelog?: ChangelogUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  clientFocus?: string | null;

  @ApiProperty({
    required: false,
    type: () => ContactUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ContactUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ContactUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  contactContactOrganizationIdToorganization?: ContactUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ContactWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ContactWhereUniqueInput)
  @IsOptional()
  @Field(() => ContactWhereUniqueInput, {
    nullable: true,
  })
  contactOrganizationContactIdTocontact?: ContactWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  convertAcceptedEstimates?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  currency?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  currencyPosition?: string;

  @ApiProperty({
    required: false,
    type: () => CustomSmtpUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => CustomSmtpUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => CustomSmtpUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  customSmtp?: CustomSmtpUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  dateFormat?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  daysUntilDue?: number | null;

  @ApiProperty({
    required: false,
    type: () => DealUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => DealUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => DealUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  deal?: DealUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  defaultAlignmentType?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  defaultEndTime?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  defaultInvoiceEstimateTerms?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  defaultStartTime?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumOrganizationDefaultValueDateType,
  })
  @IsEnum(EnumOrganizationDefaultValueDateType)
  @IsOptional()
  @Field(() => EnumOrganizationDefaultValueDateType, {
    nullable: true,
  })
  defaultValueDateType?: "TODAY" | "END_OF_MONTH" | "START_OF_MONTH" | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  discountAfterTax?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => EmailSentUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmailSentUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmailSentUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  emailSent?: EmailSentUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmailTemplateUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmailTemplateUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmailTemplateUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  emailTemplate?: EmailTemplateUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmployeeUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  employee?: EmployeeUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeAppointmentUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeAppointmentUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmployeeAppointmentUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  employeeAppointment?: EmployeeAppointmentUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeAwardUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeAwardUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmployeeAwardUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  employeeAward?: EmployeeAwardUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeLevelUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeLevelUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmployeeLevelUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  employeeLevel?: EmployeeLevelUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeePhoneUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeePhoneUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmployeePhoneUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  employeePhone?: EmployeePhoneUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeProposalTemplateUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeProposalTemplateUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmployeeProposalTemplateUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  employeeProposalTemplate?: EmployeeProposalTemplateUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeRecurringExpenseUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeRecurringExpenseUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmployeeRecurringExpenseUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  employeeRecurringExpense?: EmployeeRecurringExpenseUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeSettingUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeSettingUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EmployeeSettingUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  employeeSetting?: EmployeeSettingUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      EmployeeUpworkJobSearchCriterionUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(
    () => EmployeeUpworkJobSearchCriterionUpdateManyWithoutOrganizationsInput
  )
  @IsOptional()
  @Field(
    () => EmployeeUpworkJobSearchCriterionUpdateManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  employeeUpworkJobSearchCriterion?: EmployeeUpworkJobSearchCriterionUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EquipmentUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EquipmentUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EquipmentUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  equipment?: EquipmentUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EquipmentSharingUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EquipmentSharingUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EquipmentSharingUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  equipmentSharing?: EquipmentSharingUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EquipmentSharingPolicyUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EquipmentSharingPolicyUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EquipmentSharingPolicyUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  equipmentSharingPolicy?: EquipmentSharingPolicyUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EstimateEmailUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EstimateEmailUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EstimateEmailUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  estimateEmail?: EstimateEmailUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => EventTypeUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => EventTypeUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => EventTypeUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  eventType?: EventTypeUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ExpenseUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ExpenseUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ExpenseUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  expense?: ExpenseUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ExpenseCategoryUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ExpenseCategoryUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ExpenseCategoryUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  expenseCategory?: ExpenseCategoryUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => FeatureOrganizationUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => FeatureOrganizationUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => FeatureOrganizationUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  featureOrganization?: FeatureOrganizationUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fiscalEndDate?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  fiscalInformation?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fiscalStartDate?: Date | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  futureDateAllowed?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => GoalUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => GoalUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => GoalUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  goal?: GoalUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => GoalGeneralSettingUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => GoalGeneralSettingUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => GoalGeneralSettingUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  goalGeneralSetting?: GoalGeneralSettingUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => GoalKpiUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => GoalKpiUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => GoalKpiUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  goalKpi?: GoalKpiUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => GoalKpiTemplateUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => GoalKpiTemplateUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => GoalKpiTemplateUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  goalKpiTemplate?: GoalKpiTemplateUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => GoalTemplateUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => GoalTemplateUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => GoalTemplateUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  goalTemplate?: GoalTemplateUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => GoalTimeFrameUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => GoalTimeFrameUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => GoalTimeFrameUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  goalTimeFrame?: GoalTimeFrameUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ImageAssetUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ImageAssetUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ImageAssetUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  imageAssetImageAssetOrganizationIdToorganization?: ImageAssetUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ImageAssetWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ImageAssetWhereUniqueInput)
  @IsOptional()
  @Field(() => ImageAssetWhereUniqueInput, {
    nullable: true,
  })
  imageAssetOrganizationImageIdToimageAsset?: ImageAssetWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  imageUrl?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  inactivityTimeLimit?: number;

  @ApiProperty({
    required: false,
    type: () => IncomeUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => IncomeUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => IncomeUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  income?: IncomeUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => IntegrationEntitySettingUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => IntegrationEntitySettingUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => IntegrationEntitySettingUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  integrationEntitySetting?: IntegrationEntitySettingUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => IntegrationEntitySettingTiedUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => IntegrationEntitySettingTiedUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => IntegrationEntitySettingTiedUpdateManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  integrationEntitySettingTied?: IntegrationEntitySettingTiedUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => IntegrationMapUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => IntegrationMapUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => IntegrationMapUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  integrationMap?: IntegrationMapUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => IntegrationSettingUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => IntegrationSettingUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => IntegrationSettingUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  integrationSetting?: IntegrationSettingUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => IntegrationTenantUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => IntegrationTenantUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => IntegrationTenantUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  integrationTenant?: IntegrationTenantUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => InviteUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => InviteUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => InviteUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  invite?: InviteUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  inviteExpiryPeriod?: number | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  invitesAllowed?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => InvoiceEstimateHistoryUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => InvoiceEstimateHistoryUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => InvoiceEstimateHistoryUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  invoiceEstimateHistory?: InvoiceEstimateHistoryUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => InvoiceUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => InvoiceUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => InvoiceUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  invoiceInvoiceFromOrganizationIdToorganization?: InvoiceUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => InvoiceUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => InvoiceUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => InvoiceUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  invoiceInvoiceOrganizationIdToorganization?: InvoiceUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => InvoiceItemUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => InvoiceItemUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => InvoiceItemUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  invoiceItem?: InvoiceItemUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive?: boolean;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isDefault?: boolean;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isRemoveIdleTime?: boolean;

  @ApiProperty({
    required: false,
    type: () => IssueTypeUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => IssueTypeUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => IssueTypeUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  issueType?: IssueTypeUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => JobPresetUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => JobPresetUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => JobPresetUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  jobPreset?: JobPresetUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      JobPresetUpworkJobSearchCriterionUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(
    () => JobPresetUpworkJobSearchCriterionUpdateManyWithoutOrganizationsInput
  )
  @IsOptional()
  @Field(
    () => JobPresetUpworkJobSearchCriterionUpdateManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  jobPresetUpworkJobSearchCriterion?: JobPresetUpworkJobSearchCriterionUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => JobSearchCategoryUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => JobSearchCategoryUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => JobSearchCategoryUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  jobSearchCategory?: JobSearchCategoryUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => JobSearchOccupationUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => JobSearchOccupationUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => JobSearchOccupationUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  jobSearchOccupation?: JobSearchOccupationUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => KeyResultUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => KeyResultUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => KeyResultUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  keyResult?: KeyResultUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => KeyResultTemplateUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => KeyResultTemplateUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => KeyResultTemplateUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  keyResultTemplate?: KeyResultTemplateUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => KeyResultUpdateUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => KeyResultUpdateUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => KeyResultUpdateUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  keyResultUpdate?: KeyResultUpdateUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => KnowledgeBaseUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => KnowledgeBaseUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => KnowledgeBaseUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  knowledgeBase?: KnowledgeBaseUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => KnowledgeBaseArticleUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => KnowledgeBaseArticleUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => KnowledgeBaseArticleUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  knowledgeBaseArticle?: KnowledgeBaseArticleUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => KnowledgeBaseAuthorUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => KnowledgeBaseAuthorUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => KnowledgeBaseAuthorUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  knowledgeBaseAuthor?: KnowledgeBaseAuthorUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => MerchantUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => MerchantUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => MerchantUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  merchant?: MerchantUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  minimumProjectSize?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  numberFormat?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  officialName?: string | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationAwardUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationAwardUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationAwardUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationAward?: OrganizationAwardUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationContactUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationContactUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationContactUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationContact?: OrganizationContactUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationDepartmentUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationDepartmentUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationDepartmentUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationDepartment?: OrganizationDepartmentUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationDocumentUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationDocumentUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationDocumentUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationDocument?: OrganizationDocumentUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationEmploymentTypeUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationEmploymentTypeUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationEmploymentTypeUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationEmploymentType?: OrganizationEmploymentTypeUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationLanguageUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationLanguageUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationLanguageUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationLanguage?: OrganizationLanguageUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationPositionUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationPositionUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationPositionUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationPosition?: OrganizationPositionUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationProjectUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationProjectUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationProjectUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationProject?: OrganizationProjectUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationRecurringExpenseUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationRecurringExpenseUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => OrganizationRecurringExpenseUpdateManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  organizationRecurringExpense?: OrganizationRecurringExpenseUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationSprintUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationSprintUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationSprintUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationSprint?: OrganizationSprintUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationTaskSettingUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationTaskSettingUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationTaskSettingUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationTaskSetting?: OrganizationTaskSettingUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationTeamUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationTeam?: OrganizationTeamUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamEmployeeUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamEmployeeUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationTeamEmployeeUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationTeamEmployee?: OrganizationTeamEmployeeUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamJoinRequestUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamJoinRequestUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationTeamJoinRequestUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationTeamJoinRequest?: OrganizationTeamJoinRequestUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationVendorUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationVendorUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => OrganizationVendorUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  organizationVendor?: OrganizationVendorUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  overview?: string | null;

  @ApiProperty({
    required: false,
    type: () => PaymentUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => PaymentUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => PaymentUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  payment?: PaymentUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => PipelineUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => PipelineUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => PipelineUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  pipeline?: PipelineUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => PipelineStageUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => PipelineStageUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => PipelineStageUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  pipelineStage?: PipelineStageUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  product?: ProductUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductCategoryUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductCategoryUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductCategoryUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productCategory?: ProductCategoryUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductCategoryTranslationUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductCategoryTranslationUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductCategoryTranslationUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productCategoryTranslation?: ProductCategoryTranslationUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductOptionUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductOptionUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductOptionUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productOption?: ProductOptionUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductOptionGroupUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductOptionGroupUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductOptionGroupUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productOptionGroup?: ProductOptionGroupUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () =>
      ProductOptionGroupTranslationUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductOptionGroupTranslationUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(
    () => ProductOptionGroupTranslationUpdateManyWithoutOrganizationsInput,
    {
      nullable: true,
    }
  )
  productOptionGroupTranslation?: ProductOptionGroupTranslationUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductOptionTranslationUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductOptionTranslationUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductOptionTranslationUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productOptionTranslation?: ProductOptionTranslationUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductTranslationUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductTranslationUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductTranslationUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productTranslation?: ProductTranslationUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductTypeUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductTypeUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductTypeUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productType?: ProductTypeUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductTypeTranslationUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductTypeTranslationUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductTypeTranslationUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productTypeTranslation?: ProductTypeTranslationUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductVariantUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductVariantUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductVariantUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productVariant?: ProductVariantUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductVariantPriceUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductVariantPriceUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductVariantPriceUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productVariantPrice?: ProductVariantPriceUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => ProductVariantSettingUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProductVariantSettingUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProductVariantSettingUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  productVariantSetting?: ProductVariantSettingUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  profileLink?: string | null;

  @ApiProperty({
    required: false,
    type: () => ProposalUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ProposalUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ProposalUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  proposal?: ProposalUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  regionCode?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  registrationDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => ReportOrganizationUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ReportOrganizationUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ReportOrganizationUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  reportOrganization?: ReportOrganizationUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => RequestApprovalUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => RequestApprovalUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => RequestApprovalUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  requestApproval?: RequestApprovalUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => RequestApprovalEmployeeUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => RequestApprovalEmployeeUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => RequestApprovalEmployeeUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  requestApprovalEmployee?: RequestApprovalEmployeeUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => RequestApprovalTeamUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => RequestApprovalTeamUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => RequestApprovalTeamUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  requestApprovalTeam?: RequestApprovalTeamUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  requireClient?: boolean;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  requireDescription?: boolean;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  requireProject?: boolean;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  requireReason?: boolean;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  requireTask?: boolean;

  @ApiProperty({
    required: false,
    type: () => ScreenshotUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => ScreenshotUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => ScreenshotUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  screenshot?: ScreenshotUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  separateInvoiceItemTaxAndDiscount?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  shortDescription?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showBonusesPaid?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showClients?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showClientsCount?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showEmployeesCount?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showIncome?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showMinimumProjectSize?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showProfits?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showProjectsCount?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  showTotalHours?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => SkillUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => SkillUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => SkillUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  skill?: SkillUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => SkillOrganizationUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => SkillOrganizationUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => SkillOrganizationUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  skillOrganization?: SkillOrganizationUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  startWeekOn?: string | null;

  @ApiProperty({
    required: false,
    type: () => TagUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TagUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TagUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  tag?: TagUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TagOrganizationUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TagOrganizationUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TagOrganizationUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  tagOrganization?: TagOrganizationUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TaskUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TaskUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TaskUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  task?: TaskUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TaskLinkedIssueUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TaskLinkedIssueUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TaskLinkedIssueUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  taskLinkedIssues?: TaskLinkedIssueUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TaskPriorityUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TaskPriorityUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TaskPriorityUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  taskPriority?: TaskPriorityUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TaskRelatedIssueTypeUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TaskRelatedIssueTypeUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TaskRelatedIssueTypeUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  taskRelatedIssueType?: TaskRelatedIssueTypeUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TaskSizeUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TaskSizeUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TaskSizeUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  taskSize?: TaskSizeUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TaskStatusUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TaskStatusUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TaskStatusUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  taskStatus?: TaskStatusUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TaskVersionUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TaskVersionUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TaskVersionUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  taskVersion?: TaskVersionUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  taxId?: string | null;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  timeFormat?: number;

  @ApiProperty({
    required: false,
    type: () => TimeLogUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TimeLogUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TimeLogUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  timeLog?: TimeLogUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TimeOffPolicyUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TimeOffPolicyUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TimeOffPolicyUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  timeOffPolicy?: TimeOffPolicyUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TimeOffRequestUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TimeOffRequestUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TimeOffRequestUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  timeOffRequest?: TimeOffRequestUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TimesheetUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TimesheetUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TimesheetUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  timesheet?: TimesheetUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TimeSlotUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TimeSlotUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TimeSlotUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  timeSlot?: TimeSlotUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => TimeSlotMinuteUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => TimeSlotMinuteUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => TimeSlotMinuteUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  timeSlotMinute?: TimeSlotMinuteUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  timeZone?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  totalEmployees?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  upworkOrganizationId?: string | null;

  @ApiProperty({
    required: false,
    type: () => UserOrganizationUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => UserOrganizationUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => UserOrganizationUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  userOrganization?: UserOrganizationUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  valueDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => WarehouseUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => WarehouseUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => WarehouseUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  warehouse?: WarehouseUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => WarehouseProductUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => WarehouseProductUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => WarehouseProductUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  warehouseProduct?: WarehouseProductUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: () => WarehouseProductVariantUpdateManyWithoutOrganizationsInput,
  })
  @ValidateNested()
  @Type(() => WarehouseProductVariantUpdateManyWithoutOrganizationsInput)
  @IsOptional()
  @Field(() => WarehouseProductVariantUpdateManyWithoutOrganizationsInput, {
    nullable: true,
  })
  warehouseProductVariant?: WarehouseProductVariantUpdateManyWithoutOrganizationsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  website?: string | null;
}

export { OrganizationUpdateInput as OrganizationUpdateInput };
