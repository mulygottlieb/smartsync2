/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Organization,
  AccountingTemplate,
  Activity,
  AppointmentEmployee,
  ApprovalPolicy,
  AvailabilitySlot,
  Candidate,
  CandidateCriterionRating,
  CandidateDocument,
  CandidateEducation,
  CandidateExperience,
  CandidateFeedback,
  CandidateInterview,
  CandidateInterviewer,
  CandidatePersonalQuality,
  CandidateSkill,
  CandidateSource,
  CandidateTechnology,
  Changelog,
  Contact,
  CustomSmtp,
  Deal,
  EmailSent,
  EmailTemplate,
  Employee,
  EmployeeAppointment,
  EmployeeAward,
  EmployeeLevel,
  EmployeePhone,
  EmployeeProposalTemplate,
  EmployeeRecurringExpense,
  EmployeeSetting,
  EmployeeUpworkJobSearchCriterion,
  Equipment,
  EquipmentSharing,
  EquipmentSharingPolicy,
  EstimateEmail,
  EventType,
  Expense,
  ExpenseCategory,
  FeatureOrganization,
  Goal,
  GoalGeneralSetting,
  GoalKpi,
  GoalKpiTemplate,
  GoalTemplate,
  GoalTimeFrame,
  ImageAsset,
  Income,
  IntegrationEntitySetting,
  IntegrationEntitySettingTied,
  IntegrationMap,
  IntegrationSetting,
  IntegrationTenant,
  Invite,
  InvoiceEstimateHistory,
  Invoice,
  InvoiceItem,
  IssueType,
  JobPreset,
  JobPresetUpworkJobSearchCriterion,
  JobSearchCategory,
  JobSearchOccupation,
  KeyResult,
  KeyResultTemplate,
  KeyResultUpdate,
  KnowledgeBase,
  KnowledgeBaseArticle,
  KnowledgeBaseAuthor,
  Merchant,
  OrganizationAward,
  OrganizationContact,
  OrganizationDepartment,
  OrganizationDocument,
  OrganizationEmploymentType,
  OrganizationLanguage,
  OrganizationPosition,
  OrganizationProject,
  OrganizationRecurringExpense,
  OrganizationSprint,
  OrganizationTaskSetting,
  OrganizationTeam,
  OrganizationTeamEmployee,
  OrganizationTeamJoinRequest,
  OrganizationVendor,
  Payment,
  Pipeline,
  PipelineStage,
  Product,
  ProductCategory,
  ProductCategoryTranslation,
  ProductOption,
  ProductOptionGroup,
  ProductOptionGroupTranslation,
  ProductOptionTranslation,
  ProductTranslation,
  ProductType,
  ProductTypeTranslation,
  ProductVariant,
  ProductVariantPrice,
  ProductVariantSetting,
  Proposal,
  ReportOrganization,
  RequestApproval,
  RequestApprovalEmployee,
  RequestApprovalTeam,
  Screenshot,
  Skill,
  SkillOrganization,
  Tag,
  TagOrganization,
  Task,
  TaskLinkedIssue,
  TaskPriority,
  TaskRelatedIssueType,
  TaskSize,
  TaskStatus,
  TaskVersion,
  TimeLog,
  TimeOffPolicy,
  TimeOffRequest,
  Timesheet,
  TimeSlot,
  TimeSlotMinute,
  UserOrganization,
  Warehouse,
  WarehouseProduct,
  WarehouseProductVariant,
  Tenant,
} from "@prisma/client";

export class OrganizationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.OrganizationCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationCountArgs>
  ): Promise<number> {
    return this.prisma.organization.count(args);
  }

  async findMany<T extends Prisma.OrganizationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationFindManyArgs>
  ): Promise<Organization[]> {
    return this.prisma.organization.findMany(args);
  }
  async findOne<T extends Prisma.OrganizationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationFindUniqueArgs>
  ): Promise<Organization | null> {
    return this.prisma.organization.findUnique(args);
  }
  async create<T extends Prisma.OrganizationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationCreateArgs>
  ): Promise<Organization> {
    return this.prisma.organization.create<T>(args);
  }
  async update<T extends Prisma.OrganizationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationUpdateArgs>
  ): Promise<Organization> {
    return this.prisma.organization.update<T>(args);
  }
  async delete<T extends Prisma.OrganizationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationDeleteArgs>
  ): Promise<Organization> {
    return this.prisma.organization.delete(args);
  }

  async findAccountingTemplate(
    parentId: string,
    args: Prisma.AccountingTemplateFindManyArgs
  ): Promise<AccountingTemplate[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accountingTemplate(args);
  }

  async findActivity(
    parentId: string,
    args: Prisma.ActivityFindManyArgs
  ): Promise<Activity[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .activity(args);
  }

  async findAppointmentEmployee(
    parentId: string,
    args: Prisma.AppointmentEmployeeFindManyArgs
  ): Promise<AppointmentEmployee[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointmentEmployee(args);
  }

  async findApprovalPolicy(
    parentId: string,
    args: Prisma.ApprovalPolicyFindManyArgs
  ): Promise<ApprovalPolicy[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .approvalPolicy(args);
  }

  async findAvailabilitySlot(
    parentId: string,
    args: Prisma.AvailabilitySlotFindManyArgs
  ): Promise<AvailabilitySlot[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .availabilitySlot(args);
  }

  async findCandidate(
    parentId: string,
    args: Prisma.CandidateFindManyArgs
  ): Promise<Candidate[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidate(args);
  }

  async findCandidateCriterionRating(
    parentId: string,
    args: Prisma.CandidateCriterionRatingFindManyArgs
  ): Promise<CandidateCriterionRating[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateCriterionRating(args);
  }

  async findCandidateDocument(
    parentId: string,
    args: Prisma.CandidateDocumentFindManyArgs
  ): Promise<CandidateDocument[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateDocument(args);
  }

  async findCandidateEducation(
    parentId: string,
    args: Prisma.CandidateEducationFindManyArgs
  ): Promise<CandidateEducation[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateEducation(args);
  }

  async findCandidateExperience(
    parentId: string,
    args: Prisma.CandidateExperienceFindManyArgs
  ): Promise<CandidateExperience[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateExperience(args);
  }

  async findCandidateFeedback(
    parentId: string,
    args: Prisma.CandidateFeedbackFindManyArgs
  ): Promise<CandidateFeedback[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateFeedback(args);
  }

  async findCandidateInterview(
    parentId: string,
    args: Prisma.CandidateInterviewFindManyArgs
  ): Promise<CandidateInterview[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateInterview(args);
  }

  async findCandidateInterviewer(
    parentId: string,
    args: Prisma.CandidateInterviewerFindManyArgs
  ): Promise<CandidateInterviewer[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateInterviewer(args);
  }

  async findCandidatePersonalQuality(
    parentId: string,
    args: Prisma.CandidatePersonalQualityFindManyArgs
  ): Promise<CandidatePersonalQuality[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidatePersonalQuality(args);
  }

  async findCandidateSkill(
    parentId: string,
    args: Prisma.CandidateSkillFindManyArgs
  ): Promise<CandidateSkill[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateSkill(args);
  }

  async findCandidateSource(
    parentId: string,
    args: Prisma.CandidateSourceFindManyArgs
  ): Promise<CandidateSource[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateSource(args);
  }

  async findCandidateTechnology(
    parentId: string,
    args: Prisma.CandidateTechnologyFindManyArgs
  ): Promise<CandidateTechnology[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateTechnology(args);
  }

  async findChangelog(
    parentId: string,
    args: Prisma.ChangelogFindManyArgs
  ): Promise<Changelog[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .changelog(args);
  }

  async findContactContactOrganizationIdToorganization(
    parentId: string,
    args: Prisma.ContactFindManyArgs
  ): Promise<Contact[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .contactContactOrganizationIdToorganization(args);
  }

  async findCustomSmtp(
    parentId: string,
    args: Prisma.CustomSmtpFindManyArgs
  ): Promise<CustomSmtp[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customSmtp(args);
  }

  async findDeal(
    parentId: string,
    args: Prisma.DealFindManyArgs
  ): Promise<Deal[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .deal(args);
  }

  async findEmailSent(
    parentId: string,
    args: Prisma.EmailSentFindManyArgs
  ): Promise<EmailSent[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .emailSent(args);
  }

  async findEmailTemplate(
    parentId: string,
    args: Prisma.EmailTemplateFindManyArgs
  ): Promise<EmailTemplate[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .emailTemplate(args);
  }

  async findEmployee(
    parentId: string,
    args: Prisma.EmployeeFindManyArgs
  ): Promise<Employee[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employee(args);
  }

  async findEmployeeAppointment(
    parentId: string,
    args: Prisma.EmployeeAppointmentFindManyArgs
  ): Promise<EmployeeAppointment[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeAppointment(args);
  }

  async findEmployeeAward(
    parentId: string,
    args: Prisma.EmployeeAwardFindManyArgs
  ): Promise<EmployeeAward[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeAward(args);
  }

  async findEmployeeLevel(
    parentId: string,
    args: Prisma.EmployeeLevelFindManyArgs
  ): Promise<EmployeeLevel[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeLevel(args);
  }

  async findEmployeePhone(
    parentId: string,
    args: Prisma.EmployeePhoneFindManyArgs
  ): Promise<EmployeePhone[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeePhone(args);
  }

  async findEmployeeProposalTemplate(
    parentId: string,
    args: Prisma.EmployeeProposalTemplateFindManyArgs
  ): Promise<EmployeeProposalTemplate[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeProposalTemplate(args);
  }

  async findEmployeeRecurringExpense(
    parentId: string,
    args: Prisma.EmployeeRecurringExpenseFindManyArgs
  ): Promise<EmployeeRecurringExpense[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeRecurringExpense(args);
  }

  async findEmployeeSetting(
    parentId: string,
    args: Prisma.EmployeeSettingFindManyArgs
  ): Promise<EmployeeSetting[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeSetting(args);
  }

  async findEmployeeUpworkJobSearchCriterion(
    parentId: string,
    args: Prisma.EmployeeUpworkJobSearchCriterionFindManyArgs
  ): Promise<EmployeeUpworkJobSearchCriterion[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeUpworkJobSearchCriterion(args);
  }

  async findEquipment(
    parentId: string,
    args: Prisma.EquipmentFindManyArgs
  ): Promise<Equipment[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .equipment(args);
  }

  async findEquipmentSharing(
    parentId: string,
    args: Prisma.EquipmentSharingFindManyArgs
  ): Promise<EquipmentSharing[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .equipmentSharing(args);
  }

  async findEquipmentSharingPolicy(
    parentId: string,
    args: Prisma.EquipmentSharingPolicyFindManyArgs
  ): Promise<EquipmentSharingPolicy[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .equipmentSharingPolicy(args);
  }

  async findEstimateEmail(
    parentId: string,
    args: Prisma.EstimateEmailFindManyArgs
  ): Promise<EstimateEmail[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .estimateEmail(args);
  }

  async findEventType(
    parentId: string,
    args: Prisma.EventTypeFindManyArgs
  ): Promise<EventType[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .eventType(args);
  }

  async findExpense(
    parentId: string,
    args: Prisma.ExpenseFindManyArgs
  ): Promise<Expense[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .expense(args);
  }

  async findExpenseCategory(
    parentId: string,
    args: Prisma.ExpenseCategoryFindManyArgs
  ): Promise<ExpenseCategory[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .expenseCategory(args);
  }

  async findFeatureOrganization(
    parentId: string,
    args: Prisma.FeatureOrganizationFindManyArgs
  ): Promise<FeatureOrganization[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .featureOrganization(args);
  }

  async findGoal(
    parentId: string,
    args: Prisma.GoalFindManyArgs
  ): Promise<Goal[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .goal(args);
  }

  async findGoalGeneralSetting(
    parentId: string,
    args: Prisma.GoalGeneralSettingFindManyArgs
  ): Promise<GoalGeneralSetting[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .goalGeneralSetting(args);
  }

  async findGoalKpi(
    parentId: string,
    args: Prisma.GoalKpiFindManyArgs
  ): Promise<GoalKpi[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .goalKpi(args);
  }

  async findGoalKpiTemplate(
    parentId: string,
    args: Prisma.GoalKpiTemplateFindManyArgs
  ): Promise<GoalKpiTemplate[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .goalKpiTemplate(args);
  }

  async findGoalTemplate(
    parentId: string,
    args: Prisma.GoalTemplateFindManyArgs
  ): Promise<GoalTemplate[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .goalTemplate(args);
  }

  async findGoalTimeFrame(
    parentId: string,
    args: Prisma.GoalTimeFrameFindManyArgs
  ): Promise<GoalTimeFrame[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .goalTimeFrame(args);
  }

  async findImageAssetImageAssetOrganizationIdToorganization(
    parentId: string,
    args: Prisma.ImageAssetFindManyArgs
  ): Promise<ImageAsset[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .imageAssetImageAssetOrganizationIdToorganization(args);
  }

  async findIncome(
    parentId: string,
    args: Prisma.IncomeFindManyArgs
  ): Promise<Income[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .income(args);
  }

  async findIntegrationEntitySetting(
    parentId: string,
    args: Prisma.IntegrationEntitySettingFindManyArgs
  ): Promise<IntegrationEntitySetting[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .integrationEntitySetting(args);
  }

  async findIntegrationEntitySettingTied(
    parentId: string,
    args: Prisma.IntegrationEntitySettingTiedFindManyArgs
  ): Promise<IntegrationEntitySettingTied[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .integrationEntitySettingTied(args);
  }

  async findIntegrationMap(
    parentId: string,
    args: Prisma.IntegrationMapFindManyArgs
  ): Promise<IntegrationMap[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .integrationMap(args);
  }

  async findIntegrationSetting(
    parentId: string,
    args: Prisma.IntegrationSettingFindManyArgs
  ): Promise<IntegrationSetting[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .integrationSetting(args);
  }

  async findIntegrationTenant(
    parentId: string,
    args: Prisma.IntegrationTenantFindManyArgs
  ): Promise<IntegrationTenant[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .integrationTenant(args);
  }

  async findInvite(
    parentId: string,
    args: Prisma.InviteFindManyArgs
  ): Promise<Invite[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .invite(args);
  }

  async findInvoiceEstimateHistory(
    parentId: string,
    args: Prisma.InvoiceEstimateHistoryFindManyArgs
  ): Promise<InvoiceEstimateHistory[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .invoiceEstimateHistory(args);
  }

  async findInvoiceInvoiceFromOrganizationIdToorganization(
    parentId: string,
    args: Prisma.InvoiceFindManyArgs
  ): Promise<Invoice[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .invoiceInvoiceFromOrganizationIdToorganization(args);
  }

  async findInvoiceInvoiceOrganizationIdToorganization(
    parentId: string,
    args: Prisma.InvoiceFindManyArgs
  ): Promise<Invoice[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .invoiceInvoiceOrganizationIdToorganization(args);
  }

  async findInvoiceItem(
    parentId: string,
    args: Prisma.InvoiceItemFindManyArgs
  ): Promise<InvoiceItem[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .invoiceItem(args);
  }

  async findIssueType(
    parentId: string,
    args: Prisma.IssueTypeFindManyArgs
  ): Promise<IssueType[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .issueType(args);
  }

  async findJobPreset(
    parentId: string,
    args: Prisma.JobPresetFindManyArgs
  ): Promise<JobPreset[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .jobPreset(args);
  }

  async findJobPresetUpworkJobSearchCriterion(
    parentId: string,
    args: Prisma.JobPresetUpworkJobSearchCriterionFindManyArgs
  ): Promise<JobPresetUpworkJobSearchCriterion[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .jobPresetUpworkJobSearchCriterion(args);
  }

  async findJobSearchCategory(
    parentId: string,
    args: Prisma.JobSearchCategoryFindManyArgs
  ): Promise<JobSearchCategory[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .jobSearchCategory(args);
  }

  async findJobSearchOccupation(
    parentId: string,
    args: Prisma.JobSearchOccupationFindManyArgs
  ): Promise<JobSearchOccupation[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .jobSearchOccupation(args);
  }

  async findKeyResult(
    parentId: string,
    args: Prisma.KeyResultFindManyArgs
  ): Promise<KeyResult[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .keyResult(args);
  }

  async findKeyResultTemplate(
    parentId: string,
    args: Prisma.KeyResultTemplateFindManyArgs
  ): Promise<KeyResultTemplate[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .keyResultTemplate(args);
  }

  async findKeyResultUpdate(
    parentId: string,
    args: Prisma.KeyResultUpdateFindManyArgs
  ): Promise<KeyResultUpdate[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .keyResultUpdate(args);
  }

  async findKnowledgeBase(
    parentId: string,
    args: Prisma.KnowledgeBaseFindManyArgs
  ): Promise<KnowledgeBase[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .knowledgeBase(args);
  }

  async findKnowledgeBaseArticle(
    parentId: string,
    args: Prisma.KnowledgeBaseArticleFindManyArgs
  ): Promise<KnowledgeBaseArticle[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .knowledgeBaseArticle(args);
  }

  async findKnowledgeBaseAuthor(
    parentId: string,
    args: Prisma.KnowledgeBaseAuthorFindManyArgs
  ): Promise<KnowledgeBaseAuthor[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .knowledgeBaseAuthor(args);
  }

  async findMerchant(
    parentId: string,
    args: Prisma.MerchantFindManyArgs
  ): Promise<Merchant[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .merchant(args);
  }

  async findOrganizationAward(
    parentId: string,
    args: Prisma.OrganizationAwardFindManyArgs
  ): Promise<OrganizationAward[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationAward(args);
  }

  async findOrganizationContact(
    parentId: string,
    args: Prisma.OrganizationContactFindManyArgs
  ): Promise<OrganizationContact[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationContact(args);
  }

  async findOrganizationDepartment(
    parentId: string,
    args: Prisma.OrganizationDepartmentFindManyArgs
  ): Promise<OrganizationDepartment[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationDepartment(args);
  }

  async findOrganizationDocument(
    parentId: string,
    args: Prisma.OrganizationDocumentFindManyArgs
  ): Promise<OrganizationDocument[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationDocument(args);
  }

  async findOrganizationEmploymentType(
    parentId: string,
    args: Prisma.OrganizationEmploymentTypeFindManyArgs
  ): Promise<OrganizationEmploymentType[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationEmploymentType(args);
  }

  async findOrganizationLanguage(
    parentId: string,
    args: Prisma.OrganizationLanguageFindManyArgs
  ): Promise<OrganizationLanguage[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationLanguage(args);
  }

  async findOrganizationPosition(
    parentId: string,
    args: Prisma.OrganizationPositionFindManyArgs
  ): Promise<OrganizationPosition[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationPosition(args);
  }

  async findOrganizationProject(
    parentId: string,
    args: Prisma.OrganizationProjectFindManyArgs
  ): Promise<OrganizationProject[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationProject(args);
  }

  async findOrganizationRecurringExpense(
    parentId: string,
    args: Prisma.OrganizationRecurringExpenseFindManyArgs
  ): Promise<OrganizationRecurringExpense[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationRecurringExpense(args);
  }

  async findOrganizationSprint(
    parentId: string,
    args: Prisma.OrganizationSprintFindManyArgs
  ): Promise<OrganizationSprint[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationSprint(args);
  }

  async findOrganizationTaskSetting(
    parentId: string,
    args: Prisma.OrganizationTaskSettingFindManyArgs
  ): Promise<OrganizationTaskSetting[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationTaskSetting(args);
  }

  async findOrganizationTeam(
    parentId: string,
    args: Prisma.OrganizationTeamFindManyArgs
  ): Promise<OrganizationTeam[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationTeam(args);
  }

  async findOrganizationTeamEmployee(
    parentId: string,
    args: Prisma.OrganizationTeamEmployeeFindManyArgs
  ): Promise<OrganizationTeamEmployee[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationTeamEmployee(args);
  }

  async findOrganizationTeamJoinRequest(
    parentId: string,
    args: Prisma.OrganizationTeamJoinRequestFindManyArgs
  ): Promise<OrganizationTeamJoinRequest[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationTeamJoinRequest(args);
  }

  async findOrganizationVendor(
    parentId: string,
    args: Prisma.OrganizationVendorFindManyArgs
  ): Promise<OrganizationVendor[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationVendor(args);
  }

  async findPayment(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<Payment[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payment(args);
  }

  async findPipeline(
    parentId: string,
    args: Prisma.PipelineFindManyArgs
  ): Promise<Pipeline[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .pipeline(args);
  }

  async findPipelineStage(
    parentId: string,
    args: Prisma.PipelineStageFindManyArgs
  ): Promise<PipelineStage[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .pipelineStage(args);
  }

  async findProduct(
    parentId: string,
    args: Prisma.ProductFindManyArgs
  ): Promise<Product[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .product(args);
  }

  async findProductCategory(
    parentId: string,
    args: Prisma.ProductCategoryFindManyArgs
  ): Promise<ProductCategory[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productCategory(args);
  }

  async findProductCategoryTranslation(
    parentId: string,
    args: Prisma.ProductCategoryTranslationFindManyArgs
  ): Promise<ProductCategoryTranslation[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productCategoryTranslation(args);
  }

  async findProductOption(
    parentId: string,
    args: Prisma.ProductOptionFindManyArgs
  ): Promise<ProductOption[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productOption(args);
  }

  async findProductOptionGroup(
    parentId: string,
    args: Prisma.ProductOptionGroupFindManyArgs
  ): Promise<ProductOptionGroup[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productOptionGroup(args);
  }

  async findProductOptionGroupTranslation(
    parentId: string,
    args: Prisma.ProductOptionGroupTranslationFindManyArgs
  ): Promise<ProductOptionGroupTranslation[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productOptionGroupTranslation(args);
  }

  async findProductOptionTranslation(
    parentId: string,
    args: Prisma.ProductOptionTranslationFindManyArgs
  ): Promise<ProductOptionTranslation[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productOptionTranslation(args);
  }

  async findProductTranslation(
    parentId: string,
    args: Prisma.ProductTranslationFindManyArgs
  ): Promise<ProductTranslation[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productTranslation(args);
  }

  async findProductType(
    parentId: string,
    args: Prisma.ProductTypeFindManyArgs
  ): Promise<ProductType[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productType(args);
  }

  async findProductTypeTranslation(
    parentId: string,
    args: Prisma.ProductTypeTranslationFindManyArgs
  ): Promise<ProductTypeTranslation[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productTypeTranslation(args);
  }

  async findProductVariant(
    parentId: string,
    args: Prisma.ProductVariantFindManyArgs
  ): Promise<ProductVariant[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productVariant(args);
  }

  async findProductVariantPrice(
    parentId: string,
    args: Prisma.ProductVariantPriceFindManyArgs
  ): Promise<ProductVariantPrice[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productVariantPrice(args);
  }

  async findProductVariantSetting(
    parentId: string,
    args: Prisma.ProductVariantSettingFindManyArgs
  ): Promise<ProductVariantSetting[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productVariantSetting(args);
  }

  async findProposal(
    parentId: string,
    args: Prisma.ProposalFindManyArgs
  ): Promise<Proposal[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .proposal(args);
  }

  async findReportOrganization(
    parentId: string,
    args: Prisma.ReportOrganizationFindManyArgs
  ): Promise<ReportOrganization[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reportOrganization(args);
  }

  async findRequestApproval(
    parentId: string,
    args: Prisma.RequestApprovalFindManyArgs
  ): Promise<RequestApproval[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requestApproval(args);
  }

  async findRequestApprovalEmployee(
    parentId: string,
    args: Prisma.RequestApprovalEmployeeFindManyArgs
  ): Promise<RequestApprovalEmployee[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requestApprovalEmployee(args);
  }

  async findRequestApprovalTeam(
    parentId: string,
    args: Prisma.RequestApprovalTeamFindManyArgs
  ): Promise<RequestApprovalTeam[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requestApprovalTeam(args);
  }

  async findScreenshot(
    parentId: string,
    args: Prisma.ScreenshotFindManyArgs
  ): Promise<Screenshot[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .screenshot(args);
  }

  async findSkill(
    parentId: string,
    args: Prisma.SkillFindManyArgs
  ): Promise<Skill[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .skill(args);
  }

  async findSkillOrganization(
    parentId: string,
    args: Prisma.SkillOrganizationFindManyArgs
  ): Promise<SkillOrganization[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .skillOrganization(args);
  }

  async findTag(
    parentId: string,
    args: Prisma.TagFindManyArgs
  ): Promise<Tag[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tag(args);
  }

  async findTagOrganization(
    parentId: string,
    args: Prisma.TagOrganizationFindManyArgs
  ): Promise<TagOrganization[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagOrganization(args);
  }

  async findTask(
    parentId: string,
    args: Prisma.TaskFindManyArgs
  ): Promise<Task[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .task(args);
  }

  async findTaskLinkedIssues(
    parentId: string,
    args: Prisma.TaskLinkedIssueFindManyArgs
  ): Promise<TaskLinkedIssue[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskLinkedIssues(args);
  }

  async findTaskPriority(
    parentId: string,
    args: Prisma.TaskPriorityFindManyArgs
  ): Promise<TaskPriority[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskPriority(args);
  }

  async findTaskRelatedIssueType(
    parentId: string,
    args: Prisma.TaskRelatedIssueTypeFindManyArgs
  ): Promise<TaskRelatedIssueType[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskRelatedIssueType(args);
  }

  async findTaskSize(
    parentId: string,
    args: Prisma.TaskSizeFindManyArgs
  ): Promise<TaskSize[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskSize(args);
  }

  async findTaskStatus(
    parentId: string,
    args: Prisma.TaskStatusFindManyArgs
  ): Promise<TaskStatus[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskStatus(args);
  }

  async findTaskVersion(
    parentId: string,
    args: Prisma.TaskVersionFindManyArgs
  ): Promise<TaskVersion[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskVersion(args);
  }

  async findTimeLog(
    parentId: string,
    args: Prisma.TimeLogFindManyArgs
  ): Promise<TimeLog[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeLog(args);
  }

  async findTimeOffPolicy(
    parentId: string,
    args: Prisma.TimeOffPolicyFindManyArgs
  ): Promise<TimeOffPolicy[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeOffPolicy(args);
  }

  async findTimeOffRequest(
    parentId: string,
    args: Prisma.TimeOffRequestFindManyArgs
  ): Promise<TimeOffRequest[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeOffRequest(args);
  }

  async findTimesheet(
    parentId: string,
    args: Prisma.TimesheetFindManyArgs
  ): Promise<Timesheet[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timesheet(args);
  }

  async findTimeSlot(
    parentId: string,
    args: Prisma.TimeSlotFindManyArgs
  ): Promise<TimeSlot[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeSlot(args);
  }

  async findTimeSlotMinute(
    parentId: string,
    args: Prisma.TimeSlotMinuteFindManyArgs
  ): Promise<TimeSlotMinute[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeSlotMinute(args);
  }

  async findUserOrganization(
    parentId: string,
    args: Prisma.UserOrganizationFindManyArgs
  ): Promise<UserOrganization[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userOrganization(args);
  }

  async findWarehouse(
    parentId: string,
    args: Prisma.WarehouseFindManyArgs
  ): Promise<Warehouse[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .warehouse(args);
  }

  async findWarehouseProduct(
    parentId: string,
    args: Prisma.WarehouseProductFindManyArgs
  ): Promise<WarehouseProduct[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .warehouseProduct(args);
  }

  async findWarehouseProductVariant(
    parentId: string,
    args: Prisma.WarehouseProductVariantFindManyArgs
  ): Promise<WarehouseProductVariant[]> {
    return this.prisma.organization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .warehouseProductVariant(args);
  }

  async getContactOrganizationContactIdTocontact(
    parentId: string
  ): Promise<Contact | null> {
    return this.prisma.organization
      .findUnique({
        where: { id: parentId },
      })
      .contactOrganizationContactIdTocontact();
  }

  async getImageAssetOrganizationImageIdToimageAsset(
    parentId: string
  ): Promise<ImageAsset | null> {
    return this.prisma.organization
      .findUnique({
        where: { id: parentId },
      })
      .imageAssetOrganizationImageIdToimageAsset();
  }

  async getTenant(parentId: string): Promise<Tenant | null> {
    return this.prisma.organization
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }
}
