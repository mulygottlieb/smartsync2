/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsDate,
  IsOptional,
  IsInt,
  IsEnum,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumOrganizationContactInviteStatus } from "./EnumOrganizationContactInviteStatus";
import { EnumOrganizationContactContactType } from "./EnumOrganizationContactContactType";
import { EnumOrganizationContactBudgetType } from "./EnumOrganizationContactBudgetType";
import { Organization } from "../../organization/base/Organization";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { Contact } from "../../contact/base/Contact";
import { Tenant } from "../../tenant/base/Tenant";
import { Deal } from "../../deal/base/Deal";
import { Expense } from "../../expense/base/Expense";
import { Income } from "../../income/base/Income";
import { InviteOrganizationContact } from "../../inviteOrganizationContact/base/InviteOrganizationContact";
import { Invoice } from "../../invoice/base/Invoice";
import { OrganizationContactEmployee } from "../../organizationContactEmployee/base/OrganizationContactEmployee";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { Payment } from "../../payment/base/Payment";
import { Proposal } from "../../proposal/base/Proposal";
import { TagOrganizationContact } from "../../tagOrganizationContact/base/TagOrganizationContact";
import { TimeLog } from "../../timeLog/base/TimeLog";

@ObjectType()
class OrganizationContact {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  primaryEmail!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  primaryPhone!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  notes!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  imageUrl!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  budget!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  createdBy!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumOrganizationContactInviteStatus,
  })
  @IsEnum(EnumOrganizationContactInviteStatus)
  @IsOptional()
  @Field(() => EnumOrganizationContactInviteStatus, {
    nullable: true,
  })
  inviteStatus?: "NOT_INVITED" | "INVITED" | "ACCEPTED" | null;

  @ApiProperty({
    required: true,
    enum: EnumOrganizationContactContactType,
  })
  @IsEnum(EnumOrganizationContactContactType)
  @Field(() => EnumOrganizationContactContactType, {
    nullable: true,
  })
  contactType?: "CLIENT" | "CUSTOMER" | "LEAD";

  @ApiProperty({
    required: false,
    enum: EnumOrganizationContactBudgetType,
  })
  @IsEnum(EnumOrganizationContactBudgetType)
  @IsOptional()
  @Field(() => EnumOrganizationContactBudgetType, {
    nullable: true,
  })
  budgetType?: "hours" | "cost" | null;

  @ApiProperty({
    required: false,
    type: () => Organization,
  })
  @ValidateNested()
  @Type(() => Organization)
  @IsOptional()
  organization?: Organization | null;

  @ApiProperty({
    required: false,
    type: () => ImageAsset,
  })
  @ValidateNested()
  @Type(() => ImageAsset)
  @IsOptional()
  imageAsset?: ImageAsset | null;

  @ApiProperty({
    required: false,
    type: () => Contact,
  })
  @ValidateNested()
  @Type(() => Contact)
  @IsOptional()
  contact?: Contact | null;

  @ApiProperty({
    required: false,
    type: () => Tenant,
  })
  @ValidateNested()
  @Type(() => Tenant)
  @IsOptional()
  tenant?: Tenant | null;

  @ApiProperty({
    required: false,
    type: () => Deal,
  })
  @ValidateNested()
  @Type(() => Deal)
  @IsOptional()
  deal?: Deal | null;

  @ApiProperty({
    required: false,
    type: () => [Expense],
  })
  @ValidateNested()
  @Type(() => Expense)
  @IsOptional()
  expense?: Array<Expense>;

  @ApiProperty({
    required: false,
    type: () => [Income],
  })
  @ValidateNested()
  @Type(() => Income)
  @IsOptional()
  income?: Array<Income>;

  @ApiProperty({
    required: false,
    type: () => [InviteOrganizationContact],
  })
  @ValidateNested()
  @Type(() => InviteOrganizationContact)
  @IsOptional()
  inviteOrganizationContact?: Array<InviteOrganizationContact>;

  @ApiProperty({
    required: false,
    type: () => [Invoice],
  })
  @ValidateNested()
  @Type(() => Invoice)
  @IsOptional()
  invoice?: Array<Invoice>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationContactEmployee],
  })
  @ValidateNested()
  @Type(() => OrganizationContactEmployee)
  @IsOptional()
  organizationContactEmployee?: Array<OrganizationContactEmployee>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationProject],
  })
  @ValidateNested()
  @Type(() => OrganizationProject)
  @IsOptional()
  organizationProject?: Array<OrganizationProject>;

  @ApiProperty({
    required: false,
    type: () => [Payment],
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payment?: Array<Payment>;

  @ApiProperty({
    required: false,
    type: () => [Proposal],
  })
  @ValidateNested()
  @Type(() => Proposal)
  @IsOptional()
  proposal?: Array<Proposal>;

  @ApiProperty({
    required: false,
    type: () => [TagOrganizationContact],
  })
  @ValidateNested()
  @Type(() => TagOrganizationContact)
  @IsOptional()
  tagOrganizationContact?: Array<TagOrganizationContact>;

  @ApiProperty({
    required: false,
    type: () => [TimeLog],
  })
  @ValidateNested()
  @Type(() => TimeLog)
  @IsOptional()
  timeLog?: Array<TimeLog>;
}

export { OrganizationContact as OrganizationContact };
