/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsInt,
  IsEnum,
  ValidateNested,
} from "class-validator";
import { EnumOrganizationContactInviteStatus } from "./EnumOrganizationContactInviteStatus";
import { EnumOrganizationContactContactType } from "./EnumOrganizationContactContactType";
import { EnumOrganizationContactBudgetType } from "./EnumOrganizationContactBudgetType";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { Type } from "class-transformer";
import { ImageAssetWhereUniqueInput } from "../../imageAsset/base/ImageAssetWhereUniqueInput";
import { ContactWhereUniqueInput } from "../../contact/base/ContactWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { DealWhereUniqueInput } from "../../deal/base/DealWhereUniqueInput";
import { ExpenseCreateNestedManyWithoutOrganizationContactsInput } from "./ExpenseCreateNestedManyWithoutOrganizationContactsInput";
import { IncomeCreateNestedManyWithoutOrganizationContactsInput } from "./IncomeCreateNestedManyWithoutOrganizationContactsInput";
import { InviteOrganizationContactCreateNestedManyWithoutOrganizationContactsInput } from "./InviteOrganizationContactCreateNestedManyWithoutOrganizationContactsInput";
import { InvoiceCreateNestedManyWithoutOrganizationContactsInput } from "./InvoiceCreateNestedManyWithoutOrganizationContactsInput";
import { OrganizationContactEmployeeCreateNestedManyWithoutOrganizationContactsInput } from "./OrganizationContactEmployeeCreateNestedManyWithoutOrganizationContactsInput";
import { OrganizationProjectCreateNestedManyWithoutOrganizationContactsInput } from "./OrganizationProjectCreateNestedManyWithoutOrganizationContactsInput";
import { PaymentCreateNestedManyWithoutOrganizationContactsInput } from "./PaymentCreateNestedManyWithoutOrganizationContactsInput";
import { ProposalCreateNestedManyWithoutOrganizationContactsInput } from "./ProposalCreateNestedManyWithoutOrganizationContactsInput";
import { TagOrganizationContactCreateNestedManyWithoutOrganizationContactsInput } from "./TagOrganizationContactCreateNestedManyWithoutOrganizationContactsInput";
import { TimeLogCreateNestedManyWithoutOrganizationContactsInput } from "./TimeLogCreateNestedManyWithoutOrganizationContactsInput";

@InputType()
class OrganizationContactCreateInput {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  primaryEmail?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  primaryPhone?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  notes?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  imageUrl?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  budget?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  createdBy?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumOrganizationContactInviteStatus,
  })
  @IsEnum(EnumOrganizationContactInviteStatus)
  @IsOptional()
  @Field(() => EnumOrganizationContactInviteStatus, {
    nullable: true,
  })
  inviteStatus?: "NOT_INVITED" | "INVITED" | "ACCEPTED" | null;

  @ApiProperty({
    required: true,
    enum: EnumOrganizationContactContactType,
  })
  @IsEnum(EnumOrganizationContactContactType)
  @Field(() => EnumOrganizationContactContactType)
  contactType!: "CLIENT" | "CUSTOMER" | "LEAD";

  @ApiProperty({
    required: false,
    enum: EnumOrganizationContactBudgetType,
  })
  @IsEnum(EnumOrganizationContactBudgetType)
  @IsOptional()
  @Field(() => EnumOrganizationContactBudgetType, {
    nullable: true,
  })
  budgetType?: "hours" | "cost" | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organization?: OrganizationWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ImageAssetWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ImageAssetWhereUniqueInput)
  @IsOptional()
  @Field(() => ImageAssetWhereUniqueInput, {
    nullable: true,
  })
  imageAsset?: ImageAssetWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ContactWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ContactWhereUniqueInput)
  @IsOptional()
  @Field(() => ContactWhereUniqueInput, {
    nullable: true,
  })
  contact?: ContactWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => DealWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DealWhereUniqueInput)
  @IsOptional()
  @Field(() => DealWhereUniqueInput, {
    nullable: true,
  })
  deal?: DealWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ExpenseCreateNestedManyWithoutOrganizationContactsInput,
  })
  @ValidateNested()
  @Type(() => ExpenseCreateNestedManyWithoutOrganizationContactsInput)
  @IsOptional()
  @Field(() => ExpenseCreateNestedManyWithoutOrganizationContactsInput, {
    nullable: true,
  })
  expense?: ExpenseCreateNestedManyWithoutOrganizationContactsInput;

  @ApiProperty({
    required: false,
    type: () => IncomeCreateNestedManyWithoutOrganizationContactsInput,
  })
  @ValidateNested()
  @Type(() => IncomeCreateNestedManyWithoutOrganizationContactsInput)
  @IsOptional()
  @Field(() => IncomeCreateNestedManyWithoutOrganizationContactsInput, {
    nullable: true,
  })
  income?: IncomeCreateNestedManyWithoutOrganizationContactsInput;

  @ApiProperty({
    required: false,
    type: () =>
      InviteOrganizationContactCreateNestedManyWithoutOrganizationContactsInput,
  })
  @ValidateNested()
  @Type(
    () =>
      InviteOrganizationContactCreateNestedManyWithoutOrganizationContactsInput
  )
  @IsOptional()
  @Field(
    () =>
      InviteOrganizationContactCreateNestedManyWithoutOrganizationContactsInput,
    {
      nullable: true,
    }
  )
  inviteOrganizationContact?: InviteOrganizationContactCreateNestedManyWithoutOrganizationContactsInput;

  @ApiProperty({
    required: false,
    type: () => InvoiceCreateNestedManyWithoutOrganizationContactsInput,
  })
  @ValidateNested()
  @Type(() => InvoiceCreateNestedManyWithoutOrganizationContactsInput)
  @IsOptional()
  @Field(() => InvoiceCreateNestedManyWithoutOrganizationContactsInput, {
    nullable: true,
  })
  invoice?: InvoiceCreateNestedManyWithoutOrganizationContactsInput;

  @ApiProperty({
    required: false,
    type: () =>
      OrganizationContactEmployeeCreateNestedManyWithoutOrganizationContactsInput,
  })
  @ValidateNested()
  @Type(
    () =>
      OrganizationContactEmployeeCreateNestedManyWithoutOrganizationContactsInput
  )
  @IsOptional()
  @Field(
    () =>
      OrganizationContactEmployeeCreateNestedManyWithoutOrganizationContactsInput,
    {
      nullable: true,
    }
  )
  organizationContactEmployee?: OrganizationContactEmployeeCreateNestedManyWithoutOrganizationContactsInput;

  @ApiProperty({
    required: false,
    type: () =>
      OrganizationProjectCreateNestedManyWithoutOrganizationContactsInput,
  })
  @ValidateNested()
  @Type(
    () => OrganizationProjectCreateNestedManyWithoutOrganizationContactsInput
  )
  @IsOptional()
  @Field(
    () => OrganizationProjectCreateNestedManyWithoutOrganizationContactsInput,
    {
      nullable: true,
    }
  )
  organizationProject?: OrganizationProjectCreateNestedManyWithoutOrganizationContactsInput;

  @ApiProperty({
    required: false,
    type: () => PaymentCreateNestedManyWithoutOrganizationContactsInput,
  })
  @ValidateNested()
  @Type(() => PaymentCreateNestedManyWithoutOrganizationContactsInput)
  @IsOptional()
  @Field(() => PaymentCreateNestedManyWithoutOrganizationContactsInput, {
    nullable: true,
  })
  payment?: PaymentCreateNestedManyWithoutOrganizationContactsInput;

  @ApiProperty({
    required: false,
    type: () => ProposalCreateNestedManyWithoutOrganizationContactsInput,
  })
  @ValidateNested()
  @Type(() => ProposalCreateNestedManyWithoutOrganizationContactsInput)
  @IsOptional()
  @Field(() => ProposalCreateNestedManyWithoutOrganizationContactsInput, {
    nullable: true,
  })
  proposal?: ProposalCreateNestedManyWithoutOrganizationContactsInput;

  @ApiProperty({
    required: false,
    type: () =>
      TagOrganizationContactCreateNestedManyWithoutOrganizationContactsInput,
  })
  @ValidateNested()
  @Type(
    () => TagOrganizationContactCreateNestedManyWithoutOrganizationContactsInput
  )
  @IsOptional()
  @Field(
    () =>
      TagOrganizationContactCreateNestedManyWithoutOrganizationContactsInput,
    {
      nullable: true,
    }
  )
  tagOrganizationContact?: TagOrganizationContactCreateNestedManyWithoutOrganizationContactsInput;

  @ApiProperty({
    required: false,
    type: () => TimeLogCreateNestedManyWithoutOrganizationContactsInput,
  })
  @ValidateNested()
  @Type(() => TimeLogCreateNestedManyWithoutOrganizationContactsInput)
  @IsOptional()
  @Field(() => TimeLogCreateNestedManyWithoutOrganizationContactsInput, {
    nullable: true,
  })
  timeLog?: TimeLogCreateNestedManyWithoutOrganizationContactsInput;
}

export { OrganizationContactCreateInput as OrganizationContactCreateInput };
