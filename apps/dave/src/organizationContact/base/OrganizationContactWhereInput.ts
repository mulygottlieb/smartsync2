/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, IsEnum, ValidateNested } from "class-validator";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { EnumOrganizationContactInviteStatus } from "./EnumOrganizationContactInviteStatus";
import { EnumOrganizationContactContactType } from "./EnumOrganizationContactContactType";
import { EnumOrganizationContactBudgetType } from "./EnumOrganizationContactBudgetType";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { ImageAssetWhereUniqueInput } from "../../imageAsset/base/ImageAssetWhereUniqueInput";
import { ContactWhereUniqueInput } from "../../contact/base/ContactWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { DealWhereUniqueInput } from "../../deal/base/DealWhereUniqueInput";
import { ExpenseListRelationFilter } from "../../expense/base/ExpenseListRelationFilter";
import { IncomeListRelationFilter } from "../../income/base/IncomeListRelationFilter";
import { InviteOrganizationContactListRelationFilter } from "../../inviteOrganizationContact/base/InviteOrganizationContactListRelationFilter";
import { InvoiceListRelationFilter } from "../../invoice/base/InvoiceListRelationFilter";
import { OrganizationContactEmployeeListRelationFilter } from "../../organizationContactEmployee/base/OrganizationContactEmployeeListRelationFilter";
import { OrganizationProjectListRelationFilter } from "../../organizationProject/base/OrganizationProjectListRelationFilter";
import { PaymentListRelationFilter } from "../../payment/base/PaymentListRelationFilter";
import { ProposalListRelationFilter } from "../../proposal/base/ProposalListRelationFilter";
import { TagOrganizationContactListRelationFilter } from "../../tagOrganizationContact/base/TagOrganizationContactListRelationFilter";
import { TimeLogListRelationFilter } from "../../timeLog/base/TimeLogListRelationFilter";

@InputType()
class OrganizationContactWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  createdAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  name?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  primaryEmail?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  primaryPhone?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  notes?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  imageUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  budget?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  createdBy?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumOrganizationContactInviteStatus,
  })
  @IsEnum(EnumOrganizationContactInviteStatus)
  @IsOptional()
  @Field(() => EnumOrganizationContactInviteStatus, {
    nullable: true,
  })
  inviteStatus?: "NOT_INVITED" | "INVITED" | "ACCEPTED";

  @ApiProperty({
    required: false,
    enum: EnumOrganizationContactContactType,
  })
  @IsEnum(EnumOrganizationContactContactType)
  @IsOptional()
  @Field(() => EnumOrganizationContactContactType, {
    nullable: true,
  })
  contactType?: "CLIENT" | "CUSTOMER" | "LEAD";

  @ApiProperty({
    required: false,
    enum: EnumOrganizationContactBudgetType,
  })
  @IsEnum(EnumOrganizationContactBudgetType)
  @IsOptional()
  @Field(() => EnumOrganizationContactBudgetType, {
    nullable: true,
  })
  budgetType?: "hours" | "cost";

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organization?: OrganizationWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ImageAssetWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ImageAssetWhereUniqueInput)
  @IsOptional()
  @Field(() => ImageAssetWhereUniqueInput, {
    nullable: true,
  })
  imageAsset?: ImageAssetWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ContactWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ContactWhereUniqueInput)
  @IsOptional()
  @Field(() => ContactWhereUniqueInput, {
    nullable: true,
  })
  contact?: ContactWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => DealWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DealWhereUniqueInput)
  @IsOptional()
  @Field(() => DealWhereUniqueInput, {
    nullable: true,
  })
  deal?: DealWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ExpenseListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ExpenseListRelationFilter)
  @IsOptional()
  @Field(() => ExpenseListRelationFilter, {
    nullable: true,
  })
  expense?: ExpenseListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => IncomeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => IncomeListRelationFilter)
  @IsOptional()
  @Field(() => IncomeListRelationFilter, {
    nullable: true,
  })
  income?: IncomeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => InviteOrganizationContactListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InviteOrganizationContactListRelationFilter)
  @IsOptional()
  @Field(() => InviteOrganizationContactListRelationFilter, {
    nullable: true,
  })
  inviteOrganizationContact?: InviteOrganizationContactListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => InvoiceListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InvoiceListRelationFilter)
  @IsOptional()
  @Field(() => InvoiceListRelationFilter, {
    nullable: true,
  })
  invoice?: InvoiceListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationContactEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationContactEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationContactEmployeeListRelationFilter, {
    nullable: true,
  })
  organizationContactEmployee?: OrganizationContactEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationProjectListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationProjectListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationProjectListRelationFilter, {
    nullable: true,
  })
  organizationProject?: OrganizationProjectListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => PaymentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PaymentListRelationFilter)
  @IsOptional()
  @Field(() => PaymentListRelationFilter, {
    nullable: true,
  })
  payment?: PaymentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ProposalListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProposalListRelationFilter)
  @IsOptional()
  @Field(() => ProposalListRelationFilter, {
    nullable: true,
  })
  proposal?: ProposalListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TagOrganizationContactListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TagOrganizationContactListRelationFilter)
  @IsOptional()
  @Field(() => TagOrganizationContactListRelationFilter, {
    nullable: true,
  })
  tagOrganizationContact?: TagOrganizationContactListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TimeLogListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TimeLogListRelationFilter)
  @IsOptional()
  @Field(() => TimeLogListRelationFilter, {
    nullable: true,
  })
  timeLog?: TimeLogListRelationFilter;
}

export { OrganizationContactWhereInput as OrganizationContactWhereInput };
