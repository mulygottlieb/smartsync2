/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrganizationContactService } from "../organizationContact.service";
import { OrganizationContactCreateInput } from "./OrganizationContactCreateInput";
import { OrganizationContactWhereInput } from "./OrganizationContactWhereInput";
import { OrganizationContactWhereUniqueInput } from "./OrganizationContactWhereUniqueInput";
import { OrganizationContactFindManyArgs } from "./OrganizationContactFindManyArgs";
import { OrganizationContactUpdateInput } from "./OrganizationContactUpdateInput";
import { OrganizationContact } from "./OrganizationContact";
import { ExpenseFindManyArgs } from "../../expense/base/ExpenseFindManyArgs";
import { Expense } from "../../expense/base/Expense";
import { ExpenseWhereUniqueInput } from "../../expense/base/ExpenseWhereUniqueInput";
import { IncomeFindManyArgs } from "../../income/base/IncomeFindManyArgs";
import { Income } from "../../income/base/Income";
import { IncomeWhereUniqueInput } from "../../income/base/IncomeWhereUniqueInput";
import { InviteOrganizationContactFindManyArgs } from "../../inviteOrganizationContact/base/InviteOrganizationContactFindManyArgs";
import { InviteOrganizationContact } from "../../inviteOrganizationContact/base/InviteOrganizationContact";
import { InviteOrganizationContactWhereUniqueInput } from "../../inviteOrganizationContact/base/InviteOrganizationContactWhereUniqueInput";
import { InvoiceFindManyArgs } from "../../invoice/base/InvoiceFindManyArgs";
import { Invoice } from "../../invoice/base/Invoice";
import { InvoiceWhereUniqueInput } from "../../invoice/base/InvoiceWhereUniqueInput";
import { OrganizationContactEmployeeFindManyArgs } from "../../organizationContactEmployee/base/OrganizationContactEmployeeFindManyArgs";
import { OrganizationContactEmployee } from "../../organizationContactEmployee/base/OrganizationContactEmployee";
import { OrganizationContactEmployeeWhereUniqueInput } from "../../organizationContactEmployee/base/OrganizationContactEmployeeWhereUniqueInput";
import { OrganizationProjectFindManyArgs } from "../../organizationProject/base/OrganizationProjectFindManyArgs";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { OrganizationProjectWhereUniqueInput } from "../../organizationProject/base/OrganizationProjectWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { ProposalFindManyArgs } from "../../proposal/base/ProposalFindManyArgs";
import { Proposal } from "../../proposal/base/Proposal";
import { ProposalWhereUniqueInput } from "../../proposal/base/ProposalWhereUniqueInput";
import { TagOrganizationContactFindManyArgs } from "../../tagOrganizationContact/base/TagOrganizationContactFindManyArgs";
import { TagOrganizationContact } from "../../tagOrganizationContact/base/TagOrganizationContact";
import { TagOrganizationContactWhereUniqueInput } from "../../tagOrganizationContact/base/TagOrganizationContactWhereUniqueInput";
import { TimeLogFindManyArgs } from "../../timeLog/base/TimeLogFindManyArgs";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { TimeLogWhereUniqueInput } from "../../timeLog/base/TimeLogWhereUniqueInput";

export class OrganizationContactControllerBase {
  constructor(protected readonly service: OrganizationContactService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrganizationContact })
  async create(
    @common.Body() data: OrganizationContactCreateInput
  ): Promise<OrganizationContact> {
    return await this.service.create({
      data: {
        ...data,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        imageAsset: data.imageAsset
          ? {
              connect: data.imageAsset,
            }
          : undefined,

        contact: data.contact
          ? {
              connect: data.contact,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        deal: data.deal
          ? {
              connect: data.deal,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        primaryEmail: true,
        primaryPhone: true,
        notes: true,
        imageUrl: true,
        budget: true,
        createdBy: true,
        inviteStatus: true,
        contactType: true,
        budgetType: true,

        organization: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        deal: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OrganizationContact] })
  @ApiNestedQuery(OrganizationContactFindManyArgs)
  async findMany(
    @common.Req() request: Request
  ): Promise<OrganizationContact[]> {
    const args = plainToClass(OrganizationContactFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        primaryEmail: true,
        primaryPhone: true,
        notes: true,
        imageUrl: true,
        budget: true,
        createdBy: true,
        inviteStatus: true,
        contactType: true,
        budgetType: true,

        organization: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        deal: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrganizationContact })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: OrganizationContactWhereUniqueInput
  ): Promise<OrganizationContact | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        primaryEmail: true,
        primaryPhone: true,
        notes: true,
        imageUrl: true,
        budget: true,
        createdBy: true,
        inviteStatus: true,
        contactType: true,
        budgetType: true,

        organization: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        deal: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrganizationContact })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() data: OrganizationContactUpdateInput
  ): Promise<OrganizationContact | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          imageAsset: data.imageAsset
            ? {
                connect: data.imageAsset,
              }
            : undefined,

          contact: data.contact
            ? {
                connect: data.contact,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          deal: data.deal
            ? {
                connect: data.deal,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          primaryEmail: true,
          primaryPhone: true,
          notes: true,
          imageUrl: true,
          budget: true,
          createdBy: true,
          inviteStatus: true,
          contactType: true,
          budgetType: true,

          organization: {
            select: {
              id: true,
            },
          },

          imageAsset: {
            select: {
              id: true,
            },
          },

          contact: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          deal: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrganizationContact })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: OrganizationContactWhereUniqueInput
  ): Promise<OrganizationContact | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          primaryEmail: true,
          primaryPhone: true,
          notes: true,
          imageUrl: true,
          budget: true,
          createdBy: true,
          inviteStatus: true,
          contactType: true,
          budgetType: true,

          organization: {
            select: {
              id: true,
            },
          },

          imageAsset: {
            select: {
              id: true,
            },
          },

          contact: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          deal: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/expense")
  @ApiNestedQuery(ExpenseFindManyArgs)
  async findManyExpense(
    @common.Req() request: Request,
    @common.Param() params: OrganizationContactWhereUniqueInput
  ): Promise<Expense[]> {
    const query = plainToClass(ExpenseFindManyArgs, request.query);
    const results = await this.service.findExpense(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        typeOfExpense: true,
        notes: true,
        currency: true,
        valueDate: true,
        purpose: true,
        taxType: true,
        taxLabel: true,
        rateValue: true,
        receipt: true,
        splitExpense: true,
        reference: true,
        status: true,

        organizationContact: {
          select: {
            id: true,
          },
        },

        expenseCategory: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationVendor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/expense")
  async connectExpense(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expense: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/expense")
  async updateExpense(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expense: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/expense")
  async disconnectExpense(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expense: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/income")
  @ApiNestedQuery(IncomeFindManyArgs)
  async findManyIncome(
    @common.Req() request: Request,
    @common.Param() params: OrganizationContactWhereUniqueInput
  ): Promise<Income[]> {
    const query = plainToClass(IncomeFindManyArgs, request.query);
    const results = await this.service.findIncome(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        currency: true,
        valueDate: true,
        notes: true,
        isBonus: true,
        reference: true,

        organizationContact: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/income")
  async connectIncome(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: IncomeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      income: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/income")
  async updateIncome(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: IncomeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      income: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/income")
  async disconnectIncome(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: IncomeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      income: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/inviteOrganizationContact")
  @ApiNestedQuery(InviteOrganizationContactFindManyArgs)
  async findManyInviteOrganizationContact(
    @common.Req() request: Request,
    @common.Param() params: OrganizationContactWhereUniqueInput
  ): Promise<InviteOrganizationContact[]> {
    const query = plainToClass(
      InviteOrganizationContactFindManyArgs,
      request.query
    );
    const results = await this.service.findInviteOrganizationContact(
      params.id,
      {
        ...query,
        select: {
          invite: {
            select: {
              id: true,
            },
          },

          organizationContact: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/inviteOrganizationContact")
  async connectInviteOrganizationContact(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: InviteOrganizationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationContact: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/inviteOrganizationContact")
  async updateInviteOrganizationContact(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: InviteOrganizationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationContact: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/inviteOrganizationContact")
  async disconnectInviteOrganizationContact(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: InviteOrganizationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationContact: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/invoice")
  @ApiNestedQuery(InvoiceFindManyArgs)
  async findManyInvoice(
    @common.Req() request: Request,
    @common.Param() params: OrganizationContactWhereUniqueInput
  ): Promise<Invoice[]> {
    const query = plainToClass(InvoiceFindManyArgs, request.query);
    const results = await this.service.findInvoice(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        invoiceDate: true,
        invoiceNumber: true,
        dueDate: true,
        currency: true,
        discountValue: true,
        paid: true,
        tax: true,
        tax2: true,
        terms: true,
        totalValue: true,
        status: true,
        isEstimate: true,
        isAccepted: true,
        discountType: true,
        taxType: true,
        tax2Type: true,
        invoiceType: true,
        sentTo: true,
        organizationContactId: true,
        internalNote: true,
        alreadyPaid: true,
        amountDue: true,
        hasRemainingAmountInvoiced: true,
        token: true,
        isArchived: true,

        organizationInvoiceOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationInvoiceFromOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoice")
  async connectInvoice(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoice: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoice")
  async updateInvoice(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoice: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoice")
  async disconnectInvoice(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoice: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationContactEmployee")
  @ApiNestedQuery(OrganizationContactEmployeeFindManyArgs)
  async findManyOrganizationContactEmployee(
    @common.Req() request: Request,
    @common.Param() params: OrganizationContactWhereUniqueInput
  ): Promise<OrganizationContactEmployee[]> {
    const query = plainToClass(
      OrganizationContactEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationContactEmployee(
      params.id,
      {
        ...query,
        select: {
          organizationContact: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationContactEmployee")
  async connectOrganizationContactEmployee(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: OrganizationContactEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationContactEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationContactEmployee")
  async updateOrganizationContactEmployee(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: OrganizationContactEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationContactEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationContactEmployee")
  async disconnectOrganizationContactEmployee(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: OrganizationContactEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationContactEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationProject")
  @ApiNestedQuery(OrganizationProjectFindManyArgs)
  async findManyOrganizationProject(
    @common.Req() request: Request,
    @common.Param() params: OrganizationContactWhereUniqueInput
  ): Promise<OrganizationProject[]> {
    const query = plainToClass(OrganizationProjectFindManyArgs, request.query);
    const results = await this.service.findOrganizationProject(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        startDate: true,
        endDate: true,
        billing: true,
        currency: true,
        publicField: true,
        owner: true,
        taskListType: true,
        code: true,
        description: true,
        color: true,
        billable: true,
        billingFlat: true,
        openSource: true,
        projectUrl: true,
        openSourceProjectUrl: true,
        budget: true,
        budgetType: true,
        membersCount: true,
        imageUrl: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationProject")
  async connectOrganizationProject(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: OrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationProject: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationProject")
  async updateOrganizationProject(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: OrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationProject: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationProject")
  async disconnectOrganizationProject(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: OrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationProject: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/payment")
  @ApiNestedQuery(PaymentFindManyArgs)
  async findManyPayment(
    @common.Req() request: Request,
    @common.Param() params: OrganizationContactWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayment(params.id, {
      ...query,
      select: {
        invoice: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        id: true,
        createdAt: true,
        updatedAt: true,
        paymentDate: true,
        amount: true,
        note: true,
        currency: true,
        overdue: true,
        paymentMethod: true,

        user: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payment")
  async connectPayment(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payment")
  async updatePayment(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payment")
  async disconnectPayment(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/proposal")
  @ApiNestedQuery(ProposalFindManyArgs)
  async findManyProposal(
    @common.Req() request: Request,
    @common.Param() params: OrganizationContactWhereUniqueInput
  ): Promise<Proposal[]> {
    const query = plainToClass(ProposalFindManyArgs, request.query);
    const results = await this.service.findProposal(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        jobPostUrl: true,
        valueDate: true,
        jobPostContent: true,
        proposalContent: true,
        status: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/proposal")
  async connectProposal(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: ProposalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proposal: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/proposal")
  async updateProposal(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: ProposalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proposal: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/proposal")
  async disconnectProposal(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: ProposalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proposal: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagOrganizationContact")
  @ApiNestedQuery(TagOrganizationContactFindManyArgs)
  async findManyTagOrganizationContact(
    @common.Req() request: Request,
    @common.Param() params: OrganizationContactWhereUniqueInput
  ): Promise<TagOrganizationContact[]> {
    const query = plainToClass(
      TagOrganizationContactFindManyArgs,
      request.query
    );
    const results = await this.service.findTagOrganizationContact(params.id, {
      ...query,
      select: {
        organizationContact: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagOrganizationContact")
  async connectTagOrganizationContact(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: TagOrganizationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagOrganizationContact: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagOrganizationContact")
  async updateTagOrganizationContact(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: TagOrganizationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagOrganizationContact: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagOrganizationContact")
  async disconnectTagOrganizationContact(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: TagOrganizationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagOrganizationContact: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeLog")
  @ApiNestedQuery(TimeLogFindManyArgs)
  async findManyTimeLog(
    @common.Req() request: Request,
    @common.Param() params: OrganizationContactWhereUniqueInput
  ): Promise<TimeLog[]> {
    const query = plainToClass(TimeLogFindManyArgs, request.query);
    const results = await this.service.findTimeLog(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startedAt: true,
        stoppedAt: true,
        logType: true,
        source: true,
        description: true,
        reason: true,
        isBillable: true,
        deletedAt: true,
        isRunning: true,
        version: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        timesheet: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeLog")
  async connectTimeLog(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeLog")
  async updateTimeLog(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeLog")
  async disconnectTimeLog(
    @common.Param() params: OrganizationContactWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
