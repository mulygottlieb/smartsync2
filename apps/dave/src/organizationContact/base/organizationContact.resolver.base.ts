/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationContactArgs } from "./CreateOrganizationContactArgs";
import { UpdateOrganizationContactArgs } from "./UpdateOrganizationContactArgs";
import { DeleteOrganizationContactArgs } from "./DeleteOrganizationContactArgs";
import { OrganizationContactCountArgs } from "./OrganizationContactCountArgs";
import { OrganizationContactFindManyArgs } from "./OrganizationContactFindManyArgs";
import { OrganizationContactFindUniqueArgs } from "./OrganizationContactFindUniqueArgs";
import { OrganizationContact } from "./OrganizationContact";
import { ExpenseFindManyArgs } from "../../expense/base/ExpenseFindManyArgs";
import { Expense } from "../../expense/base/Expense";
import { IncomeFindManyArgs } from "../../income/base/IncomeFindManyArgs";
import { Income } from "../../income/base/Income";
import { InviteOrganizationContactFindManyArgs } from "../../inviteOrganizationContact/base/InviteOrganizationContactFindManyArgs";
import { InviteOrganizationContact } from "../../inviteOrganizationContact/base/InviteOrganizationContact";
import { InvoiceFindManyArgs } from "../../invoice/base/InvoiceFindManyArgs";
import { Invoice } from "../../invoice/base/Invoice";
import { OrganizationContactEmployeeFindManyArgs } from "../../organizationContactEmployee/base/OrganizationContactEmployeeFindManyArgs";
import { OrganizationContactEmployee } from "../../organizationContactEmployee/base/OrganizationContactEmployee";
import { OrganizationProjectFindManyArgs } from "../../organizationProject/base/OrganizationProjectFindManyArgs";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { ProposalFindManyArgs } from "../../proposal/base/ProposalFindManyArgs";
import { Proposal } from "../../proposal/base/Proposal";
import { TagOrganizationContactFindManyArgs } from "../../tagOrganizationContact/base/TagOrganizationContactFindManyArgs";
import { TagOrganizationContact } from "../../tagOrganizationContact/base/TagOrganizationContact";
import { TimeLogFindManyArgs } from "../../timeLog/base/TimeLogFindManyArgs";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { Organization } from "../../organization/base/Organization";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { Contact } from "../../contact/base/Contact";
import { Tenant } from "../../tenant/base/Tenant";
import { Deal } from "../../deal/base/Deal";
import { OrganizationContactService } from "../organizationContact.service";
@graphql.Resolver(() => OrganizationContact)
export class OrganizationContactResolverBase {
  constructor(protected readonly service: OrganizationContactService) {}

  async _organizationContactsMeta(
    @graphql.Args() args: OrganizationContactCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationContact])
  async organizationContacts(
    @graphql.Args() args: OrganizationContactFindManyArgs
  ): Promise<OrganizationContact[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationContact, { nullable: true })
  async organizationContact(
    @graphql.Args() args: OrganizationContactFindUniqueArgs
  ): Promise<OrganizationContact | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationContact)
  async createOrganizationContact(
    @graphql.Args() args: CreateOrganizationContactArgs
  ): Promise<OrganizationContact> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        imageAsset: args.data.imageAsset
          ? {
              connect: args.data.imageAsset,
            }
          : undefined,

        contact: args.data.contact
          ? {
              connect: args.data.contact,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        deal: args.data.deal
          ? {
              connect: args.data.deal,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OrganizationContact)
  async updateOrganizationContact(
    @graphql.Args() args: UpdateOrganizationContactArgs
  ): Promise<OrganizationContact | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          imageAsset: args.data.imageAsset
            ? {
                connect: args.data.imageAsset,
              }
            : undefined,

          contact: args.data.contact
            ? {
                connect: args.data.contact,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          deal: args.data.deal
            ? {
                connect: args.data.deal,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationContact)
  async deleteOrganizationContact(
    @graphql.Args() args: DeleteOrganizationContactArgs
  ): Promise<OrganizationContact | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Expense], { name: "expense" })
  async resolveFieldExpense(
    @graphql.Parent() parent: OrganizationContact,
    @graphql.Args() args: ExpenseFindManyArgs
  ): Promise<Expense[]> {
    const results = await this.service.findExpense(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Income], { name: "income" })
  async resolveFieldIncome(
    @graphql.Parent() parent: OrganizationContact,
    @graphql.Args() args: IncomeFindManyArgs
  ): Promise<Income[]> {
    const results = await this.service.findIncome(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [InviteOrganizationContact], {
    name: "inviteOrganizationContact",
  })
  async resolveFieldInviteOrganizationContact(
    @graphql.Parent() parent: OrganizationContact,
    @graphql.Args() args: InviteOrganizationContactFindManyArgs
  ): Promise<InviteOrganizationContact[]> {
    const results = await this.service.findInviteOrganizationContact(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Invoice], { name: "invoice" })
  async resolveFieldInvoice(
    @graphql.Parent() parent: OrganizationContact,
    @graphql.Args() args: InvoiceFindManyArgs
  ): Promise<Invoice[]> {
    const results = await this.service.findInvoice(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationContactEmployee], {
    name: "organizationContactEmployee",
  })
  async resolveFieldOrganizationContactEmployee(
    @graphql.Parent() parent: OrganizationContact,
    @graphql.Args() args: OrganizationContactEmployeeFindManyArgs
  ): Promise<OrganizationContactEmployee[]> {
    const results = await this.service.findOrganizationContactEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationProject], {
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: OrganizationContact,
    @graphql.Args() args: OrganizationProjectFindManyArgs
  ): Promise<OrganizationProject[]> {
    const results = await this.service.findOrganizationProject(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Payment], { name: "payment" })
  async resolveFieldPayment(
    @graphql.Parent() parent: OrganizationContact,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Proposal], { name: "proposal" })
  async resolveFieldProposal(
    @graphql.Parent() parent: OrganizationContact,
    @graphql.Args() args: ProposalFindManyArgs
  ): Promise<Proposal[]> {
    const results = await this.service.findProposal(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationContact], {
    name: "tagOrganizationContact",
  })
  async resolveFieldTagOrganizationContact(
    @graphql.Parent() parent: OrganizationContact,
    @graphql.Args() args: TagOrganizationContactFindManyArgs
  ): Promise<TagOrganizationContact[]> {
    const results = await this.service.findTagOrganizationContact(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeLog], { name: "timeLog" })
  async resolveFieldTimeLog(
    @graphql.Parent() parent: OrganizationContact,
    @graphql.Args() args: TimeLogFindManyArgs
  ): Promise<TimeLog[]> {
    const results = await this.service.findTimeLog(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: OrganizationContact
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ImageAsset, {
    nullable: true,
    name: "imageAsset",
  })
  async resolveFieldImageAsset(
    @graphql.Parent() parent: OrganizationContact
  ): Promise<ImageAsset | null> {
    const result = await this.service.getImageAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Contact, {
    nullable: true,
    name: "contact",
  })
  async resolveFieldContact(
    @graphql.Parent() parent: OrganizationContact
  ): Promise<Contact | null> {
    const result = await this.service.getContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: OrganizationContact
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Deal, {
    nullable: true,
    name: "deal",
  })
  async resolveFieldDeal(
    @graphql.Parent() parent: OrganizationContact
  ): Promise<Deal | null> {
    const result = await this.service.getDeal(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
