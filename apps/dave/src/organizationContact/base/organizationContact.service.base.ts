/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OrganizationContact,
  Expense,
  Income,
  InviteOrganizationContact,
  Invoice,
  OrganizationContactEmployee,
  OrganizationProject,
  Payment,
  Proposal,
  TagOrganizationContact,
  TimeLog,
  Organization,
  ImageAsset,
  Contact,
  Tenant,
  Deal,
} from "@prisma/client";

export class OrganizationContactServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.OrganizationContactCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationContactCountArgs>
  ): Promise<number> {
    return this.prisma.organizationContact.count(args);
  }

  async findMany<T extends Prisma.OrganizationContactFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationContactFindManyArgs>
  ): Promise<OrganizationContact[]> {
    return this.prisma.organizationContact.findMany(args);
  }
  async findOne<T extends Prisma.OrganizationContactFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationContactFindUniqueArgs>
  ): Promise<OrganizationContact | null> {
    return this.prisma.organizationContact.findUnique(args);
  }
  async create<T extends Prisma.OrganizationContactCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationContactCreateArgs>
  ): Promise<OrganizationContact> {
    return this.prisma.organizationContact.create<T>(args);
  }
  async update<T extends Prisma.OrganizationContactUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationContactUpdateArgs>
  ): Promise<OrganizationContact> {
    return this.prisma.organizationContact.update<T>(args);
  }
  async delete<T extends Prisma.OrganizationContactDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationContactDeleteArgs>
  ): Promise<OrganizationContact> {
    return this.prisma.organizationContact.delete(args);
  }

  async findExpense(
    parentId: string,
    args: Prisma.ExpenseFindManyArgs
  ): Promise<Expense[]> {
    return this.prisma.organizationContact
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .expense(args);
  }

  async findIncome(
    parentId: string,
    args: Prisma.IncomeFindManyArgs
  ): Promise<Income[]> {
    return this.prisma.organizationContact
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .income(args);
  }

  async findInviteOrganizationContact(
    parentId: string,
    args: Prisma.InviteOrganizationContactFindManyArgs
  ): Promise<InviteOrganizationContact[]> {
    return this.prisma.organizationContact
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .inviteOrganizationContact(args);
  }

  async findInvoice(
    parentId: string,
    args: Prisma.InvoiceFindManyArgs
  ): Promise<Invoice[]> {
    return this.prisma.organizationContact
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .invoice(args);
  }

  async findOrganizationContactEmployee(
    parentId: string,
    args: Prisma.OrganizationContactEmployeeFindManyArgs
  ): Promise<OrganizationContactEmployee[]> {
    return this.prisma.organizationContact
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationContactEmployee(args);
  }

  async findOrganizationProject(
    parentId: string,
    args: Prisma.OrganizationProjectFindManyArgs
  ): Promise<OrganizationProject[]> {
    return this.prisma.organizationContact
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationProject(args);
  }

  async findPayment(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<Payment[]> {
    return this.prisma.organizationContact
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payment(args);
  }

  async findProposal(
    parentId: string,
    args: Prisma.ProposalFindManyArgs
  ): Promise<Proposal[]> {
    return this.prisma.organizationContact
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .proposal(args);
  }

  async findTagOrganizationContact(
    parentId: string,
    args: Prisma.TagOrganizationContactFindManyArgs
  ): Promise<TagOrganizationContact[]> {
    return this.prisma.organizationContact
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagOrganizationContact(args);
  }

  async findTimeLog(
    parentId: string,
    args: Prisma.TimeLogFindManyArgs
  ): Promise<TimeLog[]> {
    return this.prisma.organizationContact
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeLog(args);
  }

  async getOrganization(parentId: string): Promise<Organization | null> {
    return this.prisma.organizationContact
      .findUnique({
        where: { id: parentId },
      })
      .organization();
  }

  async getImageAsset(parentId: string): Promise<ImageAsset | null> {
    return this.prisma.organizationContact
      .findUnique({
        where: { id: parentId },
      })
      .imageAsset();
  }

  async getContact(parentId: string): Promise<Contact | null> {
    return this.prisma.organizationContact
      .findUnique({
        where: { id: parentId },
      })
      .contact();
  }

  async getTenant(parentId: string): Promise<Tenant | null> {
    return this.prisma.organizationContact
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }

  async getDeal(parentId: string): Promise<Deal | null> {
    return this.prisma.organizationContact
      .findUnique({
        where: { id: parentId },
      })
      .deal();
  }
}
