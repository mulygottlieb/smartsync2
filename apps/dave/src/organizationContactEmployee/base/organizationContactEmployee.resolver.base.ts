/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationContactEmployeeArgs } from "./CreateOrganizationContactEmployeeArgs";
import { UpdateOrganizationContactEmployeeArgs } from "./UpdateOrganizationContactEmployeeArgs";
import { DeleteOrganizationContactEmployeeArgs } from "./DeleteOrganizationContactEmployeeArgs";
import { OrganizationContactEmployeeCountArgs } from "./OrganizationContactEmployeeCountArgs";
import { OrganizationContactEmployeeFindManyArgs } from "./OrganizationContactEmployeeFindManyArgs";
import { OrganizationContactEmployeeFindUniqueArgs } from "./OrganizationContactEmployeeFindUniqueArgs";
import { OrganizationContactEmployee } from "./OrganizationContactEmployee";
import { OrganizationContact } from "../../organizationContact/base/OrganizationContact";
import { Employee } from "../../employee/base/Employee";
import { OrganizationContactEmployeeService } from "../organizationContactEmployee.service";
@graphql.Resolver(() => OrganizationContactEmployee)
export class OrganizationContactEmployeeResolverBase {
  constructor(protected readonly service: OrganizationContactEmployeeService) {}

  async _organizationContactEmployeesMeta(
    @graphql.Args() args: OrganizationContactEmployeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationContactEmployee])
  async organizationContactEmployees(
    @graphql.Args() args: OrganizationContactEmployeeFindManyArgs
  ): Promise<OrganizationContactEmployee[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationContactEmployee, { nullable: true })
  async organizationContactEmployee(
    @graphql.Args() args: OrganizationContactEmployeeFindUniqueArgs
  ): Promise<OrganizationContactEmployee | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationContactEmployee)
  async createOrganizationContactEmployee(
    @graphql.Args() args: CreateOrganizationContactEmployeeArgs
  ): Promise<OrganizationContactEmployee> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationContact: {
          connect: args.data.organizationContact,
        },

        employee: {
          connect: args.data.employee,
        },
      },
    });
  }

  @graphql.Mutation(() => OrganizationContactEmployee)
  async updateOrganizationContactEmployee(
    @graphql.Args() args: UpdateOrganizationContactEmployeeArgs
  ): Promise<OrganizationContactEmployee | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationContact: {
            connect: args.data.organizationContact,
          },

          employee: {
            connect: args.data.employee,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationContactEmployee)
  async deleteOrganizationContactEmployee(
    @graphql.Args() args: DeleteOrganizationContactEmployeeArgs
  ): Promise<OrganizationContactEmployee | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => OrganizationContact, {
    nullable: true,
    name: "organizationContact",
  })
  async resolveFieldOrganizationContact(
    @graphql.Parent() parent: OrganizationContactEmployee
  ): Promise<OrganizationContact | null> {
    const result = await this.service.getOrganizationContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: OrganizationContactEmployee
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
