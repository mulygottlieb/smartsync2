/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrganizationDepartmentService } from "../organizationDepartment.service";
import { OrganizationDepartmentCreateInput } from "./OrganizationDepartmentCreateInput";
import { OrganizationDepartmentWhereInput } from "./OrganizationDepartmentWhereInput";
import { OrganizationDepartmentWhereUniqueInput } from "./OrganizationDepartmentWhereUniqueInput";
import { OrganizationDepartmentFindManyArgs } from "./OrganizationDepartmentFindManyArgs";
import { OrganizationDepartmentUpdateInput } from "./OrganizationDepartmentUpdateInput";
import { OrganizationDepartment } from "./OrganizationDepartment";
import { CandidateDepartmentFindManyArgs } from "../../candidateDepartment/base/CandidateDepartmentFindManyArgs";
import { CandidateDepartment } from "../../candidateDepartment/base/CandidateDepartment";
import { CandidateDepartmentWhereUniqueInput } from "../../candidateDepartment/base/CandidateDepartmentWhereUniqueInput";
import { InviteOrganizationDepartmentFindManyArgs } from "../../inviteOrganizationDepartment/base/InviteOrganizationDepartmentFindManyArgs";
import { InviteOrganizationDepartment } from "../../inviteOrganizationDepartment/base/InviteOrganizationDepartment";
import { InviteOrganizationDepartmentWhereUniqueInput } from "../../inviteOrganizationDepartment/base/InviteOrganizationDepartmentWhereUniqueInput";
import { OrganizationDepartmentEmployeeFindManyArgs } from "../../organizationDepartmentEmployee/base/OrganizationDepartmentEmployeeFindManyArgs";
import { OrganizationDepartmentEmployee } from "../../organizationDepartmentEmployee/base/OrganizationDepartmentEmployee";
import { OrganizationDepartmentEmployeeWhereUniqueInput } from "../../organizationDepartmentEmployee/base/OrganizationDepartmentEmployeeWhereUniqueInput";
import { TagOrganizationDepartmentFindManyArgs } from "../../tagOrganizationDepartment/base/TagOrganizationDepartmentFindManyArgs";
import { TagOrganizationDepartment } from "../../tagOrganizationDepartment/base/TagOrganizationDepartment";
import { TagOrganizationDepartmentWhereUniqueInput } from "../../tagOrganizationDepartment/base/TagOrganizationDepartmentWhereUniqueInput";

export class OrganizationDepartmentControllerBase {
  constructor(protected readonly service: OrganizationDepartmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrganizationDepartment })
  async create(
    @common.Body() data: OrganizationDepartmentCreateInput
  ): Promise<OrganizationDepartment> {
    return await this.service.create({
      data: {
        ...data,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OrganizationDepartment] })
  @ApiNestedQuery(OrganizationDepartmentFindManyArgs)
  async findMany(
    @common.Req() request: Request
  ): Promise<OrganizationDepartment[]> {
    const args = plainToClass(
      OrganizationDepartmentFindManyArgs,
      request.query
    );
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrganizationDepartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: OrganizationDepartmentWhereUniqueInput
  ): Promise<OrganizationDepartment | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrganizationDepartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: OrganizationDepartmentWhereUniqueInput,
    @common.Body() data: OrganizationDepartmentUpdateInput
  ): Promise<OrganizationDepartment | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrganizationDepartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: OrganizationDepartmentWhereUniqueInput
  ): Promise<OrganizationDepartment | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/candidateDepartment")
  @ApiNestedQuery(CandidateDepartmentFindManyArgs)
  async findManyCandidateDepartment(
    @common.Req() request: Request,
    @common.Param() params: OrganizationDepartmentWhereUniqueInput
  ): Promise<CandidateDepartment[]> {
    const query = plainToClass(CandidateDepartmentFindManyArgs, request.query);
    const results = await this.service.findCandidateDepartment(params.id, {
      ...query,
      select: {
        organizationDepartment: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateDepartment")
  async connectCandidateDepartment(
    @common.Param() params: OrganizationDepartmentWhereUniqueInput,
    @common.Body() body: CandidateDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateDepartment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateDepartment")
  async updateCandidateDepartment(
    @common.Param() params: OrganizationDepartmentWhereUniqueInput,
    @common.Body() body: CandidateDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateDepartment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateDepartment")
  async disconnectCandidateDepartment(
    @common.Param() params: OrganizationDepartmentWhereUniqueInput,
    @common.Body() body: CandidateDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateDepartment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/inviteOrganizationDepartment")
  @ApiNestedQuery(InviteOrganizationDepartmentFindManyArgs)
  async findManyInviteOrganizationDepartment(
    @common.Req() request: Request,
    @common.Param() params: OrganizationDepartmentWhereUniqueInput
  ): Promise<InviteOrganizationDepartment[]> {
    const query = plainToClass(
      InviteOrganizationDepartmentFindManyArgs,
      request.query
    );
    const results = await this.service.findInviteOrganizationDepartment(
      params.id,
      {
        ...query,
        select: {
          invite: {
            select: {
              id: true,
            },
          },

          organizationDepartment: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/inviteOrganizationDepartment")
  async connectInviteOrganizationDepartment(
    @common.Param() params: OrganizationDepartmentWhereUniqueInput,
    @common.Body() body: InviteOrganizationDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationDepartment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/inviteOrganizationDepartment")
  async updateInviteOrganizationDepartment(
    @common.Param() params: OrganizationDepartmentWhereUniqueInput,
    @common.Body() body: InviteOrganizationDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationDepartment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/inviteOrganizationDepartment")
  async disconnectInviteOrganizationDepartment(
    @common.Param() params: OrganizationDepartmentWhereUniqueInput,
    @common.Body() body: InviteOrganizationDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationDepartment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationDepartmentEmployee")
  @ApiNestedQuery(OrganizationDepartmentEmployeeFindManyArgs)
  async findManyOrganizationDepartmentEmployee(
    @common.Req() request: Request,
    @common.Param() params: OrganizationDepartmentWhereUniqueInput
  ): Promise<OrganizationDepartmentEmployee[]> {
    const query = plainToClass(
      OrganizationDepartmentEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationDepartmentEmployee(
      params.id,
      {
        ...query,
        select: {
          employee: {
            select: {
              id: true,
            },
          },

          organizationDepartment: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationDepartmentEmployee")
  async connectOrganizationDepartmentEmployee(
    @common.Param() params: OrganizationDepartmentWhereUniqueInput,
    @common.Body() body: OrganizationDepartmentEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationDepartmentEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationDepartmentEmployee")
  async updateOrganizationDepartmentEmployee(
    @common.Param() params: OrganizationDepartmentWhereUniqueInput,
    @common.Body() body: OrganizationDepartmentEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationDepartmentEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationDepartmentEmployee")
  async disconnectOrganizationDepartmentEmployee(
    @common.Param() params: OrganizationDepartmentWhereUniqueInput,
    @common.Body() body: OrganizationDepartmentEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationDepartmentEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagOrganizationDepartment")
  @ApiNestedQuery(TagOrganizationDepartmentFindManyArgs)
  async findManyTagOrganizationDepartment(
    @common.Req() request: Request,
    @common.Param() params: OrganizationDepartmentWhereUniqueInput
  ): Promise<TagOrganizationDepartment[]> {
    const query = plainToClass(
      TagOrganizationDepartmentFindManyArgs,
      request.query
    );
    const results = await this.service.findTagOrganizationDepartment(
      params.id,
      {
        ...query,
        select: {
          tag: {
            select: {
              id: true,
            },
          },

          organizationDepartment: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagOrganizationDepartment")
  async connectTagOrganizationDepartment(
    @common.Param() params: OrganizationDepartmentWhereUniqueInput,
    @common.Body() body: TagOrganizationDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagOrganizationDepartment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagOrganizationDepartment")
  async updateTagOrganizationDepartment(
    @common.Param() params: OrganizationDepartmentWhereUniqueInput,
    @common.Body() body: TagOrganizationDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagOrganizationDepartment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagOrganizationDepartment")
  async disconnectTagOrganizationDepartment(
    @common.Param() params: OrganizationDepartmentWhereUniqueInput,
    @common.Body() body: TagOrganizationDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagOrganizationDepartment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
