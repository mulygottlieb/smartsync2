/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationDepartmentArgs } from "./CreateOrganizationDepartmentArgs";
import { UpdateOrganizationDepartmentArgs } from "./UpdateOrganizationDepartmentArgs";
import { DeleteOrganizationDepartmentArgs } from "./DeleteOrganizationDepartmentArgs";
import { OrganizationDepartmentCountArgs } from "./OrganizationDepartmentCountArgs";
import { OrganizationDepartmentFindManyArgs } from "./OrganizationDepartmentFindManyArgs";
import { OrganizationDepartmentFindUniqueArgs } from "./OrganizationDepartmentFindUniqueArgs";
import { OrganizationDepartment } from "./OrganizationDepartment";
import { CandidateDepartmentFindManyArgs } from "../../candidateDepartment/base/CandidateDepartmentFindManyArgs";
import { CandidateDepartment } from "../../candidateDepartment/base/CandidateDepartment";
import { InviteOrganizationDepartmentFindManyArgs } from "../../inviteOrganizationDepartment/base/InviteOrganizationDepartmentFindManyArgs";
import { InviteOrganizationDepartment } from "../../inviteOrganizationDepartment/base/InviteOrganizationDepartment";
import { OrganizationDepartmentEmployeeFindManyArgs } from "../../organizationDepartmentEmployee/base/OrganizationDepartmentEmployeeFindManyArgs";
import { OrganizationDepartmentEmployee } from "../../organizationDepartmentEmployee/base/OrganizationDepartmentEmployee";
import { TagOrganizationDepartmentFindManyArgs } from "../../tagOrganizationDepartment/base/TagOrganizationDepartmentFindManyArgs";
import { TagOrganizationDepartment } from "../../tagOrganizationDepartment/base/TagOrganizationDepartment";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { OrganizationDepartmentService } from "../organizationDepartment.service";
@graphql.Resolver(() => OrganizationDepartment)
export class OrganizationDepartmentResolverBase {
  constructor(protected readonly service: OrganizationDepartmentService) {}

  async _organizationDepartmentsMeta(
    @graphql.Args() args: OrganizationDepartmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationDepartment])
  async organizationDepartments(
    @graphql.Args() args: OrganizationDepartmentFindManyArgs
  ): Promise<OrganizationDepartment[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationDepartment, { nullable: true })
  async organizationDepartment(
    @graphql.Args() args: OrganizationDepartmentFindUniqueArgs
  ): Promise<OrganizationDepartment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationDepartment)
  async createOrganizationDepartment(
    @graphql.Args() args: CreateOrganizationDepartmentArgs
  ): Promise<OrganizationDepartment> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OrganizationDepartment)
  async updateOrganizationDepartment(
    @graphql.Args() args: UpdateOrganizationDepartmentArgs
  ): Promise<OrganizationDepartment | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationDepartment)
  async deleteOrganizationDepartment(
    @graphql.Args() args: DeleteOrganizationDepartmentArgs
  ): Promise<OrganizationDepartment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CandidateDepartment], {
    name: "candidateDepartment",
  })
  async resolveFieldCandidateDepartment(
    @graphql.Parent() parent: OrganizationDepartment,
    @graphql.Args() args: CandidateDepartmentFindManyArgs
  ): Promise<CandidateDepartment[]> {
    const results = await this.service.findCandidateDepartment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [InviteOrganizationDepartment], {
    name: "inviteOrganizationDepartment",
  })
  async resolveFieldInviteOrganizationDepartment(
    @graphql.Parent() parent: OrganizationDepartment,
    @graphql.Args() args: InviteOrganizationDepartmentFindManyArgs
  ): Promise<InviteOrganizationDepartment[]> {
    const results = await this.service.findInviteOrganizationDepartment(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationDepartmentEmployee], {
    name: "organizationDepartmentEmployee",
  })
  async resolveFieldOrganizationDepartmentEmployee(
    @graphql.Parent() parent: OrganizationDepartment,
    @graphql.Args() args: OrganizationDepartmentEmployeeFindManyArgs
  ): Promise<OrganizationDepartmentEmployee[]> {
    const results = await this.service.findOrganizationDepartmentEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationDepartment], {
    name: "tagOrganizationDepartment",
  })
  async resolveFieldTagOrganizationDepartment(
    @graphql.Parent() parent: OrganizationDepartment,
    @graphql.Args() args: TagOrganizationDepartmentFindManyArgs
  ): Promise<TagOrganizationDepartment[]> {
    const results = await this.service.findTagOrganizationDepartment(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: OrganizationDepartment
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: OrganizationDepartment
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
