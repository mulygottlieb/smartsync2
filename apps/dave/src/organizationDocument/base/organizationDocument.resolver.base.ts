/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationDocumentArgs } from "./CreateOrganizationDocumentArgs";
import { UpdateOrganizationDocumentArgs } from "./UpdateOrganizationDocumentArgs";
import { DeleteOrganizationDocumentArgs } from "./DeleteOrganizationDocumentArgs";
import { OrganizationDocumentCountArgs } from "./OrganizationDocumentCountArgs";
import { OrganizationDocumentFindManyArgs } from "./OrganizationDocumentFindManyArgs";
import { OrganizationDocumentFindUniqueArgs } from "./OrganizationDocumentFindUniqueArgs";
import { OrganizationDocument } from "./OrganizationDocument";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { OrganizationDocumentService } from "../organizationDocument.service";
@graphql.Resolver(() => OrganizationDocument)
export class OrganizationDocumentResolverBase {
  constructor(protected readonly service: OrganizationDocumentService) {}

  async _organizationDocumentsMeta(
    @graphql.Args() args: OrganizationDocumentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationDocument])
  async organizationDocuments(
    @graphql.Args() args: OrganizationDocumentFindManyArgs
  ): Promise<OrganizationDocument[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationDocument, { nullable: true })
  async organizationDocument(
    @graphql.Args() args: OrganizationDocumentFindUniqueArgs
  ): Promise<OrganizationDocument | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationDocument)
  async createOrganizationDocument(
    @graphql.Args() args: CreateOrganizationDocumentArgs
  ): Promise<OrganizationDocument> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        imageAsset: args.data.imageAsset
          ? {
              connect: args.data.imageAsset,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OrganizationDocument)
  async updateOrganizationDocument(
    @graphql.Args() args: UpdateOrganizationDocumentArgs
  ): Promise<OrganizationDocument | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          imageAsset: args.data.imageAsset
            ? {
                connect: args.data.imageAsset,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationDocument)
  async deleteOrganizationDocument(
    @graphql.Args() args: DeleteOrganizationDocumentArgs
  ): Promise<OrganizationDocument | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: OrganizationDocument
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: OrganizationDocument
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ImageAsset, {
    nullable: true,
    name: "imageAsset",
  })
  async resolveFieldImageAsset(
    @graphql.Parent() parent: OrganizationDocument
  ): Promise<ImageAsset | null> {
    const result = await this.service.getImageAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
