/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationEmploymentTypeArgs } from "./CreateOrganizationEmploymentTypeArgs";
import { UpdateOrganizationEmploymentTypeArgs } from "./UpdateOrganizationEmploymentTypeArgs";
import { DeleteOrganizationEmploymentTypeArgs } from "./DeleteOrganizationEmploymentTypeArgs";
import { OrganizationEmploymentTypeCountArgs } from "./OrganizationEmploymentTypeCountArgs";
import { OrganizationEmploymentTypeFindManyArgs } from "./OrganizationEmploymentTypeFindManyArgs";
import { OrganizationEmploymentTypeFindUniqueArgs } from "./OrganizationEmploymentTypeFindUniqueArgs";
import { OrganizationEmploymentType } from "./OrganizationEmploymentType";
import { CandidateEmploymentTypeFindManyArgs } from "../../candidateEmploymentType/base/CandidateEmploymentTypeFindManyArgs";
import { CandidateEmploymentType } from "../../candidateEmploymentType/base/CandidateEmploymentType";
import { OrganizationEmploymentTypeEmployeeFindManyArgs } from "../../organizationEmploymentTypeEmployee/base/OrganizationEmploymentTypeEmployeeFindManyArgs";
import { OrganizationEmploymentTypeEmployee } from "../../organizationEmploymentTypeEmployee/base/OrganizationEmploymentTypeEmployee";
import { TagOrganizationEmploymentTypeFindManyArgs } from "../../tagOrganizationEmploymentType/base/TagOrganizationEmploymentTypeFindManyArgs";
import { TagOrganizationEmploymentType } from "../../tagOrganizationEmploymentType/base/TagOrganizationEmploymentType";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { OrganizationEmploymentTypeService } from "../organizationEmploymentType.service";
@graphql.Resolver(() => OrganizationEmploymentType)
export class OrganizationEmploymentTypeResolverBase {
  constructor(protected readonly service: OrganizationEmploymentTypeService) {}

  async _organizationEmploymentTypesMeta(
    @graphql.Args() args: OrganizationEmploymentTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationEmploymentType])
  async organizationEmploymentTypes(
    @graphql.Args() args: OrganizationEmploymentTypeFindManyArgs
  ): Promise<OrganizationEmploymentType[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationEmploymentType, { nullable: true })
  async organizationEmploymentType(
    @graphql.Args() args: OrganizationEmploymentTypeFindUniqueArgs
  ): Promise<OrganizationEmploymentType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationEmploymentType)
  async createOrganizationEmploymentType(
    @graphql.Args() args: CreateOrganizationEmploymentTypeArgs
  ): Promise<OrganizationEmploymentType> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OrganizationEmploymentType)
  async updateOrganizationEmploymentType(
    @graphql.Args() args: UpdateOrganizationEmploymentTypeArgs
  ): Promise<OrganizationEmploymentType | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationEmploymentType)
  async deleteOrganizationEmploymentType(
    @graphql.Args() args: DeleteOrganizationEmploymentTypeArgs
  ): Promise<OrganizationEmploymentType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CandidateEmploymentType], {
    name: "candidateEmploymentType",
  })
  async resolveFieldCandidateEmploymentType(
    @graphql.Parent() parent: OrganizationEmploymentType,
    @graphql.Args() args: CandidateEmploymentTypeFindManyArgs
  ): Promise<CandidateEmploymentType[]> {
    const results = await this.service.findCandidateEmploymentType(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationEmploymentTypeEmployee], {
    name: "organizationEmploymentTypeEmployee",
  })
  async resolveFieldOrganizationEmploymentTypeEmployee(
    @graphql.Parent() parent: OrganizationEmploymentType,
    @graphql.Args() args: OrganizationEmploymentTypeEmployeeFindManyArgs
  ): Promise<OrganizationEmploymentTypeEmployee[]> {
    const results = await this.service.findOrganizationEmploymentTypeEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationEmploymentType], {
    name: "tagOrganizationEmploymentType",
  })
  async resolveFieldTagOrganizationEmploymentType(
    @graphql.Parent() parent: OrganizationEmploymentType,
    @graphql.Args() args: TagOrganizationEmploymentTypeFindManyArgs
  ): Promise<TagOrganizationEmploymentType[]> {
    const results = await this.service.findTagOrganizationEmploymentType(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: OrganizationEmploymentType
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: OrganizationEmploymentType
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
