/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationEmploymentTypeEmployeeArgs } from "./CreateOrganizationEmploymentTypeEmployeeArgs";
import { UpdateOrganizationEmploymentTypeEmployeeArgs } from "./UpdateOrganizationEmploymentTypeEmployeeArgs";
import { DeleteOrganizationEmploymentTypeEmployeeArgs } from "./DeleteOrganizationEmploymentTypeEmployeeArgs";
import { OrganizationEmploymentTypeEmployeeCountArgs } from "./OrganizationEmploymentTypeEmployeeCountArgs";
import { OrganizationEmploymentTypeEmployeeFindManyArgs } from "./OrganizationEmploymentTypeEmployeeFindManyArgs";
import { OrganizationEmploymentTypeEmployeeFindUniqueArgs } from "./OrganizationEmploymentTypeEmployeeFindUniqueArgs";
import { OrganizationEmploymentTypeEmployee } from "./OrganizationEmploymentTypeEmployee";
import { OrganizationEmploymentType } from "../../organizationEmploymentType/base/OrganizationEmploymentType";
import { Employee } from "../../employee/base/Employee";
import { OrganizationEmploymentTypeEmployeeService } from "../organizationEmploymentTypeEmployee.service";
@graphql.Resolver(() => OrganizationEmploymentTypeEmployee)
export class OrganizationEmploymentTypeEmployeeResolverBase {
  constructor(
    protected readonly service: OrganizationEmploymentTypeEmployeeService
  ) {}

  async _organizationEmploymentTypeEmployeesMeta(
    @graphql.Args() args: OrganizationEmploymentTypeEmployeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationEmploymentTypeEmployee])
  async organizationEmploymentTypeEmployees(
    @graphql.Args() args: OrganizationEmploymentTypeEmployeeFindManyArgs
  ): Promise<OrganizationEmploymentTypeEmployee[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationEmploymentTypeEmployee, { nullable: true })
  async organizationEmploymentTypeEmployee(
    @graphql.Args() args: OrganizationEmploymentTypeEmployeeFindUniqueArgs
  ): Promise<OrganizationEmploymentTypeEmployee | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationEmploymentTypeEmployee)
  async createOrganizationEmploymentTypeEmployee(
    @graphql.Args() args: CreateOrganizationEmploymentTypeEmployeeArgs
  ): Promise<OrganizationEmploymentTypeEmployee> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationEmploymentType: {
          connect: args.data.organizationEmploymentType,
        },

        employee: {
          connect: args.data.employee,
        },
      },
    });
  }

  @graphql.Mutation(() => OrganizationEmploymentTypeEmployee)
  async updateOrganizationEmploymentTypeEmployee(
    @graphql.Args() args: UpdateOrganizationEmploymentTypeEmployeeArgs
  ): Promise<OrganizationEmploymentTypeEmployee | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationEmploymentType: {
            connect: args.data.organizationEmploymentType,
          },

          employee: {
            connect: args.data.employee,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationEmploymentTypeEmployee)
  async deleteOrganizationEmploymentTypeEmployee(
    @graphql.Args() args: DeleteOrganizationEmploymentTypeEmployeeArgs
  ): Promise<OrganizationEmploymentTypeEmployee | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => OrganizationEmploymentType, {
    nullable: true,
    name: "organizationEmploymentType",
  })
  async resolveFieldOrganizationEmploymentType(
    @graphql.Parent() parent: OrganizationEmploymentTypeEmployee
  ): Promise<OrganizationEmploymentType | null> {
    const result = await this.service.getOrganizationEmploymentType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: OrganizationEmploymentTypeEmployee
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
