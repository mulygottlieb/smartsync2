/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationLanguageArgs } from "./CreateOrganizationLanguageArgs";
import { UpdateOrganizationLanguageArgs } from "./UpdateOrganizationLanguageArgs";
import { DeleteOrganizationLanguageArgs } from "./DeleteOrganizationLanguageArgs";
import { OrganizationLanguageCountArgs } from "./OrganizationLanguageCountArgs";
import { OrganizationLanguageFindManyArgs } from "./OrganizationLanguageFindManyArgs";
import { OrganizationLanguageFindUniqueArgs } from "./OrganizationLanguageFindUniqueArgs";
import { OrganizationLanguage } from "./OrganizationLanguage";
import { Language } from "../../language/base/Language";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { OrganizationLanguageService } from "../organizationLanguage.service";
@graphql.Resolver(() => OrganizationLanguage)
export class OrganizationLanguageResolverBase {
  constructor(protected readonly service: OrganizationLanguageService) {}

  async _organizationLanguagesMeta(
    @graphql.Args() args: OrganizationLanguageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationLanguage])
  async organizationLanguages(
    @graphql.Args() args: OrganizationLanguageFindManyArgs
  ): Promise<OrganizationLanguage[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationLanguage, { nullable: true })
  async organizationLanguage(
    @graphql.Args() args: OrganizationLanguageFindUniqueArgs
  ): Promise<OrganizationLanguage | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationLanguage)
  async createOrganizationLanguage(
    @graphql.Args() args: CreateOrganizationLanguageArgs
  ): Promise<OrganizationLanguage> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        language: {
          connect: args.data.language,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OrganizationLanguage)
  async updateOrganizationLanguage(
    @graphql.Args() args: UpdateOrganizationLanguageArgs
  ): Promise<OrganizationLanguage | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          language: {
            connect: args.data.language,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationLanguage)
  async deleteOrganizationLanguage(
    @graphql.Args() args: DeleteOrganizationLanguageArgs
  ): Promise<OrganizationLanguage | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Language, {
    nullable: true,
    name: "language",
  })
  async resolveFieldLanguage(
    @graphql.Parent() parent: OrganizationLanguage
  ): Promise<Language | null> {
    const result = await this.service.getLanguage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: OrganizationLanguage
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: OrganizationLanguage
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
