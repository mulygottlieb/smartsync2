/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrganizationPositionService } from "../organizationPosition.service";
import { OrganizationPositionCreateInput } from "./OrganizationPositionCreateInput";
import { OrganizationPositionWhereInput } from "./OrganizationPositionWhereInput";
import { OrganizationPositionWhereUniqueInput } from "./OrganizationPositionWhereUniqueInput";
import { OrganizationPositionFindManyArgs } from "./OrganizationPositionFindManyArgs";
import { OrganizationPositionUpdateInput } from "./OrganizationPositionUpdateInput";
import { OrganizationPosition } from "./OrganizationPosition";
import { CandidateFindManyArgs } from "../../candidate/base/CandidateFindManyArgs";
import { Candidate } from "../../candidate/base/Candidate";
import { CandidateWhereUniqueInput } from "../../candidate/base/CandidateWhereUniqueInput";
import { EmployeeFindManyArgs } from "../../employee/base/EmployeeFindManyArgs";
import { Employee } from "../../employee/base/Employee";
import { EmployeeWhereUniqueInput } from "../../employee/base/EmployeeWhereUniqueInput";
import { TagOrganizationPositionFindManyArgs } from "../../tagOrganizationPosition/base/TagOrganizationPositionFindManyArgs";
import { TagOrganizationPosition } from "../../tagOrganizationPosition/base/TagOrganizationPosition";
import { TagOrganizationPositionWhereUniqueInput } from "../../tagOrganizationPosition/base/TagOrganizationPositionWhereUniqueInput";

export class OrganizationPositionControllerBase {
  constructor(protected readonly service: OrganizationPositionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrganizationPosition })
  async create(
    @common.Body() data: OrganizationPositionCreateInput
  ): Promise<OrganizationPosition> {
    return await this.service.create({
      data: {
        ...data,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OrganizationPosition] })
  @ApiNestedQuery(OrganizationPositionFindManyArgs)
  async findMany(
    @common.Req() request: Request
  ): Promise<OrganizationPosition[]> {
    const args = plainToClass(OrganizationPositionFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrganizationPosition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: OrganizationPositionWhereUniqueInput
  ): Promise<OrganizationPosition | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrganizationPosition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: OrganizationPositionWhereUniqueInput,
    @common.Body() data: OrganizationPositionUpdateInput
  ): Promise<OrganizationPosition | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrganizationPosition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: OrganizationPositionWhereUniqueInput
  ): Promise<OrganizationPosition | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/candidate")
  @ApiNestedQuery(CandidateFindManyArgs)
  async findManyCandidate(
    @common.Req() request: Request,
    @common.Param() params: OrganizationPositionWhereUniqueInput
  ): Promise<Candidate[]> {
    const query = plainToClass(CandidateFindManyArgs, request.query);
    const results = await this.service.findCandidate(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        rating: true,
        valueDate: true,
        appliedDate: true,
        hiredDate: true,
        status: true,
        rejectDate: true,
        candidateLevel: true,
        reWeeklyLimit: true,
        billRateCurrency: true,
        billRateValue: true,
        payPeriod: true,
        cvUrl: true,
        isArchived: true,
        minimumBillingRate: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationPosition: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        candidateSource: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidate")
  async connectCandidate(
    @common.Param() params: OrganizationPositionWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidate: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidate")
  async updateCandidate(
    @common.Param() params: OrganizationPositionWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidate: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidate")
  async disconnectCandidate(
    @common.Param() params: OrganizationPositionWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidate: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employee")
  @ApiNestedQuery(EmployeeFindManyArgs)
  async findManyEmployee(
    @common.Req() request: Request,
    @common.Param() params: OrganizationPositionWhereUniqueInput
  ): Promise<Employee[]> {
    const query = plainToClass(EmployeeFindManyArgs, request.query);
    const results = await this.service.findEmployee(params.id, {
      ...query,
      select: {
        endWork: true,
        facebookUrl: true,
        githubUrl: true,
        gitlabUrl: true,
        id: true,
        instagramUrl: true,
        isActive: true,
        isAway: true,
        isJobSearchActive: true,
        isOnline: true,
        isTrackingEnabled: true,
        isTrackingTime: true,
        isVerified: true,
        isVetted: true,
        jobSuccess: true,
        acceptDate: true,
        allowScreenshotCapture: true,
        anonymousBonus: true,
        averageBonus: true,
        averageExpenses: true,
        averageIncome: true,
        billRateCurrency: true,
        billRateValue: true,

        candidate: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deletedAt: true,
        description: true,
        employeeLevel: true,
        linkedInId: true,
        linkedInUrl: true,
        minimumBillingRate: true,
        offerDate: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationPosition: {
          select: {
            id: true,
          },
        },

        payPeriod: true,
        profileLink: true,
        rejectDate: true,
        reWeeklyLimit: true,
        shortDescription: true,
        showAnonymousBonus: true,
        showAverageBonus: true,
        showAverageExpenses: true,
        showAverageIncome: true,
        showBillrate: true,
        showPayperiod: true,
        showStartWorkOn: true,
        stackoverflowUrl: true,
        startedWorkOn: true,

        tenant: {
          select: {
            id: true,
          },
        },

        totalJobs: true,
        totalWorkHours: true,
        twitterUrl: true,
        updatedAt: true,
        upworkId: true,
        upworkUrl: true,

        user: {
          select: {
            id: true,
          },
        },

        valueDate: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employee")
  async connectEmployee(
    @common.Param() params: OrganizationPositionWhereUniqueInput,
    @common.Body() body: EmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employee")
  async updateEmployee(
    @common.Param() params: OrganizationPositionWhereUniqueInput,
    @common.Body() body: EmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employee")
  async disconnectEmployee(
    @common.Param() params: OrganizationPositionWhereUniqueInput,
    @common.Body() body: EmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagOrganizationPosition")
  @ApiNestedQuery(TagOrganizationPositionFindManyArgs)
  async findManyTagOrganizationPosition(
    @common.Req() request: Request,
    @common.Param() params: OrganizationPositionWhereUniqueInput
  ): Promise<TagOrganizationPosition[]> {
    const query = plainToClass(
      TagOrganizationPositionFindManyArgs,
      request.query
    );
    const results = await this.service.findTagOrganizationPosition(params.id, {
      ...query,
      select: {
        organizationPosition: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagOrganizationPosition")
  async connectTagOrganizationPosition(
    @common.Param() params: OrganizationPositionWhereUniqueInput,
    @common.Body() body: TagOrganizationPositionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagOrganizationPosition: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagOrganizationPosition")
  async updateTagOrganizationPosition(
    @common.Param() params: OrganizationPositionWhereUniqueInput,
    @common.Body() body: TagOrganizationPositionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagOrganizationPosition: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagOrganizationPosition")
  async disconnectTagOrganizationPosition(
    @common.Param() params: OrganizationPositionWhereUniqueInput,
    @common.Body() body: TagOrganizationPositionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagOrganizationPosition: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
