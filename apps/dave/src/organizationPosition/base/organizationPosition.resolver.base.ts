/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationPositionArgs } from "./CreateOrganizationPositionArgs";
import { UpdateOrganizationPositionArgs } from "./UpdateOrganizationPositionArgs";
import { DeleteOrganizationPositionArgs } from "./DeleteOrganizationPositionArgs";
import { OrganizationPositionCountArgs } from "./OrganizationPositionCountArgs";
import { OrganizationPositionFindManyArgs } from "./OrganizationPositionFindManyArgs";
import { OrganizationPositionFindUniqueArgs } from "./OrganizationPositionFindUniqueArgs";
import { OrganizationPosition } from "./OrganizationPosition";
import { CandidateFindManyArgs } from "../../candidate/base/CandidateFindManyArgs";
import { Candidate } from "../../candidate/base/Candidate";
import { EmployeeFindManyArgs } from "../../employee/base/EmployeeFindManyArgs";
import { Employee } from "../../employee/base/Employee";
import { TagOrganizationPositionFindManyArgs } from "../../tagOrganizationPosition/base/TagOrganizationPositionFindManyArgs";
import { TagOrganizationPosition } from "../../tagOrganizationPosition/base/TagOrganizationPosition";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { OrganizationPositionService } from "../organizationPosition.service";
@graphql.Resolver(() => OrganizationPosition)
export class OrganizationPositionResolverBase {
  constructor(protected readonly service: OrganizationPositionService) {}

  async _organizationPositionsMeta(
    @graphql.Args() args: OrganizationPositionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationPosition])
  async organizationPositions(
    @graphql.Args() args: OrganizationPositionFindManyArgs
  ): Promise<OrganizationPosition[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationPosition, { nullable: true })
  async organizationPosition(
    @graphql.Args() args: OrganizationPositionFindUniqueArgs
  ): Promise<OrganizationPosition | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationPosition)
  async createOrganizationPosition(
    @graphql.Args() args: CreateOrganizationPositionArgs
  ): Promise<OrganizationPosition> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OrganizationPosition)
  async updateOrganizationPosition(
    @graphql.Args() args: UpdateOrganizationPositionArgs
  ): Promise<OrganizationPosition | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationPosition)
  async deleteOrganizationPosition(
    @graphql.Args() args: DeleteOrganizationPositionArgs
  ): Promise<OrganizationPosition | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Candidate], { name: "candidate" })
  async resolveFieldCandidate(
    @graphql.Parent() parent: OrganizationPosition,
    @graphql.Args() args: CandidateFindManyArgs
  ): Promise<Candidate[]> {
    const results = await this.service.findCandidate(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Employee], { name: "employee" })
  async resolveFieldEmployee(
    @graphql.Parent() parent: OrganizationPosition,
    @graphql.Args() args: EmployeeFindManyArgs
  ): Promise<Employee[]> {
    const results = await this.service.findEmployee(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationPosition], {
    name: "tagOrganizationPosition",
  })
  async resolveFieldTagOrganizationPosition(
    @graphql.Parent() parent: OrganizationPosition,
    @graphql.Args() args: TagOrganizationPositionFindManyArgs
  ): Promise<TagOrganizationPosition[]> {
    const results = await this.service.findTagOrganizationPosition(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: OrganizationPosition
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: OrganizationPosition
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
