/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsDate,
  IsOptional,
  IsBoolean,
  IsInt,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { OrganizationContact } from "../../organizationContact/base/OrganizationContact";
import { Activity } from "../../activity/base/Activity";
import { Expense } from "../../expense/base/Expense";
import { InviteOrganizationProject } from "../../inviteOrganizationProject/base/InviteOrganizationProject";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { IssueType } from "../../issueType/base/IssueType";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { OrganizationProjectEmployee } from "../../organizationProjectEmployee/base/OrganizationProjectEmployee";
import { OrganizationSprint } from "../../organizationSprint/base/OrganizationSprint";
import { OrganizationTaskSetting } from "../../organizationTaskSetting/base/OrganizationTaskSetting";
import { Payment } from "../../payment/base/Payment";
import { TagOrganizationProject } from "../../tagOrganizationProject/base/TagOrganizationProject";
import { Task } from "../../task/base/Task";
import { TaskPriority } from "../../taskPriority/base/TaskPriority";
import { TaskRelatedIssueType } from "../../taskRelatedIssueType/base/TaskRelatedIssueType";
import { TaskSize } from "../../taskSize/base/TaskSize";
import { TaskStatus } from "../../taskStatus/base/TaskStatus";
import { TaskVersion } from "../../taskVersion/base/TaskVersion";
import { TimeLog } from "../../timeLog/base/TimeLog";

@ObjectType()
class OrganizationProject {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  startDate!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  endDate!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  billing!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  currency!: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  publicField!: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  owner!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  taskListType!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  color!: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  billable!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  billingFlat!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  openSource!: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  projectUrl!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  openSourceProjectUrl!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  budget!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  budgetType!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  membersCount!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  imageUrl!: string | null;

  @ApiProperty({
    required: false,
    type: () => ImageAsset,
  })
  @ValidateNested()
  @Type(() => ImageAsset)
  @IsOptional()
  imageAsset?: ImageAsset | null;

  @ApiProperty({
    required: false,
    type: () => Tenant,
  })
  @ValidateNested()
  @Type(() => Tenant)
  @IsOptional()
  tenant?: Tenant | null;

  @ApiProperty({
    required: false,
    type: () => Organization,
  })
  @ValidateNested()
  @Type(() => Organization)
  @IsOptional()
  organization?: Organization | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationContact,
  })
  @ValidateNested()
  @Type(() => OrganizationContact)
  @IsOptional()
  organizationContact?: OrganizationContact | null;

  @ApiProperty({
    required: false,
    type: () => [Activity],
  })
  @ValidateNested()
  @Type(() => Activity)
  @IsOptional()
  activity?: Array<Activity>;

  @ApiProperty({
    required: false,
    type: () => [Expense],
  })
  @ValidateNested()
  @Type(() => Expense)
  @IsOptional()
  expense?: Array<Expense>;

  @ApiProperty({
    required: false,
    type: () => [InviteOrganizationProject],
  })
  @ValidateNested()
  @Type(() => InviteOrganizationProject)
  @IsOptional()
  inviteOrganizationProject?: Array<InviteOrganizationProject>;

  @ApiProperty({
    required: false,
    type: () => [InvoiceItem],
  })
  @ValidateNested()
  @Type(() => InvoiceItem)
  @IsOptional()
  invoiceItem?: Array<InvoiceItem>;

  @ApiProperty({
    required: false,
    type: () => [IssueType],
  })
  @ValidateNested()
  @Type(() => IssueType)
  @IsOptional()
  issueType?: Array<IssueType>;

  @ApiProperty({
    required: false,
    type: () => [KeyResult],
  })
  @ValidateNested()
  @Type(() => KeyResult)
  @IsOptional()
  keyResult?: Array<KeyResult>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationProjectEmployee],
  })
  @ValidateNested()
  @Type(() => OrganizationProjectEmployee)
  @IsOptional()
  organizationProjectEmployee?: Array<OrganizationProjectEmployee>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationSprint],
  })
  @ValidateNested()
  @Type(() => OrganizationSprint)
  @IsOptional()
  organizationSprint?: Array<OrganizationSprint>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationTaskSetting],
  })
  @ValidateNested()
  @Type(() => OrganizationTaskSetting)
  @IsOptional()
  organizationTaskSetting?: Array<OrganizationTaskSetting>;

  @ApiProperty({
    required: false,
    type: () => [Payment],
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payment?: Array<Payment>;

  @ApiProperty({
    required: false,
    type: () => [TagOrganizationProject],
  })
  @ValidateNested()
  @Type(() => TagOrganizationProject)
  @IsOptional()
  tagOrganizationProject?: Array<TagOrganizationProject>;

  @ApiProperty({
    required: false,
    type: () => [Task],
  })
  @ValidateNested()
  @Type(() => Task)
  @IsOptional()
  task?: Array<Task>;

  @ApiProperty({
    required: false,
    type: () => [TaskPriority],
  })
  @ValidateNested()
  @Type(() => TaskPriority)
  @IsOptional()
  taskPriority?: Array<TaskPriority>;

  @ApiProperty({
    required: false,
    type: () => [TaskRelatedIssueType],
  })
  @ValidateNested()
  @Type(() => TaskRelatedIssueType)
  @IsOptional()
  taskRelatedIssueType?: Array<TaskRelatedIssueType>;

  @ApiProperty({
    required: false,
    type: () => [TaskSize],
  })
  @ValidateNested()
  @Type(() => TaskSize)
  @IsOptional()
  taskSize?: Array<TaskSize>;

  @ApiProperty({
    required: false,
    type: () => [TaskStatus],
  })
  @ValidateNested()
  @Type(() => TaskStatus)
  @IsOptional()
  taskStatus?: Array<TaskStatus>;

  @ApiProperty({
    required: false,
    type: () => [TaskVersion],
  })
  @ValidateNested()
  @Type(() => TaskVersion)
  @IsOptional()
  taskVersion?: Array<TaskVersion>;

  @ApiProperty({
    required: false,
    type: () => [TimeLog],
  })
  @ValidateNested()
  @Type(() => TimeLog)
  @IsOptional()
  timeLog?: Array<TimeLog>;
}

export { OrganizationProject as OrganizationProject };
