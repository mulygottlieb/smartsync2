/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsDate,
  IsOptional,
  IsBoolean,
  IsInt,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { ImageAssetWhereUniqueInput } from "../../imageAsset/base/ImageAssetWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { OrganizationContactWhereUniqueInput } from "../../organizationContact/base/OrganizationContactWhereUniqueInput";
import { ActivityCreateNestedManyWithoutOrganizationProjectsInput } from "./ActivityCreateNestedManyWithoutOrganizationProjectsInput";
import { ExpenseCreateNestedManyWithoutOrganizationProjectsInput } from "./ExpenseCreateNestedManyWithoutOrganizationProjectsInput";
import { InviteOrganizationProjectCreateNestedManyWithoutOrganizationProjectsInput } from "./InviteOrganizationProjectCreateNestedManyWithoutOrganizationProjectsInput";
import { InvoiceItemCreateNestedManyWithoutOrganizationProjectsInput } from "./InvoiceItemCreateNestedManyWithoutOrganizationProjectsInput";
import { IssueTypeCreateNestedManyWithoutOrganizationProjectsInput } from "./IssueTypeCreateNestedManyWithoutOrganizationProjectsInput";
import { KeyResultCreateNestedManyWithoutOrganizationProjectsInput } from "./KeyResultCreateNestedManyWithoutOrganizationProjectsInput";
import { OrganizationProjectEmployeeCreateNestedManyWithoutOrganizationProjectsInput } from "./OrganizationProjectEmployeeCreateNestedManyWithoutOrganizationProjectsInput";
import { OrganizationSprintCreateNestedManyWithoutOrganizationProjectsInput } from "./OrganizationSprintCreateNestedManyWithoutOrganizationProjectsInput";
import { OrganizationTaskSettingCreateNestedManyWithoutOrganizationProjectsInput } from "./OrganizationTaskSettingCreateNestedManyWithoutOrganizationProjectsInput";
import { PaymentCreateNestedManyWithoutOrganizationProjectsInput } from "./PaymentCreateNestedManyWithoutOrganizationProjectsInput";
import { TagOrganizationProjectCreateNestedManyWithoutOrganizationProjectsInput } from "./TagOrganizationProjectCreateNestedManyWithoutOrganizationProjectsInput";
import { TaskCreateNestedManyWithoutOrganizationProjectsInput } from "./TaskCreateNestedManyWithoutOrganizationProjectsInput";
import { TaskPriorityCreateNestedManyWithoutOrganizationProjectsInput } from "./TaskPriorityCreateNestedManyWithoutOrganizationProjectsInput";
import { TaskRelatedIssueTypeCreateNestedManyWithoutOrganizationProjectsInput } from "./TaskRelatedIssueTypeCreateNestedManyWithoutOrganizationProjectsInput";
import { TaskSizeCreateNestedManyWithoutOrganizationProjectsInput } from "./TaskSizeCreateNestedManyWithoutOrganizationProjectsInput";
import { TaskStatusCreateNestedManyWithoutOrganizationProjectsInput } from "./TaskStatusCreateNestedManyWithoutOrganizationProjectsInput";
import { TaskVersionCreateNestedManyWithoutOrganizationProjectsInput } from "./TaskVersionCreateNestedManyWithoutOrganizationProjectsInput";
import { TimeLogCreateNestedManyWithoutOrganizationProjectsInput } from "./TimeLogCreateNestedManyWithoutOrganizationProjectsInput";

@InputType()
class OrganizationProjectCreateInput {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  startDate?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  endDate?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  billing?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  currency?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  publicField?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  owner?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  taskListType!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  color?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  billable?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  billingFlat?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  openSource?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  projectUrl?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  openSourceProjectUrl?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  budget?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  budgetType?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  membersCount?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  imageUrl?: string | null;

  @ApiProperty({
    required: false,
    type: () => ImageAssetWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ImageAssetWhereUniqueInput)
  @IsOptional()
  @Field(() => ImageAssetWhereUniqueInput, {
    nullable: true,
  })
  imageAsset?: ImageAssetWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organization?: OrganizationWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationContactWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationContactWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationContactWhereUniqueInput, {
    nullable: true,
  })
  organizationContact?: OrganizationContactWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ActivityCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(() => ActivityCreateNestedManyWithoutOrganizationProjectsInput)
  @IsOptional()
  @Field(() => ActivityCreateNestedManyWithoutOrganizationProjectsInput, {
    nullable: true,
  })
  activity?: ActivityCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () => ExpenseCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(() => ExpenseCreateNestedManyWithoutOrganizationProjectsInput)
  @IsOptional()
  @Field(() => ExpenseCreateNestedManyWithoutOrganizationProjectsInput, {
    nullable: true,
  })
  expense?: ExpenseCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () =>
      InviteOrganizationProjectCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(
    () =>
      InviteOrganizationProjectCreateNestedManyWithoutOrganizationProjectsInput
  )
  @IsOptional()
  @Field(
    () =>
      InviteOrganizationProjectCreateNestedManyWithoutOrganizationProjectsInput,
    {
      nullable: true,
    }
  )
  inviteOrganizationProject?: InviteOrganizationProjectCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () => InvoiceItemCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(() => InvoiceItemCreateNestedManyWithoutOrganizationProjectsInput)
  @IsOptional()
  @Field(() => InvoiceItemCreateNestedManyWithoutOrganizationProjectsInput, {
    nullable: true,
  })
  invoiceItem?: InvoiceItemCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () => IssueTypeCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(() => IssueTypeCreateNestedManyWithoutOrganizationProjectsInput)
  @IsOptional()
  @Field(() => IssueTypeCreateNestedManyWithoutOrganizationProjectsInput, {
    nullable: true,
  })
  issueType?: IssueTypeCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () => KeyResultCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(() => KeyResultCreateNestedManyWithoutOrganizationProjectsInput)
  @IsOptional()
  @Field(() => KeyResultCreateNestedManyWithoutOrganizationProjectsInput, {
    nullable: true,
  })
  keyResult?: KeyResultCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () =>
      OrganizationProjectEmployeeCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(
    () =>
      OrganizationProjectEmployeeCreateNestedManyWithoutOrganizationProjectsInput
  )
  @IsOptional()
  @Field(
    () =>
      OrganizationProjectEmployeeCreateNestedManyWithoutOrganizationProjectsInput,
    {
      nullable: true,
    }
  )
  organizationProjectEmployee?: OrganizationProjectEmployeeCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () =>
      OrganizationSprintCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(
    () => OrganizationSprintCreateNestedManyWithoutOrganizationProjectsInput
  )
  @IsOptional()
  @Field(
    () => OrganizationSprintCreateNestedManyWithoutOrganizationProjectsInput,
    {
      nullable: true,
    }
  )
  organizationSprint?: OrganizationSprintCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () =>
      OrganizationTaskSettingCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(
    () =>
      OrganizationTaskSettingCreateNestedManyWithoutOrganizationProjectsInput
  )
  @IsOptional()
  @Field(
    () =>
      OrganizationTaskSettingCreateNestedManyWithoutOrganizationProjectsInput,
    {
      nullable: true,
    }
  )
  organizationTaskSetting?: OrganizationTaskSettingCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () => PaymentCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(() => PaymentCreateNestedManyWithoutOrganizationProjectsInput)
  @IsOptional()
  @Field(() => PaymentCreateNestedManyWithoutOrganizationProjectsInput, {
    nullable: true,
  })
  payment?: PaymentCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () =>
      TagOrganizationProjectCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(
    () => TagOrganizationProjectCreateNestedManyWithoutOrganizationProjectsInput
  )
  @IsOptional()
  @Field(
    () =>
      TagOrganizationProjectCreateNestedManyWithoutOrganizationProjectsInput,
    {
      nullable: true,
    }
  )
  tagOrganizationProject?: TagOrganizationProjectCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () => TaskCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(() => TaskCreateNestedManyWithoutOrganizationProjectsInput)
  @IsOptional()
  @Field(() => TaskCreateNestedManyWithoutOrganizationProjectsInput, {
    nullable: true,
  })
  task?: TaskCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () => TaskPriorityCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(() => TaskPriorityCreateNestedManyWithoutOrganizationProjectsInput)
  @IsOptional()
  @Field(() => TaskPriorityCreateNestedManyWithoutOrganizationProjectsInput, {
    nullable: true,
  })
  taskPriority?: TaskPriorityCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () =>
      TaskRelatedIssueTypeCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(
    () => TaskRelatedIssueTypeCreateNestedManyWithoutOrganizationProjectsInput
  )
  @IsOptional()
  @Field(
    () => TaskRelatedIssueTypeCreateNestedManyWithoutOrganizationProjectsInput,
    {
      nullable: true,
    }
  )
  taskRelatedIssueType?: TaskRelatedIssueTypeCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () => TaskSizeCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(() => TaskSizeCreateNestedManyWithoutOrganizationProjectsInput)
  @IsOptional()
  @Field(() => TaskSizeCreateNestedManyWithoutOrganizationProjectsInput, {
    nullable: true,
  })
  taskSize?: TaskSizeCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () => TaskStatusCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(() => TaskStatusCreateNestedManyWithoutOrganizationProjectsInput)
  @IsOptional()
  @Field(() => TaskStatusCreateNestedManyWithoutOrganizationProjectsInput, {
    nullable: true,
  })
  taskStatus?: TaskStatusCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () => TaskVersionCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(() => TaskVersionCreateNestedManyWithoutOrganizationProjectsInput)
  @IsOptional()
  @Field(() => TaskVersionCreateNestedManyWithoutOrganizationProjectsInput, {
    nullable: true,
  })
  taskVersion?: TaskVersionCreateNestedManyWithoutOrganizationProjectsInput;

  @ApiProperty({
    required: false,
    type: () => TimeLogCreateNestedManyWithoutOrganizationProjectsInput,
  })
  @ValidateNested()
  @Type(() => TimeLogCreateNestedManyWithoutOrganizationProjectsInput)
  @IsOptional()
  @Field(() => TimeLogCreateNestedManyWithoutOrganizationProjectsInput, {
    nullable: true,
  })
  timeLog?: TimeLogCreateNestedManyWithoutOrganizationProjectsInput;
}

export { OrganizationProjectCreateInput as OrganizationProjectCreateInput };
