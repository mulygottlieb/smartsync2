/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested } from "class-validator";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { BooleanNullableFilter } from "../../util/BooleanNullableFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { ImageAssetWhereUniqueInput } from "../../imageAsset/base/ImageAssetWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { OrganizationContactWhereUniqueInput } from "../../organizationContact/base/OrganizationContactWhereUniqueInput";
import { ActivityListRelationFilter } from "../../activity/base/ActivityListRelationFilter";
import { ExpenseListRelationFilter } from "../../expense/base/ExpenseListRelationFilter";
import { InviteOrganizationProjectListRelationFilter } from "../../inviteOrganizationProject/base/InviteOrganizationProjectListRelationFilter";
import { InvoiceItemListRelationFilter } from "../../invoiceItem/base/InvoiceItemListRelationFilter";
import { IssueTypeListRelationFilter } from "../../issueType/base/IssueTypeListRelationFilter";
import { KeyResultListRelationFilter } from "../../keyResult/base/KeyResultListRelationFilter";
import { OrganizationProjectEmployeeListRelationFilter } from "../../organizationProjectEmployee/base/OrganizationProjectEmployeeListRelationFilter";
import { OrganizationSprintListRelationFilter } from "../../organizationSprint/base/OrganizationSprintListRelationFilter";
import { OrganizationTaskSettingListRelationFilter } from "../../organizationTaskSetting/base/OrganizationTaskSettingListRelationFilter";
import { PaymentListRelationFilter } from "../../payment/base/PaymentListRelationFilter";
import { TagOrganizationProjectListRelationFilter } from "../../tagOrganizationProject/base/TagOrganizationProjectListRelationFilter";
import { TaskListRelationFilter } from "../../task/base/TaskListRelationFilter";
import { TaskPriorityListRelationFilter } from "../../taskPriority/base/TaskPriorityListRelationFilter";
import { TaskRelatedIssueTypeListRelationFilter } from "../../taskRelatedIssueType/base/TaskRelatedIssueTypeListRelationFilter";
import { TaskSizeListRelationFilter } from "../../taskSize/base/TaskSizeListRelationFilter";
import { TaskStatusListRelationFilter } from "../../taskStatus/base/TaskStatusListRelationFilter";
import { TaskVersionListRelationFilter } from "../../taskVersion/base/TaskVersionListRelationFilter";
import { TimeLogListRelationFilter } from "../../timeLog/base/TimeLogListRelationFilter";

@InputType()
class OrganizationProjectWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  createdAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  name?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  startDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  endDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  billing?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  currency?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  publicField?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  owner?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  taskListType?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  code?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  description?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  color?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  billable?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  billingFlat?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  openSource?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  projectUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  openSourceProjectUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  budget?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  budgetType?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  membersCount?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  imageUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ImageAssetWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ImageAssetWhereUniqueInput)
  @IsOptional()
  @Field(() => ImageAssetWhereUniqueInput, {
    nullable: true,
  })
  imageAsset?: ImageAssetWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organization?: OrganizationWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationContactWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationContactWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationContactWhereUniqueInput, {
    nullable: true,
  })
  organizationContact?: OrganizationContactWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ActivityListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ActivityListRelationFilter)
  @IsOptional()
  @Field(() => ActivityListRelationFilter, {
    nullable: true,
  })
  activity?: ActivityListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ExpenseListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ExpenseListRelationFilter)
  @IsOptional()
  @Field(() => ExpenseListRelationFilter, {
    nullable: true,
  })
  expense?: ExpenseListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => InviteOrganizationProjectListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InviteOrganizationProjectListRelationFilter)
  @IsOptional()
  @Field(() => InviteOrganizationProjectListRelationFilter, {
    nullable: true,
  })
  inviteOrganizationProject?: InviteOrganizationProjectListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => InvoiceItemListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InvoiceItemListRelationFilter)
  @IsOptional()
  @Field(() => InvoiceItemListRelationFilter, {
    nullable: true,
  })
  invoiceItem?: InvoiceItemListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => IssueTypeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => IssueTypeListRelationFilter)
  @IsOptional()
  @Field(() => IssueTypeListRelationFilter, {
    nullable: true,
  })
  issueType?: IssueTypeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => KeyResultListRelationFilter,
  })
  @ValidateNested()
  @Type(() => KeyResultListRelationFilter)
  @IsOptional()
  @Field(() => KeyResultListRelationFilter, {
    nullable: true,
  })
  keyResult?: KeyResultListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationProjectEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationProjectEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationProjectEmployeeListRelationFilter, {
    nullable: true,
  })
  organizationProjectEmployee?: OrganizationProjectEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationSprintListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationSprintListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationSprintListRelationFilter, {
    nullable: true,
  })
  organizationSprint?: OrganizationSprintListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationTaskSettingListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationTaskSettingListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationTaskSettingListRelationFilter, {
    nullable: true,
  })
  organizationTaskSetting?: OrganizationTaskSettingListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => PaymentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PaymentListRelationFilter)
  @IsOptional()
  @Field(() => PaymentListRelationFilter, {
    nullable: true,
  })
  payment?: PaymentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TagOrganizationProjectListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TagOrganizationProjectListRelationFilter)
  @IsOptional()
  @Field(() => TagOrganizationProjectListRelationFilter, {
    nullable: true,
  })
  tagOrganizationProject?: TagOrganizationProjectListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TaskListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TaskListRelationFilter)
  @IsOptional()
  @Field(() => TaskListRelationFilter, {
    nullable: true,
  })
  task?: TaskListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TaskPriorityListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TaskPriorityListRelationFilter)
  @IsOptional()
  @Field(() => TaskPriorityListRelationFilter, {
    nullable: true,
  })
  taskPriority?: TaskPriorityListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TaskRelatedIssueTypeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TaskRelatedIssueTypeListRelationFilter)
  @IsOptional()
  @Field(() => TaskRelatedIssueTypeListRelationFilter, {
    nullable: true,
  })
  taskRelatedIssueType?: TaskRelatedIssueTypeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TaskSizeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TaskSizeListRelationFilter)
  @IsOptional()
  @Field(() => TaskSizeListRelationFilter, {
    nullable: true,
  })
  taskSize?: TaskSizeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TaskStatusListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TaskStatusListRelationFilter)
  @IsOptional()
  @Field(() => TaskStatusListRelationFilter, {
    nullable: true,
  })
  taskStatus?: TaskStatusListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TaskVersionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TaskVersionListRelationFilter)
  @IsOptional()
  @Field(() => TaskVersionListRelationFilter, {
    nullable: true,
  })
  taskVersion?: TaskVersionListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TimeLogListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TimeLogListRelationFilter)
  @IsOptional()
  @Field(() => TimeLogListRelationFilter, {
    nullable: true,
  })
  timeLog?: TimeLogListRelationFilter;
}

export { OrganizationProjectWhereInput as OrganizationProjectWhereInput };
