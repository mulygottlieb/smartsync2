/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrganizationProjectService } from "../organizationProject.service";
import { OrganizationProjectCreateInput } from "./OrganizationProjectCreateInput";
import { OrganizationProjectWhereInput } from "./OrganizationProjectWhereInput";
import { OrganizationProjectWhereUniqueInput } from "./OrganizationProjectWhereUniqueInput";
import { OrganizationProjectFindManyArgs } from "./OrganizationProjectFindManyArgs";
import { OrganizationProjectUpdateInput } from "./OrganizationProjectUpdateInput";
import { OrganizationProject } from "./OrganizationProject";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { ActivityWhereUniqueInput } from "../../activity/base/ActivityWhereUniqueInput";
import { ExpenseFindManyArgs } from "../../expense/base/ExpenseFindManyArgs";
import { Expense } from "../../expense/base/Expense";
import { ExpenseWhereUniqueInput } from "../../expense/base/ExpenseWhereUniqueInput";
import { InviteOrganizationProjectFindManyArgs } from "../../inviteOrganizationProject/base/InviteOrganizationProjectFindManyArgs";
import { InviteOrganizationProject } from "../../inviteOrganizationProject/base/InviteOrganizationProject";
import { InviteOrganizationProjectWhereUniqueInput } from "../../inviteOrganizationProject/base/InviteOrganizationProjectWhereUniqueInput";
import { InvoiceItemFindManyArgs } from "../../invoiceItem/base/InvoiceItemFindManyArgs";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { InvoiceItemWhereUniqueInput } from "../../invoiceItem/base/InvoiceItemWhereUniqueInput";
import { IssueTypeFindManyArgs } from "../../issueType/base/IssueTypeFindManyArgs";
import { IssueType } from "../../issueType/base/IssueType";
import { IssueTypeWhereUniqueInput } from "../../issueType/base/IssueTypeWhereUniqueInput";
import { KeyResultFindManyArgs } from "../../keyResult/base/KeyResultFindManyArgs";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { KeyResultWhereUniqueInput } from "../../keyResult/base/KeyResultWhereUniqueInput";
import { OrganizationProjectEmployeeFindManyArgs } from "../../organizationProjectEmployee/base/OrganizationProjectEmployeeFindManyArgs";
import { OrganizationProjectEmployee } from "../../organizationProjectEmployee/base/OrganizationProjectEmployee";
import { OrganizationProjectEmployeeWhereUniqueInput } from "../../organizationProjectEmployee/base/OrganizationProjectEmployeeWhereUniqueInput";
import { OrganizationSprintFindManyArgs } from "../../organizationSprint/base/OrganizationSprintFindManyArgs";
import { OrganizationSprint } from "../../organizationSprint/base/OrganizationSprint";
import { OrganizationSprintWhereUniqueInput } from "../../organizationSprint/base/OrganizationSprintWhereUniqueInput";
import { OrganizationTaskSettingFindManyArgs } from "../../organizationTaskSetting/base/OrganizationTaskSettingFindManyArgs";
import { OrganizationTaskSetting } from "../../organizationTaskSetting/base/OrganizationTaskSetting";
import { OrganizationTaskSettingWhereUniqueInput } from "../../organizationTaskSetting/base/OrganizationTaskSettingWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { TagOrganizationProjectFindManyArgs } from "../../tagOrganizationProject/base/TagOrganizationProjectFindManyArgs";
import { TagOrganizationProject } from "../../tagOrganizationProject/base/TagOrganizationProject";
import { TagOrganizationProjectWhereUniqueInput } from "../../tagOrganizationProject/base/TagOrganizationProjectWhereUniqueInput";
import { TaskFindManyArgs } from "../../task/base/TaskFindManyArgs";
import { Task } from "../../task/base/Task";
import { TaskWhereUniqueInput } from "../../task/base/TaskWhereUniqueInput";
import { TaskPriorityFindManyArgs } from "../../taskPriority/base/TaskPriorityFindManyArgs";
import { TaskPriority } from "../../taskPriority/base/TaskPriority";
import { TaskPriorityWhereUniqueInput } from "../../taskPriority/base/TaskPriorityWhereUniqueInput";
import { TaskRelatedIssueTypeFindManyArgs } from "../../taskRelatedIssueType/base/TaskRelatedIssueTypeFindManyArgs";
import { TaskRelatedIssueType } from "../../taskRelatedIssueType/base/TaskRelatedIssueType";
import { TaskRelatedIssueTypeWhereUniqueInput } from "../../taskRelatedIssueType/base/TaskRelatedIssueTypeWhereUniqueInput";
import { TaskSizeFindManyArgs } from "../../taskSize/base/TaskSizeFindManyArgs";
import { TaskSize } from "../../taskSize/base/TaskSize";
import { TaskSizeWhereUniqueInput } from "../../taskSize/base/TaskSizeWhereUniqueInput";
import { TaskStatusFindManyArgs } from "../../taskStatus/base/TaskStatusFindManyArgs";
import { TaskStatus } from "../../taskStatus/base/TaskStatus";
import { TaskStatusWhereUniqueInput } from "../../taskStatus/base/TaskStatusWhereUniqueInput";
import { TaskVersionFindManyArgs } from "../../taskVersion/base/TaskVersionFindManyArgs";
import { TaskVersion } from "../../taskVersion/base/TaskVersion";
import { TaskVersionWhereUniqueInput } from "../../taskVersion/base/TaskVersionWhereUniqueInput";
import { TimeLogFindManyArgs } from "../../timeLog/base/TimeLogFindManyArgs";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { TimeLogWhereUniqueInput } from "../../timeLog/base/TimeLogWhereUniqueInput";

export class OrganizationProjectControllerBase {
  constructor(protected readonly service: OrganizationProjectService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrganizationProject })
  async create(
    @common.Body() data: OrganizationProjectCreateInput
  ): Promise<OrganizationProject> {
    return await this.service.create({
      data: {
        ...data,

        imageAsset: data.imageAsset
          ? {
              connect: data.imageAsset,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        organizationContact: data.organizationContact
          ? {
              connect: data.organizationContact,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        startDate: true,
        endDate: true,
        billing: true,
        currency: true,
        publicField: true,
        owner: true,
        taskListType: true,
        code: true,
        description: true,
        color: true,
        billable: true,
        billingFlat: true,
        openSource: true,
        projectUrl: true,
        openSourceProjectUrl: true,
        budget: true,
        budgetType: true,
        membersCount: true,
        imageUrl: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OrganizationProject] })
  @ApiNestedQuery(OrganizationProjectFindManyArgs)
  async findMany(
    @common.Req() request: Request
  ): Promise<OrganizationProject[]> {
    const args = plainToClass(OrganizationProjectFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        startDate: true,
        endDate: true,
        billing: true,
        currency: true,
        publicField: true,
        owner: true,
        taskListType: true,
        code: true,
        description: true,
        color: true,
        billable: true,
        billingFlat: true,
        openSource: true,
        projectUrl: true,
        openSourceProjectUrl: true,
        budget: true,
        budgetType: true,
        membersCount: true,
        imageUrl: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrganizationProject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<OrganizationProject | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        startDate: true,
        endDate: true,
        billing: true,
        currency: true,
        publicField: true,
        owner: true,
        taskListType: true,
        code: true,
        description: true,
        color: true,
        billable: true,
        billingFlat: true,
        openSource: true,
        projectUrl: true,
        openSourceProjectUrl: true,
        budget: true,
        budgetType: true,
        membersCount: true,
        imageUrl: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrganizationProject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() data: OrganizationProjectUpdateInput
  ): Promise<OrganizationProject | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          imageAsset: data.imageAsset
            ? {
                connect: data.imageAsset,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          organizationContact: data.organizationContact
            ? {
                connect: data.organizationContact,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          startDate: true,
          endDate: true,
          billing: true,
          currency: true,
          publicField: true,
          owner: true,
          taskListType: true,
          code: true,
          description: true,
          color: true,
          billable: true,
          billingFlat: true,
          openSource: true,
          projectUrl: true,
          openSourceProjectUrl: true,
          budget: true,
          budgetType: true,
          membersCount: true,
          imageUrl: true,

          imageAsset: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          organizationContact: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrganizationProject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<OrganizationProject | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          startDate: true,
          endDate: true,
          billing: true,
          currency: true,
          publicField: true,
          owner: true,
          taskListType: true,
          code: true,
          description: true,
          color: true,
          billable: true,
          billingFlat: true,
          openSource: true,
          projectUrl: true,
          openSourceProjectUrl: true,
          budget: true,
          budgetType: true,
          membersCount: true,
          imageUrl: true,

          imageAsset: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          organizationContact: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/activity")
  @ApiNestedQuery(ActivityFindManyArgs)
  async findManyActivity(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<Activity[]> {
    const query = plainToClass(ActivityFindManyArgs, request.query);
    const results = await this.service.findActivity(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        metaData: true,
        date: true,
        time: true,
        duration: true,
        typeField: true,
        source: true,
        deletedAt: true,
        recordedAt: true,

        task: {
          select: {
            id: true,
          },
        },

        timeSlot: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/activity")
  async connectActivity(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/activity")
  async updateActivity(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/activity")
  async disconnectActivity(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/expense")
  @ApiNestedQuery(ExpenseFindManyArgs)
  async findManyExpense(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<Expense[]> {
    const query = plainToClass(ExpenseFindManyArgs, request.query);
    const results = await this.service.findExpense(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        typeOfExpense: true,
        notes: true,
        currency: true,
        valueDate: true,
        purpose: true,
        taxType: true,
        taxLabel: true,
        rateValue: true,
        receipt: true,
        splitExpense: true,
        reference: true,
        status: true,

        organizationContact: {
          select: {
            id: true,
          },
        },

        expenseCategory: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationVendor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/expense")
  async connectExpense(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expense: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/expense")
  async updateExpense(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expense: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/expense")
  async disconnectExpense(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expense: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/inviteOrganizationProject")
  @ApiNestedQuery(InviteOrganizationProjectFindManyArgs)
  async findManyInviteOrganizationProject(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<InviteOrganizationProject[]> {
    const query = plainToClass(
      InviteOrganizationProjectFindManyArgs,
      request.query
    );
    const results = await this.service.findInviteOrganizationProject(
      params.id,
      {
        ...query,
        select: {
          invite: {
            select: {
              id: true,
            },
          },

          organizationProject: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/inviteOrganizationProject")
  async connectInviteOrganizationProject(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: InviteOrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationProject: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/inviteOrganizationProject")
  async updateInviteOrganizationProject(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: InviteOrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationProject: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/inviteOrganizationProject")
  async disconnectInviteOrganizationProject(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: InviteOrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationProject: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/invoiceItem")
  @ApiNestedQuery(InvoiceItemFindManyArgs)
  async findManyInvoiceItem(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<InvoiceItem[]> {
    const query = plainToClass(InvoiceItemFindManyArgs, request.query);
    const results = await this.service.findInvoiceItem(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        price: true,
        quantity: true,
        totalValue: true,
        applyTax: true,
        applyDiscount: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        invoice: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        expense: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoiceItem")
  async connectInvoiceItem(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoiceItem")
  async updateInvoiceItem(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoiceItem")
  async disconnectInvoiceItem(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/issueType")
  @ApiNestedQuery(IssueTypeFindManyArgs)
  async findManyIssueType(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<IssueType[]> {
    const query = plainToClass(IssueTypeFindManyArgs, request.query);
    const results = await this.service.findIssueType(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/issueType")
  async connectIssueType(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: IssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      issueType: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/issueType")
  async updateIssueType(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: IssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      issueType: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/issueType")
  async disconnectIssueType(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: IssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      issueType: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/keyResult")
  @ApiNestedQuery(KeyResultFindManyArgs)
  async findManyKeyResult(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<KeyResult[]> {
    const query = plainToClass(KeyResultFindManyArgs, request.query);
    const results = await this.service.findKeyResult(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        typeField: true,
        targetValue: true,
        initialValue: true,
        unit: true,
        update: true,
        progress: true,
        deadline: true,
        hardDeadline: true,
        softDeadline: true,
        status: true,
        weight: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        goalKpi: {
          select: {
            id: true,
          },
        },

        employeeKeyResultOwnerIdToemployee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employeeKeyResultLeadIdToemployee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        goalKeyResultGoalIdTogoal: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/keyResult")
  async connectKeyResult(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResult: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/keyResult")
  async updateKeyResult(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResult: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/keyResult")
  async disconnectKeyResult(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResult: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationProjectEmployee")
  @ApiNestedQuery(OrganizationProjectEmployeeFindManyArgs)
  async findManyOrganizationProjectEmployee(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<OrganizationProjectEmployee[]> {
    const query = plainToClass(
      OrganizationProjectEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationProjectEmployee(
      params.id,
      {
        ...query,
        select: {
          organizationProject: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationProjectEmployee")
  async connectOrganizationProjectEmployee(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: OrganizationProjectEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationProjectEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationProjectEmployee")
  async updateOrganizationProjectEmployee(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: OrganizationProjectEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationProjectEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationProjectEmployee")
  async disconnectOrganizationProjectEmployee(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: OrganizationProjectEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationProjectEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationSprint")
  @ApiNestedQuery(OrganizationSprintFindManyArgs)
  async findManyOrganizationSprint(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<OrganizationSprint[]> {
    const query = plainToClass(OrganizationSprintFindManyArgs, request.query);
    const results = await this.service.findOrganizationSprint(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        goal: true,

        tenant: {
          select: {
            id: true,
          },
        },

        length: true,
        startDate: true,
        endDate: true,
        dayStart: true,
        isActive: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationSprint")
  async connectOrganizationSprint(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: OrganizationSprintWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationSprint: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationSprint")
  async updateOrganizationSprint(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: OrganizationSprintWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationSprint: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationSprint")
  async disconnectOrganizationSprint(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: OrganizationSprintWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationSprint: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationTaskSetting")
  @ApiNestedQuery(OrganizationTaskSettingFindManyArgs)
  async findManyOrganizationTaskSetting(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<OrganizationTaskSetting[]> {
    const query = plainToClass(
      OrganizationTaskSettingFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationTaskSetting(params.id, {
      ...query,
      select: {
        isTasksCommentsEnabled: true,
        id: true,
        createdAt: true,
        updatedAt: true,
        isTasksPrivacyEnabled: true,
        isTasksMultipleAssigneesEnabled: true,
        isTasksManualTimeEnabled: true,
        isTasksGroupEstimationEnabled: true,
        isTasksHistoryEnabled: true,
        isTasksAcceptanceCriteriaEnabled: true,
        isTasksDraftsEnabled: true,
        isTasksEstimationInHoursEnabled: true,
        isTasksEstimationInStoryPointsEnabled: true,
        isTasksProofOfCompletionEnabled: true,
        tasksProofOfCompletionType: true,
        isTasksLinkedEnabled: true,
        isTasksNotifyLeftEnabled: true,
        tasksNotifyLeftPeriodDays: true,
        isTasksAutoCloseEnabled: true,
        tasksAutoClosePeriodDays: true,
        isTasksAutoArchiveEnabled: true,
        tasksAutoArchivePeriodDays: true,
        isTasksAutoStatusEnabled: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationTaskSetting")
  async connectOrganizationTaskSetting(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: OrganizationTaskSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTaskSetting: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationTaskSetting")
  async updateOrganizationTaskSetting(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: OrganizationTaskSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTaskSetting: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationTaskSetting")
  async disconnectOrganizationTaskSetting(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: OrganizationTaskSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTaskSetting: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/payment")
  @ApiNestedQuery(PaymentFindManyArgs)
  async findManyPayment(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayment(params.id, {
      ...query,
      select: {
        invoice: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        id: true,
        createdAt: true,
        updatedAt: true,
        paymentDate: true,
        amount: true,
        note: true,
        currency: true,
        overdue: true,
        paymentMethod: true,

        user: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payment")
  async connectPayment(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payment")
  async updatePayment(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payment")
  async disconnectPayment(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagOrganizationProject")
  @ApiNestedQuery(TagOrganizationProjectFindManyArgs)
  async findManyTagOrganizationProject(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<TagOrganizationProject[]> {
    const query = plainToClass(
      TagOrganizationProjectFindManyArgs,
      request.query
    );
    const results = await this.service.findTagOrganizationProject(params.id, {
      ...query,
      select: {
        tag: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagOrganizationProject")
  async connectTagOrganizationProject(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TagOrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagOrganizationProject: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagOrganizationProject")
  async updateTagOrganizationProject(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TagOrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagOrganizationProject: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagOrganizationProject")
  async disconnectTagOrganizationProject(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TagOrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagOrganizationProject: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/task")
  @ApiNestedQuery(TaskFindManyArgs)
  async findManyTask(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<Task[]> {
    const query = plainToClass(TaskFindManyArgs, request.query);
    const results = await this.service.findTask(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        status: true,
        estimate: true,
        dueDate: true,
        numberField: true,
        prefix: true,
        priority: true,
        size: true,
        publicField: true,
        startDate: true,
        resolvedAt: true,
        version: true,
        issueType: true,

        organizationSprint: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/task")
  async connectTask(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      task: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/task")
  async updateTask(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      task: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/task")
  async disconnectTask(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      task: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskPriority")
  @ApiNestedQuery(TaskPriorityFindManyArgs)
  async findManyTaskPriority(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<TaskPriority[]> {
    const query = plainToClass(TaskPriorityFindManyArgs, request.query);
    const results = await this.service.findTaskPriority(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskPriority")
  async connectTaskPriority(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskPriorityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskPriority: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskPriority")
  async updateTaskPriority(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskPriorityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskPriority: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskPriority")
  async disconnectTaskPriority(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskPriorityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskPriority: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskRelatedIssueType")
  @ApiNestedQuery(TaskRelatedIssueTypeFindManyArgs)
  async findManyTaskRelatedIssueType(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<TaskRelatedIssueType[]> {
    const query = plainToClass(TaskRelatedIssueTypeFindManyArgs, request.query);
    const results = await this.service.findTaskRelatedIssueType(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskRelatedIssueType")
  async connectTaskRelatedIssueType(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskRelatedIssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskRelatedIssueType: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskRelatedIssueType")
  async updateTaskRelatedIssueType(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskRelatedIssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskRelatedIssueType: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskRelatedIssueType")
  async disconnectTaskRelatedIssueType(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskRelatedIssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskRelatedIssueType: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskSize")
  @ApiNestedQuery(TaskSizeFindManyArgs)
  async findManyTaskSize(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<TaskSize[]> {
    const query = plainToClass(TaskSizeFindManyArgs, request.query);
    const results = await this.service.findTaskSize(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskSize")
  async connectTaskSize(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskSizeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskSize: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskSize")
  async updateTaskSize(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskSizeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskSize: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskSize")
  async disconnectTaskSize(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskSizeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskSize: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskStatus")
  @ApiNestedQuery(TaskStatusFindManyArgs)
  async findManyTaskStatus(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<TaskStatus[]> {
    const query = plainToClass(TaskStatusFindManyArgs, request.query);
    const results = await this.service.findTaskStatus(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskStatus")
  async connectTaskStatus(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskStatus: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskStatus")
  async updateTaskStatus(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskStatus: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskStatus")
  async disconnectTaskStatus(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskStatus: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskVersion")
  @ApiNestedQuery(TaskVersionFindManyArgs)
  async findManyTaskVersion(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<TaskVersion[]> {
    const query = plainToClass(TaskVersionFindManyArgs, request.query);
    const results = await this.service.findTaskVersion(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskVersion")
  async connectTaskVersion(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskVersionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskVersion: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskVersion")
  async updateTaskVersion(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskVersionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskVersion: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskVersion")
  async disconnectTaskVersion(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TaskVersionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskVersion: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeLog")
  @ApiNestedQuery(TimeLogFindManyArgs)
  async findManyTimeLog(
    @common.Req() request: Request,
    @common.Param() params: OrganizationProjectWhereUniqueInput
  ): Promise<TimeLog[]> {
    const query = plainToClass(TimeLogFindManyArgs, request.query);
    const results = await this.service.findTimeLog(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startedAt: true,
        stoppedAt: true,
        logType: true,
        source: true,
        description: true,
        reason: true,
        isBillable: true,
        deletedAt: true,
        isRunning: true,
        version: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        timesheet: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeLog")
  async connectTimeLog(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeLog")
  async updateTimeLog(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeLog")
  async disconnectTimeLog(
    @common.Param() params: OrganizationProjectWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
