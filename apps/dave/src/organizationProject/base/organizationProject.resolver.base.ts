/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationProjectArgs } from "./CreateOrganizationProjectArgs";
import { UpdateOrganizationProjectArgs } from "./UpdateOrganizationProjectArgs";
import { DeleteOrganizationProjectArgs } from "./DeleteOrganizationProjectArgs";
import { OrganizationProjectCountArgs } from "./OrganizationProjectCountArgs";
import { OrganizationProjectFindManyArgs } from "./OrganizationProjectFindManyArgs";
import { OrganizationProjectFindUniqueArgs } from "./OrganizationProjectFindUniqueArgs";
import { OrganizationProject } from "./OrganizationProject";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { ExpenseFindManyArgs } from "../../expense/base/ExpenseFindManyArgs";
import { Expense } from "../../expense/base/Expense";
import { InviteOrganizationProjectFindManyArgs } from "../../inviteOrganizationProject/base/InviteOrganizationProjectFindManyArgs";
import { InviteOrganizationProject } from "../../inviteOrganizationProject/base/InviteOrganizationProject";
import { InvoiceItemFindManyArgs } from "../../invoiceItem/base/InvoiceItemFindManyArgs";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { IssueTypeFindManyArgs } from "../../issueType/base/IssueTypeFindManyArgs";
import { IssueType } from "../../issueType/base/IssueType";
import { KeyResultFindManyArgs } from "../../keyResult/base/KeyResultFindManyArgs";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { OrganizationProjectEmployeeFindManyArgs } from "../../organizationProjectEmployee/base/OrganizationProjectEmployeeFindManyArgs";
import { OrganizationProjectEmployee } from "../../organizationProjectEmployee/base/OrganizationProjectEmployee";
import { OrganizationSprintFindManyArgs } from "../../organizationSprint/base/OrganizationSprintFindManyArgs";
import { OrganizationSprint } from "../../organizationSprint/base/OrganizationSprint";
import { OrganizationTaskSettingFindManyArgs } from "../../organizationTaskSetting/base/OrganizationTaskSettingFindManyArgs";
import { OrganizationTaskSetting } from "../../organizationTaskSetting/base/OrganizationTaskSetting";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { TagOrganizationProjectFindManyArgs } from "../../tagOrganizationProject/base/TagOrganizationProjectFindManyArgs";
import { TagOrganizationProject } from "../../tagOrganizationProject/base/TagOrganizationProject";
import { TaskFindManyArgs } from "../../task/base/TaskFindManyArgs";
import { Task } from "../../task/base/Task";
import { TaskPriorityFindManyArgs } from "../../taskPriority/base/TaskPriorityFindManyArgs";
import { TaskPriority } from "../../taskPriority/base/TaskPriority";
import { TaskRelatedIssueTypeFindManyArgs } from "../../taskRelatedIssueType/base/TaskRelatedIssueTypeFindManyArgs";
import { TaskRelatedIssueType } from "../../taskRelatedIssueType/base/TaskRelatedIssueType";
import { TaskSizeFindManyArgs } from "../../taskSize/base/TaskSizeFindManyArgs";
import { TaskSize } from "../../taskSize/base/TaskSize";
import { TaskStatusFindManyArgs } from "../../taskStatus/base/TaskStatusFindManyArgs";
import { TaskStatus } from "../../taskStatus/base/TaskStatus";
import { TaskVersionFindManyArgs } from "../../taskVersion/base/TaskVersionFindManyArgs";
import { TaskVersion } from "../../taskVersion/base/TaskVersion";
import { TimeLogFindManyArgs } from "../../timeLog/base/TimeLogFindManyArgs";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { OrganizationContact } from "../../organizationContact/base/OrganizationContact";
import { OrganizationProjectService } from "../organizationProject.service";
@graphql.Resolver(() => OrganizationProject)
export class OrganizationProjectResolverBase {
  constructor(protected readonly service: OrganizationProjectService) {}

  async _organizationProjectsMeta(
    @graphql.Args() args: OrganizationProjectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationProject])
  async organizationProjects(
    @graphql.Args() args: OrganizationProjectFindManyArgs
  ): Promise<OrganizationProject[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationProject, { nullable: true })
  async organizationProject(
    @graphql.Args() args: OrganizationProjectFindUniqueArgs
  ): Promise<OrganizationProject | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationProject)
  async createOrganizationProject(
    @graphql.Args() args: CreateOrganizationProjectArgs
  ): Promise<OrganizationProject> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        imageAsset: args.data.imageAsset
          ? {
              connect: args.data.imageAsset,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        organizationContact: args.data.organizationContact
          ? {
              connect: args.data.organizationContact,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OrganizationProject)
  async updateOrganizationProject(
    @graphql.Args() args: UpdateOrganizationProjectArgs
  ): Promise<OrganizationProject | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          imageAsset: args.data.imageAsset
            ? {
                connect: args.data.imageAsset,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          organizationContact: args.data.organizationContact
            ? {
                connect: args.data.organizationContact,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationProject)
  async deleteOrganizationProject(
    @graphql.Args() args: DeleteOrganizationProjectArgs
  ): Promise<OrganizationProject | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Activity], { name: "activity" })
  async resolveFieldActivity(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: ActivityFindManyArgs
  ): Promise<Activity[]> {
    const results = await this.service.findActivity(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Expense], { name: "expense" })
  async resolveFieldExpense(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: ExpenseFindManyArgs
  ): Promise<Expense[]> {
    const results = await this.service.findExpense(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [InviteOrganizationProject], {
    name: "inviteOrganizationProject",
  })
  async resolveFieldInviteOrganizationProject(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: InviteOrganizationProjectFindManyArgs
  ): Promise<InviteOrganizationProject[]> {
    const results = await this.service.findInviteOrganizationProject(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [InvoiceItem], { name: "invoiceItem" })
  async resolveFieldInvoiceItem(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: InvoiceItemFindManyArgs
  ): Promise<InvoiceItem[]> {
    const results = await this.service.findInvoiceItem(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [IssueType], { name: "issueType" })
  async resolveFieldIssueType(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: IssueTypeFindManyArgs
  ): Promise<IssueType[]> {
    const results = await this.service.findIssueType(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [KeyResult], { name: "keyResult" })
  async resolveFieldKeyResult(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: KeyResultFindManyArgs
  ): Promise<KeyResult[]> {
    const results = await this.service.findKeyResult(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationProjectEmployee], {
    name: "organizationProjectEmployee",
  })
  async resolveFieldOrganizationProjectEmployee(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: OrganizationProjectEmployeeFindManyArgs
  ): Promise<OrganizationProjectEmployee[]> {
    const results = await this.service.findOrganizationProjectEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationSprint], {
    name: "organizationSprint",
  })
  async resolveFieldOrganizationSprint(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: OrganizationSprintFindManyArgs
  ): Promise<OrganizationSprint[]> {
    const results = await this.service.findOrganizationSprint(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationTaskSetting], {
    name: "organizationTaskSetting",
  })
  async resolveFieldOrganizationTaskSetting(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: OrganizationTaskSettingFindManyArgs
  ): Promise<OrganizationTaskSetting[]> {
    const results = await this.service.findOrganizationTaskSetting(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Payment], { name: "payment" })
  async resolveFieldPayment(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationProject], {
    name: "tagOrganizationProject",
  })
  async resolveFieldTagOrganizationProject(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: TagOrganizationProjectFindManyArgs
  ): Promise<TagOrganizationProject[]> {
    const results = await this.service.findTagOrganizationProject(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Task], { name: "task" })
  async resolveFieldTask(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: TaskFindManyArgs
  ): Promise<Task[]> {
    const results = await this.service.findTask(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskPriority], { name: "taskPriority" })
  async resolveFieldTaskPriority(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: TaskPriorityFindManyArgs
  ): Promise<TaskPriority[]> {
    const results = await this.service.findTaskPriority(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskRelatedIssueType], {
    name: "taskRelatedIssueType",
  })
  async resolveFieldTaskRelatedIssueType(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: TaskRelatedIssueTypeFindManyArgs
  ): Promise<TaskRelatedIssueType[]> {
    const results = await this.service.findTaskRelatedIssueType(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskSize], { name: "taskSize" })
  async resolveFieldTaskSize(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: TaskSizeFindManyArgs
  ): Promise<TaskSize[]> {
    const results = await this.service.findTaskSize(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskStatus], { name: "taskStatus" })
  async resolveFieldTaskStatus(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: TaskStatusFindManyArgs
  ): Promise<TaskStatus[]> {
    const results = await this.service.findTaskStatus(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskVersion], { name: "taskVersion" })
  async resolveFieldTaskVersion(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: TaskVersionFindManyArgs
  ): Promise<TaskVersion[]> {
    const results = await this.service.findTaskVersion(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeLog], { name: "timeLog" })
  async resolveFieldTimeLog(
    @graphql.Parent() parent: OrganizationProject,
    @graphql.Args() args: TimeLogFindManyArgs
  ): Promise<TimeLog[]> {
    const results = await this.service.findTimeLog(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => ImageAsset, {
    nullable: true,
    name: "imageAsset",
  })
  async resolveFieldImageAsset(
    @graphql.Parent() parent: OrganizationProject
  ): Promise<ImageAsset | null> {
    const result = await this.service.getImageAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: OrganizationProject
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: OrganizationProject
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationContact, {
    nullable: true,
    name: "organizationContact",
  })
  async resolveFieldOrganizationContact(
    @graphql.Parent() parent: OrganizationProject
  ): Promise<OrganizationContact | null> {
    const result = await this.service.getOrganizationContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
