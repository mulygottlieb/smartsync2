/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationProjectEmployeeArgs } from "./CreateOrganizationProjectEmployeeArgs";
import { UpdateOrganizationProjectEmployeeArgs } from "./UpdateOrganizationProjectEmployeeArgs";
import { DeleteOrganizationProjectEmployeeArgs } from "./DeleteOrganizationProjectEmployeeArgs";
import { OrganizationProjectEmployeeCountArgs } from "./OrganizationProjectEmployeeCountArgs";
import { OrganizationProjectEmployeeFindManyArgs } from "./OrganizationProjectEmployeeFindManyArgs";
import { OrganizationProjectEmployeeFindUniqueArgs } from "./OrganizationProjectEmployeeFindUniqueArgs";
import { OrganizationProjectEmployee } from "./OrganizationProjectEmployee";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { Employee } from "../../employee/base/Employee";
import { OrganizationProjectEmployeeService } from "../organizationProjectEmployee.service";
@graphql.Resolver(() => OrganizationProjectEmployee)
export class OrganizationProjectEmployeeResolverBase {
  constructor(protected readonly service: OrganizationProjectEmployeeService) {}

  async _organizationProjectEmployeesMeta(
    @graphql.Args() args: OrganizationProjectEmployeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationProjectEmployee])
  async organizationProjectEmployees(
    @graphql.Args() args: OrganizationProjectEmployeeFindManyArgs
  ): Promise<OrganizationProjectEmployee[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationProjectEmployee, { nullable: true })
  async organizationProjectEmployee(
    @graphql.Args() args: OrganizationProjectEmployeeFindUniqueArgs
  ): Promise<OrganizationProjectEmployee | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationProjectEmployee)
  async createOrganizationProjectEmployee(
    @graphql.Args() args: CreateOrganizationProjectEmployeeArgs
  ): Promise<OrganizationProjectEmployee> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationProject: {
          connect: args.data.organizationProject,
        },

        employee: {
          connect: args.data.employee,
        },
      },
    });
  }

  @graphql.Mutation(() => OrganizationProjectEmployee)
  async updateOrganizationProjectEmployee(
    @graphql.Args() args: UpdateOrganizationProjectEmployeeArgs
  ): Promise<OrganizationProjectEmployee | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationProject: {
            connect: args.data.organizationProject,
          },

          employee: {
            connect: args.data.employee,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationProjectEmployee)
  async deleteOrganizationProjectEmployee(
    @graphql.Args() args: DeleteOrganizationProjectEmployeeArgs
  ): Promise<OrganizationProjectEmployee | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => OrganizationProject, {
    nullable: true,
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: OrganizationProjectEmployee
  ): Promise<OrganizationProject | null> {
    const result = await this.service.getOrganizationProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: OrganizationProjectEmployee
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
