/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationRecurringExpenseArgs } from "./CreateOrganizationRecurringExpenseArgs";
import { UpdateOrganizationRecurringExpenseArgs } from "./UpdateOrganizationRecurringExpenseArgs";
import { DeleteOrganizationRecurringExpenseArgs } from "./DeleteOrganizationRecurringExpenseArgs";
import { OrganizationRecurringExpenseCountArgs } from "./OrganizationRecurringExpenseCountArgs";
import { OrganizationRecurringExpenseFindManyArgs } from "./OrganizationRecurringExpenseFindManyArgs";
import { OrganizationRecurringExpenseFindUniqueArgs } from "./OrganizationRecurringExpenseFindUniqueArgs";
import { OrganizationRecurringExpense } from "./OrganizationRecurringExpense";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { OrganizationRecurringExpenseService } from "../organizationRecurringExpense.service";
@graphql.Resolver(() => OrganizationRecurringExpense)
export class OrganizationRecurringExpenseResolverBase {
  constructor(
    protected readonly service: OrganizationRecurringExpenseService
  ) {}

  async _organizationRecurringExpensesMeta(
    @graphql.Args() args: OrganizationRecurringExpenseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationRecurringExpense])
  async organizationRecurringExpenses(
    @graphql.Args() args: OrganizationRecurringExpenseFindManyArgs
  ): Promise<OrganizationRecurringExpense[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationRecurringExpense, { nullable: true })
  async organizationRecurringExpense(
    @graphql.Args() args: OrganizationRecurringExpenseFindUniqueArgs
  ): Promise<OrganizationRecurringExpense | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationRecurringExpense)
  async createOrganizationRecurringExpense(
    @graphql.Args() args: CreateOrganizationRecurringExpenseArgs
  ): Promise<OrganizationRecurringExpense> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OrganizationRecurringExpense)
  async updateOrganizationRecurringExpense(
    @graphql.Args() args: UpdateOrganizationRecurringExpenseArgs
  ): Promise<OrganizationRecurringExpense | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationRecurringExpense)
  async deleteOrganizationRecurringExpense(
    @graphql.Args() args: DeleteOrganizationRecurringExpenseArgs
  ): Promise<OrganizationRecurringExpense | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: OrganizationRecurringExpense
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: OrganizationRecurringExpense
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
