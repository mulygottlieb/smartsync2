/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrganizationSprintService } from "../organizationSprint.service";
import { OrganizationSprintCreateInput } from "./OrganizationSprintCreateInput";
import { OrganizationSprintWhereInput } from "./OrganizationSprintWhereInput";
import { OrganizationSprintWhereUniqueInput } from "./OrganizationSprintWhereUniqueInput";
import { OrganizationSprintFindManyArgs } from "./OrganizationSprintFindManyArgs";
import { OrganizationSprintUpdateInput } from "./OrganizationSprintUpdateInput";
import { OrganizationSprint } from "./OrganizationSprint";
import { TaskFindManyArgs } from "../../task/base/TaskFindManyArgs";
import { Task } from "../../task/base/Task";
import { TaskWhereUniqueInput } from "../../task/base/TaskWhereUniqueInput";

export class OrganizationSprintControllerBase {
  constructor(protected readonly service: OrganizationSprintService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrganizationSprint })
  async create(
    @common.Body() data: OrganizationSprintCreateInput
  ): Promise<OrganizationSprint> {
    return await this.service.create({
      data: {
        ...data,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        organizationProject: {
          connect: data.organizationProject,
        },
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        goal: true,

        tenant: {
          select: {
            id: true,
          },
        },

        length: true,
        startDate: true,
        endDate: true,
        dayStart: true,
        isActive: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OrganizationSprint] })
  @ApiNestedQuery(OrganizationSprintFindManyArgs)
  async findMany(
    @common.Req() request: Request
  ): Promise<OrganizationSprint[]> {
    const args = plainToClass(OrganizationSprintFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        goal: true,

        tenant: {
          select: {
            id: true,
          },
        },

        length: true,
        startDate: true,
        endDate: true,
        dayStart: true,
        isActive: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrganizationSprint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: OrganizationSprintWhereUniqueInput
  ): Promise<OrganizationSprint | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        goal: true,

        tenant: {
          select: {
            id: true,
          },
        },

        length: true,
        startDate: true,
        endDate: true,
        dayStart: true,
        isActive: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrganizationSprint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: OrganizationSprintWhereUniqueInput,
    @common.Body() data: OrganizationSprintUpdateInput
  ): Promise<OrganizationSprint | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          organizationProject: {
            connect: data.organizationProject,
          },
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          goal: true,

          tenant: {
            select: {
              id: true,
            },
          },

          length: true,
          startDate: true,
          endDate: true,
          dayStart: true,
          isActive: true,

          organization: {
            select: {
              id: true,
            },
          },

          organizationProject: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrganizationSprint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: OrganizationSprintWhereUniqueInput
  ): Promise<OrganizationSprint | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          goal: true,

          tenant: {
            select: {
              id: true,
            },
          },

          length: true,
          startDate: true,
          endDate: true,
          dayStart: true,
          isActive: true,

          organization: {
            select: {
              id: true,
            },
          },

          organizationProject: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/task")
  @ApiNestedQuery(TaskFindManyArgs)
  async findManyTask(
    @common.Req() request: Request,
    @common.Param() params: OrganizationSprintWhereUniqueInput
  ): Promise<Task[]> {
    const query = plainToClass(TaskFindManyArgs, request.query);
    const results = await this.service.findTask(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        status: true,
        estimate: true,
        dueDate: true,
        numberField: true,
        prefix: true,
        priority: true,
        size: true,
        publicField: true,
        startDate: true,
        resolvedAt: true,
        version: true,
        issueType: true,

        organizationSprint: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/task")
  async connectTask(
    @common.Param() params: OrganizationSprintWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      task: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/task")
  async updateTask(
    @common.Param() params: OrganizationSprintWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      task: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/task")
  async disconnectTask(
    @common.Param() params: OrganizationSprintWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      task: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
