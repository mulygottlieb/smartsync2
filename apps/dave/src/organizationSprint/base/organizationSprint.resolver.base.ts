/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationSprintArgs } from "./CreateOrganizationSprintArgs";
import { UpdateOrganizationSprintArgs } from "./UpdateOrganizationSprintArgs";
import { DeleteOrganizationSprintArgs } from "./DeleteOrganizationSprintArgs";
import { OrganizationSprintCountArgs } from "./OrganizationSprintCountArgs";
import { OrganizationSprintFindManyArgs } from "./OrganizationSprintFindManyArgs";
import { OrganizationSprintFindUniqueArgs } from "./OrganizationSprintFindUniqueArgs";
import { OrganizationSprint } from "./OrganizationSprint";
import { TaskFindManyArgs } from "../../task/base/TaskFindManyArgs";
import { Task } from "../../task/base/Task";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { OrganizationSprintService } from "../organizationSprint.service";
@graphql.Resolver(() => OrganizationSprint)
export class OrganizationSprintResolverBase {
  constructor(protected readonly service: OrganizationSprintService) {}

  async _organizationSprintsMeta(
    @graphql.Args() args: OrganizationSprintCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationSprint])
  async organizationSprints(
    @graphql.Args() args: OrganizationSprintFindManyArgs
  ): Promise<OrganizationSprint[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationSprint, { nullable: true })
  async organizationSprint(
    @graphql.Args() args: OrganizationSprintFindUniqueArgs
  ): Promise<OrganizationSprint | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationSprint)
  async createOrganizationSprint(
    @graphql.Args() args: CreateOrganizationSprintArgs
  ): Promise<OrganizationSprint> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        organizationProject: {
          connect: args.data.organizationProject,
        },
      },
    });
  }

  @graphql.Mutation(() => OrganizationSprint)
  async updateOrganizationSprint(
    @graphql.Args() args: UpdateOrganizationSprintArgs
  ): Promise<OrganizationSprint | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          organizationProject: {
            connect: args.data.organizationProject,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationSprint)
  async deleteOrganizationSprint(
    @graphql.Args() args: DeleteOrganizationSprintArgs
  ): Promise<OrganizationSprint | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Task], { name: "task" })
  async resolveFieldTask(
    @graphql.Parent() parent: OrganizationSprint,
    @graphql.Args() args: TaskFindManyArgs
  ): Promise<Task[]> {
    const results = await this.service.findTask(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: OrganizationSprint
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: OrganizationSprint
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationProject, {
    nullable: true,
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: OrganizationSprint
  ): Promise<OrganizationProject | null> {
    const result = await this.service.getOrganizationProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
