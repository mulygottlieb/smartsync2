/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationTaskSettingArgs } from "./CreateOrganizationTaskSettingArgs";
import { UpdateOrganizationTaskSettingArgs } from "./UpdateOrganizationTaskSettingArgs";
import { DeleteOrganizationTaskSettingArgs } from "./DeleteOrganizationTaskSettingArgs";
import { OrganizationTaskSettingCountArgs } from "./OrganizationTaskSettingCountArgs";
import { OrganizationTaskSettingFindManyArgs } from "./OrganizationTaskSettingFindManyArgs";
import { OrganizationTaskSettingFindUniqueArgs } from "./OrganizationTaskSettingFindUniqueArgs";
import { OrganizationTaskSetting } from "./OrganizationTaskSetting";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { OrganizationTaskSettingService } from "../organizationTaskSetting.service";
@graphql.Resolver(() => OrganizationTaskSetting)
export class OrganizationTaskSettingResolverBase {
  constructor(protected readonly service: OrganizationTaskSettingService) {}

  async _organizationTaskSettingsMeta(
    @graphql.Args() args: OrganizationTaskSettingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationTaskSetting])
  async organizationTaskSettings(
    @graphql.Args() args: OrganizationTaskSettingFindManyArgs
  ): Promise<OrganizationTaskSetting[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationTaskSetting, { nullable: true })
  async organizationTaskSetting(
    @graphql.Args() args: OrganizationTaskSettingFindUniqueArgs
  ): Promise<OrganizationTaskSetting | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationTaskSetting)
  async createOrganizationTaskSetting(
    @graphql.Args() args: CreateOrganizationTaskSettingArgs
  ): Promise<OrganizationTaskSetting> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationProject: args.data.organizationProject
          ? {
              connect: args.data.organizationProject,
            }
          : undefined,

        organizationTeam: args.data.organizationTeam
          ? {
              connect: args.data.organizationTeam,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OrganizationTaskSetting)
  async updateOrganizationTaskSetting(
    @graphql.Args() args: UpdateOrganizationTaskSettingArgs
  ): Promise<OrganizationTaskSetting | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationProject: args.data.organizationProject
            ? {
                connect: args.data.organizationProject,
              }
            : undefined,

          organizationTeam: args.data.organizationTeam
            ? {
                connect: args.data.organizationTeam,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationTaskSetting)
  async deleteOrganizationTaskSetting(
    @graphql.Args() args: DeleteOrganizationTaskSettingArgs
  ): Promise<OrganizationTaskSetting | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => OrganizationProject, {
    nullable: true,
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: OrganizationTaskSetting
  ): Promise<OrganizationProject | null> {
    const result = await this.service.getOrganizationProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationTeam, {
    nullable: true,
    name: "organizationTeam",
  })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: OrganizationTaskSetting
  ): Promise<OrganizationTeam | null> {
    const result = await this.service.getOrganizationTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: OrganizationTaskSetting
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: OrganizationTaskSetting
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
