/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsDate,
  IsOptional,
  IsBoolean,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { EquipmentSharesTeam } from "../../equipmentSharesTeam/base/EquipmentSharesTeam";
import { Tenant } from "../../tenant/base/Tenant";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { User } from "../../user/base/User";
import { Organization } from "../../organization/base/Organization";
import { Goal } from "../../goal/base/Goal";
import { InviteOrganizationTeam } from "../../inviteOrganizationTeam/base/InviteOrganizationTeam";
import { IssueType } from "../../issueType/base/IssueType";
import { OrganizationTaskSetting } from "../../organizationTaskSetting/base/OrganizationTaskSetting";
import { OrganizationTeamEmployee } from "../../organizationTeamEmployee/base/OrganizationTeamEmployee";
import { OrganizationTeamJoinRequest } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequest";
import { OrganizationTeamTasksTask } from "../../organizationTeamTasksTask/base/OrganizationTeamTasksTask";
import { RequestApprovalTeam } from "../../requestApprovalTeam/base/RequestApprovalTeam";
import { Tag } from "../../tag/base/Tag";
import { TagOrganizationTeam } from "../../tagOrganizationTeam/base/TagOrganizationTeam";
import { TaskPriority } from "../../taskPriority/base/TaskPriority";
import { TaskRelatedIssueType } from "../../taskRelatedIssueType/base/TaskRelatedIssueType";
import { TaskSize } from "../../taskSize/base/TaskSize";
import { TaskStatus } from "../../taskStatus/base/TaskStatus";
import { TaskTeam } from "../../taskTeam/base/TaskTeam";
import { TaskVersion } from "../../taskVersion/base/TaskVersion";
import { TimeLog } from "../../timeLog/base/TimeLog";

@ObjectType()
class OrganizationTeam {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  prefix!: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  publicField!: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  profileLink!: string | null;

  @ApiProperty({
    required: false,
    type: () => [EquipmentSharesTeam],
  })
  @ValidateNested()
  @Type(() => EquipmentSharesTeam)
  @IsOptional()
  equipmentSharesTeams?: Array<EquipmentSharesTeam>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  logo!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  color!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  emoji!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  teamSize!: string | null;

  @ApiProperty({
    required: false,
    type: () => Tenant,
  })
  @ValidateNested()
  @Type(() => Tenant)
  @IsOptional()
  tenant?: Tenant | null;

  @ApiProperty({
    required: false,
    type: () => ImageAsset,
  })
  @ValidateNested()
  @Type(() => ImageAsset)
  @IsOptional()
  imageAsset?: ImageAsset | null;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  user?: User | null;

  @ApiProperty({
    required: false,
    type: () => Organization,
  })
  @ValidateNested()
  @Type(() => Organization)
  @IsOptional()
  organization?: Organization | null;

  @ApiProperty({
    required: false,
    type: () => [Goal],
  })
  @ValidateNested()
  @Type(() => Goal)
  @IsOptional()
  goal?: Array<Goal>;

  @ApiProperty({
    required: false,
    type: () => [InviteOrganizationTeam],
  })
  @ValidateNested()
  @Type(() => InviteOrganizationTeam)
  @IsOptional()
  inviteOrganizationTeam?: Array<InviteOrganizationTeam>;

  @ApiProperty({
    required: false,
    type: () => [IssueType],
  })
  @ValidateNested()
  @Type(() => IssueType)
  @IsOptional()
  issueType?: Array<IssueType>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationTaskSetting],
  })
  @ValidateNested()
  @Type(() => OrganizationTaskSetting)
  @IsOptional()
  organizationTaskSetting?: Array<OrganizationTaskSetting>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationTeamEmployee],
  })
  @ValidateNested()
  @Type(() => OrganizationTeamEmployee)
  @IsOptional()
  organizationTeamEmployee?: Array<OrganizationTeamEmployee>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationTeamJoinRequest],
  })
  @ValidateNested()
  @Type(() => OrganizationTeamJoinRequest)
  @IsOptional()
  organizationTeamJoinRequest?: Array<OrganizationTeamJoinRequest>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationTeamTasksTask],
  })
  @ValidateNested()
  @Type(() => OrganizationTeamTasksTask)
  @IsOptional()
  organizationTeamTasksTask?: Array<OrganizationTeamTasksTask>;

  @ApiProperty({
    required: false,
    type: () => [RequestApprovalTeam],
  })
  @ValidateNested()
  @Type(() => RequestApprovalTeam)
  @IsOptional()
  requestApprovalTeam?: Array<RequestApprovalTeam>;

  @ApiProperty({
    required: false,
    type: () => [Tag],
  })
  @ValidateNested()
  @Type(() => Tag)
  @IsOptional()
  tag?: Array<Tag>;

  @ApiProperty({
    required: false,
    type: () => [TagOrganizationTeam],
  })
  @ValidateNested()
  @Type(() => TagOrganizationTeam)
  @IsOptional()
  tagOrganizationTeam?: Array<TagOrganizationTeam>;

  @ApiProperty({
    required: false,
    type: () => [TaskPriority],
  })
  @ValidateNested()
  @Type(() => TaskPriority)
  @IsOptional()
  taskPriority?: Array<TaskPriority>;

  @ApiProperty({
    required: false,
    type: () => [TaskRelatedIssueType],
  })
  @ValidateNested()
  @Type(() => TaskRelatedIssueType)
  @IsOptional()
  taskRelatedIssueType?: Array<TaskRelatedIssueType>;

  @ApiProperty({
    required: false,
    type: () => [TaskSize],
  })
  @ValidateNested()
  @Type(() => TaskSize)
  @IsOptional()
  taskSize?: Array<TaskSize>;

  @ApiProperty({
    required: false,
    type: () => [TaskStatus],
  })
  @ValidateNested()
  @Type(() => TaskStatus)
  @IsOptional()
  taskStatus?: Array<TaskStatus>;

  @ApiProperty({
    required: false,
    type: () => [TaskTeam],
  })
  @ValidateNested()
  @Type(() => TaskTeam)
  @IsOptional()
  taskTeam?: Array<TaskTeam>;

  @ApiProperty({
    required: false,
    type: () => [TaskVersion],
  })
  @ValidateNested()
  @Type(() => TaskVersion)
  @IsOptional()
  taskVersion?: Array<TaskVersion>;

  @ApiProperty({
    required: false,
    type: () => [TimeLog],
  })
  @ValidateNested()
  @Type(() => TimeLog)
  @IsOptional()
  timeLog?: Array<TimeLog>;
}

export { OrganizationTeam as OrganizationTeam };
