/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrganizationTeamService } from "../organizationTeam.service";
import { OrganizationTeamCreateInput } from "./OrganizationTeamCreateInput";
import { OrganizationTeamWhereInput } from "./OrganizationTeamWhereInput";
import { OrganizationTeamWhereUniqueInput } from "./OrganizationTeamWhereUniqueInput";
import { OrganizationTeamFindManyArgs } from "./OrganizationTeamFindManyArgs";
import { OrganizationTeamUpdateInput } from "./OrganizationTeamUpdateInput";
import { OrganizationTeam } from "./OrganizationTeam";
import { EquipmentSharesTeamFindManyArgs } from "../../equipmentSharesTeam/base/EquipmentSharesTeamFindManyArgs";
import { EquipmentSharesTeam } from "../../equipmentSharesTeam/base/EquipmentSharesTeam";
import { EquipmentSharesTeamWhereUniqueInput } from "../../equipmentSharesTeam/base/EquipmentSharesTeamWhereUniqueInput";
import { GoalFindManyArgs } from "../../goal/base/GoalFindManyArgs";
import { Goal } from "../../goal/base/Goal";
import { GoalWhereUniqueInput } from "../../goal/base/GoalWhereUniqueInput";
import { InviteOrganizationTeamFindManyArgs } from "../../inviteOrganizationTeam/base/InviteOrganizationTeamFindManyArgs";
import { InviteOrganizationTeam } from "../../inviteOrganizationTeam/base/InviteOrganizationTeam";
import { InviteOrganizationTeamWhereUniqueInput } from "../../inviteOrganizationTeam/base/InviteOrganizationTeamWhereUniqueInput";
import { IssueTypeFindManyArgs } from "../../issueType/base/IssueTypeFindManyArgs";
import { IssueType } from "../../issueType/base/IssueType";
import { IssueTypeWhereUniqueInput } from "../../issueType/base/IssueTypeWhereUniqueInput";
import { OrganizationTaskSettingFindManyArgs } from "../../organizationTaskSetting/base/OrganizationTaskSettingFindManyArgs";
import { OrganizationTaskSetting } from "../../organizationTaskSetting/base/OrganizationTaskSetting";
import { OrganizationTaskSettingWhereUniqueInput } from "../../organizationTaskSetting/base/OrganizationTaskSettingWhereUniqueInput";
import { OrganizationTeamEmployeeFindManyArgs } from "../../organizationTeamEmployee/base/OrganizationTeamEmployeeFindManyArgs";
import { OrganizationTeamEmployee } from "../../organizationTeamEmployee/base/OrganizationTeamEmployee";
import { OrganizationTeamEmployeeWhereUniqueInput } from "../../organizationTeamEmployee/base/OrganizationTeamEmployeeWhereUniqueInput";
import { OrganizationTeamJoinRequestFindManyArgs } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequestFindManyArgs";
import { OrganizationTeamJoinRequest } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequest";
import { OrganizationTeamJoinRequestWhereUniqueInput } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequestWhereUniqueInput";
import { OrganizationTeamTasksTaskFindManyArgs } from "../../organizationTeamTasksTask/base/OrganizationTeamTasksTaskFindManyArgs";
import { OrganizationTeamTasksTask } from "../../organizationTeamTasksTask/base/OrganizationTeamTasksTask";
import { OrganizationTeamTasksTaskWhereUniqueInput } from "../../organizationTeamTasksTask/base/OrganizationTeamTasksTaskWhereUniqueInput";
import { RequestApprovalTeamFindManyArgs } from "../../requestApprovalTeam/base/RequestApprovalTeamFindManyArgs";
import { RequestApprovalTeam } from "../../requestApprovalTeam/base/RequestApprovalTeam";
import { RequestApprovalTeamWhereUniqueInput } from "../../requestApprovalTeam/base/RequestApprovalTeamWhereUniqueInput";
import { TagFindManyArgs } from "../../tag/base/TagFindManyArgs";
import { Tag } from "../../tag/base/Tag";
import { TagWhereUniqueInput } from "../../tag/base/TagWhereUniqueInput";
import { TagOrganizationTeamFindManyArgs } from "../../tagOrganizationTeam/base/TagOrganizationTeamFindManyArgs";
import { TagOrganizationTeam } from "../../tagOrganizationTeam/base/TagOrganizationTeam";
import { TagOrganizationTeamWhereUniqueInput } from "../../tagOrganizationTeam/base/TagOrganizationTeamWhereUniqueInput";
import { TaskPriorityFindManyArgs } from "../../taskPriority/base/TaskPriorityFindManyArgs";
import { TaskPriority } from "../../taskPriority/base/TaskPriority";
import { TaskPriorityWhereUniqueInput } from "../../taskPriority/base/TaskPriorityWhereUniqueInput";
import { TaskRelatedIssueTypeFindManyArgs } from "../../taskRelatedIssueType/base/TaskRelatedIssueTypeFindManyArgs";
import { TaskRelatedIssueType } from "../../taskRelatedIssueType/base/TaskRelatedIssueType";
import { TaskRelatedIssueTypeWhereUniqueInput } from "../../taskRelatedIssueType/base/TaskRelatedIssueTypeWhereUniqueInput";
import { TaskSizeFindManyArgs } from "../../taskSize/base/TaskSizeFindManyArgs";
import { TaskSize } from "../../taskSize/base/TaskSize";
import { TaskSizeWhereUniqueInput } from "../../taskSize/base/TaskSizeWhereUniqueInput";
import { TaskStatusFindManyArgs } from "../../taskStatus/base/TaskStatusFindManyArgs";
import { TaskStatus } from "../../taskStatus/base/TaskStatus";
import { TaskStatusWhereUniqueInput } from "../../taskStatus/base/TaskStatusWhereUniqueInput";
import { TaskTeamFindManyArgs } from "../../taskTeam/base/TaskTeamFindManyArgs";
import { TaskTeam } from "../../taskTeam/base/TaskTeam";
import { TaskTeamWhereUniqueInput } from "../../taskTeam/base/TaskTeamWhereUniqueInput";
import { TaskVersionFindManyArgs } from "../../taskVersion/base/TaskVersionFindManyArgs";
import { TaskVersion } from "../../taskVersion/base/TaskVersion";
import { TaskVersionWhereUniqueInput } from "../../taskVersion/base/TaskVersionWhereUniqueInput";
import { TimeLogFindManyArgs } from "../../timeLog/base/TimeLogFindManyArgs";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { TimeLogWhereUniqueInput } from "../../timeLog/base/TimeLogWhereUniqueInput";

export class OrganizationTeamControllerBase {
  constructor(protected readonly service: OrganizationTeamService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrganizationTeam })
  async create(
    @common.Body() data: OrganizationTeamCreateInput
  ): Promise<OrganizationTeam> {
    return await this.service.create({
      data: {
        ...data,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        imageAsset: data.imageAsset
          ? {
              connect: data.imageAsset,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        prefix: true,
        publicField: true,
        profileLink: true,
        logo: true,
        color: true,
        emoji: true,
        teamSize: true,

        tenant: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OrganizationTeam] })
  @ApiNestedQuery(OrganizationTeamFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<OrganizationTeam[]> {
    const args = plainToClass(OrganizationTeamFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        prefix: true,
        publicField: true,
        profileLink: true,
        logo: true,
        color: true,
        emoji: true,
        teamSize: true,

        tenant: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrganizationTeam })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<OrganizationTeam | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        prefix: true,
        publicField: true,
        profileLink: true,
        logo: true,
        color: true,
        emoji: true,
        teamSize: true,

        tenant: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrganizationTeam })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() data: OrganizationTeamUpdateInput
  ): Promise<OrganizationTeam | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          imageAsset: data.imageAsset
            ? {
                connect: data.imageAsset,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          prefix: true,
          publicField: true,
          profileLink: true,
          logo: true,
          color: true,
          emoji: true,
          teamSize: true,

          tenant: {
            select: {
              id: true,
            },
          },

          imageAsset: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrganizationTeam })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<OrganizationTeam | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          prefix: true,
          publicField: true,
          profileLink: true,
          logo: true,
          color: true,
          emoji: true,
          teamSize: true,

          tenant: {
            select: {
              id: true,
            },
          },

          imageAsset: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/equipmentSharesTeams")
  @ApiNestedQuery(EquipmentSharesTeamFindManyArgs)
  async findManyEquipmentSharesTeams(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<EquipmentSharesTeam[]> {
    const query = plainToClass(EquipmentSharesTeamFindManyArgs, request.query);
    const results = await this.service.findEquipmentSharesTeams(params.id, {
      ...query,
      select: {
        organizationTeam: {
          select: {
            id: true,
          },
        },

        equipmentSharing: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/equipmentSharesTeams")
  async connectEquipmentSharesTeams(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: EquipmentSharesTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharesTeams: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/equipmentSharesTeams")
  async updateEquipmentSharesTeams(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: EquipmentSharesTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharesTeams: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/equipmentSharesTeams")
  async disconnectEquipmentSharesTeams(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: EquipmentSharesTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharesTeams: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/goal")
  @ApiNestedQuery(GoalFindManyArgs)
  async findManyGoal(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<Goal[]> {
    const query = plainToClass(GoalFindManyArgs, request.query);
    const results = await this.service.findGoal(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        deadline: true,
        level: true,
        progress: true,

        employeeGoalOwnerEmployeeIdToemployee: {
          select: {
            id: true,
          },
        },

        keyResultGoalAlignedKeyResultIdTokeyResult: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        employeeGoalLeadIdToemployee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/goal")
  async connectGoal(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goal: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/goal")
  async updateGoal(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goal: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/goal")
  async disconnectGoal(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goal: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/inviteOrganizationTeam")
  @ApiNestedQuery(InviteOrganizationTeamFindManyArgs)
  async findManyInviteOrganizationTeam(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<InviteOrganizationTeam[]> {
    const query = plainToClass(
      InviteOrganizationTeamFindManyArgs,
      request.query
    );
    const results = await this.service.findInviteOrganizationTeam(params.id, {
      ...query,
      select: {
        invite: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/inviteOrganizationTeam")
  async connectInviteOrganizationTeam(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: InviteOrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationTeam: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/inviteOrganizationTeam")
  async updateInviteOrganizationTeam(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: InviteOrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationTeam: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/inviteOrganizationTeam")
  async disconnectInviteOrganizationTeam(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: InviteOrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteOrganizationTeam: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/issueType")
  @ApiNestedQuery(IssueTypeFindManyArgs)
  async findManyIssueType(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<IssueType[]> {
    const query = plainToClass(IssueTypeFindManyArgs, request.query);
    const results = await this.service.findIssueType(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/issueType")
  async connectIssueType(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: IssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      issueType: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/issueType")
  async updateIssueType(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: IssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      issueType: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/issueType")
  async disconnectIssueType(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: IssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      issueType: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationTaskSetting")
  @ApiNestedQuery(OrganizationTaskSettingFindManyArgs)
  async findManyOrganizationTaskSetting(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<OrganizationTaskSetting[]> {
    const query = plainToClass(
      OrganizationTaskSettingFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationTaskSetting(params.id, {
      ...query,
      select: {
        isTasksCommentsEnabled: true,
        id: true,
        createdAt: true,
        updatedAt: true,
        isTasksPrivacyEnabled: true,
        isTasksMultipleAssigneesEnabled: true,
        isTasksManualTimeEnabled: true,
        isTasksGroupEstimationEnabled: true,
        isTasksHistoryEnabled: true,
        isTasksAcceptanceCriteriaEnabled: true,
        isTasksDraftsEnabled: true,
        isTasksEstimationInHoursEnabled: true,
        isTasksEstimationInStoryPointsEnabled: true,
        isTasksProofOfCompletionEnabled: true,
        tasksProofOfCompletionType: true,
        isTasksLinkedEnabled: true,
        isTasksNotifyLeftEnabled: true,
        tasksNotifyLeftPeriodDays: true,
        isTasksAutoCloseEnabled: true,
        tasksAutoClosePeriodDays: true,
        isTasksAutoArchiveEnabled: true,
        tasksAutoArchivePeriodDays: true,
        isTasksAutoStatusEnabled: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationTaskSetting")
  async connectOrganizationTaskSetting(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: OrganizationTaskSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTaskSetting: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationTaskSetting")
  async updateOrganizationTaskSetting(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: OrganizationTaskSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTaskSetting: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationTaskSetting")
  async disconnectOrganizationTaskSetting(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: OrganizationTaskSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTaskSetting: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationTeamEmployee")
  @ApiNestedQuery(OrganizationTeamEmployeeFindManyArgs)
  async findManyOrganizationTeamEmployee(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<OrganizationTeamEmployee[]> {
    const query = plainToClass(
      OrganizationTeamEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationTeamEmployee(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        isTrackingEnabled: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationTeamEmployee")
  async connectOrganizationTeamEmployee(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: OrganizationTeamEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationTeamEmployee")
  async updateOrganizationTeamEmployee(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: OrganizationTeamEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationTeamEmployee")
  async disconnectOrganizationTeamEmployee(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: OrganizationTeamEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationTeamJoinRequest")
  @ApiNestedQuery(OrganizationTeamJoinRequestFindManyArgs)
  async findManyOrganizationTeamJoinRequest(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<OrganizationTeamJoinRequest[]> {
    const query = plainToClass(
      OrganizationTeamJoinRequestFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationTeamJoinRequest(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,
          fullName: true,
          linkAddress: true,
          position: true,
          status: true,
          code: true,
          token: true,
          expiredAt: true,

          organizationTeam: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationTeamJoinRequest")
  async connectOrganizationTeamJoinRequest(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: OrganizationTeamJoinRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamJoinRequest: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationTeamJoinRequest")
  async updateOrganizationTeamJoinRequest(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: OrganizationTeamJoinRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamJoinRequest: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationTeamJoinRequest")
  async disconnectOrganizationTeamJoinRequest(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: OrganizationTeamJoinRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamJoinRequest: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationTeamTasksTask")
  @ApiNestedQuery(OrganizationTeamTasksTaskFindManyArgs)
  async findManyOrganizationTeamTasksTask(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<OrganizationTeamTasksTask[]> {
    const query = plainToClass(
      OrganizationTeamTasksTaskFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationTeamTasksTask(
      params.id,
      {
        ...query,
        select: {
          organizationTeam: {
            select: {
              id: true,
            },
          },

          task: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationTeamTasksTask")
  async connectOrganizationTeamTasksTask(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: OrganizationTeamTasksTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamTasksTask: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationTeamTasksTask")
  async updateOrganizationTeamTasksTask(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: OrganizationTeamTasksTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamTasksTask: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationTeamTasksTask")
  async disconnectOrganizationTeamTasksTask(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: OrganizationTeamTasksTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamTasksTask: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/requestApprovalTeam")
  @ApiNestedQuery(RequestApprovalTeamFindManyArgs)
  async findManyRequestApprovalTeam(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<RequestApprovalTeam[]> {
    const query = plainToClass(RequestApprovalTeamFindManyArgs, request.query);
    const results = await this.service.findRequestApprovalTeam(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        requestApproval: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/requestApprovalTeam")
  async connectRequestApprovalTeam(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: RequestApprovalTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalTeam: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/requestApprovalTeam")
  async updateRequestApprovalTeam(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: RequestApprovalTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalTeam: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/requestApprovalTeam")
  async disconnectRequestApprovalTeam(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: RequestApprovalTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalTeam: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tag")
  @ApiNestedQuery(TagFindManyArgs)
  async findManyTag(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<Tag[]> {
    const query = plainToClass(TagFindManyArgs, request.query);
    const results = await this.service.findTag(params.id, {
      ...query,
      select: {
        updatedAt: true,
        name: true,
        id: true,
        createdAt: true,
        description: true,
        color: true,
        isSystem: true,
        icon: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tag")
  async connectTag(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tag: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tag")
  async updateTag(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tag: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tag")
  async disconnectTag(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tag: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagOrganizationTeam")
  @ApiNestedQuery(TagOrganizationTeamFindManyArgs)
  async findManyTagOrganizationTeam(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<TagOrganizationTeam[]> {
    const query = plainToClass(TagOrganizationTeamFindManyArgs, request.query);
    const results = await this.service.findTagOrganizationTeam(params.id, {
      ...query,
      select: {
        tag: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagOrganizationTeam")
  async connectTagOrganizationTeam(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TagOrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagOrganizationTeam: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagOrganizationTeam")
  async updateTagOrganizationTeam(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TagOrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagOrganizationTeam: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagOrganizationTeam")
  async disconnectTagOrganizationTeam(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TagOrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagOrganizationTeam: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskPriority")
  @ApiNestedQuery(TaskPriorityFindManyArgs)
  async findManyTaskPriority(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<TaskPriority[]> {
    const query = plainToClass(TaskPriorityFindManyArgs, request.query);
    const results = await this.service.findTaskPriority(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskPriority")
  async connectTaskPriority(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskPriorityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskPriority: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskPriority")
  async updateTaskPriority(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskPriorityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskPriority: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskPriority")
  async disconnectTaskPriority(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskPriorityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskPriority: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskRelatedIssueType")
  @ApiNestedQuery(TaskRelatedIssueTypeFindManyArgs)
  async findManyTaskRelatedIssueType(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<TaskRelatedIssueType[]> {
    const query = plainToClass(TaskRelatedIssueTypeFindManyArgs, request.query);
    const results = await this.service.findTaskRelatedIssueType(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskRelatedIssueType")
  async connectTaskRelatedIssueType(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskRelatedIssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskRelatedIssueType: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskRelatedIssueType")
  async updateTaskRelatedIssueType(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskRelatedIssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskRelatedIssueType: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskRelatedIssueType")
  async disconnectTaskRelatedIssueType(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskRelatedIssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskRelatedIssueType: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskSize")
  @ApiNestedQuery(TaskSizeFindManyArgs)
  async findManyTaskSize(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<TaskSize[]> {
    const query = plainToClass(TaskSizeFindManyArgs, request.query);
    const results = await this.service.findTaskSize(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskSize")
  async connectTaskSize(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskSizeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskSize: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskSize")
  async updateTaskSize(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskSizeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskSize: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskSize")
  async disconnectTaskSize(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskSizeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskSize: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskStatus")
  @ApiNestedQuery(TaskStatusFindManyArgs)
  async findManyTaskStatus(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<TaskStatus[]> {
    const query = plainToClass(TaskStatusFindManyArgs, request.query);
    const results = await this.service.findTaskStatus(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskStatus")
  async connectTaskStatus(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskStatus: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskStatus")
  async updateTaskStatus(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskStatus: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskStatus")
  async disconnectTaskStatus(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskStatus: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskTeam")
  @ApiNestedQuery(TaskTeamFindManyArgs)
  async findManyTaskTeam(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<TaskTeam[]> {
    const query = plainToClass(TaskTeamFindManyArgs, request.query);
    const results = await this.service.findTaskTeam(params.id, {
      ...query,
      select: {
        organizationTeam: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskTeam")
  async connectTaskTeam(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskTeam: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskTeam")
  async updateTaskTeam(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskTeam: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskTeam")
  async disconnectTaskTeam(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskTeam: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskVersion")
  @ApiNestedQuery(TaskVersionFindManyArgs)
  async findManyTaskVersion(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<TaskVersion[]> {
    const query = plainToClass(TaskVersionFindManyArgs, request.query);
    const results = await this.service.findTaskVersion(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskVersion")
  async connectTaskVersion(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskVersionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskVersion: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskVersion")
  async updateTaskVersion(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskVersionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskVersion: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskVersion")
  async disconnectTaskVersion(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TaskVersionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskVersion: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeLog")
  @ApiNestedQuery(TimeLogFindManyArgs)
  async findManyTimeLog(
    @common.Req() request: Request,
    @common.Param() params: OrganizationTeamWhereUniqueInput
  ): Promise<TimeLog[]> {
    const query = plainToClass(TimeLogFindManyArgs, request.query);
    const results = await this.service.findTimeLog(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startedAt: true,
        stoppedAt: true,
        logType: true,
        source: true,
        description: true,
        reason: true,
        isBillable: true,
        deletedAt: true,
        isRunning: true,
        version: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        timesheet: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeLog")
  async connectTimeLog(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeLog")
  async updateTimeLog(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeLog")
  async disconnectTimeLog(
    @common.Param() params: OrganizationTeamWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
