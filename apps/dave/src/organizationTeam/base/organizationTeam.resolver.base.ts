/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationTeamArgs } from "./CreateOrganizationTeamArgs";
import { UpdateOrganizationTeamArgs } from "./UpdateOrganizationTeamArgs";
import { DeleteOrganizationTeamArgs } from "./DeleteOrganizationTeamArgs";
import { OrganizationTeamCountArgs } from "./OrganizationTeamCountArgs";
import { OrganizationTeamFindManyArgs } from "./OrganizationTeamFindManyArgs";
import { OrganizationTeamFindUniqueArgs } from "./OrganizationTeamFindUniqueArgs";
import { OrganizationTeam } from "./OrganizationTeam";
import { EquipmentSharesTeamFindManyArgs } from "../../equipmentSharesTeam/base/EquipmentSharesTeamFindManyArgs";
import { EquipmentSharesTeam } from "../../equipmentSharesTeam/base/EquipmentSharesTeam";
import { GoalFindManyArgs } from "../../goal/base/GoalFindManyArgs";
import { Goal } from "../../goal/base/Goal";
import { InviteOrganizationTeamFindManyArgs } from "../../inviteOrganizationTeam/base/InviteOrganizationTeamFindManyArgs";
import { InviteOrganizationTeam } from "../../inviteOrganizationTeam/base/InviteOrganizationTeam";
import { IssueTypeFindManyArgs } from "../../issueType/base/IssueTypeFindManyArgs";
import { IssueType } from "../../issueType/base/IssueType";
import { OrganizationTaskSettingFindManyArgs } from "../../organizationTaskSetting/base/OrganizationTaskSettingFindManyArgs";
import { OrganizationTaskSetting } from "../../organizationTaskSetting/base/OrganizationTaskSetting";
import { OrganizationTeamEmployeeFindManyArgs } from "../../organizationTeamEmployee/base/OrganizationTeamEmployeeFindManyArgs";
import { OrganizationTeamEmployee } from "../../organizationTeamEmployee/base/OrganizationTeamEmployee";
import { OrganizationTeamJoinRequestFindManyArgs } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequestFindManyArgs";
import { OrganizationTeamJoinRequest } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequest";
import { OrganizationTeamTasksTaskFindManyArgs } from "../../organizationTeamTasksTask/base/OrganizationTeamTasksTaskFindManyArgs";
import { OrganizationTeamTasksTask } from "../../organizationTeamTasksTask/base/OrganizationTeamTasksTask";
import { RequestApprovalTeamFindManyArgs } from "../../requestApprovalTeam/base/RequestApprovalTeamFindManyArgs";
import { RequestApprovalTeam } from "../../requestApprovalTeam/base/RequestApprovalTeam";
import { TagFindManyArgs } from "../../tag/base/TagFindManyArgs";
import { Tag } from "../../tag/base/Tag";
import { TagOrganizationTeamFindManyArgs } from "../../tagOrganizationTeam/base/TagOrganizationTeamFindManyArgs";
import { TagOrganizationTeam } from "../../tagOrganizationTeam/base/TagOrganizationTeam";
import { TaskPriorityFindManyArgs } from "../../taskPriority/base/TaskPriorityFindManyArgs";
import { TaskPriority } from "../../taskPriority/base/TaskPriority";
import { TaskRelatedIssueTypeFindManyArgs } from "../../taskRelatedIssueType/base/TaskRelatedIssueTypeFindManyArgs";
import { TaskRelatedIssueType } from "../../taskRelatedIssueType/base/TaskRelatedIssueType";
import { TaskSizeFindManyArgs } from "../../taskSize/base/TaskSizeFindManyArgs";
import { TaskSize } from "../../taskSize/base/TaskSize";
import { TaskStatusFindManyArgs } from "../../taskStatus/base/TaskStatusFindManyArgs";
import { TaskStatus } from "../../taskStatus/base/TaskStatus";
import { TaskTeamFindManyArgs } from "../../taskTeam/base/TaskTeamFindManyArgs";
import { TaskTeam } from "../../taskTeam/base/TaskTeam";
import { TaskVersionFindManyArgs } from "../../taskVersion/base/TaskVersionFindManyArgs";
import { TaskVersion } from "../../taskVersion/base/TaskVersion";
import { TimeLogFindManyArgs } from "../../timeLog/base/TimeLogFindManyArgs";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { Tenant } from "../../tenant/base/Tenant";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { User } from "../../user/base/User";
import { Organization } from "../../organization/base/Organization";
import { OrganizationTeamService } from "../organizationTeam.service";
@graphql.Resolver(() => OrganizationTeam)
export class OrganizationTeamResolverBase {
  constructor(protected readonly service: OrganizationTeamService) {}

  async _organizationTeamsMeta(
    @graphql.Args() args: OrganizationTeamCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationTeam])
  async organizationTeams(
    @graphql.Args() args: OrganizationTeamFindManyArgs
  ): Promise<OrganizationTeam[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationTeam, { nullable: true })
  async organizationTeam(
    @graphql.Args() args: OrganizationTeamFindUniqueArgs
  ): Promise<OrganizationTeam | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationTeam)
  async createOrganizationTeam(
    @graphql.Args() args: CreateOrganizationTeamArgs
  ): Promise<OrganizationTeam> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        imageAsset: args.data.imageAsset
          ? {
              connect: args.data.imageAsset,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OrganizationTeam)
  async updateOrganizationTeam(
    @graphql.Args() args: UpdateOrganizationTeamArgs
  ): Promise<OrganizationTeam | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          imageAsset: args.data.imageAsset
            ? {
                connect: args.data.imageAsset,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationTeam)
  async deleteOrganizationTeam(
    @graphql.Args() args: DeleteOrganizationTeamArgs
  ): Promise<OrganizationTeam | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EquipmentSharesTeam], {
    name: "equipmentSharesTeams",
  })
  async resolveFieldEquipmentSharesTeams(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: EquipmentSharesTeamFindManyArgs
  ): Promise<EquipmentSharesTeam[]> {
    const results = await this.service.findEquipmentSharesTeams(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Goal], { name: "goal" })
  async resolveFieldGoal(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: GoalFindManyArgs
  ): Promise<Goal[]> {
    const results = await this.service.findGoal(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [InviteOrganizationTeam], {
    name: "inviteOrganizationTeam",
  })
  async resolveFieldInviteOrganizationTeam(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: InviteOrganizationTeamFindManyArgs
  ): Promise<InviteOrganizationTeam[]> {
    const results = await this.service.findInviteOrganizationTeam(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [IssueType], { name: "issueType" })
  async resolveFieldIssueType(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: IssueTypeFindManyArgs
  ): Promise<IssueType[]> {
    const results = await this.service.findIssueType(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationTaskSetting], {
    name: "organizationTaskSetting",
  })
  async resolveFieldOrganizationTaskSetting(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: OrganizationTaskSettingFindManyArgs
  ): Promise<OrganizationTaskSetting[]> {
    const results = await this.service.findOrganizationTaskSetting(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationTeamEmployee], {
    name: "organizationTeamEmployee",
  })
  async resolveFieldOrganizationTeamEmployee(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: OrganizationTeamEmployeeFindManyArgs
  ): Promise<OrganizationTeamEmployee[]> {
    const results = await this.service.findOrganizationTeamEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationTeamJoinRequest], {
    name: "organizationTeamJoinRequest",
  })
  async resolveFieldOrganizationTeamJoinRequest(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: OrganizationTeamJoinRequestFindManyArgs
  ): Promise<OrganizationTeamJoinRequest[]> {
    const results = await this.service.findOrganizationTeamJoinRequest(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationTeamTasksTask], {
    name: "organizationTeamTasksTask",
  })
  async resolveFieldOrganizationTeamTasksTask(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: OrganizationTeamTasksTaskFindManyArgs
  ): Promise<OrganizationTeamTasksTask[]> {
    const results = await this.service.findOrganizationTeamTasksTask(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [RequestApprovalTeam], {
    name: "requestApprovalTeam",
  })
  async resolveFieldRequestApprovalTeam(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: RequestApprovalTeamFindManyArgs
  ): Promise<RequestApprovalTeam[]> {
    const results = await this.service.findRequestApprovalTeam(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Tag], { name: "tag" })
  async resolveFieldTag(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: TagFindManyArgs
  ): Promise<Tag[]> {
    const results = await this.service.findTag(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationTeam], {
    name: "tagOrganizationTeam",
  })
  async resolveFieldTagOrganizationTeam(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: TagOrganizationTeamFindManyArgs
  ): Promise<TagOrganizationTeam[]> {
    const results = await this.service.findTagOrganizationTeam(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskPriority], { name: "taskPriority" })
  async resolveFieldTaskPriority(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: TaskPriorityFindManyArgs
  ): Promise<TaskPriority[]> {
    const results = await this.service.findTaskPriority(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskRelatedIssueType], {
    name: "taskRelatedIssueType",
  })
  async resolveFieldTaskRelatedIssueType(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: TaskRelatedIssueTypeFindManyArgs
  ): Promise<TaskRelatedIssueType[]> {
    const results = await this.service.findTaskRelatedIssueType(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskSize], { name: "taskSize" })
  async resolveFieldTaskSize(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: TaskSizeFindManyArgs
  ): Promise<TaskSize[]> {
    const results = await this.service.findTaskSize(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskStatus], { name: "taskStatus" })
  async resolveFieldTaskStatus(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: TaskStatusFindManyArgs
  ): Promise<TaskStatus[]> {
    const results = await this.service.findTaskStatus(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskTeam], { name: "taskTeam" })
  async resolveFieldTaskTeam(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: TaskTeamFindManyArgs
  ): Promise<TaskTeam[]> {
    const results = await this.service.findTaskTeam(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskVersion], { name: "taskVersion" })
  async resolveFieldTaskVersion(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: TaskVersionFindManyArgs
  ): Promise<TaskVersion[]> {
    const results = await this.service.findTaskVersion(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeLog], { name: "timeLog" })
  async resolveFieldTimeLog(
    @graphql.Parent() parent: OrganizationTeam,
    @graphql.Args() args: TimeLogFindManyArgs
  ): Promise<TimeLog[]> {
    const results = await this.service.findTimeLog(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: OrganizationTeam
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ImageAsset, {
    nullable: true,
    name: "imageAsset",
  })
  async resolveFieldImageAsset(
    @graphql.Parent() parent: OrganizationTeam
  ): Promise<ImageAsset | null> {
    const result = await this.service.getImageAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: OrganizationTeam
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: OrganizationTeam
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
