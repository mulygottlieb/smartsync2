/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OrganizationTeam,
  EquipmentSharesTeam,
  Goal,
  InviteOrganizationTeam,
  IssueType,
  OrganizationTaskSetting,
  OrganizationTeamEmployee,
  OrganizationTeamJoinRequest,
  OrganizationTeamTasksTask,
  RequestApprovalTeam,
  Tag,
  TagOrganizationTeam,
  TaskPriority,
  TaskRelatedIssueType,
  TaskSize,
  TaskStatus,
  TaskTeam,
  TaskVersion,
  TimeLog,
  Tenant,
  ImageAsset,
  User,
  Organization,
} from "@prisma/client";

export class OrganizationTeamServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.OrganizationTeamCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationTeamCountArgs>
  ): Promise<number> {
    return this.prisma.organizationTeam.count(args);
  }

  async findMany<T extends Prisma.OrganizationTeamFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationTeamFindManyArgs>
  ): Promise<OrganizationTeam[]> {
    return this.prisma.organizationTeam.findMany(args);
  }
  async findOne<T extends Prisma.OrganizationTeamFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationTeamFindUniqueArgs>
  ): Promise<OrganizationTeam | null> {
    return this.prisma.organizationTeam.findUnique(args);
  }
  async create<T extends Prisma.OrganizationTeamCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationTeamCreateArgs>
  ): Promise<OrganizationTeam> {
    return this.prisma.organizationTeam.create<T>(args);
  }
  async update<T extends Prisma.OrganizationTeamUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationTeamUpdateArgs>
  ): Promise<OrganizationTeam> {
    return this.prisma.organizationTeam.update<T>(args);
  }
  async delete<T extends Prisma.OrganizationTeamDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationTeamDeleteArgs>
  ): Promise<OrganizationTeam> {
    return this.prisma.organizationTeam.delete(args);
  }

  async findEquipmentSharesTeams(
    parentId: string,
    args: Prisma.EquipmentSharesTeamFindManyArgs
  ): Promise<EquipmentSharesTeam[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .equipmentSharesTeams(args);
  }

  async findGoal(
    parentId: string,
    args: Prisma.GoalFindManyArgs
  ): Promise<Goal[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .goal(args);
  }

  async findInviteOrganizationTeam(
    parentId: string,
    args: Prisma.InviteOrganizationTeamFindManyArgs
  ): Promise<InviteOrganizationTeam[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .inviteOrganizationTeam(args);
  }

  async findIssueType(
    parentId: string,
    args: Prisma.IssueTypeFindManyArgs
  ): Promise<IssueType[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .issueType(args);
  }

  async findOrganizationTaskSetting(
    parentId: string,
    args: Prisma.OrganizationTaskSettingFindManyArgs
  ): Promise<OrganizationTaskSetting[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationTaskSetting(args);
  }

  async findOrganizationTeamEmployee(
    parentId: string,
    args: Prisma.OrganizationTeamEmployeeFindManyArgs
  ): Promise<OrganizationTeamEmployee[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationTeamEmployee(args);
  }

  async findOrganizationTeamJoinRequest(
    parentId: string,
    args: Prisma.OrganizationTeamJoinRequestFindManyArgs
  ): Promise<OrganizationTeamJoinRequest[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationTeamJoinRequest(args);
  }

  async findOrganizationTeamTasksTask(
    parentId: string,
    args: Prisma.OrganizationTeamTasksTaskFindManyArgs
  ): Promise<OrganizationTeamTasksTask[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationTeamTasksTask(args);
  }

  async findRequestApprovalTeam(
    parentId: string,
    args: Prisma.RequestApprovalTeamFindManyArgs
  ): Promise<RequestApprovalTeam[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requestApprovalTeam(args);
  }

  async findTag(
    parentId: string,
    args: Prisma.TagFindManyArgs
  ): Promise<Tag[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tag(args);
  }

  async findTagOrganizationTeam(
    parentId: string,
    args: Prisma.TagOrganizationTeamFindManyArgs
  ): Promise<TagOrganizationTeam[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagOrganizationTeam(args);
  }

  async findTaskPriority(
    parentId: string,
    args: Prisma.TaskPriorityFindManyArgs
  ): Promise<TaskPriority[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskPriority(args);
  }

  async findTaskRelatedIssueType(
    parentId: string,
    args: Prisma.TaskRelatedIssueTypeFindManyArgs
  ): Promise<TaskRelatedIssueType[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskRelatedIssueType(args);
  }

  async findTaskSize(
    parentId: string,
    args: Prisma.TaskSizeFindManyArgs
  ): Promise<TaskSize[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskSize(args);
  }

  async findTaskStatus(
    parentId: string,
    args: Prisma.TaskStatusFindManyArgs
  ): Promise<TaskStatus[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskStatus(args);
  }

  async findTaskTeam(
    parentId: string,
    args: Prisma.TaskTeamFindManyArgs
  ): Promise<TaskTeam[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskTeam(args);
  }

  async findTaskVersion(
    parentId: string,
    args: Prisma.TaskVersionFindManyArgs
  ): Promise<TaskVersion[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskVersion(args);
  }

  async findTimeLog(
    parentId: string,
    args: Prisma.TimeLogFindManyArgs
  ): Promise<TimeLog[]> {
    return this.prisma.organizationTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeLog(args);
  }

  async getTenant(parentId: string): Promise<Tenant | null> {
    return this.prisma.organizationTeam
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }

  async getImageAsset(parentId: string): Promise<ImageAsset | null> {
    return this.prisma.organizationTeam
      .findUnique({
        where: { id: parentId },
      })
      .imageAsset();
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.organizationTeam
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getOrganization(parentId: string): Promise<Organization | null> {
    return this.prisma.organizationTeam
      .findUnique({
        where: { id: parentId },
      })
      .organization();
  }
}
