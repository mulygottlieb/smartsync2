/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationTeamJoinRequestArgs } from "./CreateOrganizationTeamJoinRequestArgs";
import { UpdateOrganizationTeamJoinRequestArgs } from "./UpdateOrganizationTeamJoinRequestArgs";
import { DeleteOrganizationTeamJoinRequestArgs } from "./DeleteOrganizationTeamJoinRequestArgs";
import { OrganizationTeamJoinRequestCountArgs } from "./OrganizationTeamJoinRequestCountArgs";
import { OrganizationTeamJoinRequestFindManyArgs } from "./OrganizationTeamJoinRequestFindManyArgs";
import { OrganizationTeamJoinRequestFindUniqueArgs } from "./OrganizationTeamJoinRequestFindUniqueArgs";
import { OrganizationTeamJoinRequest } from "./OrganizationTeamJoinRequest";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { User } from "../../user/base/User";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { OrganizationTeamJoinRequestService } from "../organizationTeamJoinRequest.service";
@graphql.Resolver(() => OrganizationTeamJoinRequest)
export class OrganizationTeamJoinRequestResolverBase {
  constructor(protected readonly service: OrganizationTeamJoinRequestService) {}

  async _organizationTeamJoinRequestsMeta(
    @graphql.Args() args: OrganizationTeamJoinRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationTeamJoinRequest])
  async organizationTeamJoinRequests(
    @graphql.Args() args: OrganizationTeamJoinRequestFindManyArgs
  ): Promise<OrganizationTeamJoinRequest[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationTeamJoinRequest, { nullable: true })
  async organizationTeamJoinRequest(
    @graphql.Args() args: OrganizationTeamJoinRequestFindUniqueArgs
  ): Promise<OrganizationTeamJoinRequest | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationTeamJoinRequest)
  async createOrganizationTeamJoinRequest(
    @graphql.Args() args: CreateOrganizationTeamJoinRequestArgs
  ): Promise<OrganizationTeamJoinRequest> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationTeam: args.data.organizationTeam
          ? {
              connect: args.data.organizationTeam,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OrganizationTeamJoinRequest)
  async updateOrganizationTeamJoinRequest(
    @graphql.Args() args: UpdateOrganizationTeamJoinRequestArgs
  ): Promise<OrganizationTeamJoinRequest | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationTeam: args.data.organizationTeam
            ? {
                connect: args.data.organizationTeam,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationTeamJoinRequest)
  async deleteOrganizationTeamJoinRequest(
    @graphql.Args() args: DeleteOrganizationTeamJoinRequestArgs
  ): Promise<OrganizationTeamJoinRequest | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => OrganizationTeam, {
    nullable: true,
    name: "organizationTeam",
  })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: OrganizationTeamJoinRequest
  ): Promise<OrganizationTeam | null> {
    const result = await this.service.getOrganizationTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: OrganizationTeamJoinRequest
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: OrganizationTeamJoinRequest
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: OrganizationTeamJoinRequest
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
