/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationTeamTasksTaskArgs } from "./CreateOrganizationTeamTasksTaskArgs";
import { UpdateOrganizationTeamTasksTaskArgs } from "./UpdateOrganizationTeamTasksTaskArgs";
import { DeleteOrganizationTeamTasksTaskArgs } from "./DeleteOrganizationTeamTasksTaskArgs";
import { OrganizationTeamTasksTaskCountArgs } from "./OrganizationTeamTasksTaskCountArgs";
import { OrganizationTeamTasksTaskFindManyArgs } from "./OrganizationTeamTasksTaskFindManyArgs";
import { OrganizationTeamTasksTaskFindUniqueArgs } from "./OrganizationTeamTasksTaskFindUniqueArgs";
import { OrganizationTeamTasksTask } from "./OrganizationTeamTasksTask";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { Task } from "../../task/base/Task";
import { OrganizationTeamTasksTaskService } from "../organizationTeamTasksTask.service";
@graphql.Resolver(() => OrganizationTeamTasksTask)
export class OrganizationTeamTasksTaskResolverBase {
  constructor(protected readonly service: OrganizationTeamTasksTaskService) {}

  async _organizationTeamTasksTasksMeta(
    @graphql.Args() args: OrganizationTeamTasksTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationTeamTasksTask])
  async organizationTeamTasksTasks(
    @graphql.Args() args: OrganizationTeamTasksTaskFindManyArgs
  ): Promise<OrganizationTeamTasksTask[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationTeamTasksTask, { nullable: true })
  async organizationTeamTasksTask(
    @graphql.Args() args: OrganizationTeamTasksTaskFindUniqueArgs
  ): Promise<OrganizationTeamTasksTask | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationTeamTasksTask)
  async createOrganizationTeamTasksTask(
    @graphql.Args() args: CreateOrganizationTeamTasksTaskArgs
  ): Promise<OrganizationTeamTasksTask> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationTeam: {
          connect: args.data.organizationTeam,
        },

        task: {
          connect: args.data.task,
        },
      },
    });
  }

  @graphql.Mutation(() => OrganizationTeamTasksTask)
  async updateOrganizationTeamTasksTask(
    @graphql.Args() args: UpdateOrganizationTeamTasksTaskArgs
  ): Promise<OrganizationTeamTasksTask | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationTeam: {
            connect: args.data.organizationTeam,
          },

          task: {
            connect: args.data.task,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationTeamTasksTask)
  async deleteOrganizationTeamTasksTask(
    @graphql.Args() args: DeleteOrganizationTeamTasksTaskArgs
  ): Promise<OrganizationTeamTasksTask | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => OrganizationTeam, {
    nullable: true,
    name: "organizationTeam",
  })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: OrganizationTeamTasksTask
  ): Promise<OrganizationTeam | null> {
    const result = await this.service.getOrganizationTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Task, {
    nullable: true,
    name: "task",
  })
  async resolveFieldTask(
    @graphql.Parent() parent: OrganizationTeamTasksTask
  ): Promise<Task | null> {
    const result = await this.service.getTask(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
