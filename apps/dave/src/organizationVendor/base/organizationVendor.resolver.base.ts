/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationVendorArgs } from "./CreateOrganizationVendorArgs";
import { UpdateOrganizationVendorArgs } from "./UpdateOrganizationVendorArgs";
import { DeleteOrganizationVendorArgs } from "./DeleteOrganizationVendorArgs";
import { OrganizationVendorCountArgs } from "./OrganizationVendorCountArgs";
import { OrganizationVendorFindManyArgs } from "./OrganizationVendorFindManyArgs";
import { OrganizationVendorFindUniqueArgs } from "./OrganizationVendorFindUniqueArgs";
import { OrganizationVendor } from "./OrganizationVendor";
import { ExpenseFindManyArgs } from "../../expense/base/ExpenseFindManyArgs";
import { Expense } from "../../expense/base/Expense";
import { TagOrganizationVendorFindManyArgs } from "../../tagOrganizationVendor/base/TagOrganizationVendorFindManyArgs";
import { TagOrganizationVendor } from "../../tagOrganizationVendor/base/TagOrganizationVendor";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { OrganizationVendorService } from "../organizationVendor.service";
@graphql.Resolver(() => OrganizationVendor)
export class OrganizationVendorResolverBase {
  constructor(protected readonly service: OrganizationVendorService) {}

  async _organizationVendorsMeta(
    @graphql.Args() args: OrganizationVendorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationVendor])
  async organizationVendors(
    @graphql.Args() args: OrganizationVendorFindManyArgs
  ): Promise<OrganizationVendor[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationVendor, { nullable: true })
  async organizationVendor(
    @graphql.Args() args: OrganizationVendorFindUniqueArgs
  ): Promise<OrganizationVendor | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationVendor)
  async createOrganizationVendor(
    @graphql.Args() args: CreateOrganizationVendorArgs
  ): Promise<OrganizationVendor> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OrganizationVendor)
  async updateOrganizationVendor(
    @graphql.Args() args: UpdateOrganizationVendorArgs
  ): Promise<OrganizationVendor | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationVendor)
  async deleteOrganizationVendor(
    @graphql.Args() args: DeleteOrganizationVendorArgs
  ): Promise<OrganizationVendor | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Expense], { name: "expense" })
  async resolveFieldExpense(
    @graphql.Parent() parent: OrganizationVendor,
    @graphql.Args() args: ExpenseFindManyArgs
  ): Promise<Expense[]> {
    const results = await this.service.findExpense(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationVendor], {
    name: "tagOrganizationVendor",
  })
  async resolveFieldTagOrganizationVendor(
    @graphql.Parent() parent: OrganizationVendor,
    @graphql.Args() args: TagOrganizationVendorFindManyArgs
  ): Promise<TagOrganizationVendor[]> {
    const results = await this.service.findTagOrganizationVendor(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: OrganizationVendor
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: OrganizationVendor
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
