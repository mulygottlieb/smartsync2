/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreatePipelineStageArgs } from "./CreatePipelineStageArgs";
import { UpdatePipelineStageArgs } from "./UpdatePipelineStageArgs";
import { DeletePipelineStageArgs } from "./DeletePipelineStageArgs";
import { PipelineStageCountArgs } from "./PipelineStageCountArgs";
import { PipelineStageFindManyArgs } from "./PipelineStageFindManyArgs";
import { PipelineStageFindUniqueArgs } from "./PipelineStageFindUniqueArgs";
import { PipelineStage } from "./PipelineStage";
import { DealFindManyArgs } from "../../deal/base/DealFindManyArgs";
import { Deal } from "../../deal/base/Deal";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { Pipeline } from "../../pipeline/base/Pipeline";
import { PipelineStageService } from "../pipelineStage.service";
@graphql.Resolver(() => PipelineStage)
export class PipelineStageResolverBase {
  constructor(protected readonly service: PipelineStageService) {}

  async _pipelineStagesMeta(
    @graphql.Args() args: PipelineStageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PipelineStage])
  async pipelineStages(
    @graphql.Args() args: PipelineStageFindManyArgs
  ): Promise<PipelineStage[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => PipelineStage, { nullable: true })
  async pipelineStage(
    @graphql.Args() args: PipelineStageFindUniqueArgs
  ): Promise<PipelineStage | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PipelineStage)
  async createPipelineStage(
    @graphql.Args() args: CreatePipelineStageArgs
  ): Promise<PipelineStage> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        pipeline: {
          connect: args.data.pipeline,
        },
      },
    });
  }

  @graphql.Mutation(() => PipelineStage)
  async updatePipelineStage(
    @graphql.Args() args: UpdatePipelineStageArgs
  ): Promise<PipelineStage | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          pipeline: {
            connect: args.data.pipeline,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PipelineStage)
  async deletePipelineStage(
    @graphql.Args() args: DeletePipelineStageArgs
  ): Promise<PipelineStage | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Deal], { name: "deal" })
  async resolveFieldDeal(
    @graphql.Parent() parent: PipelineStage,
    @graphql.Args() args: DealFindManyArgs
  ): Promise<Deal[]> {
    const results = await this.service.findDeal(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: PipelineStage
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: PipelineStage
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Pipeline, {
    nullable: true,
    name: "pipeline",
  })
  async resolveFieldPipeline(
    @graphql.Parent() parent: PipelineStage
  ): Promise<Pipeline | null> {
    const result = await this.service.getPipeline(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
