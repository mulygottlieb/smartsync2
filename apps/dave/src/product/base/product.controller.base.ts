/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductService } from "../product.service";
import { ProductCreateInput } from "./ProductCreateInput";
import { ProductWhereInput } from "./ProductWhereInput";
import { ProductWhereUniqueInput } from "./ProductWhereUniqueInput";
import { ProductFindManyArgs } from "./ProductFindManyArgs";
import { ProductUpdateInput } from "./ProductUpdateInput";
import { Product } from "./Product";
import { InvoiceItemFindManyArgs } from "../../invoiceItem/base/InvoiceItemFindManyArgs";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { InvoiceItemWhereUniqueInput } from "../../invoiceItem/base/InvoiceItemWhereUniqueInput";
import { ProductGalleryItemFindManyArgs } from "../../productGalleryItem/base/ProductGalleryItemFindManyArgs";
import { ProductGalleryItem } from "../../productGalleryItem/base/ProductGalleryItem";
import { ProductGalleryItemWhereUniqueInput } from "../../productGalleryItem/base/ProductGalleryItemWhereUniqueInput";
import { ProductOptionGroupFindManyArgs } from "../../productOptionGroup/base/ProductOptionGroupFindManyArgs";
import { ProductOptionGroup } from "../../productOptionGroup/base/ProductOptionGroup";
import { ProductOptionGroupWhereUniqueInput } from "../../productOptionGroup/base/ProductOptionGroupWhereUniqueInput";
import { ProductTranslationFindManyArgs } from "../../productTranslation/base/ProductTranslationFindManyArgs";
import { ProductTranslation } from "../../productTranslation/base/ProductTranslation";
import { ProductTranslationWhereUniqueInput } from "../../productTranslation/base/ProductTranslationWhereUniqueInput";
import { ProductVariantFindManyArgs } from "../../productVariant/base/ProductVariantFindManyArgs";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { ProductVariantWhereUniqueInput } from "../../productVariant/base/ProductVariantWhereUniqueInput";
import { TagProductFindManyArgs } from "../../tagProduct/base/TagProductFindManyArgs";
import { TagProduct } from "../../tagProduct/base/TagProduct";
import { TagProductWhereUniqueInput } from "../../tagProduct/base/TagProductWhereUniqueInput";
import { WarehouseProductFindManyArgs } from "../../warehouseProduct/base/WarehouseProductFindManyArgs";
import { WarehouseProduct } from "../../warehouseProduct/base/WarehouseProduct";
import { WarehouseProductWhereUniqueInput } from "../../warehouseProduct/base/WarehouseProductWhereUniqueInput";

export class ProductControllerBase {
  constructor(protected readonly service: ProductService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Product })
  async create(@common.Body() data: ProductCreateInput): Promise<Product> {
    return await this.service.create({
      data: {
        ...data,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        productType: data.productType
          ? {
              connect: data.productType,
            }
          : undefined,

        imageAsset: data.imageAsset
          ? {
              connect: data.imageAsset,
            }
          : undefined,

        productCategory: data.productCategory
          ? {
              connect: data.productCategory,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        enabled: true,
        code: true,
        imageUrl: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        productType: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        productCategory: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Product] })
  @ApiNestedQuery(ProductFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Product[]> {
    const args = plainToClass(ProductFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        enabled: true,
        code: true,
        imageUrl: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        productType: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        productCategory: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Product | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        enabled: true,
        code: true,
        imageUrl: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        productType: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        productCategory: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() data: ProductUpdateInput
  ): Promise<Product | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          productType: data.productType
            ? {
                connect: data.productType,
              }
            : undefined,

          imageAsset: data.imageAsset
            ? {
                connect: data.imageAsset,
              }
            : undefined,

          productCategory: data.productCategory
            ? {
                connect: data.productCategory,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          enabled: true,
          code: true,
          imageUrl: true,

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          productType: {
            select: {
              id: true,
            },
          },

          imageAsset: {
            select: {
              id: true,
            },
          },

          productCategory: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Product | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          enabled: true,
          code: true,
          imageUrl: true,

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          productType: {
            select: {
              id: true,
            },
          },

          imageAsset: {
            select: {
              id: true,
            },
          },

          productCategory: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/invoiceItem")
  @ApiNestedQuery(InvoiceItemFindManyArgs)
  async findManyInvoiceItem(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<InvoiceItem[]> {
    const query = plainToClass(InvoiceItemFindManyArgs, request.query);
    const results = await this.service.findInvoiceItem(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        price: true,
        quantity: true,
        totalValue: true,
        applyTax: true,
        applyDiscount: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        invoice: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        expense: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoiceItem")
  async connectInvoiceItem(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoiceItem")
  async updateInvoiceItem(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoiceItem")
  async disconnectInvoiceItem(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productGalleryItem")
  @ApiNestedQuery(ProductGalleryItemFindManyArgs)
  async findManyProductGalleryItem(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<ProductGalleryItem[]> {
    const query = plainToClass(ProductGalleryItemFindManyArgs, request.query);
    const results = await this.service.findProductGalleryItem(params.id, {
      ...query,
      select: {
        imageAsset: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productGalleryItem")
  async connectProductGalleryItem(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ProductGalleryItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productGalleryItem: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productGalleryItem")
  async updateProductGalleryItem(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ProductGalleryItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productGalleryItem: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productGalleryItem")
  async disconnectProductGalleryItem(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ProductGalleryItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productGalleryItem: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productOptionGroup")
  @ApiNestedQuery(ProductOptionGroupFindManyArgs)
  async findManyProductOptionGroup(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<ProductOptionGroup[]> {
    const query = plainToClass(ProductOptionGroupFindManyArgs, request.query);
    const results = await this.service.findProductOptionGroup(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productOptionGroup")
  async connectProductOptionGroup(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ProductOptionGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionGroup: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productOptionGroup")
  async updateProductOptionGroup(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ProductOptionGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionGroup: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productOptionGroup")
  async disconnectProductOptionGroup(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ProductOptionGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionGroup: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productTranslation")
  @ApiNestedQuery(ProductTranslationFindManyArgs)
  async findManyProductTranslation(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<ProductTranslation[]> {
    const query = plainToClass(ProductTranslationFindManyArgs, request.query);
    const results = await this.service.findProductTranslation(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        languageCode: true,

        tenant: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productTranslation")
  async connectProductTranslation(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ProductTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productTranslation: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productTranslation")
  async updateProductTranslation(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ProductTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productTranslation: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productTranslation")
  async disconnectProductTranslation(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ProductTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productTranslation: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productVariant")
  @ApiNestedQuery(ProductVariantFindManyArgs)
  async findManyProductVariant(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<ProductVariant[]> {
    const query = plainToClass(ProductVariantFindManyArgs, request.query);
    const results = await this.service.findProductVariant(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        taxes: true,
        notes: true,
        quantity: true,
        billingInvoicingPolicy: true,
        internalReference: true,
        enabled: true,

        productVariantPriceProductVariantPriceIdToproductVariantPrice: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productVariantSettingProductVariantSettingIdToproductVariantSetting: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        productVariantPriceProductVariantPriceProductVariantIdToproductVariant:
          {
            select: {
              id: true,
            },
          },

        productVariantSettingProductVariantSettingProductVariantIdToproductVariant:
          {
            select: {
              id: true,
            },
          },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productVariant")
  async connectProductVariant(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariant: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productVariant")
  async updateProductVariant(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariant: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productVariant")
  async disconnectProductVariant(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariant: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagProduct")
  @ApiNestedQuery(TagProductFindManyArgs)
  async findManyTagProduct(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<TagProduct[]> {
    const query = plainToClass(TagProductFindManyArgs, request.query);
    const results = await this.service.findTagProduct(params.id, {
      ...query,
      select: {
        product: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagProduct")
  async connectTagProduct(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: TagProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagProduct: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagProduct")
  async updateTagProduct(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: TagProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagProduct: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagProduct")
  async disconnectTagProduct(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: TagProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagProduct: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/warehouseProduct")
  @ApiNestedQuery(WarehouseProductFindManyArgs)
  async findManyWarehouseProduct(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<WarehouseProduct[]> {
    const query = plainToClass(WarehouseProductFindManyArgs, request.query);
    const results = await this.service.findWarehouseProduct(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        quantity: true,

        product: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        warehouse: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/warehouseProduct")
  async connectWarehouseProduct(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: WarehouseProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseProduct: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/warehouseProduct")
  async updateWarehouseProduct(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: WarehouseProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseProduct: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/warehouseProduct")
  async disconnectWarehouseProduct(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: WarehouseProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseProduct: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
