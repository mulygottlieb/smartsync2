/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProductCategoryArgs } from "./CreateProductCategoryArgs";
import { UpdateProductCategoryArgs } from "./UpdateProductCategoryArgs";
import { DeleteProductCategoryArgs } from "./DeleteProductCategoryArgs";
import { ProductCategoryCountArgs } from "./ProductCategoryCountArgs";
import { ProductCategoryFindManyArgs } from "./ProductCategoryFindManyArgs";
import { ProductCategoryFindUniqueArgs } from "./ProductCategoryFindUniqueArgs";
import { ProductCategory } from "./ProductCategory";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { ProductCategoryTranslationFindManyArgs } from "../../productCategoryTranslation/base/ProductCategoryTranslationFindManyArgs";
import { ProductCategoryTranslation } from "../../productCategoryTranslation/base/ProductCategoryTranslation";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { ProductCategoryService } from "../productCategory.service";
@graphql.Resolver(() => ProductCategory)
export class ProductCategoryResolverBase {
  constructor(protected readonly service: ProductCategoryService) {}

  async _productCategoriesMeta(
    @graphql.Args() args: ProductCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductCategory])
  async productCategories(
    @graphql.Args() args: ProductCategoryFindManyArgs
  ): Promise<ProductCategory[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ProductCategory, { nullable: true })
  async productCategory(
    @graphql.Args() args: ProductCategoryFindUniqueArgs
  ): Promise<ProductCategory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductCategory)
  async createProductCategory(
    @graphql.Args() args: CreateProductCategoryArgs
  ): Promise<ProductCategory> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        imageAsset: args.data.imageAsset
          ? {
              connect: args.data.imageAsset,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProductCategory)
  async updateProductCategory(
    @graphql.Args() args: UpdateProductCategoryArgs
  ): Promise<ProductCategory | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          imageAsset: args.data.imageAsset
            ? {
                connect: args.data.imageAsset,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductCategory)
  async deleteProductCategory(
    @graphql.Args() args: DeleteProductCategoryArgs
  ): Promise<ProductCategory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Product], { name: "product" })
  async resolveFieldProduct(
    @graphql.Parent() parent: ProductCategory,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProduct(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductCategoryTranslation], {
    name: "productCategoryTranslation",
  })
  async resolveFieldProductCategoryTranslation(
    @graphql.Parent() parent: ProductCategory,
    @graphql.Args() args: ProductCategoryTranslationFindManyArgs
  ): Promise<ProductCategoryTranslation[]> {
    const results = await this.service.findProductCategoryTranslation(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: ProductCategory
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: ProductCategory
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ImageAsset, {
    nullable: true,
    name: "imageAsset",
  })
  async resolveFieldImageAsset(
    @graphql.Parent() parent: ProductCategory
  ): Promise<ImageAsset | null> {
    const result = await this.service.getImageAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
