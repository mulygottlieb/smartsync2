/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProductCategoryTranslationArgs } from "./CreateProductCategoryTranslationArgs";
import { UpdateProductCategoryTranslationArgs } from "./UpdateProductCategoryTranslationArgs";
import { DeleteProductCategoryTranslationArgs } from "./DeleteProductCategoryTranslationArgs";
import { ProductCategoryTranslationCountArgs } from "./ProductCategoryTranslationCountArgs";
import { ProductCategoryTranslationFindManyArgs } from "./ProductCategoryTranslationFindManyArgs";
import { ProductCategoryTranslationFindUniqueArgs } from "./ProductCategoryTranslationFindUniqueArgs";
import { ProductCategoryTranslation } from "./ProductCategoryTranslation";
import { Tenant } from "../../tenant/base/Tenant";
import { ProductCategory } from "../../productCategory/base/ProductCategory";
import { Organization } from "../../organization/base/Organization";
import { ProductCategoryTranslationService } from "../productCategoryTranslation.service";
@graphql.Resolver(() => ProductCategoryTranslation)
export class ProductCategoryTranslationResolverBase {
  constructor(protected readonly service: ProductCategoryTranslationService) {}

  async _productCategoryTranslationsMeta(
    @graphql.Args() args: ProductCategoryTranslationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductCategoryTranslation])
  async productCategoryTranslations(
    @graphql.Args() args: ProductCategoryTranslationFindManyArgs
  ): Promise<ProductCategoryTranslation[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ProductCategoryTranslation, { nullable: true })
  async productCategoryTranslation(
    @graphql.Args() args: ProductCategoryTranslationFindUniqueArgs
  ): Promise<ProductCategoryTranslation | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductCategoryTranslation)
  async createProductCategoryTranslation(
    @graphql.Args() args: CreateProductCategoryTranslationArgs
  ): Promise<ProductCategoryTranslation> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        productCategory: {
          connect: args.data.productCategory,
        },

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProductCategoryTranslation)
  async updateProductCategoryTranslation(
    @graphql.Args() args: UpdateProductCategoryTranslationArgs
  ): Promise<ProductCategoryTranslation | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          productCategory: {
            connect: args.data.productCategory,
          },

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductCategoryTranslation)
  async deleteProductCategoryTranslation(
    @graphql.Args() args: DeleteProductCategoryTranslationArgs
  ): Promise<ProductCategoryTranslation | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: ProductCategoryTranslation
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProductCategory, {
    nullable: true,
    name: "productCategory",
  })
  async resolveFieldProductCategory(
    @graphql.Parent() parent: ProductCategoryTranslation
  ): Promise<ProductCategory | null> {
    const result = await this.service.getProductCategory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: ProductCategoryTranslation
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
