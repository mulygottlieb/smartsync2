/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductOptionService } from "../productOption.service";
import { ProductOptionCreateInput } from "./ProductOptionCreateInput";
import { ProductOptionWhereInput } from "./ProductOptionWhereInput";
import { ProductOptionWhereUniqueInput } from "./ProductOptionWhereUniqueInput";
import { ProductOptionFindManyArgs } from "./ProductOptionFindManyArgs";
import { ProductOptionUpdateInput } from "./ProductOptionUpdateInput";
import { ProductOption } from "./ProductOption";
import { ProductOptionTranslationFindManyArgs } from "../../productOptionTranslation/base/ProductOptionTranslationFindManyArgs";
import { ProductOptionTranslation } from "../../productOptionTranslation/base/ProductOptionTranslation";
import { ProductOptionTranslationWhereUniqueInput } from "../../productOptionTranslation/base/ProductOptionTranslationWhereUniqueInput";
import { ProductVariantOptionsProductOptionFindManyArgs } from "../../productVariantOptionsProductOption/base/ProductVariantOptionsProductOptionFindManyArgs";
import { ProductVariantOptionsProductOption } from "../../productVariantOptionsProductOption/base/ProductVariantOptionsProductOption";
import { ProductVariantOptionsProductOptionWhereUniqueInput } from "../../productVariantOptionsProductOption/base/ProductVariantOptionsProductOptionWhereUniqueInput";

export class ProductOptionControllerBase {
  constructor(protected readonly service: ProductOptionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductOption })
  async create(
    @common.Body() data: ProductOptionCreateInput
  ): Promise<ProductOption> {
    return await this.service.create({
      data: {
        ...data,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        productOptionGroup: {
          connect: data.productOptionGroup,
        },
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        code: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productOptionGroup: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductOption] })
  @ApiNestedQuery(ProductOptionFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<ProductOption[]> {
    const args = plainToClass(ProductOptionFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        code: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productOptionGroup: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: ProductOptionWhereUniqueInput
  ): Promise<ProductOption | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        code: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productOptionGroup: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: ProductOptionWhereUniqueInput,
    @common.Body() data: ProductOptionUpdateInput
  ): Promise<ProductOption | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          productOptionGroup: {
            connect: data.productOptionGroup,
          },
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          code: true,

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          productOptionGroup: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: ProductOptionWhereUniqueInput
  ): Promise<ProductOption | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          code: true,

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          productOptionGroup: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/productOptionTranslation")
  @ApiNestedQuery(ProductOptionTranslationFindManyArgs)
  async findManyProductOptionTranslation(
    @common.Req() request: Request,
    @common.Param() params: ProductOptionWhereUniqueInput
  ): Promise<ProductOptionTranslation[]> {
    const query = plainToClass(
      ProductOptionTranslationFindManyArgs,
      request.query
    );
    const results = await this.service.findProductOptionTranslation(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        languageCode: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productOption: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productOptionTranslation")
  async connectProductOptionTranslation(
    @common.Param() params: ProductOptionWhereUniqueInput,
    @common.Body() body: ProductOptionTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionTranslation: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productOptionTranslation")
  async updateProductOptionTranslation(
    @common.Param() params: ProductOptionWhereUniqueInput,
    @common.Body() body: ProductOptionTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionTranslation: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productOptionTranslation")
  async disconnectProductOptionTranslation(
    @common.Param() params: ProductOptionWhereUniqueInput,
    @common.Body() body: ProductOptionTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionTranslation: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productVariantOptionsProductOption")
  @ApiNestedQuery(ProductVariantOptionsProductOptionFindManyArgs)
  async findManyProductVariantOptionsProductOption(
    @common.Req() request: Request,
    @common.Param() params: ProductOptionWhereUniqueInput
  ): Promise<ProductVariantOptionsProductOption[]> {
    const query = plainToClass(
      ProductVariantOptionsProductOptionFindManyArgs,
      request.query
    );
    const results = await this.service.findProductVariantOptionsProductOption(
      params.id,
      {
        ...query,
        select: {
          productVariant: {
            select: {
              id: true,
            },
          },

          productOption: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productVariantOptionsProductOption")
  async connectProductVariantOptionsProductOption(
    @common.Param() params: ProductOptionWhereUniqueInput,
    @common.Body() body: ProductVariantOptionsProductOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariantOptionsProductOption: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productVariantOptionsProductOption")
  async updateProductVariantOptionsProductOption(
    @common.Param() params: ProductOptionWhereUniqueInput,
    @common.Body() body: ProductVariantOptionsProductOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariantOptionsProductOption: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productVariantOptionsProductOption")
  async disconnectProductVariantOptionsProductOption(
    @common.Param() params: ProductOptionWhereUniqueInput,
    @common.Body() body: ProductVariantOptionsProductOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariantOptionsProductOption: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
