/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProductOptionArgs } from "./CreateProductOptionArgs";
import { UpdateProductOptionArgs } from "./UpdateProductOptionArgs";
import { DeleteProductOptionArgs } from "./DeleteProductOptionArgs";
import { ProductOptionCountArgs } from "./ProductOptionCountArgs";
import { ProductOptionFindManyArgs } from "./ProductOptionFindManyArgs";
import { ProductOptionFindUniqueArgs } from "./ProductOptionFindUniqueArgs";
import { ProductOption } from "./ProductOption";
import { ProductOptionTranslationFindManyArgs } from "../../productOptionTranslation/base/ProductOptionTranslationFindManyArgs";
import { ProductOptionTranslation } from "../../productOptionTranslation/base/ProductOptionTranslation";
import { ProductVariantOptionsProductOptionFindManyArgs } from "../../productVariantOptionsProductOption/base/ProductVariantOptionsProductOptionFindManyArgs";
import { ProductVariantOptionsProductOption } from "../../productVariantOptionsProductOption/base/ProductVariantOptionsProductOption";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { ProductOptionGroup } from "../../productOptionGroup/base/ProductOptionGroup";
import { ProductOptionService } from "../productOption.service";
@graphql.Resolver(() => ProductOption)
export class ProductOptionResolverBase {
  constructor(protected readonly service: ProductOptionService) {}

  async _productOptionsMeta(
    @graphql.Args() args: ProductOptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductOption])
  async productOptions(
    @graphql.Args() args: ProductOptionFindManyArgs
  ): Promise<ProductOption[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ProductOption, { nullable: true })
  async productOption(
    @graphql.Args() args: ProductOptionFindUniqueArgs
  ): Promise<ProductOption | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductOption)
  async createProductOption(
    @graphql.Args() args: CreateProductOptionArgs
  ): Promise<ProductOption> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        productOptionGroup: {
          connect: args.data.productOptionGroup,
        },
      },
    });
  }

  @graphql.Mutation(() => ProductOption)
  async updateProductOption(
    @graphql.Args() args: UpdateProductOptionArgs
  ): Promise<ProductOption | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          productOptionGroup: {
            connect: args.data.productOptionGroup,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductOption)
  async deleteProductOption(
    @graphql.Args() args: DeleteProductOptionArgs
  ): Promise<ProductOption | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ProductOptionTranslation], {
    name: "productOptionTranslation",
  })
  async resolveFieldProductOptionTranslation(
    @graphql.Parent() parent: ProductOption,
    @graphql.Args() args: ProductOptionTranslationFindManyArgs
  ): Promise<ProductOptionTranslation[]> {
    const results = await this.service.findProductOptionTranslation(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductVariantOptionsProductOption], {
    name: "productVariantOptionsProductOption",
  })
  async resolveFieldProductVariantOptionsProductOption(
    @graphql.Parent() parent: ProductOption,
    @graphql.Args() args: ProductVariantOptionsProductOptionFindManyArgs
  ): Promise<ProductVariantOptionsProductOption[]> {
    const results = await this.service.findProductVariantOptionsProductOption(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: ProductOption
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: ProductOption
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProductOptionGroup, {
    nullable: true,
    name: "productOptionGroup",
  })
  async resolveFieldProductOptionGroup(
    @graphql.Parent() parent: ProductOption
  ): Promise<ProductOptionGroup | null> {
    const result = await this.service.getProductOptionGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
