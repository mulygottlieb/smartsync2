/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductOptionGroupService } from "../productOptionGroup.service";
import { ProductOptionGroupCreateInput } from "./ProductOptionGroupCreateInput";
import { ProductOptionGroupWhereInput } from "./ProductOptionGroupWhereInput";
import { ProductOptionGroupWhereUniqueInput } from "./ProductOptionGroupWhereUniqueInput";
import { ProductOptionGroupFindManyArgs } from "./ProductOptionGroupFindManyArgs";
import { ProductOptionGroupUpdateInput } from "./ProductOptionGroupUpdateInput";
import { ProductOptionGroup } from "./ProductOptionGroup";
import { ProductOptionFindManyArgs } from "../../productOption/base/ProductOptionFindManyArgs";
import { ProductOption } from "../../productOption/base/ProductOption";
import { ProductOptionWhereUniqueInput } from "../../productOption/base/ProductOptionWhereUniqueInput";
import { ProductOptionGroupTranslationFindManyArgs } from "../../productOptionGroupTranslation/base/ProductOptionGroupTranslationFindManyArgs";
import { ProductOptionGroupTranslation } from "../../productOptionGroupTranslation/base/ProductOptionGroupTranslation";
import { ProductOptionGroupTranslationWhereUniqueInput } from "../../productOptionGroupTranslation/base/ProductOptionGroupTranslationWhereUniqueInput";

export class ProductOptionGroupControllerBase {
  constructor(protected readonly service: ProductOptionGroupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductOptionGroup })
  async create(
    @common.Body() data: ProductOptionGroupCreateInput
  ): Promise<ProductOptionGroup> {
    return await this.service.create({
      data: {
        ...data,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        product: {
          connect: data.product,
        },
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductOptionGroup] })
  @ApiNestedQuery(ProductOptionGroupFindManyArgs)
  async findMany(
    @common.Req() request: Request
  ): Promise<ProductOptionGroup[]> {
    const args = plainToClass(ProductOptionGroupFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductOptionGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: ProductOptionGroupWhereUniqueInput
  ): Promise<ProductOptionGroup | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductOptionGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: ProductOptionGroupWhereUniqueInput,
    @common.Body() data: ProductOptionGroupUpdateInput
  ): Promise<ProductOptionGroup | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          product: {
            connect: data.product,
          },
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          product: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductOptionGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: ProductOptionGroupWhereUniqueInput
  ): Promise<ProductOptionGroup | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          product: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/productOption")
  @ApiNestedQuery(ProductOptionFindManyArgs)
  async findManyProductOption(
    @common.Req() request: Request,
    @common.Param() params: ProductOptionGroupWhereUniqueInput
  ): Promise<ProductOption[]> {
    const query = plainToClass(ProductOptionFindManyArgs, request.query);
    const results = await this.service.findProductOption(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        code: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productOptionGroup: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productOption")
  async connectProductOption(
    @common.Param() params: ProductOptionGroupWhereUniqueInput,
    @common.Body() body: ProductOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOption: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productOption")
  async updateProductOption(
    @common.Param() params: ProductOptionGroupWhereUniqueInput,
    @common.Body() body: ProductOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOption: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productOption")
  async disconnectProductOption(
    @common.Param() params: ProductOptionGroupWhereUniqueInput,
    @common.Body() body: ProductOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOption: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productOptionGroupTranslation")
  @ApiNestedQuery(ProductOptionGroupTranslationFindManyArgs)
  async findManyProductOptionGroupTranslation(
    @common.Req() request: Request,
    @common.Param() params: ProductOptionGroupWhereUniqueInput
  ): Promise<ProductOptionGroupTranslation[]> {
    const query = plainToClass(
      ProductOptionGroupTranslationFindManyArgs,
      request.query
    );
    const results = await this.service.findProductOptionGroupTranslation(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          languageCode: true,

          organization: {
            select: {
              id: true,
            },
          },

          productOptionGroup: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productOptionGroupTranslation")
  async connectProductOptionGroupTranslation(
    @common.Param() params: ProductOptionGroupWhereUniqueInput,
    @common.Body() body: ProductOptionGroupTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionGroupTranslation: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productOptionGroupTranslation")
  async updateProductOptionGroupTranslation(
    @common.Param() params: ProductOptionGroupWhereUniqueInput,
    @common.Body() body: ProductOptionGroupTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionGroupTranslation: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productOptionGroupTranslation")
  async disconnectProductOptionGroupTranslation(
    @common.Param() params: ProductOptionGroupWhereUniqueInput,
    @common.Body() body: ProductOptionGroupTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionGroupTranslation: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
