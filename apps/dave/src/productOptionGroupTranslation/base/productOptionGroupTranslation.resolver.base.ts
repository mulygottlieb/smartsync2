/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProductOptionGroupTranslationArgs } from "./CreateProductOptionGroupTranslationArgs";
import { UpdateProductOptionGroupTranslationArgs } from "./UpdateProductOptionGroupTranslationArgs";
import { DeleteProductOptionGroupTranslationArgs } from "./DeleteProductOptionGroupTranslationArgs";
import { ProductOptionGroupTranslationCountArgs } from "./ProductOptionGroupTranslationCountArgs";
import { ProductOptionGroupTranslationFindManyArgs } from "./ProductOptionGroupTranslationFindManyArgs";
import { ProductOptionGroupTranslationFindUniqueArgs } from "./ProductOptionGroupTranslationFindUniqueArgs";
import { ProductOptionGroupTranslation } from "./ProductOptionGroupTranslation";
import { Organization } from "../../organization/base/Organization";
import { ProductOptionGroup } from "../../productOptionGroup/base/ProductOptionGroup";
import { Tenant } from "../../tenant/base/Tenant";
import { ProductOptionGroupTranslationService } from "../productOptionGroupTranslation.service";
@graphql.Resolver(() => ProductOptionGroupTranslation)
export class ProductOptionGroupTranslationResolverBase {
  constructor(
    protected readonly service: ProductOptionGroupTranslationService
  ) {}

  async _productOptionGroupTranslationsMeta(
    @graphql.Args() args: ProductOptionGroupTranslationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductOptionGroupTranslation])
  async productOptionGroupTranslations(
    @graphql.Args() args: ProductOptionGroupTranslationFindManyArgs
  ): Promise<ProductOptionGroupTranslation[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ProductOptionGroupTranslation, { nullable: true })
  async productOptionGroupTranslation(
    @graphql.Args() args: ProductOptionGroupTranslationFindUniqueArgs
  ): Promise<ProductOptionGroupTranslation | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductOptionGroupTranslation)
  async createProductOptionGroupTranslation(
    @graphql.Args() args: CreateProductOptionGroupTranslationArgs
  ): Promise<ProductOptionGroupTranslation> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        productOptionGroup: {
          connect: args.data.productOptionGroup,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProductOptionGroupTranslation)
  async updateProductOptionGroupTranslation(
    @graphql.Args() args: UpdateProductOptionGroupTranslationArgs
  ): Promise<ProductOptionGroupTranslation | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          productOptionGroup: {
            connect: args.data.productOptionGroup,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductOptionGroupTranslation)
  async deleteProductOptionGroupTranslation(
    @graphql.Args() args: DeleteProductOptionGroupTranslationArgs
  ): Promise<ProductOptionGroupTranslation | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: ProductOptionGroupTranslation
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProductOptionGroup, {
    nullable: true,
    name: "productOptionGroup",
  })
  async resolveFieldProductOptionGroup(
    @graphql.Parent() parent: ProductOptionGroupTranslation
  ): Promise<ProductOptionGroup | null> {
    const result = await this.service.getProductOptionGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: ProductOptionGroupTranslation
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
