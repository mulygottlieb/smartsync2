/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProductOptionTranslationArgs } from "./CreateProductOptionTranslationArgs";
import { UpdateProductOptionTranslationArgs } from "./UpdateProductOptionTranslationArgs";
import { DeleteProductOptionTranslationArgs } from "./DeleteProductOptionTranslationArgs";
import { ProductOptionTranslationCountArgs } from "./ProductOptionTranslationCountArgs";
import { ProductOptionTranslationFindManyArgs } from "./ProductOptionTranslationFindManyArgs";
import { ProductOptionTranslationFindUniqueArgs } from "./ProductOptionTranslationFindUniqueArgs";
import { ProductOptionTranslation } from "./ProductOptionTranslation";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { ProductOption } from "../../productOption/base/ProductOption";
import { ProductOptionTranslationService } from "../productOptionTranslation.service";
@graphql.Resolver(() => ProductOptionTranslation)
export class ProductOptionTranslationResolverBase {
  constructor(protected readonly service: ProductOptionTranslationService) {}

  async _productOptionTranslationsMeta(
    @graphql.Args() args: ProductOptionTranslationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductOptionTranslation])
  async productOptionTranslations(
    @graphql.Args() args: ProductOptionTranslationFindManyArgs
  ): Promise<ProductOptionTranslation[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ProductOptionTranslation, { nullable: true })
  async productOptionTranslation(
    @graphql.Args() args: ProductOptionTranslationFindUniqueArgs
  ): Promise<ProductOptionTranslation | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductOptionTranslation)
  async createProductOptionTranslation(
    @graphql.Args() args: CreateProductOptionTranslationArgs
  ): Promise<ProductOptionTranslation> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        productOption: {
          connect: args.data.productOption,
        },
      },
    });
  }

  @graphql.Mutation(() => ProductOptionTranslation)
  async updateProductOptionTranslation(
    @graphql.Args() args: UpdateProductOptionTranslationArgs
  ): Promise<ProductOptionTranslation | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          productOption: {
            connect: args.data.productOption,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductOptionTranslation)
  async deleteProductOptionTranslation(
    @graphql.Args() args: DeleteProductOptionTranslationArgs
  ): Promise<ProductOptionTranslation | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: ProductOptionTranslation
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: ProductOptionTranslation
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProductOption, {
    nullable: true,
    name: "productOption",
  })
  async resolveFieldProductOption(
    @graphql.Parent() parent: ProductOptionTranslation
  ): Promise<ProductOption | null> {
    const result = await this.service.getProductOption(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
