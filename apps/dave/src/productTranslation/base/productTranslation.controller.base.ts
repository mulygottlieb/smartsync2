/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductTranslationService } from "../productTranslation.service";
import { ProductTranslationCreateInput } from "./ProductTranslationCreateInput";
import { ProductTranslationWhereInput } from "./ProductTranslationWhereInput";
import { ProductTranslationWhereUniqueInput } from "./ProductTranslationWhereUniqueInput";
import { ProductTranslationFindManyArgs } from "./ProductTranslationFindManyArgs";
import { ProductTranslationUpdateInput } from "./ProductTranslationUpdateInput";
import { ProductTranslation } from "./ProductTranslation";

export class ProductTranslationControllerBase {
  constructor(protected readonly service: ProductTranslationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductTranslation })
  async create(
    @common.Body() data: ProductTranslationCreateInput
  ): Promise<ProductTranslation> {
    return await this.service.create({
      data: {
        ...data,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        product: {
          connect: data.product,
        },

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        languageCode: true,

        tenant: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductTranslation] })
  @ApiNestedQuery(ProductTranslationFindManyArgs)
  async findMany(
    @common.Req() request: Request
  ): Promise<ProductTranslation[]> {
    const args = plainToClass(ProductTranslationFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        languageCode: true,

        tenant: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductTranslation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: ProductTranslationWhereUniqueInput
  ): Promise<ProductTranslation | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        languageCode: true,

        tenant: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductTranslation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: ProductTranslationWhereUniqueInput,
    @common.Body() data: ProductTranslationUpdateInput
  ): Promise<ProductTranslation | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          product: {
            connect: data.product,
          },

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          languageCode: true,

          tenant: {
            select: {
              id: true,
            },
          },

          product: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductTranslation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: ProductTranslationWhereUniqueInput
  ): Promise<ProductTranslation | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          languageCode: true,

          tenant: {
            select: {
              id: true,
            },
          },

          product: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
