/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProductTranslationArgs } from "./CreateProductTranslationArgs";
import { UpdateProductTranslationArgs } from "./UpdateProductTranslationArgs";
import { DeleteProductTranslationArgs } from "./DeleteProductTranslationArgs";
import { ProductTranslationCountArgs } from "./ProductTranslationCountArgs";
import { ProductTranslationFindManyArgs } from "./ProductTranslationFindManyArgs";
import { ProductTranslationFindUniqueArgs } from "./ProductTranslationFindUniqueArgs";
import { ProductTranslation } from "./ProductTranslation";
import { Tenant } from "../../tenant/base/Tenant";
import { Product } from "../../product/base/Product";
import { Organization } from "../../organization/base/Organization";
import { ProductTranslationService } from "../productTranslation.service";
@graphql.Resolver(() => ProductTranslation)
export class ProductTranslationResolverBase {
  constructor(protected readonly service: ProductTranslationService) {}

  async _productTranslationsMeta(
    @graphql.Args() args: ProductTranslationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductTranslation])
  async productTranslations(
    @graphql.Args() args: ProductTranslationFindManyArgs
  ): Promise<ProductTranslation[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ProductTranslation, { nullable: true })
  async productTranslation(
    @graphql.Args() args: ProductTranslationFindUniqueArgs
  ): Promise<ProductTranslation | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductTranslation)
  async createProductTranslation(
    @graphql.Args() args: CreateProductTranslationArgs
  ): Promise<ProductTranslation> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        product: {
          connect: args.data.product,
        },

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProductTranslation)
  async updateProductTranslation(
    @graphql.Args() args: UpdateProductTranslationArgs
  ): Promise<ProductTranslation | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          product: {
            connect: args.data.product,
          },

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductTranslation)
  async deleteProductTranslation(
    @graphql.Args() args: DeleteProductTranslationArgs
  ): Promise<ProductTranslation | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: ProductTranslation
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  async resolveFieldProduct(
    @graphql.Parent() parent: ProductTranslation
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: ProductTranslation
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
