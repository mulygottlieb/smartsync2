/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProductTypeArgs } from "./CreateProductTypeArgs";
import { UpdateProductTypeArgs } from "./UpdateProductTypeArgs";
import { DeleteProductTypeArgs } from "./DeleteProductTypeArgs";
import { ProductTypeCountArgs } from "./ProductTypeCountArgs";
import { ProductTypeFindManyArgs } from "./ProductTypeFindManyArgs";
import { ProductTypeFindUniqueArgs } from "./ProductTypeFindUniqueArgs";
import { ProductType } from "./ProductType";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { ProductTypeTranslationFindManyArgs } from "../../productTypeTranslation/base/ProductTypeTranslationFindManyArgs";
import { ProductTypeTranslation } from "../../productTypeTranslation/base/ProductTypeTranslation";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { ProductTypeService } from "../productType.service";
@graphql.Resolver(() => ProductType)
export class ProductTypeResolverBase {
  constructor(protected readonly service: ProductTypeService) {}

  async _productTypesMeta(
    @graphql.Args() args: ProductTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductType])
  async productTypes(
    @graphql.Args() args: ProductTypeFindManyArgs
  ): Promise<ProductType[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ProductType, { nullable: true })
  async productType(
    @graphql.Args() args: ProductTypeFindUniqueArgs
  ): Promise<ProductType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductType)
  async createProductType(
    @graphql.Args() args: CreateProductTypeArgs
  ): Promise<ProductType> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProductType)
  async updateProductType(
    @graphql.Args() args: UpdateProductTypeArgs
  ): Promise<ProductType | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductType)
  async deleteProductType(
    @graphql.Args() args: DeleteProductTypeArgs
  ): Promise<ProductType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Product], { name: "product" })
  async resolveFieldProduct(
    @graphql.Parent() parent: ProductType,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProduct(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductTypeTranslation], {
    name: "productTypeTranslation",
  })
  async resolveFieldProductTypeTranslation(
    @graphql.Parent() parent: ProductType,
    @graphql.Args() args: ProductTypeTranslationFindManyArgs
  ): Promise<ProductTypeTranslation[]> {
    const results = await this.service.findProductTypeTranslation(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: ProductType
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: ProductType
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
