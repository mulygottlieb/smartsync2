/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductVariantService } from "../productVariant.service";
import { ProductVariantCreateInput } from "./ProductVariantCreateInput";
import { ProductVariantWhereInput } from "./ProductVariantWhereInput";
import { ProductVariantWhereUniqueInput } from "./ProductVariantWhereUniqueInput";
import { ProductVariantFindManyArgs } from "./ProductVariantFindManyArgs";
import { ProductVariantUpdateInput } from "./ProductVariantUpdateInput";
import { ProductVariant } from "./ProductVariant";
import { ProductVariantOptionsProductOptionFindManyArgs } from "../../productVariantOptionsProductOption/base/ProductVariantOptionsProductOptionFindManyArgs";
import { ProductVariantOptionsProductOption } from "../../productVariantOptionsProductOption/base/ProductVariantOptionsProductOption";
import { ProductVariantOptionsProductOptionWhereUniqueInput } from "../../productVariantOptionsProductOption/base/ProductVariantOptionsProductOptionWhereUniqueInput";
import { WarehouseProductVariantFindManyArgs } from "../../warehouseProductVariant/base/WarehouseProductVariantFindManyArgs";
import { WarehouseProductVariant } from "../../warehouseProductVariant/base/WarehouseProductVariant";
import { WarehouseProductVariantWhereUniqueInput } from "../../warehouseProductVariant/base/WarehouseProductVariantWhereUniqueInput";

export class ProductVariantControllerBase {
  constructor(protected readonly service: ProductVariantService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductVariant })
  async create(
    @common.Body() data: ProductVariantCreateInput
  ): Promise<ProductVariant> {
    return await this.service.create({
      data: {
        ...data,

        productVariantPriceProductVariantPriceIdToproductVariantPrice:
          data.productVariantPriceProductVariantPriceIdToproductVariantPrice
            ? {
                connect:
                  data.productVariantPriceProductVariantPriceIdToproductVariantPrice,
              }
            : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        product: data.product
          ? {
              connect: data.product,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        productVariantSettingProductVariantSettingIdToproductVariantSetting:
          data.productVariantSettingProductVariantSettingIdToproductVariantSetting
            ? {
                connect:
                  data.productVariantSettingProductVariantSettingIdToproductVariantSetting,
              }
            : undefined,

        imageAsset: data.imageAsset
          ? {
              connect: data.imageAsset,
            }
          : undefined,

        productVariantPriceProductVariantPriceProductVariantIdToproductVariant:
          data.productVariantPriceProductVariantPriceProductVariantIdToproductVariant
            ? {
                connect:
                  data.productVariantPriceProductVariantPriceProductVariantIdToproductVariant,
              }
            : undefined,

        productVariantSettingProductVariantSettingProductVariantIdToproductVariant:
          data.productVariantSettingProductVariantSettingProductVariantIdToproductVariant
            ? {
                connect:
                  data.productVariantSettingProductVariantSettingProductVariantIdToproductVariant,
              }
            : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        taxes: true,
        notes: true,
        quantity: true,
        billingInvoicingPolicy: true,
        internalReference: true,
        enabled: true,

        productVariantPriceProductVariantPriceIdToproductVariantPrice: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productVariantSettingProductVariantSettingIdToproductVariantSetting: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        productVariantPriceProductVariantPriceProductVariantIdToproductVariant:
          {
            select: {
              id: true,
            },
          },

        productVariantSettingProductVariantSettingProductVariantIdToproductVariant:
          {
            select: {
              id: true,
            },
          },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductVariant] })
  @ApiNestedQuery(ProductVariantFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<ProductVariant[]> {
    const args = plainToClass(ProductVariantFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        taxes: true,
        notes: true,
        quantity: true,
        billingInvoicingPolicy: true,
        internalReference: true,
        enabled: true,

        productVariantPriceProductVariantPriceIdToproductVariantPrice: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productVariantSettingProductVariantSettingIdToproductVariantSetting: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        productVariantPriceProductVariantPriceProductVariantIdToproductVariant:
          {
            select: {
              id: true,
            },
          },

        productVariantSettingProductVariantSettingProductVariantIdToproductVariant:
          {
            select: {
              id: true,
            },
          },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductVariant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: ProductVariantWhereUniqueInput
  ): Promise<ProductVariant | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        taxes: true,
        notes: true,
        quantity: true,
        billingInvoicingPolicy: true,
        internalReference: true,
        enabled: true,

        productVariantPriceProductVariantPriceIdToproductVariantPrice: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productVariantSettingProductVariantSettingIdToproductVariantSetting: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        productVariantPriceProductVariantPriceProductVariantIdToproductVariant:
          {
            select: {
              id: true,
            },
          },

        productVariantSettingProductVariantSettingProductVariantIdToproductVariant:
          {
            select: {
              id: true,
            },
          },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductVariant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() data: ProductVariantUpdateInput
  ): Promise<ProductVariant | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          productVariantPriceProductVariantPriceIdToproductVariantPrice:
            data.productVariantPriceProductVariantPriceIdToproductVariantPrice
              ? {
                  connect:
                    data.productVariantPriceProductVariantPriceIdToproductVariantPrice,
                }
              : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          product: data.product
            ? {
                connect: data.product,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          productVariantSettingProductVariantSettingIdToproductVariantSetting:
            data.productVariantSettingProductVariantSettingIdToproductVariantSetting
              ? {
                  connect:
                    data.productVariantSettingProductVariantSettingIdToproductVariantSetting,
                }
              : undefined,

          imageAsset: data.imageAsset
            ? {
                connect: data.imageAsset,
              }
            : undefined,

          productVariantPriceProductVariantPriceProductVariantIdToproductVariant:
            data.productVariantPriceProductVariantPriceProductVariantIdToproductVariant
              ? {
                  connect:
                    data.productVariantPriceProductVariantPriceProductVariantIdToproductVariant,
                }
              : undefined,

          productVariantSettingProductVariantSettingProductVariantIdToproductVariant:
            data.productVariantSettingProductVariantSettingProductVariantIdToproductVariant
              ? {
                  connect:
                    data.productVariantSettingProductVariantSettingProductVariantIdToproductVariant,
                }
              : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          taxes: true,
          notes: true,
          quantity: true,
          billingInvoicingPolicy: true,
          internalReference: true,
          enabled: true,

          productVariantPriceProductVariantPriceIdToproductVariantPrice: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          product: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          productVariantSettingProductVariantSettingIdToproductVariantSetting: {
            select: {
              id: true,
            },
          },

          imageAsset: {
            select: {
              id: true,
            },
          },

          productVariantPriceProductVariantPriceProductVariantIdToproductVariant:
            {
              select: {
                id: true,
              },
            },

          productVariantSettingProductVariantSettingProductVariantIdToproductVariant:
            {
              select: {
                id: true,
              },
            },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductVariant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: ProductVariantWhereUniqueInput
  ): Promise<ProductVariant | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          taxes: true,
          notes: true,
          quantity: true,
          billingInvoicingPolicy: true,
          internalReference: true,
          enabled: true,

          productVariantPriceProductVariantPriceIdToproductVariantPrice: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          product: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          productVariantSettingProductVariantSettingIdToproductVariantSetting: {
            select: {
              id: true,
            },
          },

          imageAsset: {
            select: {
              id: true,
            },
          },

          productVariantPriceProductVariantPriceProductVariantIdToproductVariant:
            {
              select: {
                id: true,
              },
            },

          productVariantSettingProductVariantSettingProductVariantIdToproductVariant:
            {
              select: {
                id: true,
              },
            },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/productVariantOptionsProductOption")
  @ApiNestedQuery(ProductVariantOptionsProductOptionFindManyArgs)
  async findManyProductVariantOptionsProductOption(
    @common.Req() request: Request,
    @common.Param() params: ProductVariantWhereUniqueInput
  ): Promise<ProductVariantOptionsProductOption[]> {
    const query = plainToClass(
      ProductVariantOptionsProductOptionFindManyArgs,
      request.query
    );
    const results = await this.service.findProductVariantOptionsProductOption(
      params.id,
      {
        ...query,
        select: {
          productVariant: {
            select: {
              id: true,
            },
          },

          productOption: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productVariantOptionsProductOption")
  async connectProductVariantOptionsProductOption(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() body: ProductVariantOptionsProductOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariantOptionsProductOption: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productVariantOptionsProductOption")
  async updateProductVariantOptionsProductOption(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() body: ProductVariantOptionsProductOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariantOptionsProductOption: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productVariantOptionsProductOption")
  async disconnectProductVariantOptionsProductOption(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() body: ProductVariantOptionsProductOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariantOptionsProductOption: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/warehouseProductVariant")
  @ApiNestedQuery(WarehouseProductVariantFindManyArgs)
  async findManyWarehouseProductVariant(
    @common.Req() request: Request,
    @common.Param() params: ProductVariantWhereUniqueInput
  ): Promise<WarehouseProductVariant[]> {
    const query = plainToClass(
      WarehouseProductVariantFindManyArgs,
      request.query
    );
    const results = await this.service.findWarehouseProductVariant(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        quantity: true,

        warehouseProduct: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productVariant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/warehouseProductVariant")
  async connectWarehouseProductVariant(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() body: WarehouseProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseProductVariant: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/warehouseProductVariant")
  async updateWarehouseProductVariant(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() body: WarehouseProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseProductVariant: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/warehouseProductVariant")
  async disconnectWarehouseProductVariant(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() body: WarehouseProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseProductVariant: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
