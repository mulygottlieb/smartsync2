/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProductVariantArgs } from "./CreateProductVariantArgs";
import { UpdateProductVariantArgs } from "./UpdateProductVariantArgs";
import { DeleteProductVariantArgs } from "./DeleteProductVariantArgs";
import { ProductVariantCountArgs } from "./ProductVariantCountArgs";
import { ProductVariantFindManyArgs } from "./ProductVariantFindManyArgs";
import { ProductVariantFindUniqueArgs } from "./ProductVariantFindUniqueArgs";
import { ProductVariant } from "./ProductVariant";
import { ProductVariantOptionsProductOptionFindManyArgs } from "../../productVariantOptionsProductOption/base/ProductVariantOptionsProductOptionFindManyArgs";
import { ProductVariantOptionsProductOption } from "../../productVariantOptionsProductOption/base/ProductVariantOptionsProductOption";
import { WarehouseProductVariantFindManyArgs } from "../../warehouseProductVariant/base/WarehouseProductVariantFindManyArgs";
import { WarehouseProductVariant } from "../../warehouseProductVariant/base/WarehouseProductVariant";
import { ProductVariantPrice } from "../../productVariantPrice/base/ProductVariantPrice";
import { Organization } from "../../organization/base/Organization";
import { Product } from "../../product/base/Product";
import { Tenant } from "../../tenant/base/Tenant";
import { ProductVariantSetting } from "../../productVariantSetting/base/ProductVariantSetting";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { ProductVariantService } from "../productVariant.service";
@graphql.Resolver(() => ProductVariant)
export class ProductVariantResolverBase {
  constructor(protected readonly service: ProductVariantService) {}

  async _productVariantsMeta(
    @graphql.Args() args: ProductVariantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductVariant])
  async productVariants(
    @graphql.Args() args: ProductVariantFindManyArgs
  ): Promise<ProductVariant[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ProductVariant, { nullable: true })
  async productVariant(
    @graphql.Args() args: ProductVariantFindUniqueArgs
  ): Promise<ProductVariant | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductVariant)
  async createProductVariant(
    @graphql.Args() args: CreateProductVariantArgs
  ): Promise<ProductVariant> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        productVariantPriceProductVariantPriceIdToproductVariantPrice: args.data
          .productVariantPriceProductVariantPriceIdToproductVariantPrice
          ? {
              connect:
                args.data
                  .productVariantPriceProductVariantPriceIdToproductVariantPrice,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        productVariantSettingProductVariantSettingIdToproductVariantSetting:
          args.data
            .productVariantSettingProductVariantSettingIdToproductVariantSetting
            ? {
                connect:
                  args.data
                    .productVariantSettingProductVariantSettingIdToproductVariantSetting,
              }
            : undefined,

        imageAsset: args.data.imageAsset
          ? {
              connect: args.data.imageAsset,
            }
          : undefined,

        productVariantPriceProductVariantPriceProductVariantIdToproductVariant:
          args.data
            .productVariantPriceProductVariantPriceProductVariantIdToproductVariant
            ? {
                connect:
                  args.data
                    .productVariantPriceProductVariantPriceProductVariantIdToproductVariant,
              }
            : undefined,

        productVariantSettingProductVariantSettingProductVariantIdToproductVariant:
          args.data
            .productVariantSettingProductVariantSettingProductVariantIdToproductVariant
            ? {
                connect:
                  args.data
                    .productVariantSettingProductVariantSettingProductVariantIdToproductVariant,
              }
            : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProductVariant)
  async updateProductVariant(
    @graphql.Args() args: UpdateProductVariantArgs
  ): Promise<ProductVariant | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          productVariantPriceProductVariantPriceIdToproductVariantPrice: args
            .data.productVariantPriceProductVariantPriceIdToproductVariantPrice
            ? {
                connect:
                  args.data
                    .productVariantPriceProductVariantPriceIdToproductVariantPrice,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          productVariantSettingProductVariantSettingIdToproductVariantSetting:
            args.data
              .productVariantSettingProductVariantSettingIdToproductVariantSetting
              ? {
                  connect:
                    args.data
                      .productVariantSettingProductVariantSettingIdToproductVariantSetting,
                }
              : undefined,

          imageAsset: args.data.imageAsset
            ? {
                connect: args.data.imageAsset,
              }
            : undefined,

          productVariantPriceProductVariantPriceProductVariantIdToproductVariant:
            args.data
              .productVariantPriceProductVariantPriceProductVariantIdToproductVariant
              ? {
                  connect:
                    args.data
                      .productVariantPriceProductVariantPriceProductVariantIdToproductVariant,
                }
              : undefined,

          productVariantSettingProductVariantSettingProductVariantIdToproductVariant:
            args.data
              .productVariantSettingProductVariantSettingProductVariantIdToproductVariant
              ? {
                  connect:
                    args.data
                      .productVariantSettingProductVariantSettingProductVariantIdToproductVariant,
                }
              : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductVariant)
  async deleteProductVariant(
    @graphql.Args() args: DeleteProductVariantArgs
  ): Promise<ProductVariant | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ProductVariantOptionsProductOption], {
    name: "productVariantOptionsProductOption",
  })
  async resolveFieldProductVariantOptionsProductOption(
    @graphql.Parent() parent: ProductVariant,
    @graphql.Args() args: ProductVariantOptionsProductOptionFindManyArgs
  ): Promise<ProductVariantOptionsProductOption[]> {
    const results = await this.service.findProductVariantOptionsProductOption(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [WarehouseProductVariant], {
    name: "warehouseProductVariant",
  })
  async resolveFieldWarehouseProductVariant(
    @graphql.Parent() parent: ProductVariant,
    @graphql.Args() args: WarehouseProductVariantFindManyArgs
  ): Promise<WarehouseProductVariant[]> {
    const results = await this.service.findWarehouseProductVariant(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => ProductVariantPrice, {
    nullable: true,
    name: "productVariantPriceProductVariantPriceIdToproductVariantPrice",
  })
  async resolveFieldProductVariantPriceProductVariantPriceIdToproductVariantPrice(
    @graphql.Parent() parent: ProductVariant
  ): Promise<ProductVariantPrice | null> {
    const result =
      await this.service.getProductVariantPriceProductVariantPriceIdToproductVariantPrice(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: ProductVariant
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  async resolveFieldProduct(
    @graphql.Parent() parent: ProductVariant
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: ProductVariant
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProductVariantSetting, {
    nullable: true,
    name: "productVariantSettingProductVariantSettingIdToproductVariantSetting",
  })
  async resolveFieldProductVariantSettingProductVariantSettingIdToproductVariantSetting(
    @graphql.Parent() parent: ProductVariant
  ): Promise<ProductVariantSetting | null> {
    const result =
      await this.service.getProductVariantSettingProductVariantSettingIdToproductVariantSetting(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ImageAsset, {
    nullable: true,
    name: "imageAsset",
  })
  async resolveFieldImageAsset(
    @graphql.Parent() parent: ProductVariant
  ): Promise<ImageAsset | null> {
    const result = await this.service.getImageAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProductVariantPrice, {
    nullable: true,
    name: "productVariantPriceProductVariantPriceProductVariantIdToproductVariant",
  })
  async resolveFieldProductVariantPriceProductVariantPriceProductVariantIdToproductVariant(
    @graphql.Parent() parent: ProductVariant
  ): Promise<ProductVariantPrice | null> {
    const result =
      await this.service.getProductVariantPriceProductVariantPriceProductVariantIdToproductVariant(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProductVariantSetting, {
    nullable: true,
    name: "productVariantSettingProductVariantSettingProductVariantIdToproductVariant",
  })
  async resolveFieldProductVariantSettingProductVariantSettingProductVariantIdToproductVariant(
    @graphql.Parent() parent: ProductVariant
  ): Promise<ProductVariantSetting | null> {
    const result =
      await this.service.getProductVariantSettingProductVariantSettingProductVariantIdToproductVariant(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }
}
