/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProductVariantOptionsProductOptionArgs } from "./CreateProductVariantOptionsProductOptionArgs";
import { UpdateProductVariantOptionsProductOptionArgs } from "./UpdateProductVariantOptionsProductOptionArgs";
import { DeleteProductVariantOptionsProductOptionArgs } from "./DeleteProductVariantOptionsProductOptionArgs";
import { ProductVariantOptionsProductOptionCountArgs } from "./ProductVariantOptionsProductOptionCountArgs";
import { ProductVariantOptionsProductOptionFindManyArgs } from "./ProductVariantOptionsProductOptionFindManyArgs";
import { ProductVariantOptionsProductOptionFindUniqueArgs } from "./ProductVariantOptionsProductOptionFindUniqueArgs";
import { ProductVariantOptionsProductOption } from "./ProductVariantOptionsProductOption";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { ProductOption } from "../../productOption/base/ProductOption";
import { ProductVariantOptionsProductOptionService } from "../productVariantOptionsProductOption.service";
@graphql.Resolver(() => ProductVariantOptionsProductOption)
export class ProductVariantOptionsProductOptionResolverBase {
  constructor(
    protected readonly service: ProductVariantOptionsProductOptionService
  ) {}

  async _productVariantOptionsProductOptionsMeta(
    @graphql.Args() args: ProductVariantOptionsProductOptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductVariantOptionsProductOption])
  async productVariantOptionsProductOptions(
    @graphql.Args() args: ProductVariantOptionsProductOptionFindManyArgs
  ): Promise<ProductVariantOptionsProductOption[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ProductVariantOptionsProductOption, { nullable: true })
  async productVariantOptionsProductOption(
    @graphql.Args() args: ProductVariantOptionsProductOptionFindUniqueArgs
  ): Promise<ProductVariantOptionsProductOption | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductVariantOptionsProductOption)
  async createProductVariantOptionsProductOption(
    @graphql.Args() args: CreateProductVariantOptionsProductOptionArgs
  ): Promise<ProductVariantOptionsProductOption> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        productVariant: {
          connect: args.data.productVariant,
        },

        productOption: {
          connect: args.data.productOption,
        },
      },
    });
  }

  @graphql.Mutation(() => ProductVariantOptionsProductOption)
  async updateProductVariantOptionsProductOption(
    @graphql.Args() args: UpdateProductVariantOptionsProductOptionArgs
  ): Promise<ProductVariantOptionsProductOption | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          productVariant: {
            connect: args.data.productVariant,
          },

          productOption: {
            connect: args.data.productOption,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductVariantOptionsProductOption)
  async deleteProductVariantOptionsProductOption(
    @graphql.Args() args: DeleteProductVariantOptionsProductOptionArgs
  ): Promise<ProductVariantOptionsProductOption | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ProductVariant, {
    nullable: true,
    name: "productVariant",
  })
  async resolveFieldProductVariant(
    @graphql.Parent() parent: ProductVariantOptionsProductOption
  ): Promise<ProductVariant | null> {
    const result = await this.service.getProductVariant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProductOption, {
    nullable: true,
    name: "productOption",
  })
  async resolveFieldProductOption(
    @graphql.Parent() parent: ProductVariantOptionsProductOption
  ): Promise<ProductOption | null> {
    const result = await this.service.getProductOption(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
