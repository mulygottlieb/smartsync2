/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProductVariantPriceArgs } from "./CreateProductVariantPriceArgs";
import { UpdateProductVariantPriceArgs } from "./UpdateProductVariantPriceArgs";
import { DeleteProductVariantPriceArgs } from "./DeleteProductVariantPriceArgs";
import { ProductVariantPriceCountArgs } from "./ProductVariantPriceCountArgs";
import { ProductVariantPriceFindManyArgs } from "./ProductVariantPriceFindManyArgs";
import { ProductVariantPriceFindUniqueArgs } from "./ProductVariantPriceFindUniqueArgs";
import { ProductVariantPrice } from "./ProductVariantPrice";
import { Organization } from "../../organization/base/Organization";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { Tenant } from "../../tenant/base/Tenant";
import { ProductVariantPriceService } from "../productVariantPrice.service";
@graphql.Resolver(() => ProductVariantPrice)
export class ProductVariantPriceResolverBase {
  constructor(protected readonly service: ProductVariantPriceService) {}

  async _productVariantPricesMeta(
    @graphql.Args() args: ProductVariantPriceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductVariantPrice])
  async productVariantPrices(
    @graphql.Args() args: ProductVariantPriceFindManyArgs
  ): Promise<ProductVariantPrice[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ProductVariantPrice, { nullable: true })
  async productVariantPrice(
    @graphql.Args() args: ProductVariantPriceFindUniqueArgs
  ): Promise<ProductVariantPrice | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductVariantPrice)
  async createProductVariantPrice(
    @graphql.Args() args: CreateProductVariantPriceArgs
  ): Promise<ProductVariantPrice> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        productVariantProductVariantPriceProductVariantIdToproductVariant: args
          .data
          .productVariantProductVariantPriceProductVariantIdToproductVariant
          ? {
              connect:
                args.data
                  .productVariantProductVariantPriceProductVariantIdToproductVariant,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        productVariantProductVariantPriceIdToproductVariantPrice: args.data
          .productVariantProductVariantPriceIdToproductVariantPrice
          ? {
              connect:
                args.data
                  .productVariantProductVariantPriceIdToproductVariantPrice,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProductVariantPrice)
  async updateProductVariantPrice(
    @graphql.Args() args: UpdateProductVariantPriceArgs
  ): Promise<ProductVariantPrice | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          productVariantProductVariantPriceProductVariantIdToproductVariant:
            args.data
              .productVariantProductVariantPriceProductVariantIdToproductVariant
              ? {
                  connect:
                    args.data
                      .productVariantProductVariantPriceProductVariantIdToproductVariant,
                }
              : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          productVariantProductVariantPriceIdToproductVariantPrice: args.data
            .productVariantProductVariantPriceIdToproductVariantPrice
            ? {
                connect:
                  args.data
                    .productVariantProductVariantPriceIdToproductVariantPrice,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductVariantPrice)
  async deleteProductVariantPrice(
    @graphql.Args() args: DeleteProductVariantPriceArgs
  ): Promise<ProductVariantPrice | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: ProductVariantPrice
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProductVariant, {
    nullable: true,
    name: "productVariantProductVariantPriceProductVariantIdToproductVariant",
  })
  async resolveFieldProductVariantProductVariantPriceProductVariantIdToproductVariant(
    @graphql.Parent() parent: ProductVariantPrice
  ): Promise<ProductVariant | null> {
    const result =
      await this.service.getProductVariantProductVariantPriceProductVariantIdToproductVariant(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: ProductVariantPrice
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProductVariant, {
    nullable: true,
    name: "productVariantProductVariantPriceIdToproductVariantPrice",
  })
  async resolveFieldProductVariantProductVariantPriceIdToproductVariantPrice(
    @graphql.Parent() parent: ProductVariantPrice
  ): Promise<ProductVariant | null> {
    const result =
      await this.service.getProductVariantProductVariantPriceIdToproductVariantPrice(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }
}
