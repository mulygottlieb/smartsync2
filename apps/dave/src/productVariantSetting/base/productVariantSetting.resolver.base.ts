/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProductVariantSettingArgs } from "./CreateProductVariantSettingArgs";
import { UpdateProductVariantSettingArgs } from "./UpdateProductVariantSettingArgs";
import { DeleteProductVariantSettingArgs } from "./DeleteProductVariantSettingArgs";
import { ProductVariantSettingCountArgs } from "./ProductVariantSettingCountArgs";
import { ProductVariantSettingFindManyArgs } from "./ProductVariantSettingFindManyArgs";
import { ProductVariantSettingFindUniqueArgs } from "./ProductVariantSettingFindUniqueArgs";
import { ProductVariantSetting } from "./ProductVariantSetting";
import { Tenant } from "../../tenant/base/Tenant";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { Organization } from "../../organization/base/Organization";
import { ProductVariantSettingService } from "../productVariantSetting.service";
@graphql.Resolver(() => ProductVariantSetting)
export class ProductVariantSettingResolverBase {
  constructor(protected readonly service: ProductVariantSettingService) {}

  async _productVariantSettingsMeta(
    @graphql.Args() args: ProductVariantSettingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductVariantSetting])
  async productVariantSettings(
    @graphql.Args() args: ProductVariantSettingFindManyArgs
  ): Promise<ProductVariantSetting[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ProductVariantSetting, { nullable: true })
  async productVariantSetting(
    @graphql.Args() args: ProductVariantSettingFindUniqueArgs
  ): Promise<ProductVariantSetting | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductVariantSetting)
  async createProductVariantSetting(
    @graphql.Args() args: CreateProductVariantSettingArgs
  ): Promise<ProductVariantSetting> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        productVariantProductVariantSettingProductVariantIdToproductVariant:
          args.data
            .productVariantProductVariantSettingProductVariantIdToproductVariant
            ? {
                connect:
                  args.data
                    .productVariantProductVariantSettingProductVariantIdToproductVariant,
              }
            : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        productVariantProductVariantSettingIdToproductVariantSetting: args.data
          .productVariantProductVariantSettingIdToproductVariantSetting
          ? {
              connect:
                args.data
                  .productVariantProductVariantSettingIdToproductVariantSetting,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProductVariantSetting)
  async updateProductVariantSetting(
    @graphql.Args() args: UpdateProductVariantSettingArgs
  ): Promise<ProductVariantSetting | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          productVariantProductVariantSettingProductVariantIdToproductVariant:
            args.data
              .productVariantProductVariantSettingProductVariantIdToproductVariant
              ? {
                  connect:
                    args.data
                      .productVariantProductVariantSettingProductVariantIdToproductVariant,
                }
              : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          productVariantProductVariantSettingIdToproductVariantSetting: args
            .data.productVariantProductVariantSettingIdToproductVariantSetting
            ? {
                connect:
                  args.data
                    .productVariantProductVariantSettingIdToproductVariantSetting,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductVariantSetting)
  async deleteProductVariantSetting(
    @graphql.Args() args: DeleteProductVariantSettingArgs
  ): Promise<ProductVariantSetting | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: ProductVariantSetting
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProductVariant, {
    nullable: true,
    name: "productVariantProductVariantSettingProductVariantIdToproductVariant",
  })
  async resolveFieldProductVariantProductVariantSettingProductVariantIdToproductVariant(
    @graphql.Parent() parent: ProductVariantSetting
  ): Promise<ProductVariant | null> {
    const result =
      await this.service.getProductVariantProductVariantSettingProductVariantIdToproductVariant(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: ProductVariantSetting
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProductVariant, {
    nullable: true,
    name: "productVariantProductVariantSettingIdToproductVariantSetting",
  })
  async resolveFieldProductVariantProductVariantSettingIdToproductVariantSetting(
    @graphql.Parent() parent: ProductVariantSetting
  ): Promise<ProductVariant | null> {
    const result =
      await this.service.getProductVariantProductVariantSettingIdToproductVariantSetting(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }
}
