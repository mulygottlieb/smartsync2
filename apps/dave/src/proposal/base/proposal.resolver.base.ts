/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProposalArgs } from "./CreateProposalArgs";
import { UpdateProposalArgs } from "./UpdateProposalArgs";
import { DeleteProposalArgs } from "./DeleteProposalArgs";
import { ProposalCountArgs } from "./ProposalCountArgs";
import { ProposalFindManyArgs } from "./ProposalFindManyArgs";
import { ProposalFindUniqueArgs } from "./ProposalFindUniqueArgs";
import { Proposal } from "./Proposal";
import { TagProposalFindManyArgs } from "../../tagProposal/base/TagProposalFindManyArgs";
import { TagProposal } from "../../tagProposal/base/TagProposal";
import { Tenant } from "../../tenant/base/Tenant";
import { OrganizationContact } from "../../organizationContact/base/OrganizationContact";
import { Organization } from "../../organization/base/Organization";
import { Employee } from "../../employee/base/Employee";
import { ProposalService } from "../proposal.service";
@graphql.Resolver(() => Proposal)
export class ProposalResolverBase {
  constructor(protected readonly service: ProposalService) {}

  async _proposalsMeta(
    @graphql.Args() args: ProposalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Proposal])
  async proposals(
    @graphql.Args() args: ProposalFindManyArgs
  ): Promise<Proposal[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Proposal, { nullable: true })
  async proposal(
    @graphql.Args() args: ProposalFindUniqueArgs
  ): Promise<Proposal | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Proposal)
  async createProposal(
    @graphql.Args() args: CreateProposalArgs
  ): Promise<Proposal> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organizationContact: args.data.organizationContact
          ? {
              connect: args.data.organizationContact,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Proposal)
  async updateProposal(
    @graphql.Args() args: UpdateProposalArgs
  ): Promise<Proposal | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organizationContact: args.data.organizationContact
            ? {
                connect: args.data.organizationContact,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Proposal)
  async deleteProposal(
    @graphql.Args() args: DeleteProposalArgs
  ): Promise<Proposal | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TagProposal], { name: "tagProposal" })
  async resolveFieldTagProposal(
    @graphql.Parent() parent: Proposal,
    @graphql.Args() args: TagProposalFindManyArgs
  ): Promise<TagProposal[]> {
    const results = await this.service.findTagProposal(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: Proposal
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationContact, {
    nullable: true,
    name: "organizationContact",
  })
  async resolveFieldOrganizationContact(
    @graphql.Parent() parent: Proposal
  ): Promise<OrganizationContact | null> {
    const result = await this.service.getOrganizationContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: Proposal
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: Proposal
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
