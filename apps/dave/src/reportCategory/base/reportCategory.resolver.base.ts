/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateReportCategoryArgs } from "./CreateReportCategoryArgs";
import { UpdateReportCategoryArgs } from "./UpdateReportCategoryArgs";
import { DeleteReportCategoryArgs } from "./DeleteReportCategoryArgs";
import { ReportCategoryCountArgs } from "./ReportCategoryCountArgs";
import { ReportCategoryFindManyArgs } from "./ReportCategoryFindManyArgs";
import { ReportCategoryFindUniqueArgs } from "./ReportCategoryFindUniqueArgs";
import { ReportCategory } from "./ReportCategory";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { ReportCategoryService } from "../reportCategory.service";
@graphql.Resolver(() => ReportCategory)
export class ReportCategoryResolverBase {
  constructor(protected readonly service: ReportCategoryService) {}

  async _reportCategoriesMeta(
    @graphql.Args() args: ReportCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReportCategory])
  async reportCategories(
    @graphql.Args() args: ReportCategoryFindManyArgs
  ): Promise<ReportCategory[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ReportCategory, { nullable: true })
  async reportCategory(
    @graphql.Args() args: ReportCategoryFindUniqueArgs
  ): Promise<ReportCategory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReportCategory)
  async createReportCategory(
    @graphql.Args() args: CreateReportCategoryArgs
  ): Promise<ReportCategory> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ReportCategory)
  async updateReportCategory(
    @graphql.Args() args: UpdateReportCategoryArgs
  ): Promise<ReportCategory | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReportCategory)
  async deleteReportCategory(
    @graphql.Args() args: DeleteReportCategoryArgs
  ): Promise<ReportCategory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Report], { name: "report" })
  async resolveFieldReport(
    @graphql.Parent() parent: ReportCategory,
    @graphql.Args() args: ReportFindManyArgs
  ): Promise<Report[]> {
    const results = await this.service.findReport(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
