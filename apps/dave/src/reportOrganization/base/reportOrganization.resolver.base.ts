/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateReportOrganizationArgs } from "./CreateReportOrganizationArgs";
import { UpdateReportOrganizationArgs } from "./UpdateReportOrganizationArgs";
import { DeleteReportOrganizationArgs } from "./DeleteReportOrganizationArgs";
import { ReportOrganizationCountArgs } from "./ReportOrganizationCountArgs";
import { ReportOrganizationFindManyArgs } from "./ReportOrganizationFindManyArgs";
import { ReportOrganizationFindUniqueArgs } from "./ReportOrganizationFindUniqueArgs";
import { ReportOrganization } from "./ReportOrganization";
import { Organization } from "../../organization/base/Organization";
import { Report } from "../../report/base/Report";
import { Tenant } from "../../tenant/base/Tenant";
import { ReportOrganizationService } from "../reportOrganization.service";
@graphql.Resolver(() => ReportOrganization)
export class ReportOrganizationResolverBase {
  constructor(protected readonly service: ReportOrganizationService) {}

  async _reportOrganizationsMeta(
    @graphql.Args() args: ReportOrganizationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReportOrganization])
  async reportOrganizations(
    @graphql.Args() args: ReportOrganizationFindManyArgs
  ): Promise<ReportOrganization[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ReportOrganization, { nullable: true })
  async reportOrganization(
    @graphql.Args() args: ReportOrganizationFindUniqueArgs
  ): Promise<ReportOrganization | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReportOrganization)
  async createReportOrganization(
    @graphql.Args() args: CreateReportOrganizationArgs
  ): Promise<ReportOrganization> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        report: {
          connect: args.data.report,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ReportOrganization)
  async updateReportOrganization(
    @graphql.Args() args: UpdateReportOrganizationArgs
  ): Promise<ReportOrganization | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          report: {
            connect: args.data.report,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReportOrganization)
  async deleteReportOrganization(
    @graphql.Args() args: DeleteReportOrganizationArgs
  ): Promise<ReportOrganization | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: ReportOrganization
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Report, {
    nullable: true,
    name: "report",
  })
  async resolveFieldReport(
    @graphql.Parent() parent: ReportOrganization
  ): Promise<Report | null> {
    const result = await this.service.getReport(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: ReportOrganization
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
