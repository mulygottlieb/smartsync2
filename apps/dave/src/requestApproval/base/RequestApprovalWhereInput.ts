/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested } from "class-validator";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { ApprovalPolicyWhereUniqueInput } from "../../approvalPolicy/base/ApprovalPolicyWhereUniqueInput";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { RequestApprovalEmployeeListRelationFilter } from "../../requestApprovalEmployee/base/RequestApprovalEmployeeListRelationFilter";
import { RequestApprovalTeamListRelationFilter } from "../../requestApprovalTeam/base/RequestApprovalTeamListRelationFilter";
import { TagRequestApprovalListRelationFilter } from "../../tagRequestApproval/base/TagRequestApprovalListRelationFilter";

@InputType()
class RequestApprovalWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  createdAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  name?: StringFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  status?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  createdBy?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  createdByName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  minCount?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  requestId?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  requestType?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ApprovalPolicyWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ApprovalPolicyWhereUniqueInput)
  @IsOptional()
  @Field(() => ApprovalPolicyWhereUniqueInput, {
    nullable: true,
  })
  approvalPolicy?: ApprovalPolicyWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organization?: OrganizationWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => RequestApprovalEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => RequestApprovalEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => RequestApprovalEmployeeListRelationFilter, {
    nullable: true,
  })
  requestApprovalEmployee?: RequestApprovalEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => RequestApprovalTeamListRelationFilter,
  })
  @ValidateNested()
  @Type(() => RequestApprovalTeamListRelationFilter)
  @IsOptional()
  @Field(() => RequestApprovalTeamListRelationFilter, {
    nullable: true,
  })
  requestApprovalTeam?: RequestApprovalTeamListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TagRequestApprovalListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TagRequestApprovalListRelationFilter)
  @IsOptional()
  @Field(() => TagRequestApprovalListRelationFilter, {
    nullable: true,
  })
  tagRequestApproval?: TagRequestApprovalListRelationFilter;
}

export { RequestApprovalWhereInput as RequestApprovalWhereInput };
