/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RequestApprovalService } from "../requestApproval.service";
import { RequestApprovalCreateInput } from "./RequestApprovalCreateInput";
import { RequestApprovalWhereInput } from "./RequestApprovalWhereInput";
import { RequestApprovalWhereUniqueInput } from "./RequestApprovalWhereUniqueInput";
import { RequestApprovalFindManyArgs } from "./RequestApprovalFindManyArgs";
import { RequestApprovalUpdateInput } from "./RequestApprovalUpdateInput";
import { RequestApproval } from "./RequestApproval";
import { RequestApprovalEmployeeFindManyArgs } from "../../requestApprovalEmployee/base/RequestApprovalEmployeeFindManyArgs";
import { RequestApprovalEmployee } from "../../requestApprovalEmployee/base/RequestApprovalEmployee";
import { RequestApprovalEmployeeWhereUniqueInput } from "../../requestApprovalEmployee/base/RequestApprovalEmployeeWhereUniqueInput";
import { RequestApprovalTeamFindManyArgs } from "../../requestApprovalTeam/base/RequestApprovalTeamFindManyArgs";
import { RequestApprovalTeam } from "../../requestApprovalTeam/base/RequestApprovalTeam";
import { RequestApprovalTeamWhereUniqueInput } from "../../requestApprovalTeam/base/RequestApprovalTeamWhereUniqueInput";
import { TagRequestApprovalFindManyArgs } from "../../tagRequestApproval/base/TagRequestApprovalFindManyArgs";
import { TagRequestApproval } from "../../tagRequestApproval/base/TagRequestApproval";
import { TagRequestApprovalWhereUniqueInput } from "../../tagRequestApproval/base/TagRequestApprovalWhereUniqueInput";

export class RequestApprovalControllerBase {
  constructor(protected readonly service: RequestApprovalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RequestApproval })
  async create(
    @common.Body() data: RequestApprovalCreateInput
  ): Promise<RequestApproval> {
    return await this.service.create({
      data: {
        ...data,

        approvalPolicy: data.approvalPolicy
          ? {
              connect: data.approvalPolicy,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        status: true,
        createdBy: true,
        createdByName: true,
        minCount: true,
        requestId: true,
        requestType: true,

        approvalPolicy: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RequestApproval] })
  @ApiNestedQuery(RequestApprovalFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<RequestApproval[]> {
    const args = plainToClass(RequestApprovalFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        status: true,
        createdBy: true,
        createdByName: true,
        minCount: true,
        requestId: true,
        requestType: true,

        approvalPolicy: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RequestApproval })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: RequestApprovalWhereUniqueInput
  ): Promise<RequestApproval | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        status: true,
        createdBy: true,
        createdByName: true,
        minCount: true,
        requestId: true,
        requestType: true,

        approvalPolicy: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RequestApproval })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: RequestApprovalWhereUniqueInput,
    @common.Body() data: RequestApprovalUpdateInput
  ): Promise<RequestApproval | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          approvalPolicy: data.approvalPolicy
            ? {
                connect: data.approvalPolicy,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          status: true,
          createdBy: true,
          createdByName: true,
          minCount: true,
          requestId: true,
          requestType: true,

          approvalPolicy: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RequestApproval })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: RequestApprovalWhereUniqueInput
  ): Promise<RequestApproval | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          status: true,
          createdBy: true,
          createdByName: true,
          minCount: true,
          requestId: true,
          requestType: true,

          approvalPolicy: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/requestApprovalEmployee")
  @ApiNestedQuery(RequestApprovalEmployeeFindManyArgs)
  async findManyRequestApprovalEmployee(
    @common.Req() request: Request,
    @common.Param() params: RequestApprovalWhereUniqueInput
  ): Promise<RequestApprovalEmployee[]> {
    const query = plainToClass(
      RequestApprovalEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findRequestApprovalEmployee(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        organization: {
          select: {
            id: true,
          },
        },

        requestApproval: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/requestApprovalEmployee")
  async connectRequestApprovalEmployee(
    @common.Param() params: RequestApprovalWhereUniqueInput,
    @common.Body() body: RequestApprovalEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/requestApprovalEmployee")
  async updateRequestApprovalEmployee(
    @common.Param() params: RequestApprovalWhereUniqueInput,
    @common.Body() body: RequestApprovalEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/requestApprovalEmployee")
  async disconnectRequestApprovalEmployee(
    @common.Param() params: RequestApprovalWhereUniqueInput,
    @common.Body() body: RequestApprovalEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/requestApprovalTeam")
  @ApiNestedQuery(RequestApprovalTeamFindManyArgs)
  async findManyRequestApprovalTeam(
    @common.Req() request: Request,
    @common.Param() params: RequestApprovalWhereUniqueInput
  ): Promise<RequestApprovalTeam[]> {
    const query = plainToClass(RequestApprovalTeamFindManyArgs, request.query);
    const results = await this.service.findRequestApprovalTeam(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        requestApproval: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/requestApprovalTeam")
  async connectRequestApprovalTeam(
    @common.Param() params: RequestApprovalWhereUniqueInput,
    @common.Body() body: RequestApprovalTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalTeam: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/requestApprovalTeam")
  async updateRequestApprovalTeam(
    @common.Param() params: RequestApprovalWhereUniqueInput,
    @common.Body() body: RequestApprovalTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalTeam: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/requestApprovalTeam")
  async disconnectRequestApprovalTeam(
    @common.Param() params: RequestApprovalWhereUniqueInput,
    @common.Body() body: RequestApprovalTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalTeam: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagRequestApproval")
  @ApiNestedQuery(TagRequestApprovalFindManyArgs)
  async findManyTagRequestApproval(
    @common.Req() request: Request,
    @common.Param() params: RequestApprovalWhereUniqueInput
  ): Promise<TagRequestApproval[]> {
    const query = plainToClass(TagRequestApprovalFindManyArgs, request.query);
    const results = await this.service.findTagRequestApproval(params.id, {
      ...query,
      select: {
        tag: {
          select: {
            id: true,
          },
        },

        requestApproval: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagRequestApproval")
  async connectTagRequestApproval(
    @common.Param() params: RequestApprovalWhereUniqueInput,
    @common.Body() body: TagRequestApprovalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagRequestApproval: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagRequestApproval")
  async updateTagRequestApproval(
    @common.Param() params: RequestApprovalWhereUniqueInput,
    @common.Body() body: TagRequestApprovalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagRequestApproval: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagRequestApproval")
  async disconnectTagRequestApproval(
    @common.Param() params: RequestApprovalWhereUniqueInput,
    @common.Body() body: TagRequestApprovalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagRequestApproval: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
