/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateRequestApprovalEmployeeArgs } from "./CreateRequestApprovalEmployeeArgs";
import { UpdateRequestApprovalEmployeeArgs } from "./UpdateRequestApprovalEmployeeArgs";
import { DeleteRequestApprovalEmployeeArgs } from "./DeleteRequestApprovalEmployeeArgs";
import { RequestApprovalEmployeeCountArgs } from "./RequestApprovalEmployeeCountArgs";
import { RequestApprovalEmployeeFindManyArgs } from "./RequestApprovalEmployeeFindManyArgs";
import { RequestApprovalEmployeeFindUniqueArgs } from "./RequestApprovalEmployeeFindUniqueArgs";
import { RequestApprovalEmployee } from "./RequestApprovalEmployee";
import { Organization } from "../../organization/base/Organization";
import { RequestApproval } from "../../requestApproval/base/RequestApproval";
import { Tenant } from "../../tenant/base/Tenant";
import { Employee } from "../../employee/base/Employee";
import { RequestApprovalEmployeeService } from "../requestApprovalEmployee.service";
@graphql.Resolver(() => RequestApprovalEmployee)
export class RequestApprovalEmployeeResolverBase {
  constructor(protected readonly service: RequestApprovalEmployeeService) {}

  async _requestApprovalEmployeesMeta(
    @graphql.Args() args: RequestApprovalEmployeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RequestApprovalEmployee])
  async requestApprovalEmployees(
    @graphql.Args() args: RequestApprovalEmployeeFindManyArgs
  ): Promise<RequestApprovalEmployee[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => RequestApprovalEmployee, { nullable: true })
  async requestApprovalEmployee(
    @graphql.Args() args: RequestApprovalEmployeeFindUniqueArgs
  ): Promise<RequestApprovalEmployee | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RequestApprovalEmployee)
  async createRequestApprovalEmployee(
    @graphql.Args() args: CreateRequestApprovalEmployeeArgs
  ): Promise<RequestApprovalEmployee> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        requestApproval: {
          connect: args.data.requestApproval,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        employee: {
          connect: args.data.employee,
        },
      },
    });
  }

  @graphql.Mutation(() => RequestApprovalEmployee)
  async updateRequestApprovalEmployee(
    @graphql.Args() args: UpdateRequestApprovalEmployeeArgs
  ): Promise<RequestApprovalEmployee | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          requestApproval: {
            connect: args.data.requestApproval,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          employee: {
            connect: args.data.employee,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RequestApprovalEmployee)
  async deleteRequestApprovalEmployee(
    @graphql.Args() args: DeleteRequestApprovalEmployeeArgs
  ): Promise<RequestApprovalEmployee | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: RequestApprovalEmployee
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => RequestApproval, {
    nullable: true,
    name: "requestApproval",
  })
  async resolveFieldRequestApproval(
    @graphql.Parent() parent: RequestApprovalEmployee
  ): Promise<RequestApproval | null> {
    const result = await this.service.getRequestApproval(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: RequestApprovalEmployee
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: RequestApprovalEmployee
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
