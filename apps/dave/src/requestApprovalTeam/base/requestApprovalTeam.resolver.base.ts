/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateRequestApprovalTeamArgs } from "./CreateRequestApprovalTeamArgs";
import { UpdateRequestApprovalTeamArgs } from "./UpdateRequestApprovalTeamArgs";
import { DeleteRequestApprovalTeamArgs } from "./DeleteRequestApprovalTeamArgs";
import { RequestApprovalTeamCountArgs } from "./RequestApprovalTeamCountArgs";
import { RequestApprovalTeamFindManyArgs } from "./RequestApprovalTeamFindManyArgs";
import { RequestApprovalTeamFindUniqueArgs } from "./RequestApprovalTeamFindUniqueArgs";
import { RequestApprovalTeam } from "./RequestApprovalTeam";
import { RequestApproval } from "../../requestApproval/base/RequestApproval";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { RequestApprovalTeamService } from "../requestApprovalTeam.service";
@graphql.Resolver(() => RequestApprovalTeam)
export class RequestApprovalTeamResolverBase {
  constructor(protected readonly service: RequestApprovalTeamService) {}

  async _requestApprovalTeamsMeta(
    @graphql.Args() args: RequestApprovalTeamCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RequestApprovalTeam])
  async requestApprovalTeams(
    @graphql.Args() args: RequestApprovalTeamFindManyArgs
  ): Promise<RequestApprovalTeam[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => RequestApprovalTeam, { nullable: true })
  async requestApprovalTeam(
    @graphql.Args() args: RequestApprovalTeamFindUniqueArgs
  ): Promise<RequestApprovalTeam | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RequestApprovalTeam)
  async createRequestApprovalTeam(
    @graphql.Args() args: CreateRequestApprovalTeamArgs
  ): Promise<RequestApprovalTeam> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        requestApproval: {
          connect: args.data.requestApproval,
        },

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organizationTeam: {
          connect: args.data.organizationTeam,
        },
      },
    });
  }

  @graphql.Mutation(() => RequestApprovalTeam)
  async updateRequestApprovalTeam(
    @graphql.Args() args: UpdateRequestApprovalTeamArgs
  ): Promise<RequestApprovalTeam | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          requestApproval: {
            connect: args.data.requestApproval,
          },

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organizationTeam: {
            connect: args.data.organizationTeam,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RequestApprovalTeam)
  async deleteRequestApprovalTeam(
    @graphql.Args() args: DeleteRequestApprovalTeamArgs
  ): Promise<RequestApprovalTeam | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => RequestApproval, {
    nullable: true,
    name: "requestApproval",
  })
  async resolveFieldRequestApproval(
    @graphql.Parent() parent: RequestApprovalTeam
  ): Promise<RequestApproval | null> {
    const result = await this.service.getRequestApproval(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: RequestApprovalTeam
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: RequestApprovalTeam
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationTeam, {
    nullable: true,
    name: "organizationTeam",
  })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: RequestApprovalTeam
  ): Promise<OrganizationTeam | null> {
    const result = await this.service.getOrganizationTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
