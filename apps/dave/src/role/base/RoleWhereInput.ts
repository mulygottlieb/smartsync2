/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested } from "class-validator";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { BooleanFilter } from "../../util/BooleanFilter";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { InviteListRelationFilter } from "../../invite/base/InviteListRelationFilter";
import { OrganizationTeamEmployeeListRelationFilter } from "../../organizationTeamEmployee/base/OrganizationTeamEmployeeListRelationFilter";
import { RolePermissionListRelationFilter } from "../../rolePermission/base/RolePermissionListRelationFilter";
import { UserListRelationFilter } from "../../user/base/UserListRelationFilter";

@InputType()
class RoleWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  createdAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  name?: StringFilter;

  @ApiProperty({
    required: false,
    type: BooleanFilter,
  })
  @Type(() => BooleanFilter)
  @IsOptional()
  @Field(() => BooleanFilter, {
    nullable: true,
  })
  isSystem?: BooleanFilter;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => InviteListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InviteListRelationFilter)
  @IsOptional()
  @Field(() => InviteListRelationFilter, {
    nullable: true,
  })
  invite?: InviteListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationTeamEmployeeListRelationFilter, {
    nullable: true,
  })
  organizationTeamEmployee?: OrganizationTeamEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => RolePermissionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => RolePermissionListRelationFilter)
  @IsOptional()
  @Field(() => RolePermissionListRelationFilter, {
    nullable: true,
  })
  rolePermission?: RolePermissionListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UserListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserListRelationFilter)
  @IsOptional()
  @Field(() => UserListRelationFilter, {
    nullable: true,
  })
  user?: UserListRelationFilter;
}

export { RoleWhereInput as RoleWhereInput };
