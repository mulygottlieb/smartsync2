/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RoleService } from "../role.service";
import { RoleCreateInput } from "./RoleCreateInput";
import { RoleWhereInput } from "./RoleWhereInput";
import { RoleWhereUniqueInput } from "./RoleWhereUniqueInput";
import { RoleFindManyArgs } from "./RoleFindManyArgs";
import { RoleUpdateInput } from "./RoleUpdateInput";
import { Role } from "./Role";
import { InviteFindManyArgs } from "../../invite/base/InviteFindManyArgs";
import { Invite } from "../../invite/base/Invite";
import { InviteWhereUniqueInput } from "../../invite/base/InviteWhereUniqueInput";
import { OrganizationTeamEmployeeFindManyArgs } from "../../organizationTeamEmployee/base/OrganizationTeamEmployeeFindManyArgs";
import { OrganizationTeamEmployee } from "../../organizationTeamEmployee/base/OrganizationTeamEmployee";
import { OrganizationTeamEmployeeWhereUniqueInput } from "../../organizationTeamEmployee/base/OrganizationTeamEmployeeWhereUniqueInput";
import { RolePermissionFindManyArgs } from "../../rolePermission/base/RolePermissionFindManyArgs";
import { RolePermission } from "../../rolePermission/base/RolePermission";
import { RolePermissionWhereUniqueInput } from "../../rolePermission/base/RolePermissionWhereUniqueInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

export class RoleControllerBase {
  constructor(protected readonly service: RoleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Role })
  async create(@common.Body() data: RoleCreateInput): Promise<Role> {
    return await this.service.create({
      data: {
        ...data,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        isSystem: true,

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Role] })
  @ApiNestedQuery(RoleFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Role[]> {
    const args = plainToClass(RoleFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        isSystem: true,

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Role })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: RoleWhereUniqueInput
  ): Promise<Role | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        isSystem: true,

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Role })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() data: RoleUpdateInput
  ): Promise<Role | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          isSystem: true,

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Role })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: RoleWhereUniqueInput
  ): Promise<Role | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          isSystem: true,

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/invite")
  @ApiNestedQuery(InviteFindManyArgs)
  async findManyInvite(
    @common.Req() request: Request,
    @common.Param() params: RoleWhereUniqueInput
  ): Promise<Invite[]> {
    const query = plainToClass(InviteFindManyArgs, request.query);
    const results = await this.service.findInvite(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        token: true,
        email: true,
        status: true,
        expireDate: true,
        actionDate: true,
        code: true,
        fullName: true,

        userInviteInvitedByIdTouser: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        userInviteUserIdTouser: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invite")
  async connectInvite(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() body: InviteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invite: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invite")
  async updateInvite(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() body: InviteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invite: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invite")
  async disconnectInvite(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() body: InviteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invite: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationTeamEmployee")
  @ApiNestedQuery(OrganizationTeamEmployeeFindManyArgs)
  async findManyOrganizationTeamEmployee(
    @common.Req() request: Request,
    @common.Param() params: RoleWhereUniqueInput
  ): Promise<OrganizationTeamEmployee[]> {
    const query = plainToClass(
      OrganizationTeamEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationTeamEmployee(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        isTrackingEnabled: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationTeamEmployee")
  async connectOrganizationTeamEmployee(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() body: OrganizationTeamEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationTeamEmployee")
  async updateOrganizationTeamEmployee(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() body: OrganizationTeamEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationTeamEmployee")
  async disconnectOrganizationTeamEmployee(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() body: OrganizationTeamEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/rolePermission")
  @ApiNestedQuery(RolePermissionFindManyArgs)
  async findManyRolePermission(
    @common.Req() request: Request,
    @common.Param() params: RoleWhereUniqueInput
  ): Promise<RolePermission[]> {
    const query = plainToClass(RolePermissionFindManyArgs, request.query);
    const results = await this.service.findRolePermission(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        permission: true,
        enabled: true,
        description: true,

        tenant: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rolePermission")
  async connectRolePermission(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() body: RolePermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rolePermission: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rolePermission")
  async updateRolePermission(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() body: RolePermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rolePermission: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rolePermission")
  async disconnectRolePermission(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() body: RolePermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rolePermission: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/user")
  @ApiNestedQuery(UserFindManyArgs)
  async findManyUser(
    @common.Req() request: Request,
    @common.Param() params: RoleWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUser(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        thirdPartyId: true,
        firstName: true,
        lastName: true,
        email: true,
        hash: true,
        imageUrl: true,
        preferredLanguage: true,
        refreshToken: true,
        isActive: true,
        preferredComponentLayout: true,
        code: true,
        codeExpireAt: true,
        emailVerifiedAt: true,
        emailToken: true,
        phoneNumber: true,
        timeZone: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/user")
  async connectUser(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      user: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/user")
  async updateUser(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      user: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/user")
  async disconnectUser(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      user: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
