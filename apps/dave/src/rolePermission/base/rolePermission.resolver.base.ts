/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateRolePermissionArgs } from "./CreateRolePermissionArgs";
import { UpdateRolePermissionArgs } from "./UpdateRolePermissionArgs";
import { DeleteRolePermissionArgs } from "./DeleteRolePermissionArgs";
import { RolePermissionCountArgs } from "./RolePermissionCountArgs";
import { RolePermissionFindManyArgs } from "./RolePermissionFindManyArgs";
import { RolePermissionFindUniqueArgs } from "./RolePermissionFindUniqueArgs";
import { RolePermission } from "./RolePermission";
import { Tenant } from "../../tenant/base/Tenant";
import { Role } from "../../role/base/Role";
import { RolePermissionService } from "../rolePermission.service";
@graphql.Resolver(() => RolePermission)
export class RolePermissionResolverBase {
  constructor(protected readonly service: RolePermissionService) {}

  async _rolePermissionsMeta(
    @graphql.Args() args: RolePermissionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RolePermission])
  async rolePermissions(
    @graphql.Args() args: RolePermissionFindManyArgs
  ): Promise<RolePermission[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => RolePermission, { nullable: true })
  async rolePermission(
    @graphql.Args() args: RolePermissionFindUniqueArgs
  ): Promise<RolePermission | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RolePermission)
  async createRolePermission(
    @graphql.Args() args: CreateRolePermissionArgs
  ): Promise<RolePermission> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        role: {
          connect: args.data.role,
        },
      },
    });
  }

  @graphql.Mutation(() => RolePermission)
  async updateRolePermission(
    @graphql.Args() args: UpdateRolePermissionArgs
  ): Promise<RolePermission | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          role: {
            connect: args.data.role,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RolePermission)
  async deleteRolePermission(
    @graphql.Args() args: DeleteRolePermissionArgs
  ): Promise<RolePermission | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: RolePermission
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Role, {
    nullable: true,
    name: "role",
  })
  async resolveFieldRole(
    @graphql.Parent() parent: RolePermission
  ): Promise<Role | null> {
    const result = await this.service.getRole(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
