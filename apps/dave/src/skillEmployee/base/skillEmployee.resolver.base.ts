/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateSkillEmployeeArgs } from "./CreateSkillEmployeeArgs";
import { UpdateSkillEmployeeArgs } from "./UpdateSkillEmployeeArgs";
import { DeleteSkillEmployeeArgs } from "./DeleteSkillEmployeeArgs";
import { SkillEmployeeCountArgs } from "./SkillEmployeeCountArgs";
import { SkillEmployeeFindManyArgs } from "./SkillEmployeeFindManyArgs";
import { SkillEmployeeFindUniqueArgs } from "./SkillEmployeeFindUniqueArgs";
import { SkillEmployee } from "./SkillEmployee";
import { Employee } from "../../employee/base/Employee";
import { Skill } from "../../skill/base/Skill";
import { SkillEmployeeService } from "../skillEmployee.service";
@graphql.Resolver(() => SkillEmployee)
export class SkillEmployeeResolverBase {
  constructor(protected readonly service: SkillEmployeeService) {}

  async _skillEmployeesMeta(
    @graphql.Args() args: SkillEmployeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SkillEmployee])
  async skillEmployees(
    @graphql.Args() args: SkillEmployeeFindManyArgs
  ): Promise<SkillEmployee[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => SkillEmployee, { nullable: true })
  async skillEmployee(
    @graphql.Args() args: SkillEmployeeFindUniqueArgs
  ): Promise<SkillEmployee | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SkillEmployee)
  async createSkillEmployee(
    @graphql.Args() args: CreateSkillEmployeeArgs
  ): Promise<SkillEmployee> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        employee: {
          connect: args.data.employee,
        },

        skill: {
          connect: args.data.skill,
        },
      },
    });
  }

  @graphql.Mutation(() => SkillEmployee)
  async updateSkillEmployee(
    @graphql.Args() args: UpdateSkillEmployeeArgs
  ): Promise<SkillEmployee | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          employee: {
            connect: args.data.employee,
          },

          skill: {
            connect: args.data.skill,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SkillEmployee)
  async deleteSkillEmployee(
    @graphql.Args() args: DeleteSkillEmployeeArgs
  ): Promise<SkillEmployee | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: SkillEmployee
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Skill, {
    nullable: true,
    name: "skill",
  })
  async resolveFieldSkill(
    @graphql.Parent() parent: SkillEmployee
  ): Promise<Skill | null> {
    const result = await this.service.getSkill(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
