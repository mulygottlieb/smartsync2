/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagArgs } from "./CreateTagArgs";
import { UpdateTagArgs } from "./UpdateTagArgs";
import { DeleteTagArgs } from "./DeleteTagArgs";
import { TagCountArgs } from "./TagCountArgs";
import { TagFindManyArgs } from "./TagFindManyArgs";
import { TagFindUniqueArgs } from "./TagFindUniqueArgs";
import { Tag } from "./Tag";
import { TagCandidateFindManyArgs } from "../../tagCandidate/base/TagCandidateFindManyArgs";
import { TagCandidate } from "../../tagCandidate/base/TagCandidate";
import { TagEmployeeFindManyArgs } from "../../tagEmployee/base/TagEmployeeFindManyArgs";
import { TagEmployee } from "../../tagEmployee/base/TagEmployee";
import { TagEmployeeLevelFindManyArgs } from "../../tagEmployeeLevel/base/TagEmployeeLevelFindManyArgs";
import { TagEmployeeLevel } from "../../tagEmployeeLevel/base/TagEmployeeLevel";
import { TagEquipmentFindManyArgs } from "../../tagEquipment/base/TagEquipmentFindManyArgs";
import { TagEquipment } from "../../tagEquipment/base/TagEquipment";
import { TagEventTypeFindManyArgs } from "../../tagEventType/base/TagEventTypeFindManyArgs";
import { TagEventType } from "../../tagEventType/base/TagEventType";
import { TagExpenseFindManyArgs } from "../../tagExpense/base/TagExpenseFindManyArgs";
import { TagExpense } from "../../tagExpense/base/TagExpense";
import { TagIncomeFindManyArgs } from "../../tagIncome/base/TagIncomeFindManyArgs";
import { TagIncome } from "../../tagIncome/base/TagIncome";
import { TagIntegrationFindManyArgs } from "../../tagIntegration/base/TagIntegrationFindManyArgs";
import { TagIntegration } from "../../tagIntegration/base/TagIntegration";
import { TagInvoiceFindManyArgs } from "../../tagInvoice/base/TagInvoiceFindManyArgs";
import { TagInvoice } from "../../tagInvoice/base/TagInvoice";
import { TagMerchantFindManyArgs } from "../../tagMerchant/base/TagMerchantFindManyArgs";
import { TagMerchant } from "../../tagMerchant/base/TagMerchant";
import { TagOrganizationFindManyArgs } from "../../tagOrganization/base/TagOrganizationFindManyArgs";
import { TagOrganization } from "../../tagOrganization/base/TagOrganization";
import { TagOrganizationContactFindManyArgs } from "../../tagOrganizationContact/base/TagOrganizationContactFindManyArgs";
import { TagOrganizationContact } from "../../tagOrganizationContact/base/TagOrganizationContact";
import { TagOrganizationDepartmentFindManyArgs } from "../../tagOrganizationDepartment/base/TagOrganizationDepartmentFindManyArgs";
import { TagOrganizationDepartment } from "../../tagOrganizationDepartment/base/TagOrganizationDepartment";
import { TagOrganizationEmploymentTypeFindManyArgs } from "../../tagOrganizationEmploymentType/base/TagOrganizationEmploymentTypeFindManyArgs";
import { TagOrganizationEmploymentType } from "../../tagOrganizationEmploymentType/base/TagOrganizationEmploymentType";
import { TagOrganizationExpenseCategoryFindManyArgs } from "../../tagOrganizationExpenseCategory/base/TagOrganizationExpenseCategoryFindManyArgs";
import { TagOrganizationExpenseCategory } from "../../tagOrganizationExpenseCategory/base/TagOrganizationExpenseCategory";
import { TagOrganizationPositionFindManyArgs } from "../../tagOrganizationPosition/base/TagOrganizationPositionFindManyArgs";
import { TagOrganizationPosition } from "../../tagOrganizationPosition/base/TagOrganizationPosition";
import { TagOrganizationProjectFindManyArgs } from "../../tagOrganizationProject/base/TagOrganizationProjectFindManyArgs";
import { TagOrganizationProject } from "../../tagOrganizationProject/base/TagOrganizationProject";
import { TagOrganizationTeamFindManyArgs } from "../../tagOrganizationTeam/base/TagOrganizationTeamFindManyArgs";
import { TagOrganizationTeam } from "../../tagOrganizationTeam/base/TagOrganizationTeam";
import { TagOrganizationVendorFindManyArgs } from "../../tagOrganizationVendor/base/TagOrganizationVendorFindManyArgs";
import { TagOrganizationVendor } from "../../tagOrganizationVendor/base/TagOrganizationVendor";
import { TagPaymentFindManyArgs } from "../../tagPayment/base/TagPaymentFindManyArgs";
import { TagPayment } from "../../tagPayment/base/TagPayment";
import { TagProductFindManyArgs } from "../../tagProduct/base/TagProductFindManyArgs";
import { TagProduct } from "../../tagProduct/base/TagProduct";
import { TagProposalFindManyArgs } from "../../tagProposal/base/TagProposalFindManyArgs";
import { TagProposal } from "../../tagProposal/base/TagProposal";
import { TagRequestApprovalFindManyArgs } from "../../tagRequestApproval/base/TagRequestApprovalFindManyArgs";
import { TagRequestApproval } from "../../tagRequestApproval/base/TagRequestApproval";
import { TagTaskFindManyArgs } from "../../tagTask/base/TagTaskFindManyArgs";
import { TagTask } from "../../tagTask/base/TagTask";
import { TagUserFindManyArgs } from "../../tagUser/base/TagUserFindManyArgs";
import { TagUser } from "../../tagUser/base/TagUser";
import { TagWarehouseFindManyArgs } from "../../tagWarehouse/base/TagWarehouseFindManyArgs";
import { TagWarehouse } from "../../tagWarehouse/base/TagWarehouse";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { TagService } from "../tag.service";
@graphql.Resolver(() => Tag)
export class TagResolverBase {
  constructor(protected readonly service: TagService) {}

  async _tagsMeta(
    @graphql.Args() args: TagCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Tag])
  async tags(@graphql.Args() args: TagFindManyArgs): Promise<Tag[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Tag, { nullable: true })
  async tag(@graphql.Args() args: TagFindUniqueArgs): Promise<Tag | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Tag)
  async createTag(@graphql.Args() args: CreateTagArgs): Promise<Tag> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationTeam: args.data.organizationTeam
          ? {
              connect: args.data.organizationTeam,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Tag)
  async updateTag(@graphql.Args() args: UpdateTagArgs): Promise<Tag | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationTeam: args.data.organizationTeam
            ? {
                connect: args.data.organizationTeam,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tag)
  async deleteTag(@graphql.Args() args: DeleteTagArgs): Promise<Tag | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TagCandidate], { name: "tagCandidate" })
  async resolveFieldTagCandidate(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagCandidateFindManyArgs
  ): Promise<TagCandidate[]> {
    const results = await this.service.findTagCandidate(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagEmployee], { name: "tagEmployee" })
  async resolveFieldTagEmployee(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagEmployeeFindManyArgs
  ): Promise<TagEmployee[]> {
    const results = await this.service.findTagEmployee(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagEmployeeLevel], { name: "tagEmployeeLevel" })
  async resolveFieldTagEmployeeLevel(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagEmployeeLevelFindManyArgs
  ): Promise<TagEmployeeLevel[]> {
    const results = await this.service.findTagEmployeeLevel(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagEquipment], { name: "tagEquipment" })
  async resolveFieldTagEquipment(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagEquipmentFindManyArgs
  ): Promise<TagEquipment[]> {
    const results = await this.service.findTagEquipment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagEventType], { name: "tagEventType" })
  async resolveFieldTagEventType(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagEventTypeFindManyArgs
  ): Promise<TagEventType[]> {
    const results = await this.service.findTagEventType(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagExpense], { name: "tagExpense" })
  async resolveFieldTagExpense(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagExpenseFindManyArgs
  ): Promise<TagExpense[]> {
    const results = await this.service.findTagExpense(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagIncome], { name: "tagIncome" })
  async resolveFieldTagIncome(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagIncomeFindManyArgs
  ): Promise<TagIncome[]> {
    const results = await this.service.findTagIncome(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagIntegration], { name: "tagIntegration" })
  async resolveFieldTagIntegration(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagIntegrationFindManyArgs
  ): Promise<TagIntegration[]> {
    const results = await this.service.findTagIntegration(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagInvoice], { name: "tagInvoice" })
  async resolveFieldTagInvoice(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagInvoiceFindManyArgs
  ): Promise<TagInvoice[]> {
    const results = await this.service.findTagInvoice(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagMerchant], { name: "tagMerchant" })
  async resolveFieldTagMerchant(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagMerchantFindManyArgs
  ): Promise<TagMerchant[]> {
    const results = await this.service.findTagMerchant(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganization], { name: "tagOrganization" })
  async resolveFieldTagOrganization(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagOrganizationFindManyArgs
  ): Promise<TagOrganization[]> {
    const results = await this.service.findTagOrganization(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationContact], {
    name: "tagOrganizationContact",
  })
  async resolveFieldTagOrganizationContact(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagOrganizationContactFindManyArgs
  ): Promise<TagOrganizationContact[]> {
    const results = await this.service.findTagOrganizationContact(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationDepartment], {
    name: "tagOrganizationDepartment",
  })
  async resolveFieldTagOrganizationDepartment(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagOrganizationDepartmentFindManyArgs
  ): Promise<TagOrganizationDepartment[]> {
    const results = await this.service.findTagOrganizationDepartment(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationEmploymentType], {
    name: "tagOrganizationEmploymentType",
  })
  async resolveFieldTagOrganizationEmploymentType(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagOrganizationEmploymentTypeFindManyArgs
  ): Promise<TagOrganizationEmploymentType[]> {
    const results = await this.service.findTagOrganizationEmploymentType(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationExpenseCategory], {
    name: "tagOrganizationExpenseCategory",
  })
  async resolveFieldTagOrganizationExpenseCategory(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagOrganizationExpenseCategoryFindManyArgs
  ): Promise<TagOrganizationExpenseCategory[]> {
    const results = await this.service.findTagOrganizationExpenseCategory(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationPosition], {
    name: "tagOrganizationPosition",
  })
  async resolveFieldTagOrganizationPosition(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagOrganizationPositionFindManyArgs
  ): Promise<TagOrganizationPosition[]> {
    const results = await this.service.findTagOrganizationPosition(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationProject], {
    name: "tagOrganizationProject",
  })
  async resolveFieldTagOrganizationProject(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagOrganizationProjectFindManyArgs
  ): Promise<TagOrganizationProject[]> {
    const results = await this.service.findTagOrganizationProject(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationTeam], {
    name: "tagOrganizationTeam",
  })
  async resolveFieldTagOrganizationTeam(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagOrganizationTeamFindManyArgs
  ): Promise<TagOrganizationTeam[]> {
    const results = await this.service.findTagOrganizationTeam(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagOrganizationVendor], {
    name: "tagOrganizationVendor",
  })
  async resolveFieldTagOrganizationVendor(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagOrganizationVendorFindManyArgs
  ): Promise<TagOrganizationVendor[]> {
    const results = await this.service.findTagOrganizationVendor(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagPayment], { name: "tagPayment" })
  async resolveFieldTagPayment(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagPaymentFindManyArgs
  ): Promise<TagPayment[]> {
    const results = await this.service.findTagPayment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagProduct], { name: "tagProduct" })
  async resolveFieldTagProduct(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagProductFindManyArgs
  ): Promise<TagProduct[]> {
    const results = await this.service.findTagProduct(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagProposal], { name: "tagProposal" })
  async resolveFieldTagProposal(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagProposalFindManyArgs
  ): Promise<TagProposal[]> {
    const results = await this.service.findTagProposal(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagRequestApproval], {
    name: "tagRequestApproval",
  })
  async resolveFieldTagRequestApproval(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagRequestApprovalFindManyArgs
  ): Promise<TagRequestApproval[]> {
    const results = await this.service.findTagRequestApproval(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagTask], { name: "tagTask" })
  async resolveFieldTagTask(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagTaskFindManyArgs
  ): Promise<TagTask[]> {
    const results = await this.service.findTagTask(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagUser], { name: "tagUser" })
  async resolveFieldTagUser(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagUserFindManyArgs
  ): Promise<TagUser[]> {
    const results = await this.service.findTagUser(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagWarehouse], { name: "tagWarehouse" })
  async resolveFieldTagWarehouse(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagWarehouseFindManyArgs
  ): Promise<TagWarehouse[]> {
    const results = await this.service.findTagWarehouse(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => OrganizationTeam, {
    nullable: true,
    name: "organizationTeam",
  })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: Tag
  ): Promise<OrganizationTeam | null> {
    const result = await this.service.getOrganizationTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: Tag
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: Tag
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
