/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Tag,
  TagCandidate,
  TagEmployee,
  TagEmployeeLevel,
  TagEquipment,
  TagEventType,
  TagExpense,
  TagIncome,
  TagIntegration,
  TagInvoice,
  TagMerchant,
  TagOrganization,
  TagOrganizationContact,
  TagOrganizationDepartment,
  TagOrganizationEmploymentType,
  TagOrganizationExpenseCategory,
  TagOrganizationPosition,
  TagOrganizationProject,
  TagOrganizationTeam,
  TagOrganizationVendor,
  TagPayment,
  TagProduct,
  TagProposal,
  TagRequestApproval,
  TagTask,
  TagUser,
  TagWarehouse,
  OrganizationTeam,
  Tenant,
  Organization,
} from "@prisma/client";

export class TagServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.TagCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.TagCountArgs>
  ): Promise<number> {
    return this.prisma.tag.count(args);
  }

  async findMany<T extends Prisma.TagFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TagFindManyArgs>
  ): Promise<Tag[]> {
    return this.prisma.tag.findMany(args);
  }
  async findOne<T extends Prisma.TagFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TagFindUniqueArgs>
  ): Promise<Tag | null> {
    return this.prisma.tag.findUnique(args);
  }
  async create<T extends Prisma.TagCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TagCreateArgs>
  ): Promise<Tag> {
    return this.prisma.tag.create<T>(args);
  }
  async update<T extends Prisma.TagUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TagUpdateArgs>
  ): Promise<Tag> {
    return this.prisma.tag.update<T>(args);
  }
  async delete<T extends Prisma.TagDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TagDeleteArgs>
  ): Promise<Tag> {
    return this.prisma.tag.delete(args);
  }

  async findTagCandidate(
    parentId: string,
    args: Prisma.TagCandidateFindManyArgs
  ): Promise<TagCandidate[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagCandidate(args);
  }

  async findTagEmployee(
    parentId: string,
    args: Prisma.TagEmployeeFindManyArgs
  ): Promise<TagEmployee[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagEmployee(args);
  }

  async findTagEmployeeLevel(
    parentId: string,
    args: Prisma.TagEmployeeLevelFindManyArgs
  ): Promise<TagEmployeeLevel[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagEmployeeLevel(args);
  }

  async findTagEquipment(
    parentId: string,
    args: Prisma.TagEquipmentFindManyArgs
  ): Promise<TagEquipment[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagEquipment(args);
  }

  async findTagEventType(
    parentId: string,
    args: Prisma.TagEventTypeFindManyArgs
  ): Promise<TagEventType[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagEventType(args);
  }

  async findTagExpense(
    parentId: string,
    args: Prisma.TagExpenseFindManyArgs
  ): Promise<TagExpense[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagExpense(args);
  }

  async findTagIncome(
    parentId: string,
    args: Prisma.TagIncomeFindManyArgs
  ): Promise<TagIncome[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagIncome(args);
  }

  async findTagIntegration(
    parentId: string,
    args: Prisma.TagIntegrationFindManyArgs
  ): Promise<TagIntegration[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagIntegration(args);
  }

  async findTagInvoice(
    parentId: string,
    args: Prisma.TagInvoiceFindManyArgs
  ): Promise<TagInvoice[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagInvoice(args);
  }

  async findTagMerchant(
    parentId: string,
    args: Prisma.TagMerchantFindManyArgs
  ): Promise<TagMerchant[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagMerchant(args);
  }

  async findTagOrganization(
    parentId: string,
    args: Prisma.TagOrganizationFindManyArgs
  ): Promise<TagOrganization[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagOrganization(args);
  }

  async findTagOrganizationContact(
    parentId: string,
    args: Prisma.TagOrganizationContactFindManyArgs
  ): Promise<TagOrganizationContact[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagOrganizationContact(args);
  }

  async findTagOrganizationDepartment(
    parentId: string,
    args: Prisma.TagOrganizationDepartmentFindManyArgs
  ): Promise<TagOrganizationDepartment[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagOrganizationDepartment(args);
  }

  async findTagOrganizationEmploymentType(
    parentId: string,
    args: Prisma.TagOrganizationEmploymentTypeFindManyArgs
  ): Promise<TagOrganizationEmploymentType[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagOrganizationEmploymentType(args);
  }

  async findTagOrganizationExpenseCategory(
    parentId: string,
    args: Prisma.TagOrganizationExpenseCategoryFindManyArgs
  ): Promise<TagOrganizationExpenseCategory[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagOrganizationExpenseCategory(args);
  }

  async findTagOrganizationPosition(
    parentId: string,
    args: Prisma.TagOrganizationPositionFindManyArgs
  ): Promise<TagOrganizationPosition[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagOrganizationPosition(args);
  }

  async findTagOrganizationProject(
    parentId: string,
    args: Prisma.TagOrganizationProjectFindManyArgs
  ): Promise<TagOrganizationProject[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagOrganizationProject(args);
  }

  async findTagOrganizationTeam(
    parentId: string,
    args: Prisma.TagOrganizationTeamFindManyArgs
  ): Promise<TagOrganizationTeam[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagOrganizationTeam(args);
  }

  async findTagOrganizationVendor(
    parentId: string,
    args: Prisma.TagOrganizationVendorFindManyArgs
  ): Promise<TagOrganizationVendor[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagOrganizationVendor(args);
  }

  async findTagPayment(
    parentId: string,
    args: Prisma.TagPaymentFindManyArgs
  ): Promise<TagPayment[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagPayment(args);
  }

  async findTagProduct(
    parentId: string,
    args: Prisma.TagProductFindManyArgs
  ): Promise<TagProduct[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagProduct(args);
  }

  async findTagProposal(
    parentId: string,
    args: Prisma.TagProposalFindManyArgs
  ): Promise<TagProposal[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagProposal(args);
  }

  async findTagRequestApproval(
    parentId: string,
    args: Prisma.TagRequestApprovalFindManyArgs
  ): Promise<TagRequestApproval[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagRequestApproval(args);
  }

  async findTagTask(
    parentId: string,
    args: Prisma.TagTaskFindManyArgs
  ): Promise<TagTask[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagTask(args);
  }

  async findTagUser(
    parentId: string,
    args: Prisma.TagUserFindManyArgs
  ): Promise<TagUser[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagUser(args);
  }

  async findTagWarehouse(
    parentId: string,
    args: Prisma.TagWarehouseFindManyArgs
  ): Promise<TagWarehouse[]> {
    return this.prisma.tag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagWarehouse(args);
  }

  async getOrganizationTeam(
    parentId: string
  ): Promise<OrganizationTeam | null> {
    return this.prisma.tag
      .findUnique({
        where: { id: parentId },
      })
      .organizationTeam();
  }

  async getTenant(parentId: string): Promise<Tenant | null> {
    return this.prisma.tag
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }

  async getOrganization(parentId: string): Promise<Organization | null> {
    return this.prisma.tag
      .findUnique({
        where: { id: parentId },
      })
      .organization();
  }
}
