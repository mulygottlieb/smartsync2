/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagCandidateArgs } from "./CreateTagCandidateArgs";
import { UpdateTagCandidateArgs } from "./UpdateTagCandidateArgs";
import { DeleteTagCandidateArgs } from "./DeleteTagCandidateArgs";
import { TagCandidateCountArgs } from "./TagCandidateCountArgs";
import { TagCandidateFindManyArgs } from "./TagCandidateFindManyArgs";
import { TagCandidateFindUniqueArgs } from "./TagCandidateFindUniqueArgs";
import { TagCandidate } from "./TagCandidate";
import { Candidate } from "../../candidate/base/Candidate";
import { Tag } from "../../tag/base/Tag";
import { TagCandidateService } from "../tagCandidate.service";
@graphql.Resolver(() => TagCandidate)
export class TagCandidateResolverBase {
  constructor(protected readonly service: TagCandidateService) {}

  async _tagCandidatesMeta(
    @graphql.Args() args: TagCandidateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagCandidate])
  async tagCandidates(
    @graphql.Args() args: TagCandidateFindManyArgs
  ): Promise<TagCandidate[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagCandidate, { nullable: true })
  async tagCandidate(
    @graphql.Args() args: TagCandidateFindUniqueArgs
  ): Promise<TagCandidate | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagCandidate)
  async createTagCandidate(
    @graphql.Args() args: CreateTagCandidateArgs
  ): Promise<TagCandidate> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        candidate: {
          connect: args.data.candidate,
        },

        tag: {
          connect: args.data.tag,
        },
      },
    });
  }

  @graphql.Mutation(() => TagCandidate)
  async updateTagCandidate(
    @graphql.Args() args: UpdateTagCandidateArgs
  ): Promise<TagCandidate | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          candidate: {
            connect: args.data.candidate,
          },

          tag: {
            connect: args.data.tag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagCandidate)
  async deleteTagCandidate(
    @graphql.Args() args: DeleteTagCandidateArgs
  ): Promise<TagCandidate | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Candidate, {
    nullable: true,
    name: "candidate",
  })
  async resolveFieldCandidate(
    @graphql.Parent() parent: TagCandidate
  ): Promise<Candidate | null> {
    const result = await this.service.getCandidate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagCandidate
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
