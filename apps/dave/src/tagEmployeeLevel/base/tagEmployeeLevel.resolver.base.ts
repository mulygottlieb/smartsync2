/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagEmployeeLevelArgs } from "./CreateTagEmployeeLevelArgs";
import { UpdateTagEmployeeLevelArgs } from "./UpdateTagEmployeeLevelArgs";
import { DeleteTagEmployeeLevelArgs } from "./DeleteTagEmployeeLevelArgs";
import { TagEmployeeLevelCountArgs } from "./TagEmployeeLevelCountArgs";
import { TagEmployeeLevelFindManyArgs } from "./TagEmployeeLevelFindManyArgs";
import { TagEmployeeLevelFindUniqueArgs } from "./TagEmployeeLevelFindUniqueArgs";
import { TagEmployeeLevel } from "./TagEmployeeLevel";
import { EmployeeLevel } from "../../employeeLevel/base/EmployeeLevel";
import { Tag } from "../../tag/base/Tag";
import { TagEmployeeLevelService } from "../tagEmployeeLevel.service";
@graphql.Resolver(() => TagEmployeeLevel)
export class TagEmployeeLevelResolverBase {
  constructor(protected readonly service: TagEmployeeLevelService) {}

  async _tagEmployeeLevelsMeta(
    @graphql.Args() args: TagEmployeeLevelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagEmployeeLevel])
  async tagEmployeeLevels(
    @graphql.Args() args: TagEmployeeLevelFindManyArgs
  ): Promise<TagEmployeeLevel[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagEmployeeLevel, { nullable: true })
  async tagEmployeeLevel(
    @graphql.Args() args: TagEmployeeLevelFindUniqueArgs
  ): Promise<TagEmployeeLevel | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagEmployeeLevel)
  async createTagEmployeeLevel(
    @graphql.Args() args: CreateTagEmployeeLevelArgs
  ): Promise<TagEmployeeLevel> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        employeeLevel: {
          connect: args.data.employeeLevel,
        },

        tag: {
          connect: args.data.tag,
        },
      },
    });
  }

  @graphql.Mutation(() => TagEmployeeLevel)
  async updateTagEmployeeLevel(
    @graphql.Args() args: UpdateTagEmployeeLevelArgs
  ): Promise<TagEmployeeLevel | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          employeeLevel: {
            connect: args.data.employeeLevel,
          },

          tag: {
            connect: args.data.tag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagEmployeeLevel)
  async deleteTagEmployeeLevel(
    @graphql.Args() args: DeleteTagEmployeeLevelArgs
  ): Promise<TagEmployeeLevel | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => EmployeeLevel, {
    nullable: true,
    name: "employeeLevel",
  })
  async resolveFieldEmployeeLevel(
    @graphql.Parent() parent: TagEmployeeLevel
  ): Promise<EmployeeLevel | null> {
    const result = await this.service.getEmployeeLevel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagEmployeeLevel
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
