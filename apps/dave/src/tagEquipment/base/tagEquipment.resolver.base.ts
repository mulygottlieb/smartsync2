/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagEquipmentArgs } from "./CreateTagEquipmentArgs";
import { UpdateTagEquipmentArgs } from "./UpdateTagEquipmentArgs";
import { DeleteTagEquipmentArgs } from "./DeleteTagEquipmentArgs";
import { TagEquipmentCountArgs } from "./TagEquipmentCountArgs";
import { TagEquipmentFindManyArgs } from "./TagEquipmentFindManyArgs";
import { TagEquipmentFindUniqueArgs } from "./TagEquipmentFindUniqueArgs";
import { TagEquipment } from "./TagEquipment";
import { Tag } from "../../tag/base/Tag";
import { Equipment } from "../../equipment/base/Equipment";
import { TagEquipmentService } from "../tagEquipment.service";
@graphql.Resolver(() => TagEquipment)
export class TagEquipmentResolverBase {
  constructor(protected readonly service: TagEquipmentService) {}

  async _tagEquipmentsMeta(
    @graphql.Args() args: TagEquipmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagEquipment])
  async tagEquipments(
    @graphql.Args() args: TagEquipmentFindManyArgs
  ): Promise<TagEquipment[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagEquipment, { nullable: true })
  async tagEquipment(
    @graphql.Args() args: TagEquipmentFindUniqueArgs
  ): Promise<TagEquipment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagEquipment)
  async createTagEquipment(
    @graphql.Args() args: CreateTagEquipmentArgs
  ): Promise<TagEquipment> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tag: {
          connect: args.data.tag,
        },

        equipment: {
          connect: args.data.equipment,
        },
      },
    });
  }

  @graphql.Mutation(() => TagEquipment)
  async updateTagEquipment(
    @graphql.Args() args: UpdateTagEquipmentArgs
  ): Promise<TagEquipment | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tag: {
            connect: args.data.tag,
          },

          equipment: {
            connect: args.data.equipment,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagEquipment)
  async deleteTagEquipment(
    @graphql.Args() args: DeleteTagEquipmentArgs
  ): Promise<TagEquipment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagEquipment
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Equipment, {
    nullable: true,
    name: "equipment",
  })
  async resolveFieldEquipment(
    @graphql.Parent() parent: TagEquipment
  ): Promise<Equipment | null> {
    const result = await this.service.getEquipment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
