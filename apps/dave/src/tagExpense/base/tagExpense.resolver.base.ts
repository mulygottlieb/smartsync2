/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagExpenseArgs } from "./CreateTagExpenseArgs";
import { UpdateTagExpenseArgs } from "./UpdateTagExpenseArgs";
import { DeleteTagExpenseArgs } from "./DeleteTagExpenseArgs";
import { TagExpenseCountArgs } from "./TagExpenseCountArgs";
import { TagExpenseFindManyArgs } from "./TagExpenseFindManyArgs";
import { TagExpenseFindUniqueArgs } from "./TagExpenseFindUniqueArgs";
import { TagExpense } from "./TagExpense";
import { Expense } from "../../expense/base/Expense";
import { Tag } from "../../tag/base/Tag";
import { TagExpenseService } from "../tagExpense.service";
@graphql.Resolver(() => TagExpense)
export class TagExpenseResolverBase {
  constructor(protected readonly service: TagExpenseService) {}

  async _tagExpensesMeta(
    @graphql.Args() args: TagExpenseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagExpense])
  async tagExpenses(
    @graphql.Args() args: TagExpenseFindManyArgs
  ): Promise<TagExpense[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagExpense, { nullable: true })
  async tagExpense(
    @graphql.Args() args: TagExpenseFindUniqueArgs
  ): Promise<TagExpense | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagExpense)
  async createTagExpense(
    @graphql.Args() args: CreateTagExpenseArgs
  ): Promise<TagExpense> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        expense: {
          connect: args.data.expense,
        },

        tag: {
          connect: args.data.tag,
        },
      },
    });
  }

  @graphql.Mutation(() => TagExpense)
  async updateTagExpense(
    @graphql.Args() args: UpdateTagExpenseArgs
  ): Promise<TagExpense | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          expense: {
            connect: args.data.expense,
          },

          tag: {
            connect: args.data.tag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagExpense)
  async deleteTagExpense(
    @graphql.Args() args: DeleteTagExpenseArgs
  ): Promise<TagExpense | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Expense, {
    nullable: true,
    name: "expense",
  })
  async resolveFieldExpense(
    @graphql.Parent() parent: TagExpense
  ): Promise<Expense | null> {
    const result = await this.service.getExpense(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagExpense
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
