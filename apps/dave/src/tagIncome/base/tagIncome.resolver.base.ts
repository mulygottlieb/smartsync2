/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagIncomeArgs } from "./CreateTagIncomeArgs";
import { UpdateTagIncomeArgs } from "./UpdateTagIncomeArgs";
import { DeleteTagIncomeArgs } from "./DeleteTagIncomeArgs";
import { TagIncomeCountArgs } from "./TagIncomeCountArgs";
import { TagIncomeFindManyArgs } from "./TagIncomeFindManyArgs";
import { TagIncomeFindUniqueArgs } from "./TagIncomeFindUniqueArgs";
import { TagIncome } from "./TagIncome";
import { Tag } from "../../tag/base/Tag";
import { Income } from "../../income/base/Income";
import { TagIncomeService } from "../tagIncome.service";
@graphql.Resolver(() => TagIncome)
export class TagIncomeResolverBase {
  constructor(protected readonly service: TagIncomeService) {}

  async _tagIncomesMeta(
    @graphql.Args() args: TagIncomeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagIncome])
  async tagIncomes(
    @graphql.Args() args: TagIncomeFindManyArgs
  ): Promise<TagIncome[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagIncome, { nullable: true })
  async tagIncome(
    @graphql.Args() args: TagIncomeFindUniqueArgs
  ): Promise<TagIncome | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagIncome)
  async createTagIncome(
    @graphql.Args() args: CreateTagIncomeArgs
  ): Promise<TagIncome> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tag: {
          connect: args.data.tag,
        },

        income: {
          connect: args.data.income,
        },
      },
    });
  }

  @graphql.Mutation(() => TagIncome)
  async updateTagIncome(
    @graphql.Args() args: UpdateTagIncomeArgs
  ): Promise<TagIncome | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tag: {
            connect: args.data.tag,
          },

          income: {
            connect: args.data.income,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagIncome)
  async deleteTagIncome(
    @graphql.Args() args: DeleteTagIncomeArgs
  ): Promise<TagIncome | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagIncome
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Income, {
    nullable: true,
    name: "income",
  })
  async resolveFieldIncome(
    @graphql.Parent() parent: TagIncome
  ): Promise<Income | null> {
    const result = await this.service.getIncome(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
