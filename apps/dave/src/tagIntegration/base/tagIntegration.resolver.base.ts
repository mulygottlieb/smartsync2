/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagIntegrationArgs } from "./CreateTagIntegrationArgs";
import { UpdateTagIntegrationArgs } from "./UpdateTagIntegrationArgs";
import { DeleteTagIntegrationArgs } from "./DeleteTagIntegrationArgs";
import { TagIntegrationCountArgs } from "./TagIntegrationCountArgs";
import { TagIntegrationFindManyArgs } from "./TagIntegrationFindManyArgs";
import { TagIntegrationFindUniqueArgs } from "./TagIntegrationFindUniqueArgs";
import { TagIntegration } from "./TagIntegration";
import { Tag } from "../../tag/base/Tag";
import { Integration } from "../../integration/base/Integration";
import { TagIntegrationService } from "../tagIntegration.service";
@graphql.Resolver(() => TagIntegration)
export class TagIntegrationResolverBase {
  constructor(protected readonly service: TagIntegrationService) {}

  async _tagIntegrationsMeta(
    @graphql.Args() args: TagIntegrationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagIntegration])
  async tagIntegrations(
    @graphql.Args() args: TagIntegrationFindManyArgs
  ): Promise<TagIntegration[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagIntegration, { nullable: true })
  async tagIntegration(
    @graphql.Args() args: TagIntegrationFindUniqueArgs
  ): Promise<TagIntegration | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagIntegration)
  async createTagIntegration(
    @graphql.Args() args: CreateTagIntegrationArgs
  ): Promise<TagIntegration> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tag: {
          connect: args.data.tag,
        },

        integration: {
          connect: args.data.integration,
        },
      },
    });
  }

  @graphql.Mutation(() => TagIntegration)
  async updateTagIntegration(
    @graphql.Args() args: UpdateTagIntegrationArgs
  ): Promise<TagIntegration | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tag: {
            connect: args.data.tag,
          },

          integration: {
            connect: args.data.integration,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagIntegration)
  async deleteTagIntegration(
    @graphql.Args() args: DeleteTagIntegrationArgs
  ): Promise<TagIntegration | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagIntegration
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Integration, {
    nullable: true,
    name: "integration",
  })
  async resolveFieldIntegration(
    @graphql.Parent() parent: TagIntegration
  ): Promise<Integration | null> {
    const result = await this.service.getIntegration(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
