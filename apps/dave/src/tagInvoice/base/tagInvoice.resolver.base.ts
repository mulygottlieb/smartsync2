/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagInvoiceArgs } from "./CreateTagInvoiceArgs";
import { UpdateTagInvoiceArgs } from "./UpdateTagInvoiceArgs";
import { DeleteTagInvoiceArgs } from "./DeleteTagInvoiceArgs";
import { TagInvoiceCountArgs } from "./TagInvoiceCountArgs";
import { TagInvoiceFindManyArgs } from "./TagInvoiceFindManyArgs";
import { TagInvoiceFindUniqueArgs } from "./TagInvoiceFindUniqueArgs";
import { TagInvoice } from "./TagInvoice";
import { Tag } from "../../tag/base/Tag";
import { Invoice } from "../../invoice/base/Invoice";
import { TagInvoiceService } from "../tagInvoice.service";
@graphql.Resolver(() => TagInvoice)
export class TagInvoiceResolverBase {
  constructor(protected readonly service: TagInvoiceService) {}

  async _tagInvoicesMeta(
    @graphql.Args() args: TagInvoiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagInvoice])
  async tagInvoices(
    @graphql.Args() args: TagInvoiceFindManyArgs
  ): Promise<TagInvoice[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagInvoice, { nullable: true })
  async tagInvoice(
    @graphql.Args() args: TagInvoiceFindUniqueArgs
  ): Promise<TagInvoice | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagInvoice)
  async createTagInvoice(
    @graphql.Args() args: CreateTagInvoiceArgs
  ): Promise<TagInvoice> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tag: {
          connect: args.data.tag,
        },

        invoice: {
          connect: args.data.invoice,
        },
      },
    });
  }

  @graphql.Mutation(() => TagInvoice)
  async updateTagInvoice(
    @graphql.Args() args: UpdateTagInvoiceArgs
  ): Promise<TagInvoice | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tag: {
            connect: args.data.tag,
          },

          invoice: {
            connect: args.data.invoice,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagInvoice)
  async deleteTagInvoice(
    @graphql.Args() args: DeleteTagInvoiceArgs
  ): Promise<TagInvoice | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagInvoice
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Invoice, {
    nullable: true,
    name: "invoice",
  })
  async resolveFieldInvoice(
    @graphql.Parent() parent: TagInvoice
  ): Promise<Invoice | null> {
    const result = await this.service.getInvoice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
