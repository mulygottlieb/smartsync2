/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagMerchantArgs } from "./CreateTagMerchantArgs";
import { UpdateTagMerchantArgs } from "./UpdateTagMerchantArgs";
import { DeleteTagMerchantArgs } from "./DeleteTagMerchantArgs";
import { TagMerchantCountArgs } from "./TagMerchantCountArgs";
import { TagMerchantFindManyArgs } from "./TagMerchantFindManyArgs";
import { TagMerchantFindUniqueArgs } from "./TagMerchantFindUniqueArgs";
import { TagMerchant } from "./TagMerchant";
import { Tag } from "../../tag/base/Tag";
import { Merchant } from "../../merchant/base/Merchant";
import { TagMerchantService } from "../tagMerchant.service";
@graphql.Resolver(() => TagMerchant)
export class TagMerchantResolverBase {
  constructor(protected readonly service: TagMerchantService) {}

  async _tagMerchantsMeta(
    @graphql.Args() args: TagMerchantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagMerchant])
  async tagMerchants(
    @graphql.Args() args: TagMerchantFindManyArgs
  ): Promise<TagMerchant[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagMerchant, { nullable: true })
  async tagMerchant(
    @graphql.Args() args: TagMerchantFindUniqueArgs
  ): Promise<TagMerchant | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagMerchant)
  async createTagMerchant(
    @graphql.Args() args: CreateTagMerchantArgs
  ): Promise<TagMerchant> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tag: {
          connect: args.data.tag,
        },

        merchant: {
          connect: args.data.merchant,
        },
      },
    });
  }

  @graphql.Mutation(() => TagMerchant)
  async updateTagMerchant(
    @graphql.Args() args: UpdateTagMerchantArgs
  ): Promise<TagMerchant | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tag: {
            connect: args.data.tag,
          },

          merchant: {
            connect: args.data.merchant,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagMerchant)
  async deleteTagMerchant(
    @graphql.Args() args: DeleteTagMerchantArgs
  ): Promise<TagMerchant | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagMerchant
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Merchant, {
    nullable: true,
    name: "merchant",
  })
  async resolveFieldMerchant(
    @graphql.Parent() parent: TagMerchant
  ): Promise<Merchant | null> {
    const result = await this.service.getMerchant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
