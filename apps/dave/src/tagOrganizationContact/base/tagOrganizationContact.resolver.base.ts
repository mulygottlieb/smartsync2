/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagOrganizationContactArgs } from "./CreateTagOrganizationContactArgs";
import { UpdateTagOrganizationContactArgs } from "./UpdateTagOrganizationContactArgs";
import { DeleteTagOrganizationContactArgs } from "./DeleteTagOrganizationContactArgs";
import { TagOrganizationContactCountArgs } from "./TagOrganizationContactCountArgs";
import { TagOrganizationContactFindManyArgs } from "./TagOrganizationContactFindManyArgs";
import { TagOrganizationContactFindUniqueArgs } from "./TagOrganizationContactFindUniqueArgs";
import { TagOrganizationContact } from "./TagOrganizationContact";
import { OrganizationContact } from "../../organizationContact/base/OrganizationContact";
import { Tag } from "../../tag/base/Tag";
import { TagOrganizationContactService } from "../tagOrganizationContact.service";
@graphql.Resolver(() => TagOrganizationContact)
export class TagOrganizationContactResolverBase {
  constructor(protected readonly service: TagOrganizationContactService) {}

  async _tagOrganizationContactsMeta(
    @graphql.Args() args: TagOrganizationContactCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagOrganizationContact])
  async tagOrganizationContacts(
    @graphql.Args() args: TagOrganizationContactFindManyArgs
  ): Promise<TagOrganizationContact[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagOrganizationContact, { nullable: true })
  async tagOrganizationContact(
    @graphql.Args() args: TagOrganizationContactFindUniqueArgs
  ): Promise<TagOrganizationContact | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagOrganizationContact)
  async createTagOrganizationContact(
    @graphql.Args() args: CreateTagOrganizationContactArgs
  ): Promise<TagOrganizationContact> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationContact: {
          connect: args.data.organizationContact,
        },

        tag: {
          connect: args.data.tag,
        },
      },
    });
  }

  @graphql.Mutation(() => TagOrganizationContact)
  async updateTagOrganizationContact(
    @graphql.Args() args: UpdateTagOrganizationContactArgs
  ): Promise<TagOrganizationContact | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationContact: {
            connect: args.data.organizationContact,
          },

          tag: {
            connect: args.data.tag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagOrganizationContact)
  async deleteTagOrganizationContact(
    @graphql.Args() args: DeleteTagOrganizationContactArgs
  ): Promise<TagOrganizationContact | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => OrganizationContact, {
    nullable: true,
    name: "organizationContact",
  })
  async resolveFieldOrganizationContact(
    @graphql.Parent() parent: TagOrganizationContact
  ): Promise<OrganizationContact | null> {
    const result = await this.service.getOrganizationContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagOrganizationContact
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
