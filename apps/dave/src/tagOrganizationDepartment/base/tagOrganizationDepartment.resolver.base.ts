/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagOrganizationDepartmentArgs } from "./CreateTagOrganizationDepartmentArgs";
import { UpdateTagOrganizationDepartmentArgs } from "./UpdateTagOrganizationDepartmentArgs";
import { DeleteTagOrganizationDepartmentArgs } from "./DeleteTagOrganizationDepartmentArgs";
import { TagOrganizationDepartmentCountArgs } from "./TagOrganizationDepartmentCountArgs";
import { TagOrganizationDepartmentFindManyArgs } from "./TagOrganizationDepartmentFindManyArgs";
import { TagOrganizationDepartmentFindUniqueArgs } from "./TagOrganizationDepartmentFindUniqueArgs";
import { TagOrganizationDepartment } from "./TagOrganizationDepartment";
import { Tag } from "../../tag/base/Tag";
import { OrganizationDepartment } from "../../organizationDepartment/base/OrganizationDepartment";
import { TagOrganizationDepartmentService } from "../tagOrganizationDepartment.service";
@graphql.Resolver(() => TagOrganizationDepartment)
export class TagOrganizationDepartmentResolverBase {
  constructor(protected readonly service: TagOrganizationDepartmentService) {}

  async _tagOrganizationDepartmentsMeta(
    @graphql.Args() args: TagOrganizationDepartmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagOrganizationDepartment])
  async tagOrganizationDepartments(
    @graphql.Args() args: TagOrganizationDepartmentFindManyArgs
  ): Promise<TagOrganizationDepartment[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagOrganizationDepartment, { nullable: true })
  async tagOrganizationDepartment(
    @graphql.Args() args: TagOrganizationDepartmentFindUniqueArgs
  ): Promise<TagOrganizationDepartment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagOrganizationDepartment)
  async createTagOrganizationDepartment(
    @graphql.Args() args: CreateTagOrganizationDepartmentArgs
  ): Promise<TagOrganizationDepartment> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tag: {
          connect: args.data.tag,
        },

        organizationDepartment: {
          connect: args.data.organizationDepartment,
        },
      },
    });
  }

  @graphql.Mutation(() => TagOrganizationDepartment)
  async updateTagOrganizationDepartment(
    @graphql.Args() args: UpdateTagOrganizationDepartmentArgs
  ): Promise<TagOrganizationDepartment | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tag: {
            connect: args.data.tag,
          },

          organizationDepartment: {
            connect: args.data.organizationDepartment,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagOrganizationDepartment)
  async deleteTagOrganizationDepartment(
    @graphql.Args() args: DeleteTagOrganizationDepartmentArgs
  ): Promise<TagOrganizationDepartment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagOrganizationDepartment
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationDepartment, {
    nullable: true,
    name: "organizationDepartment",
  })
  async resolveFieldOrganizationDepartment(
    @graphql.Parent() parent: TagOrganizationDepartment
  ): Promise<OrganizationDepartment | null> {
    const result = await this.service.getOrganizationDepartment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
