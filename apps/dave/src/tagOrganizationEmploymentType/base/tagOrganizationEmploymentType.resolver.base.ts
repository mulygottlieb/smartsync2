/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagOrganizationEmploymentTypeArgs } from "./CreateTagOrganizationEmploymentTypeArgs";
import { UpdateTagOrganizationEmploymentTypeArgs } from "./UpdateTagOrganizationEmploymentTypeArgs";
import { DeleteTagOrganizationEmploymentTypeArgs } from "./DeleteTagOrganizationEmploymentTypeArgs";
import { TagOrganizationEmploymentTypeCountArgs } from "./TagOrganizationEmploymentTypeCountArgs";
import { TagOrganizationEmploymentTypeFindManyArgs } from "./TagOrganizationEmploymentTypeFindManyArgs";
import { TagOrganizationEmploymentTypeFindUniqueArgs } from "./TagOrganizationEmploymentTypeFindUniqueArgs";
import { TagOrganizationEmploymentType } from "./TagOrganizationEmploymentType";
import { OrganizationEmploymentType } from "../../organizationEmploymentType/base/OrganizationEmploymentType";
import { Tag } from "../../tag/base/Tag";
import { TagOrganizationEmploymentTypeService } from "../tagOrganizationEmploymentType.service";
@graphql.Resolver(() => TagOrganizationEmploymentType)
export class TagOrganizationEmploymentTypeResolverBase {
  constructor(
    protected readonly service: TagOrganizationEmploymentTypeService
  ) {}

  async _tagOrganizationEmploymentTypesMeta(
    @graphql.Args() args: TagOrganizationEmploymentTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagOrganizationEmploymentType])
  async tagOrganizationEmploymentTypes(
    @graphql.Args() args: TagOrganizationEmploymentTypeFindManyArgs
  ): Promise<TagOrganizationEmploymentType[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagOrganizationEmploymentType, { nullable: true })
  async tagOrganizationEmploymentType(
    @graphql.Args() args: TagOrganizationEmploymentTypeFindUniqueArgs
  ): Promise<TagOrganizationEmploymentType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagOrganizationEmploymentType)
  async createTagOrganizationEmploymentType(
    @graphql.Args() args: CreateTagOrganizationEmploymentTypeArgs
  ): Promise<TagOrganizationEmploymentType> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationEmploymentType: {
          connect: args.data.organizationEmploymentType,
        },

        tag: {
          connect: args.data.tag,
        },
      },
    });
  }

  @graphql.Mutation(() => TagOrganizationEmploymentType)
  async updateTagOrganizationEmploymentType(
    @graphql.Args() args: UpdateTagOrganizationEmploymentTypeArgs
  ): Promise<TagOrganizationEmploymentType | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationEmploymentType: {
            connect: args.data.organizationEmploymentType,
          },

          tag: {
            connect: args.data.tag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagOrganizationEmploymentType)
  async deleteTagOrganizationEmploymentType(
    @graphql.Args() args: DeleteTagOrganizationEmploymentTypeArgs
  ): Promise<TagOrganizationEmploymentType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => OrganizationEmploymentType, {
    nullable: true,
    name: "organizationEmploymentType",
  })
  async resolveFieldOrganizationEmploymentType(
    @graphql.Parent() parent: TagOrganizationEmploymentType
  ): Promise<OrganizationEmploymentType | null> {
    const result = await this.service.getOrganizationEmploymentType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagOrganizationEmploymentType
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
