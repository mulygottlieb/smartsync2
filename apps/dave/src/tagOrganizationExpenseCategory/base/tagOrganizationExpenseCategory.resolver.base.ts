/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagOrganizationExpenseCategoryArgs } from "./CreateTagOrganizationExpenseCategoryArgs";
import { UpdateTagOrganizationExpenseCategoryArgs } from "./UpdateTagOrganizationExpenseCategoryArgs";
import { DeleteTagOrganizationExpenseCategoryArgs } from "./DeleteTagOrganizationExpenseCategoryArgs";
import { TagOrganizationExpenseCategoryCountArgs } from "./TagOrganizationExpenseCategoryCountArgs";
import { TagOrganizationExpenseCategoryFindManyArgs } from "./TagOrganizationExpenseCategoryFindManyArgs";
import { TagOrganizationExpenseCategoryFindUniqueArgs } from "./TagOrganizationExpenseCategoryFindUniqueArgs";
import { TagOrganizationExpenseCategory } from "./TagOrganizationExpenseCategory";
import { ExpenseCategory } from "../../expenseCategory/base/ExpenseCategory";
import { Tag } from "../../tag/base/Tag";
import { TagOrganizationExpenseCategoryService } from "../tagOrganizationExpenseCategory.service";
@graphql.Resolver(() => TagOrganizationExpenseCategory)
export class TagOrganizationExpenseCategoryResolverBase {
  constructor(
    protected readonly service: TagOrganizationExpenseCategoryService
  ) {}

  async _tagOrganizationExpenseCategoriesMeta(
    @graphql.Args() args: TagOrganizationExpenseCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagOrganizationExpenseCategory])
  async tagOrganizationExpenseCategories(
    @graphql.Args() args: TagOrganizationExpenseCategoryFindManyArgs
  ): Promise<TagOrganizationExpenseCategory[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagOrganizationExpenseCategory, { nullable: true })
  async tagOrganizationExpenseCategory(
    @graphql.Args() args: TagOrganizationExpenseCategoryFindUniqueArgs
  ): Promise<TagOrganizationExpenseCategory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagOrganizationExpenseCategory)
  async createTagOrganizationExpenseCategory(
    @graphql.Args() args: CreateTagOrganizationExpenseCategoryArgs
  ): Promise<TagOrganizationExpenseCategory> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        expenseCategory: {
          connect: args.data.expenseCategory,
        },

        tag: {
          connect: args.data.tag,
        },
      },
    });
  }

  @graphql.Mutation(() => TagOrganizationExpenseCategory)
  async updateTagOrganizationExpenseCategory(
    @graphql.Args() args: UpdateTagOrganizationExpenseCategoryArgs
  ): Promise<TagOrganizationExpenseCategory | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          expenseCategory: {
            connect: args.data.expenseCategory,
          },

          tag: {
            connect: args.data.tag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagOrganizationExpenseCategory)
  async deleteTagOrganizationExpenseCategory(
    @graphql.Args() args: DeleteTagOrganizationExpenseCategoryArgs
  ): Promise<TagOrganizationExpenseCategory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ExpenseCategory, {
    nullable: true,
    name: "expenseCategory",
  })
  async resolveFieldExpenseCategory(
    @graphql.Parent() parent: TagOrganizationExpenseCategory
  ): Promise<ExpenseCategory | null> {
    const result = await this.service.getExpenseCategory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagOrganizationExpenseCategory
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
