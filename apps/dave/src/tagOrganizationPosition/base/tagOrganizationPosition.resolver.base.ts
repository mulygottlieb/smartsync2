/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagOrganizationPositionArgs } from "./CreateTagOrganizationPositionArgs";
import { UpdateTagOrganizationPositionArgs } from "./UpdateTagOrganizationPositionArgs";
import { DeleteTagOrganizationPositionArgs } from "./DeleteTagOrganizationPositionArgs";
import { TagOrganizationPositionCountArgs } from "./TagOrganizationPositionCountArgs";
import { TagOrganizationPositionFindManyArgs } from "./TagOrganizationPositionFindManyArgs";
import { TagOrganizationPositionFindUniqueArgs } from "./TagOrganizationPositionFindUniqueArgs";
import { TagOrganizationPosition } from "./TagOrganizationPosition";
import { OrganizationPosition } from "../../organizationPosition/base/OrganizationPosition";
import { Tag } from "../../tag/base/Tag";
import { TagOrganizationPositionService } from "../tagOrganizationPosition.service";
@graphql.Resolver(() => TagOrganizationPosition)
export class TagOrganizationPositionResolverBase {
  constructor(protected readonly service: TagOrganizationPositionService) {}

  async _tagOrganizationPositionsMeta(
    @graphql.Args() args: TagOrganizationPositionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagOrganizationPosition])
  async tagOrganizationPositions(
    @graphql.Args() args: TagOrganizationPositionFindManyArgs
  ): Promise<TagOrganizationPosition[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagOrganizationPosition, { nullable: true })
  async tagOrganizationPosition(
    @graphql.Args() args: TagOrganizationPositionFindUniqueArgs
  ): Promise<TagOrganizationPosition | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagOrganizationPosition)
  async createTagOrganizationPosition(
    @graphql.Args() args: CreateTagOrganizationPositionArgs
  ): Promise<TagOrganizationPosition> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationPosition: {
          connect: args.data.organizationPosition,
        },

        tag: {
          connect: args.data.tag,
        },
      },
    });
  }

  @graphql.Mutation(() => TagOrganizationPosition)
  async updateTagOrganizationPosition(
    @graphql.Args() args: UpdateTagOrganizationPositionArgs
  ): Promise<TagOrganizationPosition | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationPosition: {
            connect: args.data.organizationPosition,
          },

          tag: {
            connect: args.data.tag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagOrganizationPosition)
  async deleteTagOrganizationPosition(
    @graphql.Args() args: DeleteTagOrganizationPositionArgs
  ): Promise<TagOrganizationPosition | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => OrganizationPosition, {
    nullable: true,
    name: "organizationPosition",
  })
  async resolveFieldOrganizationPosition(
    @graphql.Parent() parent: TagOrganizationPosition
  ): Promise<OrganizationPosition | null> {
    const result = await this.service.getOrganizationPosition(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagOrganizationPosition
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
