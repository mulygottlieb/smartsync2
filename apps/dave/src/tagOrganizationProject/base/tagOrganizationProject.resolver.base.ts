/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagOrganizationProjectArgs } from "./CreateTagOrganizationProjectArgs";
import { UpdateTagOrganizationProjectArgs } from "./UpdateTagOrganizationProjectArgs";
import { DeleteTagOrganizationProjectArgs } from "./DeleteTagOrganizationProjectArgs";
import { TagOrganizationProjectCountArgs } from "./TagOrganizationProjectCountArgs";
import { TagOrganizationProjectFindManyArgs } from "./TagOrganizationProjectFindManyArgs";
import { TagOrganizationProjectFindUniqueArgs } from "./TagOrganizationProjectFindUniqueArgs";
import { TagOrganizationProject } from "./TagOrganizationProject";
import { Tag } from "../../tag/base/Tag";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { TagOrganizationProjectService } from "../tagOrganizationProject.service";
@graphql.Resolver(() => TagOrganizationProject)
export class TagOrganizationProjectResolverBase {
  constructor(protected readonly service: TagOrganizationProjectService) {}

  async _tagOrganizationProjectsMeta(
    @graphql.Args() args: TagOrganizationProjectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagOrganizationProject])
  async tagOrganizationProjects(
    @graphql.Args() args: TagOrganizationProjectFindManyArgs
  ): Promise<TagOrganizationProject[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagOrganizationProject, { nullable: true })
  async tagOrganizationProject(
    @graphql.Args() args: TagOrganizationProjectFindUniqueArgs
  ): Promise<TagOrganizationProject | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagOrganizationProject)
  async createTagOrganizationProject(
    @graphql.Args() args: CreateTagOrganizationProjectArgs
  ): Promise<TagOrganizationProject> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tag: {
          connect: args.data.tag,
        },

        organizationProject: {
          connect: args.data.organizationProject,
        },
      },
    });
  }

  @graphql.Mutation(() => TagOrganizationProject)
  async updateTagOrganizationProject(
    @graphql.Args() args: UpdateTagOrganizationProjectArgs
  ): Promise<TagOrganizationProject | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tag: {
            connect: args.data.tag,
          },

          organizationProject: {
            connect: args.data.organizationProject,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagOrganizationProject)
  async deleteTagOrganizationProject(
    @graphql.Args() args: DeleteTagOrganizationProjectArgs
  ): Promise<TagOrganizationProject | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagOrganizationProject
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationProject, {
    nullable: true,
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: TagOrganizationProject
  ): Promise<OrganizationProject | null> {
    const result = await this.service.getOrganizationProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
