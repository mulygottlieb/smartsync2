/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagOrganizationTeamArgs } from "./CreateTagOrganizationTeamArgs";
import { UpdateTagOrganizationTeamArgs } from "./UpdateTagOrganizationTeamArgs";
import { DeleteTagOrganizationTeamArgs } from "./DeleteTagOrganizationTeamArgs";
import { TagOrganizationTeamCountArgs } from "./TagOrganizationTeamCountArgs";
import { TagOrganizationTeamFindManyArgs } from "./TagOrganizationTeamFindManyArgs";
import { TagOrganizationTeamFindUniqueArgs } from "./TagOrganizationTeamFindUniqueArgs";
import { TagOrganizationTeam } from "./TagOrganizationTeam";
import { Tag } from "../../tag/base/Tag";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { TagOrganizationTeamService } from "../tagOrganizationTeam.service";
@graphql.Resolver(() => TagOrganizationTeam)
export class TagOrganizationTeamResolverBase {
  constructor(protected readonly service: TagOrganizationTeamService) {}

  async _tagOrganizationTeamsMeta(
    @graphql.Args() args: TagOrganizationTeamCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagOrganizationTeam])
  async tagOrganizationTeams(
    @graphql.Args() args: TagOrganizationTeamFindManyArgs
  ): Promise<TagOrganizationTeam[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagOrganizationTeam, { nullable: true })
  async tagOrganizationTeam(
    @graphql.Args() args: TagOrganizationTeamFindUniqueArgs
  ): Promise<TagOrganizationTeam | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagOrganizationTeam)
  async createTagOrganizationTeam(
    @graphql.Args() args: CreateTagOrganizationTeamArgs
  ): Promise<TagOrganizationTeam> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tag: {
          connect: args.data.tag,
        },

        organizationTeam: {
          connect: args.data.organizationTeam,
        },
      },
    });
  }

  @graphql.Mutation(() => TagOrganizationTeam)
  async updateTagOrganizationTeam(
    @graphql.Args() args: UpdateTagOrganizationTeamArgs
  ): Promise<TagOrganizationTeam | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tag: {
            connect: args.data.tag,
          },

          organizationTeam: {
            connect: args.data.organizationTeam,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagOrganizationTeam)
  async deleteTagOrganizationTeam(
    @graphql.Args() args: DeleteTagOrganizationTeamArgs
  ): Promise<TagOrganizationTeam | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagOrganizationTeam
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationTeam, {
    nullable: true,
    name: "organizationTeam",
  })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: TagOrganizationTeam
  ): Promise<OrganizationTeam | null> {
    const result = await this.service.getOrganizationTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
