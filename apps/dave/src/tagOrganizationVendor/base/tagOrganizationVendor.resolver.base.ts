/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagOrganizationVendorArgs } from "./CreateTagOrganizationVendorArgs";
import { UpdateTagOrganizationVendorArgs } from "./UpdateTagOrganizationVendorArgs";
import { DeleteTagOrganizationVendorArgs } from "./DeleteTagOrganizationVendorArgs";
import { TagOrganizationVendorCountArgs } from "./TagOrganizationVendorCountArgs";
import { TagOrganizationVendorFindManyArgs } from "./TagOrganizationVendorFindManyArgs";
import { TagOrganizationVendorFindUniqueArgs } from "./TagOrganizationVendorFindUniqueArgs";
import { TagOrganizationVendor } from "./TagOrganizationVendor";
import { OrganizationVendor } from "../../organizationVendor/base/OrganizationVendor";
import { Tag } from "../../tag/base/Tag";
import { TagOrganizationVendorService } from "../tagOrganizationVendor.service";
@graphql.Resolver(() => TagOrganizationVendor)
export class TagOrganizationVendorResolverBase {
  constructor(protected readonly service: TagOrganizationVendorService) {}

  async _tagOrganizationVendorsMeta(
    @graphql.Args() args: TagOrganizationVendorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagOrganizationVendor])
  async tagOrganizationVendors(
    @graphql.Args() args: TagOrganizationVendorFindManyArgs
  ): Promise<TagOrganizationVendor[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagOrganizationVendor, { nullable: true })
  async tagOrganizationVendor(
    @graphql.Args() args: TagOrganizationVendorFindUniqueArgs
  ): Promise<TagOrganizationVendor | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagOrganizationVendor)
  async createTagOrganizationVendor(
    @graphql.Args() args: CreateTagOrganizationVendorArgs
  ): Promise<TagOrganizationVendor> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationVendor: {
          connect: args.data.organizationVendor,
        },

        tag: {
          connect: args.data.tag,
        },
      },
    });
  }

  @graphql.Mutation(() => TagOrganizationVendor)
  async updateTagOrganizationVendor(
    @graphql.Args() args: UpdateTagOrganizationVendorArgs
  ): Promise<TagOrganizationVendor | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationVendor: {
            connect: args.data.organizationVendor,
          },

          tag: {
            connect: args.data.tag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagOrganizationVendor)
  async deleteTagOrganizationVendor(
    @graphql.Args() args: DeleteTagOrganizationVendorArgs
  ): Promise<TagOrganizationVendor | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => OrganizationVendor, {
    nullable: true,
    name: "organizationVendor",
  })
  async resolveFieldOrganizationVendor(
    @graphql.Parent() parent: TagOrganizationVendor
  ): Promise<OrganizationVendor | null> {
    const result = await this.service.getOrganizationVendor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagOrganizationVendor
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
