/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagPaymentArgs } from "./CreateTagPaymentArgs";
import { UpdateTagPaymentArgs } from "./UpdateTagPaymentArgs";
import { DeleteTagPaymentArgs } from "./DeleteTagPaymentArgs";
import { TagPaymentCountArgs } from "./TagPaymentCountArgs";
import { TagPaymentFindManyArgs } from "./TagPaymentFindManyArgs";
import { TagPaymentFindUniqueArgs } from "./TagPaymentFindUniqueArgs";
import { TagPayment } from "./TagPayment";
import { Payment } from "../../payment/base/Payment";
import { Tag } from "../../tag/base/Tag";
import { TagPaymentService } from "../tagPayment.service";
@graphql.Resolver(() => TagPayment)
export class TagPaymentResolverBase {
  constructor(protected readonly service: TagPaymentService) {}

  async _tagPaymentsMeta(
    @graphql.Args() args: TagPaymentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagPayment])
  async tagPayments(
    @graphql.Args() args: TagPaymentFindManyArgs
  ): Promise<TagPayment[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagPayment, { nullable: true })
  async tagPayment(
    @graphql.Args() args: TagPaymentFindUniqueArgs
  ): Promise<TagPayment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagPayment)
  async createTagPayment(
    @graphql.Args() args: CreateTagPaymentArgs
  ): Promise<TagPayment> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        payment: {
          connect: args.data.payment,
        },

        tag: {
          connect: args.data.tag,
        },
      },
    });
  }

  @graphql.Mutation(() => TagPayment)
  async updateTagPayment(
    @graphql.Args() args: UpdateTagPaymentArgs
  ): Promise<TagPayment | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          payment: {
            connect: args.data.payment,
          },

          tag: {
            connect: args.data.tag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagPayment)
  async deleteTagPayment(
    @graphql.Args() args: DeleteTagPaymentArgs
  ): Promise<TagPayment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Payment, {
    nullable: true,
    name: "payment",
  })
  async resolveFieldPayment(
    @graphql.Parent() parent: TagPayment
  ): Promise<Payment | null> {
    const result = await this.service.getPayment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagPayment
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
