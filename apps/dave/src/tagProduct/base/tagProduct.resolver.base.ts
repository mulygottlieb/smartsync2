/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagProductArgs } from "./CreateTagProductArgs";
import { UpdateTagProductArgs } from "./UpdateTagProductArgs";
import { DeleteTagProductArgs } from "./DeleteTagProductArgs";
import { TagProductCountArgs } from "./TagProductCountArgs";
import { TagProductFindManyArgs } from "./TagProductFindManyArgs";
import { TagProductFindUniqueArgs } from "./TagProductFindUniqueArgs";
import { TagProduct } from "./TagProduct";
import { Product } from "../../product/base/Product";
import { Tag } from "../../tag/base/Tag";
import { TagProductService } from "../tagProduct.service";
@graphql.Resolver(() => TagProduct)
export class TagProductResolverBase {
  constructor(protected readonly service: TagProductService) {}

  async _tagProductsMeta(
    @graphql.Args() args: TagProductCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagProduct])
  async tagProducts(
    @graphql.Args() args: TagProductFindManyArgs
  ): Promise<TagProduct[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagProduct, { nullable: true })
  async tagProduct(
    @graphql.Args() args: TagProductFindUniqueArgs
  ): Promise<TagProduct | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagProduct)
  async createTagProduct(
    @graphql.Args() args: CreateTagProductArgs
  ): Promise<TagProduct> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        product: {
          connect: args.data.product,
        },

        tag: {
          connect: args.data.tag,
        },
      },
    });
  }

  @graphql.Mutation(() => TagProduct)
  async updateTagProduct(
    @graphql.Args() args: UpdateTagProductArgs
  ): Promise<TagProduct | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          product: {
            connect: args.data.product,
          },

          tag: {
            connect: args.data.tag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagProduct)
  async deleteTagProduct(
    @graphql.Args() args: DeleteTagProductArgs
  ): Promise<TagProduct | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  async resolveFieldProduct(
    @graphql.Parent() parent: TagProduct
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagProduct
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
