/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagTaskArgs } from "./CreateTagTaskArgs";
import { UpdateTagTaskArgs } from "./UpdateTagTaskArgs";
import { DeleteTagTaskArgs } from "./DeleteTagTaskArgs";
import { TagTaskCountArgs } from "./TagTaskCountArgs";
import { TagTaskFindManyArgs } from "./TagTaskFindManyArgs";
import { TagTaskFindUniqueArgs } from "./TagTaskFindUniqueArgs";
import { TagTask } from "./TagTask";
import { Task } from "../../task/base/Task";
import { Tag } from "../../tag/base/Tag";
import { TagTaskService } from "../tagTask.service";
@graphql.Resolver(() => TagTask)
export class TagTaskResolverBase {
  constructor(protected readonly service: TagTaskService) {}

  async _tagTasksMeta(
    @graphql.Args() args: TagTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagTask])
  async tagTasks(
    @graphql.Args() args: TagTaskFindManyArgs
  ): Promise<TagTask[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagTask, { nullable: true })
  async tagTask(
    @graphql.Args() args: TagTaskFindUniqueArgs
  ): Promise<TagTask | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagTask)
  async createTagTask(
    @graphql.Args() args: CreateTagTaskArgs
  ): Promise<TagTask> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        task: {
          connect: args.data.task,
        },

        tag: {
          connect: args.data.tag,
        },
      },
    });
  }

  @graphql.Mutation(() => TagTask)
  async updateTagTask(
    @graphql.Args() args: UpdateTagTaskArgs
  ): Promise<TagTask | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          task: {
            connect: args.data.task,
          },

          tag: {
            connect: args.data.tag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagTask)
  async deleteTagTask(
    @graphql.Args() args: DeleteTagTaskArgs
  ): Promise<TagTask | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Task, {
    nullable: true,
    name: "task",
  })
  async resolveFieldTask(
    @graphql.Parent() parent: TagTask
  ): Promise<Task | null> {
    const result = await this.service.getTask(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagTask
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
