/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagUserArgs } from "./CreateTagUserArgs";
import { UpdateTagUserArgs } from "./UpdateTagUserArgs";
import { DeleteTagUserArgs } from "./DeleteTagUserArgs";
import { TagUserCountArgs } from "./TagUserCountArgs";
import { TagUserFindManyArgs } from "./TagUserFindManyArgs";
import { TagUserFindUniqueArgs } from "./TagUserFindUniqueArgs";
import { TagUser } from "./TagUser";
import { User } from "../../user/base/User";
import { Tag } from "../../tag/base/Tag";
import { TagUserService } from "../tagUser.service";
@graphql.Resolver(() => TagUser)
export class TagUserResolverBase {
  constructor(protected readonly service: TagUserService) {}

  async _tagUsersMeta(
    @graphql.Args() args: TagUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagUser])
  async tagUsers(
    @graphql.Args() args: TagUserFindManyArgs
  ): Promise<TagUser[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagUser, { nullable: true })
  async tagUser(
    @graphql.Args() args: TagUserFindUniqueArgs
  ): Promise<TagUser | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagUser)
  async createTagUser(
    @graphql.Args() args: CreateTagUserArgs
  ): Promise<TagUser> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: {
          connect: args.data.user,
        },

        tag: {
          connect: args.data.tag,
        },
      },
    });
  }

  @graphql.Mutation(() => TagUser)
  async updateTagUser(
    @graphql.Args() args: UpdateTagUserArgs
  ): Promise<TagUser | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: {
            connect: args.data.user,
          },

          tag: {
            connect: args.data.tag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagUser)
  async deleteTagUser(
    @graphql.Args() args: DeleteTagUserArgs
  ): Promise<TagUser | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: TagUser
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagUser
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
