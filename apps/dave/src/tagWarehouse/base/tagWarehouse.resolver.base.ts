/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagWarehouseArgs } from "./CreateTagWarehouseArgs";
import { UpdateTagWarehouseArgs } from "./UpdateTagWarehouseArgs";
import { DeleteTagWarehouseArgs } from "./DeleteTagWarehouseArgs";
import { TagWarehouseCountArgs } from "./TagWarehouseCountArgs";
import { TagWarehouseFindManyArgs } from "./TagWarehouseFindManyArgs";
import { TagWarehouseFindUniqueArgs } from "./TagWarehouseFindUniqueArgs";
import { TagWarehouse } from "./TagWarehouse";
import { Warehouse } from "../../warehouse/base/Warehouse";
import { Tag } from "../../tag/base/Tag";
import { TagWarehouseService } from "../tagWarehouse.service";
@graphql.Resolver(() => TagWarehouse)
export class TagWarehouseResolverBase {
  constructor(protected readonly service: TagWarehouseService) {}

  async _tagWarehousesMeta(
    @graphql.Args() args: TagWarehouseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagWarehouse])
  async tagWarehouses(
    @graphql.Args() args: TagWarehouseFindManyArgs
  ): Promise<TagWarehouse[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagWarehouse, { nullable: true })
  async tagWarehouse(
    @graphql.Args() args: TagWarehouseFindUniqueArgs
  ): Promise<TagWarehouse | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagWarehouse)
  async createTagWarehouse(
    @graphql.Args() args: CreateTagWarehouseArgs
  ): Promise<TagWarehouse> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        warehouse: {
          connect: args.data.warehouse,
        },

        tag: {
          connect: args.data.tag,
        },
      },
    });
  }

  @graphql.Mutation(() => TagWarehouse)
  async updateTagWarehouse(
    @graphql.Args() args: UpdateTagWarehouseArgs
  ): Promise<TagWarehouse | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          warehouse: {
            connect: args.data.warehouse,
          },

          tag: {
            connect: args.data.tag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagWarehouse)
  async deleteTagWarehouse(
    @graphql.Args() args: DeleteTagWarehouseArgs
  ): Promise<TagWarehouse | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Warehouse, {
    nullable: true,
    name: "warehouse",
  })
  async resolveFieldWarehouse(
    @graphql.Parent() parent: TagWarehouse
  ): Promise<Warehouse | null> {
    const result = await this.service.getWarehouse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagWarehouse
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
