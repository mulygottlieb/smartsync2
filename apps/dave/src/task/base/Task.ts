/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsDate,
  IsOptional,
  IsInt,
  IsBoolean,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { OrganizationSprint } from "../../organizationSprint/base/OrganizationSprint";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { Organization } from "../../organization/base/Organization";
import { User } from "../../user/base/User";
import { Tenant } from "../../tenant/base/Tenant";
import { Activity } from "../../activity/base/Activity";
import { EmployeeTasksTask } from "../../employeeTasksTask/base/EmployeeTasksTask";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { OrganizationTeamTasksTask } from "../../organizationTeamTasksTask/base/OrganizationTeamTasksTask";
import { TagTask } from "../../tagTask/base/TagTask";
import { TaskEmployee } from "../../taskEmployee/base/TaskEmployee";
import { TaskLinkedIssue } from "../../taskLinkedIssue/base/TaskLinkedIssue";
import { TaskTeam } from "../../taskTeam/base/TaskTeam";
import { TimeLog } from "../../timeLog/base/TimeLog";

@ObjectType()
class Task {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  title!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  status!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  estimate!: number | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dueDate!: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  numberField!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  prefix!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  priority!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  size!: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  publicField!: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  startDate!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  resolvedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  version!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  issueType!: string | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationSprint,
  })
  @ValidateNested()
  @Type(() => OrganizationSprint)
  @IsOptional()
  organizationSprint?: OrganizationSprint | null;

  @ApiProperty({
    required: false,
    type: () => OrganizationProject,
  })
  @ValidateNested()
  @Type(() => OrganizationProject)
  @IsOptional()
  organizationProject?: OrganizationProject | null;

  @ApiProperty({
    required: false,
    type: () => Organization,
  })
  @ValidateNested()
  @Type(() => Organization)
  @IsOptional()
  organization?: Organization | null;

  @ApiProperty({
    required: false,
    type: () => Task,
  })
  @ValidateNested()
  @Type(() => Task)
  @IsOptional()
  task?: Task | null;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  user?: User | null;

  @ApiProperty({
    required: false,
    type: () => Tenant,
  })
  @ValidateNested()
  @Type(() => Tenant)
  @IsOptional()
  tenant?: Tenant | null;

  @ApiProperty({
    required: false,
    type: () => [Activity],
  })
  @ValidateNested()
  @Type(() => Activity)
  @IsOptional()
  activity?: Array<Activity>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeTasksTask],
  })
  @ValidateNested()
  @Type(() => EmployeeTasksTask)
  @IsOptional()
  employeeTasksTask?: Array<EmployeeTasksTask>;

  @ApiProperty({
    required: false,
    type: () => [InvoiceItem],
  })
  @ValidateNested()
  @Type(() => InvoiceItem)
  @IsOptional()
  invoiceItem?: Array<InvoiceItem>;

  @ApiProperty({
    required: false,
    type: () => [KeyResult],
  })
  @ValidateNested()
  @Type(() => KeyResult)
  @IsOptional()
  keyResult?: Array<KeyResult>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationTeamTasksTask],
  })
  @ValidateNested()
  @Type(() => OrganizationTeamTasksTask)
  @IsOptional()
  organizationTeamTasksTask?: Array<OrganizationTeamTasksTask>;

  @ApiProperty({
    required: false,
    type: () => [TagTask],
  })
  @ValidateNested()
  @Type(() => TagTask)
  @IsOptional()
  tagTask?: Array<TagTask>;

  @ApiProperty({
    required: false,
    type: () => [Task],
  })
  @ValidateNested()
  @Type(() => Task)
  @IsOptional()
  otherTask?: Array<Task>;

  @ApiProperty({
    required: false,
    type: () => [TaskEmployee],
  })
  @ValidateNested()
  @Type(() => TaskEmployee)
  @IsOptional()
  taskEmployee?: Array<TaskEmployee>;

  @ApiProperty({
    required: false,
    type: () => [TaskLinkedIssue],
  })
  @ValidateNested()
  @Type(() => TaskLinkedIssue)
  @IsOptional()
  taskLinkedIssuesTaskLinkedIssuesTaskToIdTotask?: Array<TaskLinkedIssue>;

  @ApiProperty({
    required: false,
    type: () => [TaskLinkedIssue],
  })
  @ValidateNested()
  @Type(() => TaskLinkedIssue)
  @IsOptional()
  taskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask?: Array<TaskLinkedIssue>;

  @ApiProperty({
    required: false,
    type: () => [TaskTeam],
  })
  @ValidateNested()
  @Type(() => TaskTeam)
  @IsOptional()
  taskTeam?: Array<TaskTeam>;

  @ApiProperty({
    required: false,
    type: () => [TimeLog],
  })
  @ValidateNested()
  @Type(() => TimeLog)
  @IsOptional()
  timeLog?: Array<TimeLog>;
}

export { Task as Task };
