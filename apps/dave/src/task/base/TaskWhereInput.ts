/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested } from "class-validator";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { BooleanNullableFilter } from "../../util/BooleanNullableFilter";
import { OrganizationSprintWhereUniqueInput } from "../../organizationSprint/base/OrganizationSprintWhereUniqueInput";
import { OrganizationProjectWhereUniqueInput } from "../../organizationProject/base/OrganizationProjectWhereUniqueInput";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { TaskWhereUniqueInput } from "./TaskWhereUniqueInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { ActivityListRelationFilter } from "../../activity/base/ActivityListRelationFilter";
import { EmployeeTasksTaskListRelationFilter } from "../../employeeTasksTask/base/EmployeeTasksTaskListRelationFilter";
import { InvoiceItemListRelationFilter } from "../../invoiceItem/base/InvoiceItemListRelationFilter";
import { KeyResultListRelationFilter } from "../../keyResult/base/KeyResultListRelationFilter";
import { OrganizationTeamTasksTaskListRelationFilter } from "../../organizationTeamTasksTask/base/OrganizationTeamTasksTaskListRelationFilter";
import { TagTaskListRelationFilter } from "../../tagTask/base/TagTaskListRelationFilter";
import { TaskListRelationFilter } from "./TaskListRelationFilter";
import { TaskEmployeeListRelationFilter } from "../../taskEmployee/base/TaskEmployeeListRelationFilter";
import { TaskLinkedIssueListRelationFilter } from "../../taskLinkedIssue/base/TaskLinkedIssueListRelationFilter";
import { TaskTeamListRelationFilter } from "../../taskTeam/base/TaskTeamListRelationFilter";
import { TimeLogListRelationFilter } from "../../timeLog/base/TimeLogListRelationFilter";

@InputType()
class TaskWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  createdAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  title?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  description?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  status?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  estimate?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  dueDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  numberField?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  prefix?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  priority?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  size?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  publicField?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  startDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  resolvedAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  version?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  issueType?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationSprintWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationSprintWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationSprintWhereUniqueInput, {
    nullable: true,
  })
  organizationSprint?: OrganizationSprintWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationProjectWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationProjectWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationProjectWhereUniqueInput, {
    nullable: true,
  })
  organizationProject?: OrganizationProjectWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizationWhereUniqueInput, {
    nullable: true,
  })
  organization?: OrganizationWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => TaskWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TaskWhereUniqueInput)
  @IsOptional()
  @Field(() => TaskWhereUniqueInput, {
    nullable: true,
  })
  task?: TaskWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ActivityListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ActivityListRelationFilter)
  @IsOptional()
  @Field(() => ActivityListRelationFilter, {
    nullable: true,
  })
  activity?: ActivityListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EmployeeTasksTaskListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmployeeTasksTaskListRelationFilter)
  @IsOptional()
  @Field(() => EmployeeTasksTaskListRelationFilter, {
    nullable: true,
  })
  employeeTasksTask?: EmployeeTasksTaskListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => InvoiceItemListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InvoiceItemListRelationFilter)
  @IsOptional()
  @Field(() => InvoiceItemListRelationFilter, {
    nullable: true,
  })
  invoiceItem?: InvoiceItemListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => KeyResultListRelationFilter,
  })
  @ValidateNested()
  @Type(() => KeyResultListRelationFilter)
  @IsOptional()
  @Field(() => KeyResultListRelationFilter, {
    nullable: true,
  })
  keyResult?: KeyResultListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamTasksTaskListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamTasksTaskListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationTeamTasksTaskListRelationFilter, {
    nullable: true,
  })
  organizationTeamTasksTask?: OrganizationTeamTasksTaskListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TagTaskListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TagTaskListRelationFilter)
  @IsOptional()
  @Field(() => TagTaskListRelationFilter, {
    nullable: true,
  })
  tagTask?: TagTaskListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TaskListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TaskListRelationFilter)
  @IsOptional()
  @Field(() => TaskListRelationFilter, {
    nullable: true,
  })
  otherTask?: TaskListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TaskEmployeeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TaskEmployeeListRelationFilter)
  @IsOptional()
  @Field(() => TaskEmployeeListRelationFilter, {
    nullable: true,
  })
  taskEmployee?: TaskEmployeeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TaskLinkedIssueListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TaskLinkedIssueListRelationFilter)
  @IsOptional()
  @Field(() => TaskLinkedIssueListRelationFilter, {
    nullable: true,
  })
  taskLinkedIssuesTaskLinkedIssuesTaskToIdTotask?: TaskLinkedIssueListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TaskLinkedIssueListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TaskLinkedIssueListRelationFilter)
  @IsOptional()
  @Field(() => TaskLinkedIssueListRelationFilter, {
    nullable: true,
  })
  taskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask?: TaskLinkedIssueListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TaskTeamListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TaskTeamListRelationFilter)
  @IsOptional()
  @Field(() => TaskTeamListRelationFilter, {
    nullable: true,
  })
  taskTeam?: TaskTeamListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TimeLogListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TimeLogListRelationFilter)
  @IsOptional()
  @Field(() => TimeLogListRelationFilter, {
    nullable: true,
  })
  timeLog?: TimeLogListRelationFilter;
}

export { TaskWhereInput as TaskWhereInput };
