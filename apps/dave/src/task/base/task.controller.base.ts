/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TaskService } from "../task.service";
import { TaskCreateInput } from "./TaskCreateInput";
import { TaskWhereInput } from "./TaskWhereInput";
import { TaskWhereUniqueInput } from "./TaskWhereUniqueInput";
import { TaskFindManyArgs } from "./TaskFindManyArgs";
import { TaskUpdateInput } from "./TaskUpdateInput";
import { Task } from "./Task";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { ActivityWhereUniqueInput } from "../../activity/base/ActivityWhereUniqueInput";
import { EmployeeTasksTaskFindManyArgs } from "../../employeeTasksTask/base/EmployeeTasksTaskFindManyArgs";
import { EmployeeTasksTask } from "../../employeeTasksTask/base/EmployeeTasksTask";
import { EmployeeTasksTaskWhereUniqueInput } from "../../employeeTasksTask/base/EmployeeTasksTaskWhereUniqueInput";
import { InvoiceItemFindManyArgs } from "../../invoiceItem/base/InvoiceItemFindManyArgs";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { InvoiceItemWhereUniqueInput } from "../../invoiceItem/base/InvoiceItemWhereUniqueInput";
import { KeyResultFindManyArgs } from "../../keyResult/base/KeyResultFindManyArgs";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { KeyResultWhereUniqueInput } from "../../keyResult/base/KeyResultWhereUniqueInput";
import { OrganizationTeamTasksTaskFindManyArgs } from "../../organizationTeamTasksTask/base/OrganizationTeamTasksTaskFindManyArgs";
import { OrganizationTeamTasksTask } from "../../organizationTeamTasksTask/base/OrganizationTeamTasksTask";
import { OrganizationTeamTasksTaskWhereUniqueInput } from "../../organizationTeamTasksTask/base/OrganizationTeamTasksTaskWhereUniqueInput";
import { TagTaskFindManyArgs } from "../../tagTask/base/TagTaskFindManyArgs";
import { TagTask } from "../../tagTask/base/TagTask";
import { TagTaskWhereUniqueInput } from "../../tagTask/base/TagTaskWhereUniqueInput";
import { TaskEmployeeFindManyArgs } from "../../taskEmployee/base/TaskEmployeeFindManyArgs";
import { TaskEmployee } from "../../taskEmployee/base/TaskEmployee";
import { TaskEmployeeWhereUniqueInput } from "../../taskEmployee/base/TaskEmployeeWhereUniqueInput";
import { TaskLinkedIssueFindManyArgs } from "../../taskLinkedIssue/base/TaskLinkedIssueFindManyArgs";
import { TaskLinkedIssue } from "../../taskLinkedIssue/base/TaskLinkedIssue";
import { TaskLinkedIssueWhereUniqueInput } from "../../taskLinkedIssue/base/TaskLinkedIssueWhereUniqueInput";
import { TaskTeamFindManyArgs } from "../../taskTeam/base/TaskTeamFindManyArgs";
import { TaskTeam } from "../../taskTeam/base/TaskTeam";
import { TaskTeamWhereUniqueInput } from "../../taskTeam/base/TaskTeamWhereUniqueInput";
import { TimeLogFindManyArgs } from "../../timeLog/base/TimeLogFindManyArgs";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { TimeLogWhereUniqueInput } from "../../timeLog/base/TimeLogWhereUniqueInput";

export class TaskControllerBase {
  constructor(protected readonly service: TaskService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Task })
  async create(@common.Body() data: TaskCreateInput): Promise<Task> {
    return await this.service.create({
      data: {
        ...data,

        organizationSprint: data.organizationSprint
          ? {
              connect: data.organizationSprint,
            }
          : undefined,

        organizationProject: data.organizationProject
          ? {
              connect: data.organizationProject,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        task: data.task
          ? {
              connect: data.task,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        status: true,
        estimate: true,
        dueDate: true,
        numberField: true,
        prefix: true,
        priority: true,
        size: true,
        publicField: true,
        startDate: true,
        resolvedAt: true,
        version: true,
        issueType: true,

        organizationSprint: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Task] })
  @ApiNestedQuery(TaskFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Task[]> {
    const args = plainToClass(TaskFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        status: true,
        estimate: true,
        dueDate: true,
        numberField: true,
        prefix: true,
        priority: true,
        size: true,
        publicField: true,
        startDate: true,
        resolvedAt: true,
        version: true,
        issueType: true,

        organizationSprint: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Task })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: TaskWhereUniqueInput
  ): Promise<Task | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        status: true,
        estimate: true,
        dueDate: true,
        numberField: true,
        prefix: true,
        priority: true,
        size: true,
        publicField: true,
        startDate: true,
        resolvedAt: true,
        version: true,
        issueType: true,

        organizationSprint: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Task })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() data: TaskUpdateInput
  ): Promise<Task | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          organizationSprint: data.organizationSprint
            ? {
                connect: data.organizationSprint,
              }
            : undefined,

          organizationProject: data.organizationProject
            ? {
                connect: data.organizationProject,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          task: data.task
            ? {
                connect: data.task,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          status: true,
          estimate: true,
          dueDate: true,
          numberField: true,
          prefix: true,
          priority: true,
          size: true,
          publicField: true,
          startDate: true,
          resolvedAt: true,
          version: true,
          issueType: true,

          organizationSprint: {
            select: {
              id: true,
            },
          },

          organizationProject: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          task: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Task })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: TaskWhereUniqueInput
  ): Promise<Task | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          status: true,
          estimate: true,
          dueDate: true,
          numberField: true,
          prefix: true,
          priority: true,
          size: true,
          publicField: true,
          startDate: true,
          resolvedAt: true,
          version: true,
          issueType: true,

          organizationSprint: {
            select: {
              id: true,
            },
          },

          organizationProject: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          task: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/activity")
  @ApiNestedQuery(ActivityFindManyArgs)
  async findManyActivity(
    @common.Req() request: Request,
    @common.Param() params: TaskWhereUniqueInput
  ): Promise<Activity[]> {
    const query = plainToClass(ActivityFindManyArgs, request.query);
    const results = await this.service.findActivity(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        metaData: true,
        date: true,
        time: true,
        duration: true,
        typeField: true,
        source: true,
        deletedAt: true,
        recordedAt: true,

        task: {
          select: {
            id: true,
          },
        },

        timeSlot: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/activity")
  async connectActivity(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/activity")
  async updateActivity(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/activity")
  async disconnectActivity(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeTasksTask")
  @ApiNestedQuery(EmployeeTasksTaskFindManyArgs)
  async findManyEmployeeTasksTask(
    @common.Req() request: Request,
    @common.Param() params: TaskWhereUniqueInput
  ): Promise<EmployeeTasksTask[]> {
    const query = plainToClass(EmployeeTasksTaskFindManyArgs, request.query);
    const results = await this.service.findEmployeeTasksTask(params.id, {
      ...query,
      select: {
        task: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeTasksTask")
  async connectEmployeeTasksTask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: EmployeeTasksTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasksTask: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeTasksTask")
  async updateEmployeeTasksTask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: EmployeeTasksTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasksTask: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeTasksTask")
  async disconnectEmployeeTasksTask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: EmployeeTasksTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasksTask: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/invoiceItem")
  @ApiNestedQuery(InvoiceItemFindManyArgs)
  async findManyInvoiceItem(
    @common.Req() request: Request,
    @common.Param() params: TaskWhereUniqueInput
  ): Promise<InvoiceItem[]> {
    const query = plainToClass(InvoiceItemFindManyArgs, request.query);
    const results = await this.service.findInvoiceItem(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        price: true,
        quantity: true,
        totalValue: true,
        applyTax: true,
        applyDiscount: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        invoice: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        expense: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoiceItem")
  async connectInvoiceItem(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoiceItem")
  async updateInvoiceItem(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoiceItem")
  async disconnectInvoiceItem(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/keyResult")
  @ApiNestedQuery(KeyResultFindManyArgs)
  async findManyKeyResult(
    @common.Req() request: Request,
    @common.Param() params: TaskWhereUniqueInput
  ): Promise<KeyResult[]> {
    const query = plainToClass(KeyResultFindManyArgs, request.query);
    const results = await this.service.findKeyResult(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        typeField: true,
        targetValue: true,
        initialValue: true,
        unit: true,
        update: true,
        progress: true,
        deadline: true,
        hardDeadline: true,
        softDeadline: true,
        status: true,
        weight: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        goalKpi: {
          select: {
            id: true,
          },
        },

        employeeKeyResultOwnerIdToemployee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employeeKeyResultLeadIdToemployee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        goalKeyResultGoalIdTogoal: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/keyResult")
  async connectKeyResult(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResult: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/keyResult")
  async updateKeyResult(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResult: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/keyResult")
  async disconnectKeyResult(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResult: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationTeamTasksTask")
  @ApiNestedQuery(OrganizationTeamTasksTaskFindManyArgs)
  async findManyOrganizationTeamTasksTask(
    @common.Req() request: Request,
    @common.Param() params: TaskWhereUniqueInput
  ): Promise<OrganizationTeamTasksTask[]> {
    const query = plainToClass(
      OrganizationTeamTasksTaskFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationTeamTasksTask(
      params.id,
      {
        ...query,
        select: {
          organizationTeam: {
            select: {
              id: true,
            },
          },

          task: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationTeamTasksTask")
  async connectOrganizationTeamTasksTask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: OrganizationTeamTasksTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamTasksTask: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationTeamTasksTask")
  async updateOrganizationTeamTasksTask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: OrganizationTeamTasksTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamTasksTask: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationTeamTasksTask")
  async disconnectOrganizationTeamTasksTask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: OrganizationTeamTasksTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamTasksTask: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagTask")
  @ApiNestedQuery(TagTaskFindManyArgs)
  async findManyTagTask(
    @common.Req() request: Request,
    @common.Param() params: TaskWhereUniqueInput
  ): Promise<TagTask[]> {
    const query = plainToClass(TagTaskFindManyArgs, request.query);
    const results = await this.service.findTagTask(params.id, {
      ...query,
      select: {
        task: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagTask")
  async connectTagTask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TagTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagTask: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagTask")
  async updateTagTask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TagTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagTask: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagTask")
  async disconnectTagTask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TagTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagTask: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/otherTask")
  @ApiNestedQuery(TaskFindManyArgs)
  async findManyOtherTask(
    @common.Req() request: Request,
    @common.Param() params: TaskWhereUniqueInput
  ): Promise<Task[]> {
    const query = plainToClass(TaskFindManyArgs, request.query);
    const results = await this.service.findOtherTask(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        status: true,
        estimate: true,
        dueDate: true,
        numberField: true,
        prefix: true,
        priority: true,
        size: true,
        publicField: true,
        startDate: true,
        resolvedAt: true,
        version: true,
        issueType: true,

        organizationSprint: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/otherTask")
  async connectOtherTask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otherTask: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/otherTask")
  async updateOtherTask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otherTask: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/otherTask")
  async disconnectOtherTask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otherTask: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskEmployee")
  @ApiNestedQuery(TaskEmployeeFindManyArgs)
  async findManyTaskEmployee(
    @common.Req() request: Request,
    @common.Param() params: TaskWhereUniqueInput
  ): Promise<TaskEmployee[]> {
    const query = plainToClass(TaskEmployeeFindManyArgs, request.query);
    const results = await this.service.findTaskEmployee(params.id, {
      ...query,
      select: {
        task: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskEmployee")
  async connectTaskEmployee(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TaskEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskEmployee")
  async updateTaskEmployee(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TaskEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskEmployee")
  async disconnectTaskEmployee(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TaskEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskLinkedIssuesTaskLinkedIssuesTaskToIdTotask")
  @ApiNestedQuery(TaskLinkedIssueFindManyArgs)
  async findManyTaskLinkedIssuesTaskLinkedIssuesTaskToIdTotask(
    @common.Req() request: Request,
    @common.Param() params: TaskWhereUniqueInput
  ): Promise<TaskLinkedIssue[]> {
    const query = plainToClass(TaskLinkedIssueFindManyArgs, request.query);
    const results =
      await this.service.findTaskLinkedIssuesTaskLinkedIssuesTaskToIdTotask(
        params.id,
        {
          ...query,
          select: {
            id: true,
            createdAt: true,
            updatedAt: true,
            action: true,

            taskTaskLinkedIssuesTaskToIdTotask: {
              select: {
                id: true,
              },
            },

            tenant: {
              select: {
                id: true,
              },
            },

            organization: {
              select: {
                id: true,
              },
            },

            taskTaskLinkedIssuesTaskFromIdTotask: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskLinkedIssuesTaskLinkedIssuesTaskToIdTotask")
  async connectTaskLinkedIssuesTaskLinkedIssuesTaskToIdTotask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TaskLinkedIssueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskLinkedIssuesTaskLinkedIssuesTaskToIdTotask: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskLinkedIssuesTaskLinkedIssuesTaskToIdTotask")
  async updateTaskLinkedIssuesTaskLinkedIssuesTaskToIdTotask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TaskLinkedIssueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskLinkedIssuesTaskLinkedIssuesTaskToIdTotask: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskLinkedIssuesTaskLinkedIssuesTaskToIdTotask")
  async disconnectTaskLinkedIssuesTaskLinkedIssuesTaskToIdTotask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TaskLinkedIssueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskLinkedIssuesTaskLinkedIssuesTaskToIdTotask: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask")
  @ApiNestedQuery(TaskLinkedIssueFindManyArgs)
  async findManyTaskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask(
    @common.Req() request: Request,
    @common.Param() params: TaskWhereUniqueInput
  ): Promise<TaskLinkedIssue[]> {
    const query = plainToClass(TaskLinkedIssueFindManyArgs, request.query);
    const results =
      await this.service.findTaskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask(
        params.id,
        {
          ...query,
          select: {
            id: true,
            createdAt: true,
            updatedAt: true,
            action: true,

            taskTaskLinkedIssuesTaskToIdTotask: {
              select: {
                id: true,
              },
            },

            tenant: {
              select: {
                id: true,
              },
            },

            organization: {
              select: {
                id: true,
              },
            },

            taskTaskLinkedIssuesTaskFromIdTotask: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask")
  async connectTaskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TaskLinkedIssueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask")
  async updateTaskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TaskLinkedIssueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask")
  async disconnectTaskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TaskLinkedIssueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskTeam")
  @ApiNestedQuery(TaskTeamFindManyArgs)
  async findManyTaskTeam(
    @common.Req() request: Request,
    @common.Param() params: TaskWhereUniqueInput
  ): Promise<TaskTeam[]> {
    const query = plainToClass(TaskTeamFindManyArgs, request.query);
    const results = await this.service.findTaskTeam(params.id, {
      ...query,
      select: {
        organizationTeam: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskTeam")
  async connectTaskTeam(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TaskTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskTeam: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskTeam")
  async updateTaskTeam(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TaskTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskTeam: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskTeam")
  async disconnectTaskTeam(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TaskTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskTeam: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeLog")
  @ApiNestedQuery(TimeLogFindManyArgs)
  async findManyTimeLog(
    @common.Req() request: Request,
    @common.Param() params: TaskWhereUniqueInput
  ): Promise<TimeLog[]> {
    const query = plainToClass(TimeLogFindManyArgs, request.query);
    const results = await this.service.findTimeLog(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startedAt: true,
        stoppedAt: true,
        logType: true,
        source: true,
        description: true,
        reason: true,
        isBillable: true,
        deletedAt: true,
        isRunning: true,
        version: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        timesheet: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeLog")
  async connectTimeLog(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeLog")
  async updateTimeLog(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeLog")
  async disconnectTimeLog(
    @common.Param() params: TaskWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
