/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTaskArgs } from "./CreateTaskArgs";
import { UpdateTaskArgs } from "./UpdateTaskArgs";
import { DeleteTaskArgs } from "./DeleteTaskArgs";
import { TaskCountArgs } from "./TaskCountArgs";
import { TaskFindManyArgs } from "./TaskFindManyArgs";
import { TaskFindUniqueArgs } from "./TaskFindUniqueArgs";
import { Task } from "./Task";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { EmployeeTasksTaskFindManyArgs } from "../../employeeTasksTask/base/EmployeeTasksTaskFindManyArgs";
import { EmployeeTasksTask } from "../../employeeTasksTask/base/EmployeeTasksTask";
import { InvoiceItemFindManyArgs } from "../../invoiceItem/base/InvoiceItemFindManyArgs";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { KeyResultFindManyArgs } from "../../keyResult/base/KeyResultFindManyArgs";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { OrganizationTeamTasksTaskFindManyArgs } from "../../organizationTeamTasksTask/base/OrganizationTeamTasksTaskFindManyArgs";
import { OrganizationTeamTasksTask } from "../../organizationTeamTasksTask/base/OrganizationTeamTasksTask";
import { TagTaskFindManyArgs } from "../../tagTask/base/TagTaskFindManyArgs";
import { TagTask } from "../../tagTask/base/TagTask";
import { TaskEmployeeFindManyArgs } from "../../taskEmployee/base/TaskEmployeeFindManyArgs";
import { TaskEmployee } from "../../taskEmployee/base/TaskEmployee";
import { TaskLinkedIssueFindManyArgs } from "../../taskLinkedIssue/base/TaskLinkedIssueFindManyArgs";
import { TaskLinkedIssue } from "../../taskLinkedIssue/base/TaskLinkedIssue";
import { TaskTeamFindManyArgs } from "../../taskTeam/base/TaskTeamFindManyArgs";
import { TaskTeam } from "../../taskTeam/base/TaskTeam";
import { TimeLogFindManyArgs } from "../../timeLog/base/TimeLogFindManyArgs";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { OrganizationSprint } from "../../organizationSprint/base/OrganizationSprint";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { Organization } from "../../organization/base/Organization";
import { User } from "../../user/base/User";
import { Tenant } from "../../tenant/base/Tenant";
import { TaskService } from "../task.service";
@graphql.Resolver(() => Task)
export class TaskResolverBase {
  constructor(protected readonly service: TaskService) {}

  async _tasksMeta(
    @graphql.Args() args: TaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Task])
  async tasks(@graphql.Args() args: TaskFindManyArgs): Promise<Task[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Task, { nullable: true })
  async task(@graphql.Args() args: TaskFindUniqueArgs): Promise<Task | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Task)
  async createTask(@graphql.Args() args: CreateTaskArgs): Promise<Task> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationSprint: args.data.organizationSprint
          ? {
              connect: args.data.organizationSprint,
            }
          : undefined,

        organizationProject: args.data.organizationProject
          ? {
              connect: args.data.organizationProject,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        task: args.data.task
          ? {
              connect: args.data.task,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Task)
  async updateTask(@graphql.Args() args: UpdateTaskArgs): Promise<Task | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationSprint: args.data.organizationSprint
            ? {
                connect: args.data.organizationSprint,
              }
            : undefined,

          organizationProject: args.data.organizationProject
            ? {
                connect: args.data.organizationProject,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          task: args.data.task
            ? {
                connect: args.data.task,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Task)
  async deleteTask(@graphql.Args() args: DeleteTaskArgs): Promise<Task | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Activity], { name: "activity" })
  async resolveFieldActivity(
    @graphql.Parent() parent: Task,
    @graphql.Args() args: ActivityFindManyArgs
  ): Promise<Activity[]> {
    const results = await this.service.findActivity(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeTasksTask], {
    name: "employeeTasksTask",
  })
  async resolveFieldEmployeeTasksTask(
    @graphql.Parent() parent: Task,
    @graphql.Args() args: EmployeeTasksTaskFindManyArgs
  ): Promise<EmployeeTasksTask[]> {
    const results = await this.service.findEmployeeTasksTask(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [InvoiceItem], { name: "invoiceItem" })
  async resolveFieldInvoiceItem(
    @graphql.Parent() parent: Task,
    @graphql.Args() args: InvoiceItemFindManyArgs
  ): Promise<InvoiceItem[]> {
    const results = await this.service.findInvoiceItem(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [KeyResult], { name: "keyResult" })
  async resolveFieldKeyResult(
    @graphql.Parent() parent: Task,
    @graphql.Args() args: KeyResultFindManyArgs
  ): Promise<KeyResult[]> {
    const results = await this.service.findKeyResult(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationTeamTasksTask], {
    name: "organizationTeamTasksTask",
  })
  async resolveFieldOrganizationTeamTasksTask(
    @graphql.Parent() parent: Task,
    @graphql.Args() args: OrganizationTeamTasksTaskFindManyArgs
  ): Promise<OrganizationTeamTasksTask[]> {
    const results = await this.service.findOrganizationTeamTasksTask(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagTask], { name: "tagTask" })
  async resolveFieldTagTask(
    @graphql.Parent() parent: Task,
    @graphql.Args() args: TagTaskFindManyArgs
  ): Promise<TagTask[]> {
    const results = await this.service.findTagTask(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Task], { name: "otherTask" })
  async resolveFieldOtherTask(
    @graphql.Parent() parent: Task,
    @graphql.Args() args: TaskFindManyArgs
  ): Promise<Task[]> {
    const results = await this.service.findOtherTask(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskEmployee], { name: "taskEmployee" })
  async resolveFieldTaskEmployee(
    @graphql.Parent() parent: Task,
    @graphql.Args() args: TaskEmployeeFindManyArgs
  ): Promise<TaskEmployee[]> {
    const results = await this.service.findTaskEmployee(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskLinkedIssue], {
    name: "taskLinkedIssuesTaskLinkedIssuesTaskToIdTotask",
  })
  async resolveFieldTaskLinkedIssuesTaskLinkedIssuesTaskToIdTotask(
    @graphql.Parent() parent: Task,
    @graphql.Args() args: TaskLinkedIssueFindManyArgs
  ): Promise<TaskLinkedIssue[]> {
    const results =
      await this.service.findTaskLinkedIssuesTaskLinkedIssuesTaskToIdTotask(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskLinkedIssue], {
    name: "taskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask",
  })
  async resolveFieldTaskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask(
    @graphql.Parent() parent: Task,
    @graphql.Args() args: TaskLinkedIssueFindManyArgs
  ): Promise<TaskLinkedIssue[]> {
    const results =
      await this.service.findTaskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskTeam], { name: "taskTeam" })
  async resolveFieldTaskTeam(
    @graphql.Parent() parent: Task,
    @graphql.Args() args: TaskTeamFindManyArgs
  ): Promise<TaskTeam[]> {
    const results = await this.service.findTaskTeam(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeLog], { name: "timeLog" })
  async resolveFieldTimeLog(
    @graphql.Parent() parent: Task,
    @graphql.Args() args: TimeLogFindManyArgs
  ): Promise<TimeLog[]> {
    const results = await this.service.findTimeLog(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => OrganizationSprint, {
    nullable: true,
    name: "organizationSprint",
  })
  async resolveFieldOrganizationSprint(
    @graphql.Parent() parent: Task
  ): Promise<OrganizationSprint | null> {
    const result = await this.service.getOrganizationSprint(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationProject, {
    nullable: true,
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: Task
  ): Promise<OrganizationProject | null> {
    const result = await this.service.getOrganizationProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: Task
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Task, {
    nullable: true,
    name: "task",
  })
  async resolveFieldTask(@graphql.Parent() parent: Task): Promise<Task | null> {
    const result = await this.service.getTask(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(@graphql.Parent() parent: Task): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: Task
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
