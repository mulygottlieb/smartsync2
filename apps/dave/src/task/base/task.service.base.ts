/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Task,
  Activity,
  EmployeeTasksTask,
  InvoiceItem,
  KeyResult,
  OrganizationTeamTasksTask,
  TagTask,
  TaskEmployee,
  TaskLinkedIssue,
  TaskTeam,
  TimeLog,
  OrganizationSprint,
  OrganizationProject,
  Organization,
  User,
  Tenant,
} from "@prisma/client";

export class TaskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.TaskCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskCountArgs>
  ): Promise<number> {
    return this.prisma.task.count(args);
  }

  async findMany<T extends Prisma.TaskFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskFindManyArgs>
  ): Promise<Task[]> {
    return this.prisma.task.findMany(args);
  }
  async findOne<T extends Prisma.TaskFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskFindUniqueArgs>
  ): Promise<Task | null> {
    return this.prisma.task.findUnique(args);
  }
  async create<T extends Prisma.TaskCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskCreateArgs>
  ): Promise<Task> {
    return this.prisma.task.create<T>(args);
  }
  async update<T extends Prisma.TaskUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskUpdateArgs>
  ): Promise<Task> {
    return this.prisma.task.update<T>(args);
  }
  async delete<T extends Prisma.TaskDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskDeleteArgs>
  ): Promise<Task> {
    return this.prisma.task.delete(args);
  }

  async findActivity(
    parentId: string,
    args: Prisma.ActivityFindManyArgs
  ): Promise<Activity[]> {
    return this.prisma.task
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .activity(args);
  }

  async findEmployeeTasksTask(
    parentId: string,
    args: Prisma.EmployeeTasksTaskFindManyArgs
  ): Promise<EmployeeTasksTask[]> {
    return this.prisma.task
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeTasksTask(args);
  }

  async findInvoiceItem(
    parentId: string,
    args: Prisma.InvoiceItemFindManyArgs
  ): Promise<InvoiceItem[]> {
    return this.prisma.task
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .invoiceItem(args);
  }

  async findKeyResult(
    parentId: string,
    args: Prisma.KeyResultFindManyArgs
  ): Promise<KeyResult[]> {
    return this.prisma.task
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .keyResult(args);
  }

  async findOrganizationTeamTasksTask(
    parentId: string,
    args: Prisma.OrganizationTeamTasksTaskFindManyArgs
  ): Promise<OrganizationTeamTasksTask[]> {
    return this.prisma.task
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationTeamTasksTask(args);
  }

  async findTagTask(
    parentId: string,
    args: Prisma.TagTaskFindManyArgs
  ): Promise<TagTask[]> {
    return this.prisma.task
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagTask(args);
  }

  async findOtherTask(
    parentId: string,
    args: Prisma.TaskFindManyArgs
  ): Promise<Task[]> {
    return this.prisma.task
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .otherTask(args);
  }

  async findTaskEmployee(
    parentId: string,
    args: Prisma.TaskEmployeeFindManyArgs
  ): Promise<TaskEmployee[]> {
    return this.prisma.task
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskEmployee(args);
  }

  async findTaskLinkedIssuesTaskLinkedIssuesTaskToIdTotask(
    parentId: string,
    args: Prisma.TaskLinkedIssueFindManyArgs
  ): Promise<TaskLinkedIssue[]> {
    return this.prisma.task
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskLinkedIssuesTaskLinkedIssuesTaskToIdTotask(args);
  }

  async findTaskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask(
    parentId: string,
    args: Prisma.TaskLinkedIssueFindManyArgs
  ): Promise<TaskLinkedIssue[]> {
    return this.prisma.task
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskLinkedIssuesTaskLinkedIssuesTaskFromIdTotask(args);
  }

  async findTaskTeam(
    parentId: string,
    args: Prisma.TaskTeamFindManyArgs
  ): Promise<TaskTeam[]> {
    return this.prisma.task
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .taskTeam(args);
  }

  async findTimeLog(
    parentId: string,
    args: Prisma.TimeLogFindManyArgs
  ): Promise<TimeLog[]> {
    return this.prisma.task
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeLog(args);
  }

  async getOrganizationSprint(
    parentId: string
  ): Promise<OrganizationSprint | null> {
    return this.prisma.task
      .findUnique({
        where: { id: parentId },
      })
      .organizationSprint();
  }

  async getOrganizationProject(
    parentId: string
  ): Promise<OrganizationProject | null> {
    return this.prisma.task
      .findUnique({
        where: { id: parentId },
      })
      .organizationProject();
  }

  async getOrganization(parentId: string): Promise<Organization | null> {
    return this.prisma.task
      .findUnique({
        where: { id: parentId },
      })
      .organization();
  }

  async getTask(parentId: string): Promise<Task | null> {
    return this.prisma.task
      .findUnique({
        where: { id: parentId },
      })
      .task();
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.task
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getTenant(parentId: string): Promise<Tenant | null> {
    return this.prisma.task
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }
}
