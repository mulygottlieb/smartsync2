/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTaskEmployeeArgs } from "./CreateTaskEmployeeArgs";
import { UpdateTaskEmployeeArgs } from "./UpdateTaskEmployeeArgs";
import { DeleteTaskEmployeeArgs } from "./DeleteTaskEmployeeArgs";
import { TaskEmployeeCountArgs } from "./TaskEmployeeCountArgs";
import { TaskEmployeeFindManyArgs } from "./TaskEmployeeFindManyArgs";
import { TaskEmployeeFindUniqueArgs } from "./TaskEmployeeFindUniqueArgs";
import { TaskEmployee } from "./TaskEmployee";
import { Task } from "../../task/base/Task";
import { Employee } from "../../employee/base/Employee";
import { TaskEmployeeService } from "../taskEmployee.service";
@graphql.Resolver(() => TaskEmployee)
export class TaskEmployeeResolverBase {
  constructor(protected readonly service: TaskEmployeeService) {}

  async _taskEmployeesMeta(
    @graphql.Args() args: TaskEmployeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TaskEmployee])
  async taskEmployees(
    @graphql.Args() args: TaskEmployeeFindManyArgs
  ): Promise<TaskEmployee[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TaskEmployee, { nullable: true })
  async taskEmployee(
    @graphql.Args() args: TaskEmployeeFindUniqueArgs
  ): Promise<TaskEmployee | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TaskEmployee)
  async createTaskEmployee(
    @graphql.Args() args: CreateTaskEmployeeArgs
  ): Promise<TaskEmployee> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        task: {
          connect: args.data.task,
        },

        employee: {
          connect: args.data.employee,
        },
      },
    });
  }

  @graphql.Mutation(() => TaskEmployee)
  async updateTaskEmployee(
    @graphql.Args() args: UpdateTaskEmployeeArgs
  ): Promise<TaskEmployee | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          task: {
            connect: args.data.task,
          },

          employee: {
            connect: args.data.employee,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TaskEmployee)
  async deleteTaskEmployee(
    @graphql.Args() args: DeleteTaskEmployeeArgs
  ): Promise<TaskEmployee | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Task, {
    nullable: true,
    name: "task",
  })
  async resolveFieldTask(
    @graphql.Parent() parent: TaskEmployee
  ): Promise<Task | null> {
    const result = await this.service.getTask(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: TaskEmployee
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
