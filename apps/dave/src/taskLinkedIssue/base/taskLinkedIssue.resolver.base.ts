/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTaskLinkedIssueArgs } from "./CreateTaskLinkedIssueArgs";
import { UpdateTaskLinkedIssueArgs } from "./UpdateTaskLinkedIssueArgs";
import { DeleteTaskLinkedIssueArgs } from "./DeleteTaskLinkedIssueArgs";
import { TaskLinkedIssueCountArgs } from "./TaskLinkedIssueCountArgs";
import { TaskLinkedIssueFindManyArgs } from "./TaskLinkedIssueFindManyArgs";
import { TaskLinkedIssueFindUniqueArgs } from "./TaskLinkedIssueFindUniqueArgs";
import { TaskLinkedIssue } from "./TaskLinkedIssue";
import { Task } from "../../task/base/Task";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { TaskLinkedIssueService } from "../taskLinkedIssue.service";
@graphql.Resolver(() => TaskLinkedIssue)
export class TaskLinkedIssueResolverBase {
  constructor(protected readonly service: TaskLinkedIssueService) {}

  async _taskLinkedIssuesMeta(
    @graphql.Args() args: TaskLinkedIssueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TaskLinkedIssue])
  async taskLinkedIssues(
    @graphql.Args() args: TaskLinkedIssueFindManyArgs
  ): Promise<TaskLinkedIssue[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TaskLinkedIssue, { nullable: true })
  async taskLinkedIssue(
    @graphql.Args() args: TaskLinkedIssueFindUniqueArgs
  ): Promise<TaskLinkedIssue | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TaskLinkedIssue)
  async createTaskLinkedIssue(
    @graphql.Args() args: CreateTaskLinkedIssueArgs
  ): Promise<TaskLinkedIssue> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        taskTaskLinkedIssuesTaskToIdTotask: {
          connect: args.data.taskTaskLinkedIssuesTaskToIdTotask,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        taskTaskLinkedIssuesTaskFromIdTotask: {
          connect: args.data.taskTaskLinkedIssuesTaskFromIdTotask,
        },
      },
    });
  }

  @graphql.Mutation(() => TaskLinkedIssue)
  async updateTaskLinkedIssue(
    @graphql.Args() args: UpdateTaskLinkedIssueArgs
  ): Promise<TaskLinkedIssue | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          taskTaskLinkedIssuesTaskToIdTotask: {
            connect: args.data.taskTaskLinkedIssuesTaskToIdTotask,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          taskTaskLinkedIssuesTaskFromIdTotask: {
            connect: args.data.taskTaskLinkedIssuesTaskFromIdTotask,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TaskLinkedIssue)
  async deleteTaskLinkedIssue(
    @graphql.Args() args: DeleteTaskLinkedIssueArgs
  ): Promise<TaskLinkedIssue | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Task, {
    nullable: true,
    name: "taskTaskLinkedIssuesTaskToIdTotask",
  })
  async resolveFieldTaskTaskLinkedIssuesTaskToIdTotask(
    @graphql.Parent() parent: TaskLinkedIssue
  ): Promise<Task | null> {
    const result = await this.service.getTaskTaskLinkedIssuesTaskToIdTotask(
      parent.id
    );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: TaskLinkedIssue
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: TaskLinkedIssue
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Task, {
    nullable: true,
    name: "taskTaskLinkedIssuesTaskFromIdTotask",
  })
  async resolveFieldTaskTaskLinkedIssuesTaskFromIdTotask(
    @graphql.Parent() parent: TaskLinkedIssue
  ): Promise<Task | null> {
    const result = await this.service.getTaskTaskLinkedIssuesTaskFromIdTotask(
      parent.id
    );

    if (!result) {
      return null;
    }
    return result;
  }
}
