/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTaskPriorityArgs } from "./CreateTaskPriorityArgs";
import { UpdateTaskPriorityArgs } from "./UpdateTaskPriorityArgs";
import { DeleteTaskPriorityArgs } from "./DeleteTaskPriorityArgs";
import { TaskPriorityCountArgs } from "./TaskPriorityCountArgs";
import { TaskPriorityFindManyArgs } from "./TaskPriorityFindManyArgs";
import { TaskPriorityFindUniqueArgs } from "./TaskPriorityFindUniqueArgs";
import { TaskPriority } from "./TaskPriority";
import { Tenant } from "../../tenant/base/Tenant";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { Organization } from "../../organization/base/Organization";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { TaskPriorityService } from "../taskPriority.service";
@graphql.Resolver(() => TaskPriority)
export class TaskPriorityResolverBase {
  constructor(protected readonly service: TaskPriorityService) {}

  async _taskPrioritiesMeta(
    @graphql.Args() args: TaskPriorityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TaskPriority])
  async taskPriorities(
    @graphql.Args() args: TaskPriorityFindManyArgs
  ): Promise<TaskPriority[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TaskPriority, { nullable: true })
  async taskPriority(
    @graphql.Args() args: TaskPriorityFindUniqueArgs
  ): Promise<TaskPriority | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TaskPriority)
  async createTaskPriority(
    @graphql.Args() args: CreateTaskPriorityArgs
  ): Promise<TaskPriority> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organizationTeam: args.data.organizationTeam
          ? {
              connect: args.data.organizationTeam,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        organizationProject: args.data.organizationProject
          ? {
              connect: args.data.organizationProject,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TaskPriority)
  async updateTaskPriority(
    @graphql.Args() args: UpdateTaskPriorityArgs
  ): Promise<TaskPriority | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organizationTeam: args.data.organizationTeam
            ? {
                connect: args.data.organizationTeam,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          organizationProject: args.data.organizationProject
            ? {
                connect: args.data.organizationProject,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TaskPriority)
  async deleteTaskPriority(
    @graphql.Args() args: DeleteTaskPriorityArgs
  ): Promise<TaskPriority | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: TaskPriority
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationTeam, {
    nullable: true,
    name: "organizationTeam",
  })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: TaskPriority
  ): Promise<OrganizationTeam | null> {
    const result = await this.service.getOrganizationTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: TaskPriority
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationProject, {
    nullable: true,
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: TaskPriority
  ): Promise<OrganizationProject | null> {
    const result = await this.service.getOrganizationProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
