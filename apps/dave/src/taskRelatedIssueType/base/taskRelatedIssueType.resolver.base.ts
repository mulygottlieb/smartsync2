/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTaskRelatedIssueTypeArgs } from "./CreateTaskRelatedIssueTypeArgs";
import { UpdateTaskRelatedIssueTypeArgs } from "./UpdateTaskRelatedIssueTypeArgs";
import { DeleteTaskRelatedIssueTypeArgs } from "./DeleteTaskRelatedIssueTypeArgs";
import { TaskRelatedIssueTypeCountArgs } from "./TaskRelatedIssueTypeCountArgs";
import { TaskRelatedIssueTypeFindManyArgs } from "./TaskRelatedIssueTypeFindManyArgs";
import { TaskRelatedIssueTypeFindUniqueArgs } from "./TaskRelatedIssueTypeFindUniqueArgs";
import { TaskRelatedIssueType } from "./TaskRelatedIssueType";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { TaskRelatedIssueTypeService } from "../taskRelatedIssueType.service";
@graphql.Resolver(() => TaskRelatedIssueType)
export class TaskRelatedIssueTypeResolverBase {
  constructor(protected readonly service: TaskRelatedIssueTypeService) {}

  async _taskRelatedIssueTypesMeta(
    @graphql.Args() args: TaskRelatedIssueTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TaskRelatedIssueType])
  async taskRelatedIssueTypes(
    @graphql.Args() args: TaskRelatedIssueTypeFindManyArgs
  ): Promise<TaskRelatedIssueType[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TaskRelatedIssueType, { nullable: true })
  async taskRelatedIssueType(
    @graphql.Args() args: TaskRelatedIssueTypeFindUniqueArgs
  ): Promise<TaskRelatedIssueType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TaskRelatedIssueType)
  async createTaskRelatedIssueType(
    @graphql.Args() args: CreateTaskRelatedIssueTypeArgs
  ): Promise<TaskRelatedIssueType> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationTeam: args.data.organizationTeam
          ? {
              connect: args.data.organizationTeam,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        organizationProject: args.data.organizationProject
          ? {
              connect: args.data.organizationProject,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TaskRelatedIssueType)
  async updateTaskRelatedIssueType(
    @graphql.Args() args: UpdateTaskRelatedIssueTypeArgs
  ): Promise<TaskRelatedIssueType | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationTeam: args.data.organizationTeam
            ? {
                connect: args.data.organizationTeam,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          organizationProject: args.data.organizationProject
            ? {
                connect: args.data.organizationProject,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TaskRelatedIssueType)
  async deleteTaskRelatedIssueType(
    @graphql.Args() args: DeleteTaskRelatedIssueTypeArgs
  ): Promise<TaskRelatedIssueType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => OrganizationTeam, {
    nullable: true,
    name: "organizationTeam",
  })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: TaskRelatedIssueType
  ): Promise<OrganizationTeam | null> {
    const result = await this.service.getOrganizationTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: TaskRelatedIssueType
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: TaskRelatedIssueType
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationProject, {
    nullable: true,
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: TaskRelatedIssueType
  ): Promise<OrganizationProject | null> {
    const result = await this.service.getOrganizationProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
