/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTaskTeamArgs } from "./CreateTaskTeamArgs";
import { UpdateTaskTeamArgs } from "./UpdateTaskTeamArgs";
import { DeleteTaskTeamArgs } from "./DeleteTaskTeamArgs";
import { TaskTeamCountArgs } from "./TaskTeamCountArgs";
import { TaskTeamFindManyArgs } from "./TaskTeamFindManyArgs";
import { TaskTeamFindUniqueArgs } from "./TaskTeamFindUniqueArgs";
import { TaskTeam } from "./TaskTeam";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { Task } from "../../task/base/Task";
import { TaskTeamService } from "../taskTeam.service";
@graphql.Resolver(() => TaskTeam)
export class TaskTeamResolverBase {
  constructor(protected readonly service: TaskTeamService) {}

  async _taskTeamsMeta(
    @graphql.Args() args: TaskTeamCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TaskTeam])
  async taskTeams(
    @graphql.Args() args: TaskTeamFindManyArgs
  ): Promise<TaskTeam[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TaskTeam, { nullable: true })
  async taskTeam(
    @graphql.Args() args: TaskTeamFindUniqueArgs
  ): Promise<TaskTeam | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TaskTeam)
  async createTaskTeam(
    @graphql.Args() args: CreateTaskTeamArgs
  ): Promise<TaskTeam> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationTeam: {
          connect: args.data.organizationTeam,
        },

        task: {
          connect: args.data.task,
        },
      },
    });
  }

  @graphql.Mutation(() => TaskTeam)
  async updateTaskTeam(
    @graphql.Args() args: UpdateTaskTeamArgs
  ): Promise<TaskTeam | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationTeam: {
            connect: args.data.organizationTeam,
          },

          task: {
            connect: args.data.task,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TaskTeam)
  async deleteTaskTeam(
    @graphql.Args() args: DeleteTaskTeamArgs
  ): Promise<TaskTeam | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => OrganizationTeam, {
    nullable: true,
    name: "organizationTeam",
  })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: TaskTeam
  ): Promise<OrganizationTeam | null> {
    const result = await this.service.getOrganizationTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Task, {
    nullable: true,
    name: "task",
  })
  async resolveFieldTask(
    @graphql.Parent() parent: TaskTeam
  ): Promise<Task | null> {
    const result = await this.service.getTask(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
