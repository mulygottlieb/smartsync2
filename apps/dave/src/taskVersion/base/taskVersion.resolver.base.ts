/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTaskVersionArgs } from "./CreateTaskVersionArgs";
import { UpdateTaskVersionArgs } from "./UpdateTaskVersionArgs";
import { DeleteTaskVersionArgs } from "./DeleteTaskVersionArgs";
import { TaskVersionCountArgs } from "./TaskVersionCountArgs";
import { TaskVersionFindManyArgs } from "./TaskVersionFindManyArgs";
import { TaskVersionFindUniqueArgs } from "./TaskVersionFindUniqueArgs";
import { TaskVersion } from "./TaskVersion";
import { Tenant } from "../../tenant/base/Tenant";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { Organization } from "../../organization/base/Organization";
import { TaskVersionService } from "../taskVersion.service";
@graphql.Resolver(() => TaskVersion)
export class TaskVersionResolverBase {
  constructor(protected readonly service: TaskVersionService) {}

  async _taskVersionsMeta(
    @graphql.Args() args: TaskVersionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TaskVersion])
  async taskVersions(
    @graphql.Args() args: TaskVersionFindManyArgs
  ): Promise<TaskVersion[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TaskVersion, { nullable: true })
  async taskVersion(
    @graphql.Args() args: TaskVersionFindUniqueArgs
  ): Promise<TaskVersion | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TaskVersion)
  async createTaskVersion(
    @graphql.Args() args: CreateTaskVersionArgs
  ): Promise<TaskVersion> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organizationProject: args.data.organizationProject
          ? {
              connect: args.data.organizationProject,
            }
          : undefined,

        organizationTeam: args.data.organizationTeam
          ? {
              connect: args.data.organizationTeam,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TaskVersion)
  async updateTaskVersion(
    @graphql.Args() args: UpdateTaskVersionArgs
  ): Promise<TaskVersion | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organizationProject: args.data.organizationProject
            ? {
                connect: args.data.organizationProject,
              }
            : undefined,

          organizationTeam: args.data.organizationTeam
            ? {
                connect: args.data.organizationTeam,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TaskVersion)
  async deleteTaskVersion(
    @graphql.Args() args: DeleteTaskVersionArgs
  ): Promise<TaskVersion | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: TaskVersion
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationProject, {
    nullable: true,
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: TaskVersion
  ): Promise<OrganizationProject | null> {
    const result = await this.service.getOrganizationProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationTeam, {
    nullable: true,
    name: "organizationTeam",
  })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: TaskVersion
  ): Promise<OrganizationTeam | null> {
    const result = await this.service.getOrganizationTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: TaskVersion
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
