/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsString, IsDate, IsOptional, ValidateNested } from "class-validator";
import { Type } from "class-transformer";
import { AccountingTemplate } from "../../accountingTemplate/base/AccountingTemplate";
import { Activity } from "../../activity/base/Activity";
import { AppointmentEmployee } from "../../appointmentEmployee/base/AppointmentEmployee";
import { ApprovalPolicy } from "../../approvalPolicy/base/ApprovalPolicy";
import { AvailabilitySlot } from "../../availabilitySlot/base/AvailabilitySlot";
import { Candidate } from "../../candidate/base/Candidate";
import { CandidateCriterionRating } from "../../candidateCriterionRating/base/CandidateCriterionRating";
import { CandidateDocument } from "../../candidateDocument/base/CandidateDocument";
import { CandidateEducation } from "../../candidateEducation/base/CandidateEducation";
import { CandidateExperience } from "../../candidateExperience/base/CandidateExperience";
import { CandidateFeedback } from "../../candidateFeedback/base/CandidateFeedback";
import { CandidateInterview } from "../../candidateInterview/base/CandidateInterview";
import { CandidateInterviewer } from "../../candidateInterviewer/base/CandidateInterviewer";
import { CandidatePersonalQuality } from "../../candidatePersonalQuality/base/CandidatePersonalQuality";
import { CandidateSkill } from "../../candidateSkill/base/CandidateSkill";
import { CandidateSource } from "../../candidateSource/base/CandidateSource";
import { CandidateTechnology } from "../../candidateTechnology/base/CandidateTechnology";
import { Changelog } from "../../changelog/base/Changelog";
import { Contact } from "../../contact/base/Contact";
import { CustomSmtp } from "../../customSmtp/base/CustomSmtp";
import { Deal } from "../../deal/base/Deal";
import { EmailReset } from "../../emailReset/base/EmailReset";
import { EmailSent } from "../../emailSent/base/EmailSent";
import { EmailTemplate } from "../../emailTemplate/base/EmailTemplate";
import { Employee } from "../../employee/base/Employee";
import { EmployeeAppointment } from "../../employeeAppointment/base/EmployeeAppointment";
import { EmployeeAward } from "../../employeeAward/base/EmployeeAward";
import { EmployeeLevel } from "../../employeeLevel/base/EmployeeLevel";
import { EmployeePhone } from "../../employeePhone/base/EmployeePhone";
import { EmployeeProposalTemplate } from "../../employeeProposalTemplate/base/EmployeeProposalTemplate";
import { EmployeeRecurringExpense } from "../../employeeRecurringExpense/base/EmployeeRecurringExpense";
import { EmployeeSetting } from "../../employeeSetting/base/EmployeeSetting";
import { EmployeeUpworkJobSearchCriterion } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterion";
import { Equipment } from "../../equipment/base/Equipment";
import { EquipmentSharing } from "../../equipmentSharing/base/EquipmentSharing";
import { EquipmentSharingPolicy } from "../../equipmentSharingPolicy/base/EquipmentSharingPolicy";
import { EstimateEmail } from "../../estimateEmail/base/EstimateEmail";
import { EventType } from "../../eventType/base/EventType";
import { Expense } from "../../expense/base/Expense";
import { ExpenseCategory } from "../../expenseCategory/base/ExpenseCategory";
import { FeatureOrganization } from "../../featureOrganization/base/FeatureOrganization";
import { Goal } from "../../goal/base/Goal";
import { GoalGeneralSetting } from "../../goalGeneralSetting/base/GoalGeneralSetting";
import { GoalKpi } from "../../goalKpi/base/GoalKpi";
import { GoalKpiTemplate } from "../../goalKpiTemplate/base/GoalKpiTemplate";
import { GoalTemplate } from "../../goalTemplate/base/GoalTemplate";
import { GoalTimeFrame } from "../../goalTimeFrame/base/GoalTimeFrame";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { ImportHistory } from "../../importHistory/base/ImportHistory";
import { ImportRecord } from "../../importRecord/base/ImportRecord";
import { Income } from "../../income/base/Income";
import { IntegrationEntitySetting } from "../../integrationEntitySetting/base/IntegrationEntitySetting";
import { IntegrationEntitySettingTied } from "../../integrationEntitySettingTied/base/IntegrationEntitySettingTied";
import { IntegrationMap } from "../../integrationMap/base/IntegrationMap";
import { IntegrationSetting } from "../../integrationSetting/base/IntegrationSetting";
import { IntegrationTenant } from "../../integrationTenant/base/IntegrationTenant";
import { Invite } from "../../invite/base/Invite";
import { Invoice } from "../../invoice/base/Invoice";
import { InvoiceEstimateHistory } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistory";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { IssueType } from "../../issueType/base/IssueType";
import { JobPreset } from "../../jobPreset/base/JobPreset";
import { JobPresetUpworkJobSearchCriterion } from "../../jobPresetUpworkJobSearchCriterion/base/JobPresetUpworkJobSearchCriterion";
import { JobSearchCategory } from "../../jobSearchCategory/base/JobSearchCategory";
import { JobSearchOccupation } from "../../jobSearchOccupation/base/JobSearchOccupation";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { KeyResultTemplate } from "../../keyResultTemplate/base/KeyResultTemplate";
import { KeyResultUpdate } from "../../keyResultUpdate/base/KeyResultUpdate";
import { KnowledgeBase } from "../../knowledgeBase/base/KnowledgeBase";
import { KnowledgeBaseArticle } from "../../knowledgeBaseArticle/base/KnowledgeBaseArticle";
import { KnowledgeBaseAuthor } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthor";
import { Merchant } from "../../merchant/base/Merchant";
import { Organization } from "../../organization/base/Organization";
import { OrganizationAward } from "../../organizationAward/base/OrganizationAward";
import { OrganizationContact } from "../../organizationContact/base/OrganizationContact";
import { OrganizationDepartment } from "../../organizationDepartment/base/OrganizationDepartment";
import { OrganizationDocument } from "../../organizationDocument/base/OrganizationDocument";
import { OrganizationEmploymentType } from "../../organizationEmploymentType/base/OrganizationEmploymentType";
import { OrganizationLanguage } from "../../organizationLanguage/base/OrganizationLanguage";
import { OrganizationPosition } from "../../organizationPosition/base/OrganizationPosition";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { OrganizationRecurringExpense } from "../../organizationRecurringExpense/base/OrganizationRecurringExpense";
import { OrganizationSprint } from "../../organizationSprint/base/OrganizationSprint";
import { OrganizationTaskSetting } from "../../organizationTaskSetting/base/OrganizationTaskSetting";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { OrganizationTeamEmployee } from "../../organizationTeamEmployee/base/OrganizationTeamEmployee";
import { OrganizationTeamJoinRequest } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequest";
import { OrganizationVendor } from "../../organizationVendor/base/OrganizationVendor";
import { Payment } from "../../payment/base/Payment";
import { Pipeline } from "../../pipeline/base/Pipeline";
import { PipelineStage } from "../../pipelineStage/base/PipelineStage";
import { Product } from "../../product/base/Product";
import { ProductCategory } from "../../productCategory/base/ProductCategory";
import { ProductCategoryTranslation } from "../../productCategoryTranslation/base/ProductCategoryTranslation";
import { ProductOption } from "../../productOption/base/ProductOption";
import { ProductOptionGroup } from "../../productOptionGroup/base/ProductOptionGroup";
import { ProductOptionGroupTranslation } from "../../productOptionGroupTranslation/base/ProductOptionGroupTranslation";
import { ProductOptionTranslation } from "../../productOptionTranslation/base/ProductOptionTranslation";
import { ProductTranslation } from "../../productTranslation/base/ProductTranslation";
import { ProductType } from "../../productType/base/ProductType";
import { ProductTypeTranslation } from "../../productTypeTranslation/base/ProductTypeTranslation";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { ProductVariantPrice } from "../../productVariantPrice/base/ProductVariantPrice";
import { ProductVariantSetting } from "../../productVariantSetting/base/ProductVariantSetting";
import { Proposal } from "../../proposal/base/Proposal";
import { ReportOrganization } from "../../reportOrganization/base/ReportOrganization";
import { RequestApproval } from "../../requestApproval/base/RequestApproval";
import { RequestApprovalEmployee } from "../../requestApprovalEmployee/base/RequestApprovalEmployee";
import { RequestApprovalTeam } from "../../requestApprovalTeam/base/RequestApprovalTeam";
import { Role } from "../../role/base/Role";
import { RolePermission } from "../../rolePermission/base/RolePermission";
import { Screenshot } from "../../screenshot/base/Screenshot";
import { Skill } from "../../skill/base/Skill";
import { Tag } from "../../tag/base/Tag";
import { Task } from "../../task/base/Task";
import { TaskLinkedIssue } from "../../taskLinkedIssue/base/TaskLinkedIssue";
import { TaskPriority } from "../../taskPriority/base/TaskPriority";
import { TaskRelatedIssueType } from "../../taskRelatedIssueType/base/TaskRelatedIssueType";
import { TaskSize } from "../../taskSize/base/TaskSize";
import { TaskStatus } from "../../taskStatus/base/TaskStatus";
import { TaskVersion } from "../../taskVersion/base/TaskVersion";
import { TenantSetting } from "../../tenantSetting/base/TenantSetting";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { TimeOffPolicy } from "../../timeOffPolicy/base/TimeOffPolicy";
import { TimeOffRequest } from "../../timeOffRequest/base/TimeOffRequest";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { TimeSlotMinute } from "../../timeSlotMinute/base/TimeSlotMinute";
import { Timesheet } from "../../timesheet/base/Timesheet";
import { User } from "../../user/base/User";
import { UserOrganization } from "../../userOrganization/base/UserOrganization";
import { Warehouse } from "../../warehouse/base/Warehouse";
import { WarehouseProduct } from "../../warehouseProduct/base/WarehouseProduct";
import { WarehouseProductVariant } from "../../warehouseProductVariant/base/WarehouseProductVariant";

@ObjectType()
class Tenant {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  logo!: string | null;

  @ApiProperty({
    required: false,
    type: () => [AccountingTemplate],
  })
  @ValidateNested()
  @Type(() => AccountingTemplate)
  @IsOptional()
  accountingTemplate?: Array<AccountingTemplate>;

  @ApiProperty({
    required: false,
    type: () => [Activity],
  })
  @ValidateNested()
  @Type(() => Activity)
  @IsOptional()
  activity?: Array<Activity>;

  @ApiProperty({
    required: false,
    type: () => [AppointmentEmployee],
  })
  @ValidateNested()
  @Type(() => AppointmentEmployee)
  @IsOptional()
  appointmentEmployee?: Array<AppointmentEmployee>;

  @ApiProperty({
    required: false,
    type: () => [ApprovalPolicy],
  })
  @ValidateNested()
  @Type(() => ApprovalPolicy)
  @IsOptional()
  approvalPolicy?: Array<ApprovalPolicy>;

  @ApiProperty({
    required: false,
    type: () => [AvailabilitySlot],
  })
  @ValidateNested()
  @Type(() => AvailabilitySlot)
  @IsOptional()
  availabilitySlot?: Array<AvailabilitySlot>;

  @ApiProperty({
    required: false,
    type: () => [Candidate],
  })
  @ValidateNested()
  @Type(() => Candidate)
  @IsOptional()
  candidate?: Array<Candidate>;

  @ApiProperty({
    required: false,
    type: () => [CandidateCriterionRating],
  })
  @ValidateNested()
  @Type(() => CandidateCriterionRating)
  @IsOptional()
  candidateCriterionRating?: Array<CandidateCriterionRating>;

  @ApiProperty({
    required: false,
    type: () => [CandidateDocument],
  })
  @ValidateNested()
  @Type(() => CandidateDocument)
  @IsOptional()
  candidateDocument?: Array<CandidateDocument>;

  @ApiProperty({
    required: false,
    type: () => [CandidateEducation],
  })
  @ValidateNested()
  @Type(() => CandidateEducation)
  @IsOptional()
  candidateEducation?: Array<CandidateEducation>;

  @ApiProperty({
    required: false,
    type: () => [CandidateExperience],
  })
  @ValidateNested()
  @Type(() => CandidateExperience)
  @IsOptional()
  candidateExperience?: Array<CandidateExperience>;

  @ApiProperty({
    required: false,
    type: () => [CandidateFeedback],
  })
  @ValidateNested()
  @Type(() => CandidateFeedback)
  @IsOptional()
  candidateFeedback?: Array<CandidateFeedback>;

  @ApiProperty({
    required: false,
    type: () => [CandidateInterview],
  })
  @ValidateNested()
  @Type(() => CandidateInterview)
  @IsOptional()
  candidateInterview?: Array<CandidateInterview>;

  @ApiProperty({
    required: false,
    type: () => [CandidateInterviewer],
  })
  @ValidateNested()
  @Type(() => CandidateInterviewer)
  @IsOptional()
  candidateInterviewer?: Array<CandidateInterviewer>;

  @ApiProperty({
    required: false,
    type: () => [CandidatePersonalQuality],
  })
  @ValidateNested()
  @Type(() => CandidatePersonalQuality)
  @IsOptional()
  candidatePersonalQuality?: Array<CandidatePersonalQuality>;

  @ApiProperty({
    required: false,
    type: () => [CandidateSkill],
  })
  @ValidateNested()
  @Type(() => CandidateSkill)
  @IsOptional()
  candidateSkill?: Array<CandidateSkill>;

  @ApiProperty({
    required: false,
    type: () => [CandidateSource],
  })
  @ValidateNested()
  @Type(() => CandidateSource)
  @IsOptional()
  candidateSource?: Array<CandidateSource>;

  @ApiProperty({
    required: false,
    type: () => [CandidateTechnology],
  })
  @ValidateNested()
  @Type(() => CandidateTechnology)
  @IsOptional()
  candidateTechnology?: Array<CandidateTechnology>;

  @ApiProperty({
    required: false,
    type: () => [Changelog],
  })
  @ValidateNested()
  @Type(() => Changelog)
  @IsOptional()
  changelog?: Array<Changelog>;

  @ApiProperty({
    required: false,
    type: () => [Contact],
  })
  @ValidateNested()
  @Type(() => Contact)
  @IsOptional()
  contact?: Array<Contact>;

  @ApiProperty({
    required: false,
    type: () => [CustomSmtp],
  })
  @ValidateNested()
  @Type(() => CustomSmtp)
  @IsOptional()
  customSmtp?: Array<CustomSmtp>;

  @ApiProperty({
    required: false,
    type: () => [Deal],
  })
  @ValidateNested()
  @Type(() => Deal)
  @IsOptional()
  deal?: Array<Deal>;

  @ApiProperty({
    required: false,
    type: () => [EmailReset],
  })
  @ValidateNested()
  @Type(() => EmailReset)
  @IsOptional()
  emailReset?: Array<EmailReset>;

  @ApiProperty({
    required: false,
    type: () => [EmailSent],
  })
  @ValidateNested()
  @Type(() => EmailSent)
  @IsOptional()
  emailSent?: Array<EmailSent>;

  @ApiProperty({
    required: false,
    type: () => [EmailTemplate],
  })
  @ValidateNested()
  @Type(() => EmailTemplate)
  @IsOptional()
  emailTemplate?: Array<EmailTemplate>;

  @ApiProperty({
    required: false,
    type: () => [Employee],
  })
  @ValidateNested()
  @Type(() => Employee)
  @IsOptional()
  employee?: Array<Employee>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeAppointment],
  })
  @ValidateNested()
  @Type(() => EmployeeAppointment)
  @IsOptional()
  employeeAppointment?: Array<EmployeeAppointment>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeAward],
  })
  @ValidateNested()
  @Type(() => EmployeeAward)
  @IsOptional()
  employeeAward?: Array<EmployeeAward>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeLevel],
  })
  @ValidateNested()
  @Type(() => EmployeeLevel)
  @IsOptional()
  employeeLevel?: Array<EmployeeLevel>;

  @ApiProperty({
    required: false,
    type: () => [EmployeePhone],
  })
  @ValidateNested()
  @Type(() => EmployeePhone)
  @IsOptional()
  employeePhone?: Array<EmployeePhone>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeProposalTemplate],
  })
  @ValidateNested()
  @Type(() => EmployeeProposalTemplate)
  @IsOptional()
  employeeProposalTemplate?: Array<EmployeeProposalTemplate>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeRecurringExpense],
  })
  @ValidateNested()
  @Type(() => EmployeeRecurringExpense)
  @IsOptional()
  employeeRecurringExpense?: Array<EmployeeRecurringExpense>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeSetting],
  })
  @ValidateNested()
  @Type(() => EmployeeSetting)
  @IsOptional()
  employeeSetting?: Array<EmployeeSetting>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeUpworkJobSearchCriterion],
  })
  @ValidateNested()
  @Type(() => EmployeeUpworkJobSearchCriterion)
  @IsOptional()
  employeeUpworkJobSearchCriterion?: Array<EmployeeUpworkJobSearchCriterion>;

  @ApiProperty({
    required: false,
    type: () => [Equipment],
  })
  @ValidateNested()
  @Type(() => Equipment)
  @IsOptional()
  equipment?: Array<Equipment>;

  @ApiProperty({
    required: false,
    type: () => [EquipmentSharing],
  })
  @ValidateNested()
  @Type(() => EquipmentSharing)
  @IsOptional()
  equipmentSharing?: Array<EquipmentSharing>;

  @ApiProperty({
    required: false,
    type: () => [EquipmentSharingPolicy],
  })
  @ValidateNested()
  @Type(() => EquipmentSharingPolicy)
  @IsOptional()
  equipmentSharingPolicy?: Array<EquipmentSharingPolicy>;

  @ApiProperty({
    required: false,
    type: () => [EstimateEmail],
  })
  @ValidateNested()
  @Type(() => EstimateEmail)
  @IsOptional()
  estimateEmail?: Array<EstimateEmail>;

  @ApiProperty({
    required: false,
    type: () => [EventType],
  })
  @ValidateNested()
  @Type(() => EventType)
  @IsOptional()
  eventType?: Array<EventType>;

  @ApiProperty({
    required: false,
    type: () => [Expense],
  })
  @ValidateNested()
  @Type(() => Expense)
  @IsOptional()
  expense?: Array<Expense>;

  @ApiProperty({
    required: false,
    type: () => [ExpenseCategory],
  })
  @ValidateNested()
  @Type(() => ExpenseCategory)
  @IsOptional()
  expenseCategory?: Array<ExpenseCategory>;

  @ApiProperty({
    required: false,
    type: () => [FeatureOrganization],
  })
  @ValidateNested()
  @Type(() => FeatureOrganization)
  @IsOptional()
  featureOrganization?: Array<FeatureOrganization>;

  @ApiProperty({
    required: false,
    type: () => [Goal],
  })
  @ValidateNested()
  @Type(() => Goal)
  @IsOptional()
  goal?: Array<Goal>;

  @ApiProperty({
    required: false,
    type: () => [GoalGeneralSetting],
  })
  @ValidateNested()
  @Type(() => GoalGeneralSetting)
  @IsOptional()
  goalGeneralSetting?: Array<GoalGeneralSetting>;

  @ApiProperty({
    required: false,
    type: () => [GoalKpi],
  })
  @ValidateNested()
  @Type(() => GoalKpi)
  @IsOptional()
  goalKpi?: Array<GoalKpi>;

  @ApiProperty({
    required: false,
    type: () => [GoalKpiTemplate],
  })
  @ValidateNested()
  @Type(() => GoalKpiTemplate)
  @IsOptional()
  goalKpiTemplate?: Array<GoalKpiTemplate>;

  @ApiProperty({
    required: false,
    type: () => [GoalTemplate],
  })
  @ValidateNested()
  @Type(() => GoalTemplate)
  @IsOptional()
  goalTemplate?: Array<GoalTemplate>;

  @ApiProperty({
    required: false,
    type: () => [GoalTimeFrame],
  })
  @ValidateNested()
  @Type(() => GoalTimeFrame)
  @IsOptional()
  goalTimeFrame?: Array<GoalTimeFrame>;

  @ApiProperty({
    required: false,
    type: () => [ImageAsset],
  })
  @ValidateNested()
  @Type(() => ImageAsset)
  @IsOptional()
  imageAssetImageAssetTenantIdTotenant?: Array<ImageAsset>;

  @ApiProperty({
    required: false,
    type: () => ImageAsset,
  })
  @ValidateNested()
  @Type(() => ImageAsset)
  @IsOptional()
  imageAssetTenantImageIdToimageAsset?: ImageAsset | null;

  @ApiProperty({
    required: false,
    type: () => [ImportHistory],
  })
  @ValidateNested()
  @Type(() => ImportHistory)
  @IsOptional()
  importHistory?: Array<ImportHistory>;

  @ApiProperty({
    required: false,
    type: () => [ImportRecord],
  })
  @ValidateNested()
  @Type(() => ImportRecord)
  @IsOptional()
  importRecord?: Array<ImportRecord>;

  @ApiProperty({
    required: false,
    type: () => [Income],
  })
  @ValidateNested()
  @Type(() => Income)
  @IsOptional()
  income?: Array<Income>;

  @ApiProperty({
    required: false,
    type: () => [IntegrationEntitySetting],
  })
  @ValidateNested()
  @Type(() => IntegrationEntitySetting)
  @IsOptional()
  integrationEntitySetting?: Array<IntegrationEntitySetting>;

  @ApiProperty({
    required: false,
    type: () => [IntegrationEntitySettingTied],
  })
  @ValidateNested()
  @Type(() => IntegrationEntitySettingTied)
  @IsOptional()
  integrationEntitySettingTied?: Array<IntegrationEntitySettingTied>;

  @ApiProperty({
    required: false,
    type: () => [IntegrationMap],
  })
  @ValidateNested()
  @Type(() => IntegrationMap)
  @IsOptional()
  integrationMap?: Array<IntegrationMap>;

  @ApiProperty({
    required: false,
    type: () => [IntegrationSetting],
  })
  @ValidateNested()
  @Type(() => IntegrationSetting)
  @IsOptional()
  integrationSetting?: Array<IntegrationSetting>;

  @ApiProperty({
    required: false,
    type: () => [IntegrationTenant],
  })
  @ValidateNested()
  @Type(() => IntegrationTenant)
  @IsOptional()
  integrationTenant?: Array<IntegrationTenant>;

  @ApiProperty({
    required: false,
    type: () => [Invite],
  })
  @ValidateNested()
  @Type(() => Invite)
  @IsOptional()
  invite?: Array<Invite>;

  @ApiProperty({
    required: false,
    type: () => [Invoice],
  })
  @ValidateNested()
  @Type(() => Invoice)
  @IsOptional()
  invoice?: Array<Invoice>;

  @ApiProperty({
    required: false,
    type: () => [InvoiceEstimateHistory],
  })
  @ValidateNested()
  @Type(() => InvoiceEstimateHistory)
  @IsOptional()
  invoiceEstimateHistory?: Array<InvoiceEstimateHistory>;

  @ApiProperty({
    required: false,
    type: () => [InvoiceItem],
  })
  @ValidateNested()
  @Type(() => InvoiceItem)
  @IsOptional()
  invoiceItem?: Array<InvoiceItem>;

  @ApiProperty({
    required: false,
    type: () => [IssueType],
  })
  @ValidateNested()
  @Type(() => IssueType)
  @IsOptional()
  issueType?: Array<IssueType>;

  @ApiProperty({
    required: false,
    type: () => [JobPreset],
  })
  @ValidateNested()
  @Type(() => JobPreset)
  @IsOptional()
  jobPreset?: Array<JobPreset>;

  @ApiProperty({
    required: false,
    type: () => [JobPresetUpworkJobSearchCriterion],
  })
  @ValidateNested()
  @Type(() => JobPresetUpworkJobSearchCriterion)
  @IsOptional()
  jobPresetUpworkJobSearchCriterion?: Array<JobPresetUpworkJobSearchCriterion>;

  @ApiProperty({
    required: false,
    type: () => [JobSearchCategory],
  })
  @ValidateNested()
  @Type(() => JobSearchCategory)
  @IsOptional()
  jobSearchCategory?: Array<JobSearchCategory>;

  @ApiProperty({
    required: false,
    type: () => [JobSearchOccupation],
  })
  @ValidateNested()
  @Type(() => JobSearchOccupation)
  @IsOptional()
  jobSearchOccupation?: Array<JobSearchOccupation>;

  @ApiProperty({
    required: false,
    type: () => [KeyResult],
  })
  @ValidateNested()
  @Type(() => KeyResult)
  @IsOptional()
  keyResult?: Array<KeyResult>;

  @ApiProperty({
    required: false,
    type: () => [KeyResultTemplate],
  })
  @ValidateNested()
  @Type(() => KeyResultTemplate)
  @IsOptional()
  keyResultTemplate?: Array<KeyResultTemplate>;

  @ApiProperty({
    required: false,
    type: () => [KeyResultUpdate],
  })
  @ValidateNested()
  @Type(() => KeyResultUpdate)
  @IsOptional()
  keyResultUpdate?: Array<KeyResultUpdate>;

  @ApiProperty({
    required: false,
    type: () => [KnowledgeBase],
  })
  @ValidateNested()
  @Type(() => KnowledgeBase)
  @IsOptional()
  knowledgeBase?: Array<KnowledgeBase>;

  @ApiProperty({
    required: false,
    type: () => [KnowledgeBaseArticle],
  })
  @ValidateNested()
  @Type(() => KnowledgeBaseArticle)
  @IsOptional()
  knowledgeBaseArticle?: Array<KnowledgeBaseArticle>;

  @ApiProperty({
    required: false,
    type: () => [KnowledgeBaseAuthor],
  })
  @ValidateNested()
  @Type(() => KnowledgeBaseAuthor)
  @IsOptional()
  knowledgeBaseAuthor?: Array<KnowledgeBaseAuthor>;

  @ApiProperty({
    required: false,
    type: () => [Merchant],
  })
  @ValidateNested()
  @Type(() => Merchant)
  @IsOptional()
  merchant?: Array<Merchant>;

  @ApiProperty({
    required: false,
    type: () => [Organization],
  })
  @ValidateNested()
  @Type(() => Organization)
  @IsOptional()
  organization?: Array<Organization>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationAward],
  })
  @ValidateNested()
  @Type(() => OrganizationAward)
  @IsOptional()
  organizationAward?: Array<OrganizationAward>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationContact],
  })
  @ValidateNested()
  @Type(() => OrganizationContact)
  @IsOptional()
  organizationContact?: Array<OrganizationContact>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationDepartment],
  })
  @ValidateNested()
  @Type(() => OrganizationDepartment)
  @IsOptional()
  organizationDepartment?: Array<OrganizationDepartment>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationDocument],
  })
  @ValidateNested()
  @Type(() => OrganizationDocument)
  @IsOptional()
  organizationDocument?: Array<OrganizationDocument>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationEmploymentType],
  })
  @ValidateNested()
  @Type(() => OrganizationEmploymentType)
  @IsOptional()
  organizationEmploymentType?: Array<OrganizationEmploymentType>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationLanguage],
  })
  @ValidateNested()
  @Type(() => OrganizationLanguage)
  @IsOptional()
  organizationLanguage?: Array<OrganizationLanguage>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationPosition],
  })
  @ValidateNested()
  @Type(() => OrganizationPosition)
  @IsOptional()
  organizationPosition?: Array<OrganizationPosition>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationProject],
  })
  @ValidateNested()
  @Type(() => OrganizationProject)
  @IsOptional()
  organizationProject?: Array<OrganizationProject>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationRecurringExpense],
  })
  @ValidateNested()
  @Type(() => OrganizationRecurringExpense)
  @IsOptional()
  organizationRecurringExpense?: Array<OrganizationRecurringExpense>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationSprint],
  })
  @ValidateNested()
  @Type(() => OrganizationSprint)
  @IsOptional()
  organizationSprint?: Array<OrganizationSprint>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationTaskSetting],
  })
  @ValidateNested()
  @Type(() => OrganizationTaskSetting)
  @IsOptional()
  organizationTaskSetting?: Array<OrganizationTaskSetting>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationTeam],
  })
  @ValidateNested()
  @Type(() => OrganizationTeam)
  @IsOptional()
  organizationTeam?: Array<OrganizationTeam>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationTeamEmployee],
  })
  @ValidateNested()
  @Type(() => OrganizationTeamEmployee)
  @IsOptional()
  organizationTeamEmployee?: Array<OrganizationTeamEmployee>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationTeamJoinRequest],
  })
  @ValidateNested()
  @Type(() => OrganizationTeamJoinRequest)
  @IsOptional()
  organizationTeamJoinRequest?: Array<OrganizationTeamJoinRequest>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationVendor],
  })
  @ValidateNested()
  @Type(() => OrganizationVendor)
  @IsOptional()
  organizationVendor?: Array<OrganizationVendor>;

  @ApiProperty({
    required: false,
    type: () => [Payment],
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payment?: Array<Payment>;

  @ApiProperty({
    required: false,
    type: () => [Pipeline],
  })
  @ValidateNested()
  @Type(() => Pipeline)
  @IsOptional()
  pipeline?: Array<Pipeline>;

  @ApiProperty({
    required: false,
    type: () => [PipelineStage],
  })
  @ValidateNested()
  @Type(() => PipelineStage)
  @IsOptional()
  pipelineStage?: Array<PipelineStage>;

  @ApiProperty({
    required: false,
    type: () => [Product],
  })
  @ValidateNested()
  @Type(() => Product)
  @IsOptional()
  product?: Array<Product>;

  @ApiProperty({
    required: false,
    type: () => [ProductCategory],
  })
  @ValidateNested()
  @Type(() => ProductCategory)
  @IsOptional()
  productCategory?: Array<ProductCategory>;

  @ApiProperty({
    required: false,
    type: () => [ProductCategoryTranslation],
  })
  @ValidateNested()
  @Type(() => ProductCategoryTranslation)
  @IsOptional()
  productCategoryTranslation?: Array<ProductCategoryTranslation>;

  @ApiProperty({
    required: false,
    type: () => [ProductOption],
  })
  @ValidateNested()
  @Type(() => ProductOption)
  @IsOptional()
  productOption?: Array<ProductOption>;

  @ApiProperty({
    required: false,
    type: () => [ProductOptionGroup],
  })
  @ValidateNested()
  @Type(() => ProductOptionGroup)
  @IsOptional()
  productOptionGroup?: Array<ProductOptionGroup>;

  @ApiProperty({
    required: false,
    type: () => [ProductOptionGroupTranslation],
  })
  @ValidateNested()
  @Type(() => ProductOptionGroupTranslation)
  @IsOptional()
  productOptionGroupTranslation?: Array<ProductOptionGroupTranslation>;

  @ApiProperty({
    required: false,
    type: () => [ProductOptionTranslation],
  })
  @ValidateNested()
  @Type(() => ProductOptionTranslation)
  @IsOptional()
  productOptionTranslation?: Array<ProductOptionTranslation>;

  @ApiProperty({
    required: false,
    type: () => [ProductTranslation],
  })
  @ValidateNested()
  @Type(() => ProductTranslation)
  @IsOptional()
  productTranslation?: Array<ProductTranslation>;

  @ApiProperty({
    required: false,
    type: () => [ProductType],
  })
  @ValidateNested()
  @Type(() => ProductType)
  @IsOptional()
  productType?: Array<ProductType>;

  @ApiProperty({
    required: false,
    type: () => [ProductTypeTranslation],
  })
  @ValidateNested()
  @Type(() => ProductTypeTranslation)
  @IsOptional()
  productTypeTranslation?: Array<ProductTypeTranslation>;

  @ApiProperty({
    required: false,
    type: () => [ProductVariant],
  })
  @ValidateNested()
  @Type(() => ProductVariant)
  @IsOptional()
  productVariant?: Array<ProductVariant>;

  @ApiProperty({
    required: false,
    type: () => [ProductVariantPrice],
  })
  @ValidateNested()
  @Type(() => ProductVariantPrice)
  @IsOptional()
  productVariantPrice?: Array<ProductVariantPrice>;

  @ApiProperty({
    required: false,
    type: () => [ProductVariantSetting],
  })
  @ValidateNested()
  @Type(() => ProductVariantSetting)
  @IsOptional()
  productVariantSetting?: Array<ProductVariantSetting>;

  @ApiProperty({
    required: false,
    type: () => [Proposal],
  })
  @ValidateNested()
  @Type(() => Proposal)
  @IsOptional()
  proposal?: Array<Proposal>;

  @ApiProperty({
    required: false,
    type: () => [ReportOrganization],
  })
  @ValidateNested()
  @Type(() => ReportOrganization)
  @IsOptional()
  reportOrganization?: Array<ReportOrganization>;

  @ApiProperty({
    required: false,
    type: () => [RequestApproval],
  })
  @ValidateNested()
  @Type(() => RequestApproval)
  @IsOptional()
  requestApproval?: Array<RequestApproval>;

  @ApiProperty({
    required: false,
    type: () => [RequestApprovalEmployee],
  })
  @ValidateNested()
  @Type(() => RequestApprovalEmployee)
  @IsOptional()
  requestApprovalEmployee?: Array<RequestApprovalEmployee>;

  @ApiProperty({
    required: false,
    type: () => [RequestApprovalTeam],
  })
  @ValidateNested()
  @Type(() => RequestApprovalTeam)
  @IsOptional()
  requestApprovalTeam?: Array<RequestApprovalTeam>;

  @ApiProperty({
    required: false,
    type: () => [Role],
  })
  @ValidateNested()
  @Type(() => Role)
  @IsOptional()
  role?: Array<Role>;

  @ApiProperty({
    required: false,
    type: () => [RolePermission],
  })
  @ValidateNested()
  @Type(() => RolePermission)
  @IsOptional()
  rolePermission?: Array<RolePermission>;

  @ApiProperty({
    required: false,
    type: () => [Screenshot],
  })
  @ValidateNested()
  @Type(() => Screenshot)
  @IsOptional()
  screenshot?: Array<Screenshot>;

  @ApiProperty({
    required: false,
    type: () => [Skill],
  })
  @ValidateNested()
  @Type(() => Skill)
  @IsOptional()
  skill?: Array<Skill>;

  @ApiProperty({
    required: false,
    type: () => [Tag],
  })
  @ValidateNested()
  @Type(() => Tag)
  @IsOptional()
  tag?: Array<Tag>;

  @ApiProperty({
    required: false,
    type: () => [Task],
  })
  @ValidateNested()
  @Type(() => Task)
  @IsOptional()
  task?: Array<Task>;

  @ApiProperty({
    required: false,
    type: () => [TaskLinkedIssue],
  })
  @ValidateNested()
  @Type(() => TaskLinkedIssue)
  @IsOptional()
  taskLinkedIssues?: Array<TaskLinkedIssue>;

  @ApiProperty({
    required: false,
    type: () => [TaskPriority],
  })
  @ValidateNested()
  @Type(() => TaskPriority)
  @IsOptional()
  taskPriority?: Array<TaskPriority>;

  @ApiProperty({
    required: false,
    type: () => [TaskRelatedIssueType],
  })
  @ValidateNested()
  @Type(() => TaskRelatedIssueType)
  @IsOptional()
  taskRelatedIssueType?: Array<TaskRelatedIssueType>;

  @ApiProperty({
    required: false,
    type: () => [TaskSize],
  })
  @ValidateNested()
  @Type(() => TaskSize)
  @IsOptional()
  taskSize?: Array<TaskSize>;

  @ApiProperty({
    required: false,
    type: () => [TaskStatus],
  })
  @ValidateNested()
  @Type(() => TaskStatus)
  @IsOptional()
  taskStatus?: Array<TaskStatus>;

  @ApiProperty({
    required: false,
    type: () => [TaskVersion],
  })
  @ValidateNested()
  @Type(() => TaskVersion)
  @IsOptional()
  taskVersion?: Array<TaskVersion>;

  @ApiProperty({
    required: false,
    type: () => [TenantSetting],
  })
  @ValidateNested()
  @Type(() => TenantSetting)
  @IsOptional()
  tenantSetting?: Array<TenantSetting>;

  @ApiProperty({
    required: false,
    type: () => [TimeLog],
  })
  @ValidateNested()
  @Type(() => TimeLog)
  @IsOptional()
  timeLog?: Array<TimeLog>;

  @ApiProperty({
    required: false,
    type: () => [TimeOffPolicy],
  })
  @ValidateNested()
  @Type(() => TimeOffPolicy)
  @IsOptional()
  timeOffPolicy?: Array<TimeOffPolicy>;

  @ApiProperty({
    required: false,
    type: () => [TimeOffRequest],
  })
  @ValidateNested()
  @Type(() => TimeOffRequest)
  @IsOptional()
  timeOffRequest?: Array<TimeOffRequest>;

  @ApiProperty({
    required: false,
    type: () => [TimeSlot],
  })
  @ValidateNested()
  @Type(() => TimeSlot)
  @IsOptional()
  timeSlot?: Array<TimeSlot>;

  @ApiProperty({
    required: false,
    type: () => [TimeSlotMinute],
  })
  @ValidateNested()
  @Type(() => TimeSlotMinute)
  @IsOptional()
  timeSlotMinute?: Array<TimeSlotMinute>;

  @ApiProperty({
    required: false,
    type: () => [Timesheet],
  })
  @ValidateNested()
  @Type(() => Timesheet)
  @IsOptional()
  timesheet?: Array<Timesheet>;

  @ApiProperty({
    required: false,
    type: () => [User],
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  user?: Array<User>;

  @ApiProperty({
    required: false,
    type: () => [UserOrganization],
  })
  @ValidateNested()
  @Type(() => UserOrganization)
  @IsOptional()
  userOrganization?: Array<UserOrganization>;

  @ApiProperty({
    required: false,
    type: () => [Warehouse],
  })
  @ValidateNested()
  @Type(() => Warehouse)
  @IsOptional()
  warehouse?: Array<Warehouse>;

  @ApiProperty({
    required: false,
    type: () => [WarehouseProduct],
  })
  @ValidateNested()
  @Type(() => WarehouseProduct)
  @IsOptional()
  warehouseProduct?: Array<WarehouseProduct>;

  @ApiProperty({
    required: false,
    type: () => [WarehouseProductVariant],
  })
  @ValidateNested()
  @Type(() => WarehouseProductVariant)
  @IsOptional()
  warehouseProductVariant?: Array<WarehouseProductVariant>;
}

export { Tenant as Tenant };
