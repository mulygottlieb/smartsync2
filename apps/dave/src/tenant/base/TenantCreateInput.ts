/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsString, IsOptional, ValidateNested } from "class-validator";
import { AccountingTemplateCreateNestedManyWithoutTenantsInput } from "./AccountingTemplateCreateNestedManyWithoutTenantsInput";
import { Type } from "class-transformer";
import { ActivityCreateNestedManyWithoutTenantsInput } from "./ActivityCreateNestedManyWithoutTenantsInput";
import { AppointmentEmployeeCreateNestedManyWithoutTenantsInput } from "./AppointmentEmployeeCreateNestedManyWithoutTenantsInput";
import { ApprovalPolicyCreateNestedManyWithoutTenantsInput } from "./ApprovalPolicyCreateNestedManyWithoutTenantsInput";
import { AvailabilitySlotCreateNestedManyWithoutTenantsInput } from "./AvailabilitySlotCreateNestedManyWithoutTenantsInput";
import { CandidateCreateNestedManyWithoutTenantsInput } from "./CandidateCreateNestedManyWithoutTenantsInput";
import { CandidateCriterionRatingCreateNestedManyWithoutTenantsInput } from "./CandidateCriterionRatingCreateNestedManyWithoutTenantsInput";
import { CandidateDocumentCreateNestedManyWithoutTenantsInput } from "./CandidateDocumentCreateNestedManyWithoutTenantsInput";
import { CandidateEducationCreateNestedManyWithoutTenantsInput } from "./CandidateEducationCreateNestedManyWithoutTenantsInput";
import { CandidateExperienceCreateNestedManyWithoutTenantsInput } from "./CandidateExperienceCreateNestedManyWithoutTenantsInput";
import { CandidateFeedbackCreateNestedManyWithoutTenantsInput } from "./CandidateFeedbackCreateNestedManyWithoutTenantsInput";
import { CandidateInterviewCreateNestedManyWithoutTenantsInput } from "./CandidateInterviewCreateNestedManyWithoutTenantsInput";
import { CandidateInterviewerCreateNestedManyWithoutTenantsInput } from "./CandidateInterviewerCreateNestedManyWithoutTenantsInput";
import { CandidatePersonalQualityCreateNestedManyWithoutTenantsInput } from "./CandidatePersonalQualityCreateNestedManyWithoutTenantsInput";
import { CandidateSkillCreateNestedManyWithoutTenantsInput } from "./CandidateSkillCreateNestedManyWithoutTenantsInput";
import { CandidateSourceCreateNestedManyWithoutTenantsInput } from "./CandidateSourceCreateNestedManyWithoutTenantsInput";
import { CandidateTechnologyCreateNestedManyWithoutTenantsInput } from "./CandidateTechnologyCreateNestedManyWithoutTenantsInput";
import { ChangelogCreateNestedManyWithoutTenantsInput } from "./ChangelogCreateNestedManyWithoutTenantsInput";
import { ContactCreateNestedManyWithoutTenantsInput } from "./ContactCreateNestedManyWithoutTenantsInput";
import { CustomSmtpCreateNestedManyWithoutTenantsInput } from "./CustomSmtpCreateNestedManyWithoutTenantsInput";
import { DealCreateNestedManyWithoutTenantsInput } from "./DealCreateNestedManyWithoutTenantsInput";
import { EmailResetCreateNestedManyWithoutTenantsInput } from "./EmailResetCreateNestedManyWithoutTenantsInput";
import { EmailSentCreateNestedManyWithoutTenantsInput } from "./EmailSentCreateNestedManyWithoutTenantsInput";
import { EmailTemplateCreateNestedManyWithoutTenantsInput } from "./EmailTemplateCreateNestedManyWithoutTenantsInput";
import { EmployeeCreateNestedManyWithoutTenantsInput } from "./EmployeeCreateNestedManyWithoutTenantsInput";
import { EmployeeAppointmentCreateNestedManyWithoutTenantsInput } from "./EmployeeAppointmentCreateNestedManyWithoutTenantsInput";
import { EmployeeAwardCreateNestedManyWithoutTenantsInput } from "./EmployeeAwardCreateNestedManyWithoutTenantsInput";
import { EmployeeLevelCreateNestedManyWithoutTenantsInput } from "./EmployeeLevelCreateNestedManyWithoutTenantsInput";
import { EmployeePhoneCreateNestedManyWithoutTenantsInput } from "./EmployeePhoneCreateNestedManyWithoutTenantsInput";
import { EmployeeProposalTemplateCreateNestedManyWithoutTenantsInput } from "./EmployeeProposalTemplateCreateNestedManyWithoutTenantsInput";
import { EmployeeRecurringExpenseCreateNestedManyWithoutTenantsInput } from "./EmployeeRecurringExpenseCreateNestedManyWithoutTenantsInput";
import { EmployeeSettingCreateNestedManyWithoutTenantsInput } from "./EmployeeSettingCreateNestedManyWithoutTenantsInput";
import { EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutTenantsInput } from "./EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutTenantsInput";
import { EquipmentCreateNestedManyWithoutTenantsInput } from "./EquipmentCreateNestedManyWithoutTenantsInput";
import { EquipmentSharingCreateNestedManyWithoutTenantsInput } from "./EquipmentSharingCreateNestedManyWithoutTenantsInput";
import { EquipmentSharingPolicyCreateNestedManyWithoutTenantsInput } from "./EquipmentSharingPolicyCreateNestedManyWithoutTenantsInput";
import { EstimateEmailCreateNestedManyWithoutTenantsInput } from "./EstimateEmailCreateNestedManyWithoutTenantsInput";
import { EventTypeCreateNestedManyWithoutTenantsInput } from "./EventTypeCreateNestedManyWithoutTenantsInput";
import { ExpenseCreateNestedManyWithoutTenantsInput } from "./ExpenseCreateNestedManyWithoutTenantsInput";
import { ExpenseCategoryCreateNestedManyWithoutTenantsInput } from "./ExpenseCategoryCreateNestedManyWithoutTenantsInput";
import { FeatureOrganizationCreateNestedManyWithoutTenantsInput } from "./FeatureOrganizationCreateNestedManyWithoutTenantsInput";
import { GoalCreateNestedManyWithoutTenantsInput } from "./GoalCreateNestedManyWithoutTenantsInput";
import { GoalGeneralSettingCreateNestedManyWithoutTenantsInput } from "./GoalGeneralSettingCreateNestedManyWithoutTenantsInput";
import { GoalKpiCreateNestedManyWithoutTenantsInput } from "./GoalKpiCreateNestedManyWithoutTenantsInput";
import { GoalKpiTemplateCreateNestedManyWithoutTenantsInput } from "./GoalKpiTemplateCreateNestedManyWithoutTenantsInput";
import { GoalTemplateCreateNestedManyWithoutTenantsInput } from "./GoalTemplateCreateNestedManyWithoutTenantsInput";
import { GoalTimeFrameCreateNestedManyWithoutTenantsInput } from "./GoalTimeFrameCreateNestedManyWithoutTenantsInput";
import { ImageAssetCreateNestedManyWithoutTenantsInput } from "./ImageAssetCreateNestedManyWithoutTenantsInput";
import { ImageAssetWhereUniqueInput } from "../../imageAsset/base/ImageAssetWhereUniqueInput";
import { ImportHistoryCreateNestedManyWithoutTenantsInput } from "./ImportHistoryCreateNestedManyWithoutTenantsInput";
import { ImportRecordCreateNestedManyWithoutTenantsInput } from "./ImportRecordCreateNestedManyWithoutTenantsInput";
import { IncomeCreateNestedManyWithoutTenantsInput } from "./IncomeCreateNestedManyWithoutTenantsInput";
import { IntegrationEntitySettingCreateNestedManyWithoutTenantsInput } from "./IntegrationEntitySettingCreateNestedManyWithoutTenantsInput";
import { IntegrationEntitySettingTiedCreateNestedManyWithoutTenantsInput } from "./IntegrationEntitySettingTiedCreateNestedManyWithoutTenantsInput";
import { IntegrationMapCreateNestedManyWithoutTenantsInput } from "./IntegrationMapCreateNestedManyWithoutTenantsInput";
import { IntegrationSettingCreateNestedManyWithoutTenantsInput } from "./IntegrationSettingCreateNestedManyWithoutTenantsInput";
import { IntegrationTenantCreateNestedManyWithoutTenantsInput } from "./IntegrationTenantCreateNestedManyWithoutTenantsInput";
import { InviteCreateNestedManyWithoutTenantsInput } from "./InviteCreateNestedManyWithoutTenantsInput";
import { InvoiceCreateNestedManyWithoutTenantsInput } from "./InvoiceCreateNestedManyWithoutTenantsInput";
import { InvoiceEstimateHistoryCreateNestedManyWithoutTenantsInput } from "./InvoiceEstimateHistoryCreateNestedManyWithoutTenantsInput";
import { InvoiceItemCreateNestedManyWithoutTenantsInput } from "./InvoiceItemCreateNestedManyWithoutTenantsInput";
import { IssueTypeCreateNestedManyWithoutTenantsInput } from "./IssueTypeCreateNestedManyWithoutTenantsInput";
import { JobPresetCreateNestedManyWithoutTenantsInput } from "./JobPresetCreateNestedManyWithoutTenantsInput";
import { JobPresetUpworkJobSearchCriterionCreateNestedManyWithoutTenantsInput } from "./JobPresetUpworkJobSearchCriterionCreateNestedManyWithoutTenantsInput";
import { JobSearchCategoryCreateNestedManyWithoutTenantsInput } from "./JobSearchCategoryCreateNestedManyWithoutTenantsInput";
import { JobSearchOccupationCreateNestedManyWithoutTenantsInput } from "./JobSearchOccupationCreateNestedManyWithoutTenantsInput";
import { KeyResultCreateNestedManyWithoutTenantsInput } from "./KeyResultCreateNestedManyWithoutTenantsInput";
import { KeyResultTemplateCreateNestedManyWithoutTenantsInput } from "./KeyResultTemplateCreateNestedManyWithoutTenantsInput";
import { KeyResultUpdateCreateNestedManyWithoutTenantsInput } from "./KeyResultUpdateCreateNestedManyWithoutTenantsInput";
import { KnowledgeBaseCreateNestedManyWithoutTenantsInput } from "./KnowledgeBaseCreateNestedManyWithoutTenantsInput";
import { KnowledgeBaseArticleCreateNestedManyWithoutTenantsInput } from "./KnowledgeBaseArticleCreateNestedManyWithoutTenantsInput";
import { KnowledgeBaseAuthorCreateNestedManyWithoutTenantsInput } from "./KnowledgeBaseAuthorCreateNestedManyWithoutTenantsInput";
import { MerchantCreateNestedManyWithoutTenantsInput } from "./MerchantCreateNestedManyWithoutTenantsInput";
import { OrganizationCreateNestedManyWithoutTenantsInput } from "./OrganizationCreateNestedManyWithoutTenantsInput";
import { OrganizationAwardCreateNestedManyWithoutTenantsInput } from "./OrganizationAwardCreateNestedManyWithoutTenantsInput";
import { OrganizationContactCreateNestedManyWithoutTenantsInput } from "./OrganizationContactCreateNestedManyWithoutTenantsInput";
import { OrganizationDepartmentCreateNestedManyWithoutTenantsInput } from "./OrganizationDepartmentCreateNestedManyWithoutTenantsInput";
import { OrganizationDocumentCreateNestedManyWithoutTenantsInput } from "./OrganizationDocumentCreateNestedManyWithoutTenantsInput";
import { OrganizationEmploymentTypeCreateNestedManyWithoutTenantsInput } from "./OrganizationEmploymentTypeCreateNestedManyWithoutTenantsInput";
import { OrganizationLanguageCreateNestedManyWithoutTenantsInput } from "./OrganizationLanguageCreateNestedManyWithoutTenantsInput";
import { OrganizationPositionCreateNestedManyWithoutTenantsInput } from "./OrganizationPositionCreateNestedManyWithoutTenantsInput";
import { OrganizationProjectCreateNestedManyWithoutTenantsInput } from "./OrganizationProjectCreateNestedManyWithoutTenantsInput";
import { OrganizationRecurringExpenseCreateNestedManyWithoutTenantsInput } from "./OrganizationRecurringExpenseCreateNestedManyWithoutTenantsInput";
import { OrganizationSprintCreateNestedManyWithoutTenantsInput } from "./OrganizationSprintCreateNestedManyWithoutTenantsInput";
import { OrganizationTaskSettingCreateNestedManyWithoutTenantsInput } from "./OrganizationTaskSettingCreateNestedManyWithoutTenantsInput";
import { OrganizationTeamCreateNestedManyWithoutTenantsInput } from "./OrganizationTeamCreateNestedManyWithoutTenantsInput";
import { OrganizationTeamEmployeeCreateNestedManyWithoutTenantsInput } from "./OrganizationTeamEmployeeCreateNestedManyWithoutTenantsInput";
import { OrganizationTeamJoinRequestCreateNestedManyWithoutTenantsInput } from "./OrganizationTeamJoinRequestCreateNestedManyWithoutTenantsInput";
import { OrganizationVendorCreateNestedManyWithoutTenantsInput } from "./OrganizationVendorCreateNestedManyWithoutTenantsInput";
import { PaymentCreateNestedManyWithoutTenantsInput } from "./PaymentCreateNestedManyWithoutTenantsInput";
import { PipelineCreateNestedManyWithoutTenantsInput } from "./PipelineCreateNestedManyWithoutTenantsInput";
import { PipelineStageCreateNestedManyWithoutTenantsInput } from "./PipelineStageCreateNestedManyWithoutTenantsInput";
import { ProductCreateNestedManyWithoutTenantsInput } from "./ProductCreateNestedManyWithoutTenantsInput";
import { ProductCategoryCreateNestedManyWithoutTenantsInput } from "./ProductCategoryCreateNestedManyWithoutTenantsInput";
import { ProductCategoryTranslationCreateNestedManyWithoutTenantsInput } from "./ProductCategoryTranslationCreateNestedManyWithoutTenantsInput";
import { ProductOptionCreateNestedManyWithoutTenantsInput } from "./ProductOptionCreateNestedManyWithoutTenantsInput";
import { ProductOptionGroupCreateNestedManyWithoutTenantsInput } from "./ProductOptionGroupCreateNestedManyWithoutTenantsInput";
import { ProductOptionGroupTranslationCreateNestedManyWithoutTenantsInput } from "./ProductOptionGroupTranslationCreateNestedManyWithoutTenantsInput";
import { ProductOptionTranslationCreateNestedManyWithoutTenantsInput } from "./ProductOptionTranslationCreateNestedManyWithoutTenantsInput";
import { ProductTranslationCreateNestedManyWithoutTenantsInput } from "./ProductTranslationCreateNestedManyWithoutTenantsInput";
import { ProductTypeCreateNestedManyWithoutTenantsInput } from "./ProductTypeCreateNestedManyWithoutTenantsInput";
import { ProductTypeTranslationCreateNestedManyWithoutTenantsInput } from "./ProductTypeTranslationCreateNestedManyWithoutTenantsInput";
import { ProductVariantCreateNestedManyWithoutTenantsInput } from "./ProductVariantCreateNestedManyWithoutTenantsInput";
import { ProductVariantPriceCreateNestedManyWithoutTenantsInput } from "./ProductVariantPriceCreateNestedManyWithoutTenantsInput";
import { ProductVariantSettingCreateNestedManyWithoutTenantsInput } from "./ProductVariantSettingCreateNestedManyWithoutTenantsInput";
import { ProposalCreateNestedManyWithoutTenantsInput } from "./ProposalCreateNestedManyWithoutTenantsInput";
import { ReportOrganizationCreateNestedManyWithoutTenantsInput } from "./ReportOrganizationCreateNestedManyWithoutTenantsInput";
import { RequestApprovalCreateNestedManyWithoutTenantsInput } from "./RequestApprovalCreateNestedManyWithoutTenantsInput";
import { RequestApprovalEmployeeCreateNestedManyWithoutTenantsInput } from "./RequestApprovalEmployeeCreateNestedManyWithoutTenantsInput";
import { RequestApprovalTeamCreateNestedManyWithoutTenantsInput } from "./RequestApprovalTeamCreateNestedManyWithoutTenantsInput";
import { RoleCreateNestedManyWithoutTenantsInput } from "./RoleCreateNestedManyWithoutTenantsInput";
import { RolePermissionCreateNestedManyWithoutTenantsInput } from "./RolePermissionCreateNestedManyWithoutTenantsInput";
import { ScreenshotCreateNestedManyWithoutTenantsInput } from "./ScreenshotCreateNestedManyWithoutTenantsInput";
import { SkillCreateNestedManyWithoutTenantsInput } from "./SkillCreateNestedManyWithoutTenantsInput";
import { TagCreateNestedManyWithoutTenantsInput } from "./TagCreateNestedManyWithoutTenantsInput";
import { TaskCreateNestedManyWithoutTenantsInput } from "./TaskCreateNestedManyWithoutTenantsInput";
import { TaskLinkedIssueCreateNestedManyWithoutTenantsInput } from "./TaskLinkedIssueCreateNestedManyWithoutTenantsInput";
import { TaskPriorityCreateNestedManyWithoutTenantsInput } from "./TaskPriorityCreateNestedManyWithoutTenantsInput";
import { TaskRelatedIssueTypeCreateNestedManyWithoutTenantsInput } from "./TaskRelatedIssueTypeCreateNestedManyWithoutTenantsInput";
import { TaskSizeCreateNestedManyWithoutTenantsInput } from "./TaskSizeCreateNestedManyWithoutTenantsInput";
import { TaskStatusCreateNestedManyWithoutTenantsInput } from "./TaskStatusCreateNestedManyWithoutTenantsInput";
import { TaskVersionCreateNestedManyWithoutTenantsInput } from "./TaskVersionCreateNestedManyWithoutTenantsInput";
import { TenantSettingCreateNestedManyWithoutTenantsInput } from "./TenantSettingCreateNestedManyWithoutTenantsInput";
import { TimeLogCreateNestedManyWithoutTenantsInput } from "./TimeLogCreateNestedManyWithoutTenantsInput";
import { TimeOffPolicyCreateNestedManyWithoutTenantsInput } from "./TimeOffPolicyCreateNestedManyWithoutTenantsInput";
import { TimeOffRequestCreateNestedManyWithoutTenantsInput } from "./TimeOffRequestCreateNestedManyWithoutTenantsInput";
import { TimeSlotCreateNestedManyWithoutTenantsInput } from "./TimeSlotCreateNestedManyWithoutTenantsInput";
import { TimeSlotMinuteCreateNestedManyWithoutTenantsInput } from "./TimeSlotMinuteCreateNestedManyWithoutTenantsInput";
import { TimesheetCreateNestedManyWithoutTenantsInput } from "./TimesheetCreateNestedManyWithoutTenantsInput";
import { UserCreateNestedManyWithoutTenantsInput } from "./UserCreateNestedManyWithoutTenantsInput";
import { UserOrganizationCreateNestedManyWithoutTenantsInput } from "./UserOrganizationCreateNestedManyWithoutTenantsInput";
import { WarehouseCreateNestedManyWithoutTenantsInput } from "./WarehouseCreateNestedManyWithoutTenantsInput";
import { WarehouseProductCreateNestedManyWithoutTenantsInput } from "./WarehouseProductCreateNestedManyWithoutTenantsInput";
import { WarehouseProductVariantCreateNestedManyWithoutTenantsInput } from "./WarehouseProductVariantCreateNestedManyWithoutTenantsInput";

@InputType()
class TenantCreateInput {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  logo?: string | null;

  @ApiProperty({
    required: false,
    type: () => AccountingTemplateCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => AccountingTemplateCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => AccountingTemplateCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  accountingTemplate?: AccountingTemplateCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ActivityCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ActivityCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ActivityCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  activity?: ActivityCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => AppointmentEmployeeCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => AppointmentEmployeeCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => AppointmentEmployeeCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  appointmentEmployee?: AppointmentEmployeeCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ApprovalPolicyCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ApprovalPolicyCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ApprovalPolicyCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  approvalPolicy?: ApprovalPolicyCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => AvailabilitySlotCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => AvailabilitySlotCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => AvailabilitySlotCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  availabilitySlot?: AvailabilitySlotCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => CandidateCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => CandidateCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  candidate?: CandidateCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateCriterionRatingCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => CandidateCriterionRatingCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => CandidateCriterionRatingCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  candidateCriterionRating?: CandidateCriterionRatingCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateDocumentCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => CandidateDocumentCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => CandidateDocumentCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  candidateDocument?: CandidateDocumentCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateEducationCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => CandidateEducationCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => CandidateEducationCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  candidateEducation?: CandidateEducationCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateExperienceCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => CandidateExperienceCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => CandidateExperienceCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  candidateExperience?: CandidateExperienceCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateFeedbackCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => CandidateFeedbackCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => CandidateFeedbackCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  candidateFeedback?: CandidateFeedbackCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateInterviewCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => CandidateInterviewCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => CandidateInterviewCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  candidateInterview?: CandidateInterviewCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateInterviewerCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => CandidateInterviewerCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => CandidateInterviewerCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  candidateInterviewer?: CandidateInterviewerCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => CandidatePersonalQualityCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => CandidatePersonalQualityCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => CandidatePersonalQualityCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  candidatePersonalQuality?: CandidatePersonalQualityCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateSkillCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => CandidateSkillCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => CandidateSkillCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  candidateSkill?: CandidateSkillCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateSourceCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => CandidateSourceCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => CandidateSourceCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  candidateSource?: CandidateSourceCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => CandidateTechnologyCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => CandidateTechnologyCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => CandidateTechnologyCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  candidateTechnology?: CandidateTechnologyCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ChangelogCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ChangelogCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ChangelogCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  changelog?: ChangelogCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ContactCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ContactCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ContactCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  contact?: ContactCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => CustomSmtpCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => CustomSmtpCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => CustomSmtpCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  customSmtp?: CustomSmtpCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => DealCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => DealCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => DealCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  deal?: DealCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EmailResetCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EmailResetCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EmailResetCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  emailReset?: EmailResetCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EmailSentCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EmailSentCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EmailSentCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  emailSent?: EmailSentCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EmailTemplateCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EmailTemplateCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EmailTemplateCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  emailTemplate?: EmailTemplateCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EmployeeCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  employee?: EmployeeCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeAppointmentCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeAppointmentCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EmployeeAppointmentCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  employeeAppointment?: EmployeeAppointmentCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeAwardCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeAwardCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EmployeeAwardCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  employeeAward?: EmployeeAwardCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeLevelCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeLevelCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EmployeeLevelCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  employeeLevel?: EmployeeLevelCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeePhoneCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EmployeePhoneCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EmployeePhoneCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  employeePhone?: EmployeePhoneCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeProposalTemplateCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeProposalTemplateCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EmployeeProposalTemplateCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  employeeProposalTemplate?: EmployeeProposalTemplateCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeRecurringExpenseCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeRecurringExpenseCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EmployeeRecurringExpenseCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  employeeRecurringExpense?: EmployeeRecurringExpenseCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeSettingCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EmployeeSettingCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EmployeeSettingCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  employeeSetting?: EmployeeSettingCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () =>
      EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(
    () => EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutTenantsInput
  )
  @IsOptional()
  @Field(
    () => EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutTenantsInput,
    {
      nullable: true,
    }
  )
  employeeUpworkJobSearchCriterion?: EmployeeUpworkJobSearchCriterionCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EquipmentCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EquipmentCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EquipmentCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  equipment?: EquipmentCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EquipmentSharingCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EquipmentSharingCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EquipmentSharingCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  equipmentSharing?: EquipmentSharingCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EquipmentSharingPolicyCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EquipmentSharingPolicyCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EquipmentSharingPolicyCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  equipmentSharingPolicy?: EquipmentSharingPolicyCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EstimateEmailCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EstimateEmailCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EstimateEmailCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  estimateEmail?: EstimateEmailCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => EventTypeCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => EventTypeCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => EventTypeCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  eventType?: EventTypeCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ExpenseCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ExpenseCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ExpenseCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  expense?: ExpenseCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ExpenseCategoryCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ExpenseCategoryCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ExpenseCategoryCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  expenseCategory?: ExpenseCategoryCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => FeatureOrganizationCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => FeatureOrganizationCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => FeatureOrganizationCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  featureOrganization?: FeatureOrganizationCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => GoalCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => GoalCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => GoalCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  goal?: GoalCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => GoalGeneralSettingCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => GoalGeneralSettingCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => GoalGeneralSettingCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  goalGeneralSetting?: GoalGeneralSettingCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => GoalKpiCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => GoalKpiCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => GoalKpiCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  goalKpi?: GoalKpiCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => GoalKpiTemplateCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => GoalKpiTemplateCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => GoalKpiTemplateCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  goalKpiTemplate?: GoalKpiTemplateCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => GoalTemplateCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => GoalTemplateCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => GoalTemplateCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  goalTemplate?: GoalTemplateCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => GoalTimeFrameCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => GoalTimeFrameCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => GoalTimeFrameCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  goalTimeFrame?: GoalTimeFrameCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ImageAssetCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ImageAssetCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ImageAssetCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  imageAssetImageAssetTenantIdTotenant?: ImageAssetCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ImageAssetWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ImageAssetWhereUniqueInput)
  @IsOptional()
  @Field(() => ImageAssetWhereUniqueInput, {
    nullable: true,
  })
  imageAssetTenantImageIdToimageAsset?: ImageAssetWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ImportHistoryCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ImportHistoryCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ImportHistoryCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  importHistory?: ImportHistoryCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ImportRecordCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ImportRecordCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ImportRecordCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  importRecord?: ImportRecordCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => IncomeCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => IncomeCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => IncomeCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  income?: IncomeCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => IntegrationEntitySettingCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => IntegrationEntitySettingCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => IntegrationEntitySettingCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  integrationEntitySetting?: IntegrationEntitySettingCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => IntegrationEntitySettingTiedCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => IntegrationEntitySettingTiedCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(
    () => IntegrationEntitySettingTiedCreateNestedManyWithoutTenantsInput,
    {
      nullable: true,
    }
  )
  integrationEntitySettingTied?: IntegrationEntitySettingTiedCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => IntegrationMapCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => IntegrationMapCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => IntegrationMapCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  integrationMap?: IntegrationMapCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => IntegrationSettingCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => IntegrationSettingCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => IntegrationSettingCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  integrationSetting?: IntegrationSettingCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => IntegrationTenantCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => IntegrationTenantCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => IntegrationTenantCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  integrationTenant?: IntegrationTenantCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => InviteCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => InviteCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => InviteCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  invite?: InviteCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => InvoiceCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => InvoiceCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => InvoiceCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  invoice?: InvoiceCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => InvoiceEstimateHistoryCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => InvoiceEstimateHistoryCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => InvoiceEstimateHistoryCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  invoiceEstimateHistory?: InvoiceEstimateHistoryCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => InvoiceItemCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => InvoiceItemCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => InvoiceItemCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  invoiceItem?: InvoiceItemCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => IssueTypeCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => IssueTypeCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => IssueTypeCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  issueType?: IssueTypeCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => JobPresetCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => JobPresetCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => JobPresetCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  jobPreset?: JobPresetCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () =>
      JobPresetUpworkJobSearchCriterionCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(
    () => JobPresetUpworkJobSearchCriterionCreateNestedManyWithoutTenantsInput
  )
  @IsOptional()
  @Field(
    () => JobPresetUpworkJobSearchCriterionCreateNestedManyWithoutTenantsInput,
    {
      nullable: true,
    }
  )
  jobPresetUpworkJobSearchCriterion?: JobPresetUpworkJobSearchCriterionCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => JobSearchCategoryCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => JobSearchCategoryCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => JobSearchCategoryCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  jobSearchCategory?: JobSearchCategoryCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => JobSearchOccupationCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => JobSearchOccupationCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => JobSearchOccupationCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  jobSearchOccupation?: JobSearchOccupationCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => KeyResultCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => KeyResultCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => KeyResultCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  keyResult?: KeyResultCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => KeyResultTemplateCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => KeyResultTemplateCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => KeyResultTemplateCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  keyResultTemplate?: KeyResultTemplateCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => KeyResultUpdateCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => KeyResultUpdateCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => KeyResultUpdateCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  keyResultUpdate?: KeyResultUpdateCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => KnowledgeBaseCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => KnowledgeBaseCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => KnowledgeBaseCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  knowledgeBase?: KnowledgeBaseCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => KnowledgeBaseArticleCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => KnowledgeBaseArticleCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => KnowledgeBaseArticleCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  knowledgeBaseArticle?: KnowledgeBaseArticleCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => KnowledgeBaseAuthorCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => KnowledgeBaseAuthorCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => KnowledgeBaseAuthorCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  knowledgeBaseAuthor?: KnowledgeBaseAuthorCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => MerchantCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => MerchantCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => MerchantCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  merchant?: MerchantCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => OrganizationCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  organization?: OrganizationCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationAwardCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationAwardCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => OrganizationAwardCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  organizationAward?: OrganizationAwardCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationContactCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationContactCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => OrganizationContactCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  organizationContact?: OrganizationContactCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationDepartmentCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationDepartmentCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => OrganizationDepartmentCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  organizationDepartment?: OrganizationDepartmentCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationDocumentCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationDocumentCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => OrganizationDocumentCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  organizationDocument?: OrganizationDocumentCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationEmploymentTypeCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationEmploymentTypeCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => OrganizationEmploymentTypeCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  organizationEmploymentType?: OrganizationEmploymentTypeCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationLanguageCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationLanguageCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => OrganizationLanguageCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  organizationLanguage?: OrganizationLanguageCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationPositionCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationPositionCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => OrganizationPositionCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  organizationPosition?: OrganizationPositionCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationProjectCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationProjectCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => OrganizationProjectCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  organizationProject?: OrganizationProjectCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationRecurringExpenseCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationRecurringExpenseCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(
    () => OrganizationRecurringExpenseCreateNestedManyWithoutTenantsInput,
    {
      nullable: true,
    }
  )
  organizationRecurringExpense?: OrganizationRecurringExpenseCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationSprintCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationSprintCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => OrganizationSprintCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  organizationSprint?: OrganizationSprintCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationTaskSettingCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationTaskSettingCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => OrganizationTaskSettingCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  organizationTaskSetting?: OrganizationTaskSettingCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => OrganizationTeamCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  organizationTeam?: OrganizationTeamCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamEmployeeCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamEmployeeCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => OrganizationTeamEmployeeCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  organizationTeamEmployee?: OrganizationTeamEmployeeCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamJoinRequestCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamJoinRequestCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => OrganizationTeamJoinRequestCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  organizationTeamJoinRequest?: OrganizationTeamJoinRequestCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationVendorCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => OrganizationVendorCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => OrganizationVendorCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  organizationVendor?: OrganizationVendorCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => PaymentCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => PaymentCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => PaymentCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  payment?: PaymentCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => PipelineCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => PipelineCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => PipelineCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  pipeline?: PipelineCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => PipelineStageCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => PipelineStageCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => PipelineStageCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  pipelineStage?: PipelineStageCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ProductCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ProductCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ProductCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  product?: ProductCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ProductCategoryCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ProductCategoryCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ProductCategoryCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  productCategory?: ProductCategoryCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ProductCategoryTranslationCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ProductCategoryTranslationCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ProductCategoryTranslationCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  productCategoryTranslation?: ProductCategoryTranslationCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ProductOptionCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ProductOptionCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ProductOptionCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  productOption?: ProductOptionCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ProductOptionGroupCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ProductOptionGroupCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ProductOptionGroupCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  productOptionGroup?: ProductOptionGroupCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () =>
      ProductOptionGroupTranslationCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ProductOptionGroupTranslationCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(
    () => ProductOptionGroupTranslationCreateNestedManyWithoutTenantsInput,
    {
      nullable: true,
    }
  )
  productOptionGroupTranslation?: ProductOptionGroupTranslationCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ProductOptionTranslationCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ProductOptionTranslationCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ProductOptionTranslationCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  productOptionTranslation?: ProductOptionTranslationCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ProductTranslationCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ProductTranslationCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ProductTranslationCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  productTranslation?: ProductTranslationCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ProductTypeCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ProductTypeCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ProductTypeCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  productType?: ProductTypeCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ProductTypeTranslationCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ProductTypeTranslationCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ProductTypeTranslationCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  productTypeTranslation?: ProductTypeTranslationCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ProductVariantCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ProductVariantCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ProductVariantCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  productVariant?: ProductVariantCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ProductVariantPriceCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ProductVariantPriceCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ProductVariantPriceCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  productVariantPrice?: ProductVariantPriceCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ProductVariantSettingCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ProductVariantSettingCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ProductVariantSettingCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  productVariantSetting?: ProductVariantSettingCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ProposalCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ProposalCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ProposalCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  proposal?: ProposalCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ReportOrganizationCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ReportOrganizationCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ReportOrganizationCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  reportOrganization?: ReportOrganizationCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => RequestApprovalCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => RequestApprovalCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => RequestApprovalCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  requestApproval?: RequestApprovalCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => RequestApprovalEmployeeCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => RequestApprovalEmployeeCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => RequestApprovalEmployeeCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  requestApprovalEmployee?: RequestApprovalEmployeeCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => RequestApprovalTeamCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => RequestApprovalTeamCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => RequestApprovalTeamCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  requestApprovalTeam?: RequestApprovalTeamCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => RoleCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => RoleCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => RoleCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  role?: RoleCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => RolePermissionCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => RolePermissionCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => RolePermissionCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  rolePermission?: RolePermissionCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => ScreenshotCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => ScreenshotCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => ScreenshotCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  screenshot?: ScreenshotCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => SkillCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => SkillCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => SkillCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  skill?: SkillCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => TagCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => TagCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => TagCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  tag?: TagCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => TaskCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => TaskCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => TaskCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  task?: TaskCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => TaskLinkedIssueCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => TaskLinkedIssueCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => TaskLinkedIssueCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  taskLinkedIssues?: TaskLinkedIssueCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => TaskPriorityCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => TaskPriorityCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => TaskPriorityCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  taskPriority?: TaskPriorityCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => TaskRelatedIssueTypeCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => TaskRelatedIssueTypeCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => TaskRelatedIssueTypeCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  taskRelatedIssueType?: TaskRelatedIssueTypeCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => TaskSizeCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => TaskSizeCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => TaskSizeCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  taskSize?: TaskSizeCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => TaskStatusCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => TaskStatusCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => TaskStatusCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  taskStatus?: TaskStatusCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => TaskVersionCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => TaskVersionCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => TaskVersionCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  taskVersion?: TaskVersionCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => TenantSettingCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => TenantSettingCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => TenantSettingCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  tenantSetting?: TenantSettingCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => TimeLogCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => TimeLogCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => TimeLogCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  timeLog?: TimeLogCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => TimeOffPolicyCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => TimeOffPolicyCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => TimeOffPolicyCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  timeOffPolicy?: TimeOffPolicyCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => TimeOffRequestCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => TimeOffRequestCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => TimeOffRequestCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  timeOffRequest?: TimeOffRequestCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => TimeSlotCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => TimeSlotCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => TimeSlotCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  timeSlot?: TimeSlotCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => TimeSlotMinuteCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => TimeSlotMinuteCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => TimeSlotMinuteCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  timeSlotMinute?: TimeSlotMinuteCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => TimesheetCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => TimesheetCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => TimesheetCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  timesheet?: TimesheetCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => UserCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => UserCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => UserCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  user?: UserCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => UserOrganizationCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => UserOrganizationCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => UserOrganizationCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  userOrganization?: UserOrganizationCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => WarehouseCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => WarehouseCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => WarehouseCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  warehouse?: WarehouseCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => WarehouseProductCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => WarehouseProductCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => WarehouseProductCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  warehouseProduct?: WarehouseProductCreateNestedManyWithoutTenantsInput;

  @ApiProperty({
    required: false,
    type: () => WarehouseProductVariantCreateNestedManyWithoutTenantsInput,
  })
  @ValidateNested()
  @Type(() => WarehouseProductVariantCreateNestedManyWithoutTenantsInput)
  @IsOptional()
  @Field(() => WarehouseProductVariantCreateNestedManyWithoutTenantsInput, {
    nullable: true,
  })
  warehouseProductVariant?: WarehouseProductVariantCreateNestedManyWithoutTenantsInput;
}

export { TenantCreateInput as TenantCreateInput };
