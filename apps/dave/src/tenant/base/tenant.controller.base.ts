/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TenantService } from "../tenant.service";
import { TenantCreateInput } from "./TenantCreateInput";
import { TenantWhereInput } from "./TenantWhereInput";
import { TenantWhereUniqueInput } from "./TenantWhereUniqueInput";
import { TenantFindManyArgs } from "./TenantFindManyArgs";
import { TenantUpdateInput } from "./TenantUpdateInput";
import { Tenant } from "./Tenant";
import { AccountingTemplateFindManyArgs } from "../../accountingTemplate/base/AccountingTemplateFindManyArgs";
import { AccountingTemplate } from "../../accountingTemplate/base/AccountingTemplate";
import { AccountingTemplateWhereUniqueInput } from "../../accountingTemplate/base/AccountingTemplateWhereUniqueInput";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { ActivityWhereUniqueInput } from "../../activity/base/ActivityWhereUniqueInput";
import { AppointmentEmployeeFindManyArgs } from "../../appointmentEmployee/base/AppointmentEmployeeFindManyArgs";
import { AppointmentEmployee } from "../../appointmentEmployee/base/AppointmentEmployee";
import { AppointmentEmployeeWhereUniqueInput } from "../../appointmentEmployee/base/AppointmentEmployeeWhereUniqueInput";
import { ApprovalPolicyFindManyArgs } from "../../approvalPolicy/base/ApprovalPolicyFindManyArgs";
import { ApprovalPolicy } from "../../approvalPolicy/base/ApprovalPolicy";
import { ApprovalPolicyWhereUniqueInput } from "../../approvalPolicy/base/ApprovalPolicyWhereUniqueInput";
import { AvailabilitySlotFindManyArgs } from "../../availabilitySlot/base/AvailabilitySlotFindManyArgs";
import { AvailabilitySlot } from "../../availabilitySlot/base/AvailabilitySlot";
import { AvailabilitySlotWhereUniqueInput } from "../../availabilitySlot/base/AvailabilitySlotWhereUniqueInput";
import { CandidateFindManyArgs } from "../../candidate/base/CandidateFindManyArgs";
import { Candidate } from "../../candidate/base/Candidate";
import { CandidateWhereUniqueInput } from "../../candidate/base/CandidateWhereUniqueInput";
import { CandidateCriterionRatingFindManyArgs } from "../../candidateCriterionRating/base/CandidateCriterionRatingFindManyArgs";
import { CandidateCriterionRating } from "../../candidateCriterionRating/base/CandidateCriterionRating";
import { CandidateCriterionRatingWhereUniqueInput } from "../../candidateCriterionRating/base/CandidateCriterionRatingWhereUniqueInput";
import { CandidateDocumentFindManyArgs } from "../../candidateDocument/base/CandidateDocumentFindManyArgs";
import { CandidateDocument } from "../../candidateDocument/base/CandidateDocument";
import { CandidateDocumentWhereUniqueInput } from "../../candidateDocument/base/CandidateDocumentWhereUniqueInput";
import { CandidateEducationFindManyArgs } from "../../candidateEducation/base/CandidateEducationFindManyArgs";
import { CandidateEducation } from "../../candidateEducation/base/CandidateEducation";
import { CandidateEducationWhereUniqueInput } from "../../candidateEducation/base/CandidateEducationWhereUniqueInput";
import { CandidateExperienceFindManyArgs } from "../../candidateExperience/base/CandidateExperienceFindManyArgs";
import { CandidateExperience } from "../../candidateExperience/base/CandidateExperience";
import { CandidateExperienceWhereUniqueInput } from "../../candidateExperience/base/CandidateExperienceWhereUniqueInput";
import { CandidateFeedbackFindManyArgs } from "../../candidateFeedback/base/CandidateFeedbackFindManyArgs";
import { CandidateFeedback } from "../../candidateFeedback/base/CandidateFeedback";
import { CandidateFeedbackWhereUniqueInput } from "../../candidateFeedback/base/CandidateFeedbackWhereUniqueInput";
import { CandidateInterviewFindManyArgs } from "../../candidateInterview/base/CandidateInterviewFindManyArgs";
import { CandidateInterview } from "../../candidateInterview/base/CandidateInterview";
import { CandidateInterviewWhereUniqueInput } from "../../candidateInterview/base/CandidateInterviewWhereUniqueInput";
import { CandidateInterviewerFindManyArgs } from "../../candidateInterviewer/base/CandidateInterviewerFindManyArgs";
import { CandidateInterviewer } from "../../candidateInterviewer/base/CandidateInterviewer";
import { CandidateInterviewerWhereUniqueInput } from "../../candidateInterviewer/base/CandidateInterviewerWhereUniqueInput";
import { CandidatePersonalQualityFindManyArgs } from "../../candidatePersonalQuality/base/CandidatePersonalQualityFindManyArgs";
import { CandidatePersonalQuality } from "../../candidatePersonalQuality/base/CandidatePersonalQuality";
import { CandidatePersonalQualityWhereUniqueInput } from "../../candidatePersonalQuality/base/CandidatePersonalQualityWhereUniqueInput";
import { CandidateSkillFindManyArgs } from "../../candidateSkill/base/CandidateSkillFindManyArgs";
import { CandidateSkill } from "../../candidateSkill/base/CandidateSkill";
import { CandidateSkillWhereUniqueInput } from "../../candidateSkill/base/CandidateSkillWhereUniqueInput";
import { CandidateSourceFindManyArgs } from "../../candidateSource/base/CandidateSourceFindManyArgs";
import { CandidateSource } from "../../candidateSource/base/CandidateSource";
import { CandidateSourceWhereUniqueInput } from "../../candidateSource/base/CandidateSourceWhereUniqueInput";
import { CandidateTechnologyFindManyArgs } from "../../candidateTechnology/base/CandidateTechnologyFindManyArgs";
import { CandidateTechnology } from "../../candidateTechnology/base/CandidateTechnology";
import { CandidateTechnologyWhereUniqueInput } from "../../candidateTechnology/base/CandidateTechnologyWhereUniqueInput";
import { ChangelogFindManyArgs } from "../../changelog/base/ChangelogFindManyArgs";
import { Changelog } from "../../changelog/base/Changelog";
import { ChangelogWhereUniqueInput } from "../../changelog/base/ChangelogWhereUniqueInput";
import { ContactFindManyArgs } from "../../contact/base/ContactFindManyArgs";
import { Contact } from "../../contact/base/Contact";
import { ContactWhereUniqueInput } from "../../contact/base/ContactWhereUniqueInput";
import { CustomSmtpFindManyArgs } from "../../customSmtp/base/CustomSmtpFindManyArgs";
import { CustomSmtp } from "../../customSmtp/base/CustomSmtp";
import { CustomSmtpWhereUniqueInput } from "../../customSmtp/base/CustomSmtpWhereUniqueInput";
import { DealFindManyArgs } from "../../deal/base/DealFindManyArgs";
import { Deal } from "../../deal/base/Deal";
import { DealWhereUniqueInput } from "../../deal/base/DealWhereUniqueInput";
import { EmailResetFindManyArgs } from "../../emailReset/base/EmailResetFindManyArgs";
import { EmailReset } from "../../emailReset/base/EmailReset";
import { EmailResetWhereUniqueInput } from "../../emailReset/base/EmailResetWhereUniqueInput";
import { EmailSentFindManyArgs } from "../../emailSent/base/EmailSentFindManyArgs";
import { EmailSent } from "../../emailSent/base/EmailSent";
import { EmailSentWhereUniqueInput } from "../../emailSent/base/EmailSentWhereUniqueInput";
import { EmailTemplateFindManyArgs } from "../../emailTemplate/base/EmailTemplateFindManyArgs";
import { EmailTemplate } from "../../emailTemplate/base/EmailTemplate";
import { EmailTemplateWhereUniqueInput } from "../../emailTemplate/base/EmailTemplateWhereUniqueInput";
import { EmployeeFindManyArgs } from "../../employee/base/EmployeeFindManyArgs";
import { Employee } from "../../employee/base/Employee";
import { EmployeeWhereUniqueInput } from "../../employee/base/EmployeeWhereUniqueInput";
import { EmployeeAppointmentFindManyArgs } from "../../employeeAppointment/base/EmployeeAppointmentFindManyArgs";
import { EmployeeAppointment } from "../../employeeAppointment/base/EmployeeAppointment";
import { EmployeeAppointmentWhereUniqueInput } from "../../employeeAppointment/base/EmployeeAppointmentWhereUniqueInput";
import { EmployeeAwardFindManyArgs } from "../../employeeAward/base/EmployeeAwardFindManyArgs";
import { EmployeeAward } from "../../employeeAward/base/EmployeeAward";
import { EmployeeAwardWhereUniqueInput } from "../../employeeAward/base/EmployeeAwardWhereUniqueInput";
import { EmployeeLevelFindManyArgs } from "../../employeeLevel/base/EmployeeLevelFindManyArgs";
import { EmployeeLevel } from "../../employeeLevel/base/EmployeeLevel";
import { EmployeeLevelWhereUniqueInput } from "../../employeeLevel/base/EmployeeLevelWhereUniqueInput";
import { EmployeePhoneFindManyArgs } from "../../employeePhone/base/EmployeePhoneFindManyArgs";
import { EmployeePhone } from "../../employeePhone/base/EmployeePhone";
import { EmployeePhoneWhereUniqueInput } from "../../employeePhone/base/EmployeePhoneWhereUniqueInput";
import { EmployeeProposalTemplateFindManyArgs } from "../../employeeProposalTemplate/base/EmployeeProposalTemplateFindManyArgs";
import { EmployeeProposalTemplate } from "../../employeeProposalTemplate/base/EmployeeProposalTemplate";
import { EmployeeProposalTemplateWhereUniqueInput } from "../../employeeProposalTemplate/base/EmployeeProposalTemplateWhereUniqueInput";
import { EmployeeRecurringExpenseFindManyArgs } from "../../employeeRecurringExpense/base/EmployeeRecurringExpenseFindManyArgs";
import { EmployeeRecurringExpense } from "../../employeeRecurringExpense/base/EmployeeRecurringExpense";
import { EmployeeRecurringExpenseWhereUniqueInput } from "../../employeeRecurringExpense/base/EmployeeRecurringExpenseWhereUniqueInput";
import { EmployeeSettingFindManyArgs } from "../../employeeSetting/base/EmployeeSettingFindManyArgs";
import { EmployeeSetting } from "../../employeeSetting/base/EmployeeSetting";
import { EmployeeSettingWhereUniqueInput } from "../../employeeSetting/base/EmployeeSettingWhereUniqueInput";
import { EmployeeUpworkJobSearchCriterionFindManyArgs } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterionFindManyArgs";
import { EmployeeUpworkJobSearchCriterion } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterion";
import { EmployeeUpworkJobSearchCriterionWhereUniqueInput } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterionWhereUniqueInput";
import { EquipmentFindManyArgs } from "../../equipment/base/EquipmentFindManyArgs";
import { Equipment } from "../../equipment/base/Equipment";
import { EquipmentWhereUniqueInput } from "../../equipment/base/EquipmentWhereUniqueInput";
import { EquipmentSharingFindManyArgs } from "../../equipmentSharing/base/EquipmentSharingFindManyArgs";
import { EquipmentSharing } from "../../equipmentSharing/base/EquipmentSharing";
import { EquipmentSharingWhereUniqueInput } from "../../equipmentSharing/base/EquipmentSharingWhereUniqueInput";
import { EquipmentSharingPolicyFindManyArgs } from "../../equipmentSharingPolicy/base/EquipmentSharingPolicyFindManyArgs";
import { EquipmentSharingPolicy } from "../../equipmentSharingPolicy/base/EquipmentSharingPolicy";
import { EquipmentSharingPolicyWhereUniqueInput } from "../../equipmentSharingPolicy/base/EquipmentSharingPolicyWhereUniqueInput";
import { EstimateEmailFindManyArgs } from "../../estimateEmail/base/EstimateEmailFindManyArgs";
import { EstimateEmail } from "../../estimateEmail/base/EstimateEmail";
import { EstimateEmailWhereUniqueInput } from "../../estimateEmail/base/EstimateEmailWhereUniqueInput";
import { EventTypeFindManyArgs } from "../../eventType/base/EventTypeFindManyArgs";
import { EventType } from "../../eventType/base/EventType";
import { EventTypeWhereUniqueInput } from "../../eventType/base/EventTypeWhereUniqueInput";
import { ExpenseFindManyArgs } from "../../expense/base/ExpenseFindManyArgs";
import { Expense } from "../../expense/base/Expense";
import { ExpenseWhereUniqueInput } from "../../expense/base/ExpenseWhereUniqueInput";
import { ExpenseCategoryFindManyArgs } from "../../expenseCategory/base/ExpenseCategoryFindManyArgs";
import { ExpenseCategory } from "../../expenseCategory/base/ExpenseCategory";
import { ExpenseCategoryWhereUniqueInput } from "../../expenseCategory/base/ExpenseCategoryWhereUniqueInput";
import { FeatureOrganizationFindManyArgs } from "../../featureOrganization/base/FeatureOrganizationFindManyArgs";
import { FeatureOrganization } from "../../featureOrganization/base/FeatureOrganization";
import { FeatureOrganizationWhereUniqueInput } from "../../featureOrganization/base/FeatureOrganizationWhereUniqueInput";
import { GoalFindManyArgs } from "../../goal/base/GoalFindManyArgs";
import { Goal } from "../../goal/base/Goal";
import { GoalWhereUniqueInput } from "../../goal/base/GoalWhereUniqueInput";
import { GoalGeneralSettingFindManyArgs } from "../../goalGeneralSetting/base/GoalGeneralSettingFindManyArgs";
import { GoalGeneralSetting } from "../../goalGeneralSetting/base/GoalGeneralSetting";
import { GoalGeneralSettingWhereUniqueInput } from "../../goalGeneralSetting/base/GoalGeneralSettingWhereUniqueInput";
import { GoalKpiFindManyArgs } from "../../goalKpi/base/GoalKpiFindManyArgs";
import { GoalKpi } from "../../goalKpi/base/GoalKpi";
import { GoalKpiWhereUniqueInput } from "../../goalKpi/base/GoalKpiWhereUniqueInput";
import { GoalKpiTemplateFindManyArgs } from "../../goalKpiTemplate/base/GoalKpiTemplateFindManyArgs";
import { GoalKpiTemplate } from "../../goalKpiTemplate/base/GoalKpiTemplate";
import { GoalKpiTemplateWhereUniqueInput } from "../../goalKpiTemplate/base/GoalKpiTemplateWhereUniqueInput";
import { GoalTemplateFindManyArgs } from "../../goalTemplate/base/GoalTemplateFindManyArgs";
import { GoalTemplate } from "../../goalTemplate/base/GoalTemplate";
import { GoalTemplateWhereUniqueInput } from "../../goalTemplate/base/GoalTemplateWhereUniqueInput";
import { GoalTimeFrameFindManyArgs } from "../../goalTimeFrame/base/GoalTimeFrameFindManyArgs";
import { GoalTimeFrame } from "../../goalTimeFrame/base/GoalTimeFrame";
import { GoalTimeFrameWhereUniqueInput } from "../../goalTimeFrame/base/GoalTimeFrameWhereUniqueInput";
import { ImageAssetFindManyArgs } from "../../imageAsset/base/ImageAssetFindManyArgs";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { ImageAssetWhereUniqueInput } from "../../imageAsset/base/ImageAssetWhereUniqueInput";
import { ImportHistoryFindManyArgs } from "../../importHistory/base/ImportHistoryFindManyArgs";
import { ImportHistory } from "../../importHistory/base/ImportHistory";
import { ImportHistoryWhereUniqueInput } from "../../importHistory/base/ImportHistoryWhereUniqueInput";
import { ImportRecordFindManyArgs } from "../../importRecord/base/ImportRecordFindManyArgs";
import { ImportRecord } from "../../importRecord/base/ImportRecord";
import { ImportRecordWhereUniqueInput } from "../../importRecord/base/ImportRecordWhereUniqueInput";
import { IncomeFindManyArgs } from "../../income/base/IncomeFindManyArgs";
import { Income } from "../../income/base/Income";
import { IncomeWhereUniqueInput } from "../../income/base/IncomeWhereUniqueInput";
import { IntegrationEntitySettingFindManyArgs } from "../../integrationEntitySetting/base/IntegrationEntitySettingFindManyArgs";
import { IntegrationEntitySetting } from "../../integrationEntitySetting/base/IntegrationEntitySetting";
import { IntegrationEntitySettingWhereUniqueInput } from "../../integrationEntitySetting/base/IntegrationEntitySettingWhereUniqueInput";
import { IntegrationEntitySettingTiedFindManyArgs } from "../../integrationEntitySettingTied/base/IntegrationEntitySettingTiedFindManyArgs";
import { IntegrationEntitySettingTied } from "../../integrationEntitySettingTied/base/IntegrationEntitySettingTied";
import { IntegrationEntitySettingTiedWhereUniqueInput } from "../../integrationEntitySettingTied/base/IntegrationEntitySettingTiedWhereUniqueInput";
import { IntegrationMapFindManyArgs } from "../../integrationMap/base/IntegrationMapFindManyArgs";
import { IntegrationMap } from "../../integrationMap/base/IntegrationMap";
import { IntegrationMapWhereUniqueInput } from "../../integrationMap/base/IntegrationMapWhereUniqueInput";
import { IntegrationSettingFindManyArgs } from "../../integrationSetting/base/IntegrationSettingFindManyArgs";
import { IntegrationSetting } from "../../integrationSetting/base/IntegrationSetting";
import { IntegrationSettingWhereUniqueInput } from "../../integrationSetting/base/IntegrationSettingWhereUniqueInput";
import { IntegrationTenantFindManyArgs } from "../../integrationTenant/base/IntegrationTenantFindManyArgs";
import { IntegrationTenant } from "../../integrationTenant/base/IntegrationTenant";
import { IntegrationTenantWhereUniqueInput } from "../../integrationTenant/base/IntegrationTenantWhereUniqueInput";
import { InviteFindManyArgs } from "../../invite/base/InviteFindManyArgs";
import { Invite } from "../../invite/base/Invite";
import { InviteWhereUniqueInput } from "../../invite/base/InviteWhereUniqueInput";
import { InvoiceFindManyArgs } from "../../invoice/base/InvoiceFindManyArgs";
import { Invoice } from "../../invoice/base/Invoice";
import { InvoiceWhereUniqueInput } from "../../invoice/base/InvoiceWhereUniqueInput";
import { InvoiceEstimateHistoryFindManyArgs } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistoryFindManyArgs";
import { InvoiceEstimateHistory } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistory";
import { InvoiceEstimateHistoryWhereUniqueInput } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistoryWhereUniqueInput";
import { InvoiceItemFindManyArgs } from "../../invoiceItem/base/InvoiceItemFindManyArgs";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { InvoiceItemWhereUniqueInput } from "../../invoiceItem/base/InvoiceItemWhereUniqueInput";
import { IssueTypeFindManyArgs } from "../../issueType/base/IssueTypeFindManyArgs";
import { IssueType } from "../../issueType/base/IssueType";
import { IssueTypeWhereUniqueInput } from "../../issueType/base/IssueTypeWhereUniqueInput";
import { JobPresetFindManyArgs } from "../../jobPreset/base/JobPresetFindManyArgs";
import { JobPreset } from "../../jobPreset/base/JobPreset";
import { JobPresetWhereUniqueInput } from "../../jobPreset/base/JobPresetWhereUniqueInput";
import { JobPresetUpworkJobSearchCriterionFindManyArgs } from "../../jobPresetUpworkJobSearchCriterion/base/JobPresetUpworkJobSearchCriterionFindManyArgs";
import { JobPresetUpworkJobSearchCriterion } from "../../jobPresetUpworkJobSearchCriterion/base/JobPresetUpworkJobSearchCriterion";
import { JobPresetUpworkJobSearchCriterionWhereUniqueInput } from "../../jobPresetUpworkJobSearchCriterion/base/JobPresetUpworkJobSearchCriterionWhereUniqueInput";
import { JobSearchCategoryFindManyArgs } from "../../jobSearchCategory/base/JobSearchCategoryFindManyArgs";
import { JobSearchCategory } from "../../jobSearchCategory/base/JobSearchCategory";
import { JobSearchCategoryWhereUniqueInput } from "../../jobSearchCategory/base/JobSearchCategoryWhereUniqueInput";
import { JobSearchOccupationFindManyArgs } from "../../jobSearchOccupation/base/JobSearchOccupationFindManyArgs";
import { JobSearchOccupation } from "../../jobSearchOccupation/base/JobSearchOccupation";
import { JobSearchOccupationWhereUniqueInput } from "../../jobSearchOccupation/base/JobSearchOccupationWhereUniqueInput";
import { KeyResultFindManyArgs } from "../../keyResult/base/KeyResultFindManyArgs";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { KeyResultWhereUniqueInput } from "../../keyResult/base/KeyResultWhereUniqueInput";
import { KeyResultTemplateFindManyArgs } from "../../keyResultTemplate/base/KeyResultTemplateFindManyArgs";
import { KeyResultTemplate } from "../../keyResultTemplate/base/KeyResultTemplate";
import { KeyResultTemplateWhereUniqueInput } from "../../keyResultTemplate/base/KeyResultTemplateWhereUniqueInput";
import { KeyResultUpdateFindManyArgs } from "../../keyResultUpdate/base/KeyResultUpdateFindManyArgs";
import { KeyResultUpdate } from "../../keyResultUpdate/base/KeyResultUpdate";
import { KeyResultUpdateWhereUniqueInput } from "../../keyResultUpdate/base/KeyResultUpdateWhereUniqueInput";
import { KnowledgeBaseFindManyArgs } from "../../knowledgeBase/base/KnowledgeBaseFindManyArgs";
import { KnowledgeBase } from "../../knowledgeBase/base/KnowledgeBase";
import { KnowledgeBaseWhereUniqueInput } from "../../knowledgeBase/base/KnowledgeBaseWhereUniqueInput";
import { KnowledgeBaseArticleFindManyArgs } from "../../knowledgeBaseArticle/base/KnowledgeBaseArticleFindManyArgs";
import { KnowledgeBaseArticle } from "../../knowledgeBaseArticle/base/KnowledgeBaseArticle";
import { KnowledgeBaseArticleWhereUniqueInput } from "../../knowledgeBaseArticle/base/KnowledgeBaseArticleWhereUniqueInput";
import { KnowledgeBaseAuthorFindManyArgs } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthorFindManyArgs";
import { KnowledgeBaseAuthor } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthor";
import { KnowledgeBaseAuthorWhereUniqueInput } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthorWhereUniqueInput";
import { MerchantFindManyArgs } from "../../merchant/base/MerchantFindManyArgs";
import { Merchant } from "../../merchant/base/Merchant";
import { MerchantWhereUniqueInput } from "../../merchant/base/MerchantWhereUniqueInput";
import { OrganizationFindManyArgs } from "../../organization/base/OrganizationFindManyArgs";
import { Organization } from "../../organization/base/Organization";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { OrganizationAwardFindManyArgs } from "../../organizationAward/base/OrganizationAwardFindManyArgs";
import { OrganizationAward } from "../../organizationAward/base/OrganizationAward";
import { OrganizationAwardWhereUniqueInput } from "../../organizationAward/base/OrganizationAwardWhereUniqueInput";
import { OrganizationContactFindManyArgs } from "../../organizationContact/base/OrganizationContactFindManyArgs";
import { OrganizationContact } from "../../organizationContact/base/OrganizationContact";
import { OrganizationContactWhereUniqueInput } from "../../organizationContact/base/OrganizationContactWhereUniqueInput";
import { OrganizationDepartmentFindManyArgs } from "../../organizationDepartment/base/OrganizationDepartmentFindManyArgs";
import { OrganizationDepartment } from "../../organizationDepartment/base/OrganizationDepartment";
import { OrganizationDepartmentWhereUniqueInput } from "../../organizationDepartment/base/OrganizationDepartmentWhereUniqueInput";
import { OrganizationDocumentFindManyArgs } from "../../organizationDocument/base/OrganizationDocumentFindManyArgs";
import { OrganizationDocument } from "../../organizationDocument/base/OrganizationDocument";
import { OrganizationDocumentWhereUniqueInput } from "../../organizationDocument/base/OrganizationDocumentWhereUniqueInput";
import { OrganizationEmploymentTypeFindManyArgs } from "../../organizationEmploymentType/base/OrganizationEmploymentTypeFindManyArgs";
import { OrganizationEmploymentType } from "../../organizationEmploymentType/base/OrganizationEmploymentType";
import { OrganizationEmploymentTypeWhereUniqueInput } from "../../organizationEmploymentType/base/OrganizationEmploymentTypeWhereUniqueInput";
import { OrganizationLanguageFindManyArgs } from "../../organizationLanguage/base/OrganizationLanguageFindManyArgs";
import { OrganizationLanguage } from "../../organizationLanguage/base/OrganizationLanguage";
import { OrganizationLanguageWhereUniqueInput } from "../../organizationLanguage/base/OrganizationLanguageWhereUniqueInput";
import { OrganizationPositionFindManyArgs } from "../../organizationPosition/base/OrganizationPositionFindManyArgs";
import { OrganizationPosition } from "../../organizationPosition/base/OrganizationPosition";
import { OrganizationPositionWhereUniqueInput } from "../../organizationPosition/base/OrganizationPositionWhereUniqueInput";
import { OrganizationProjectFindManyArgs } from "../../organizationProject/base/OrganizationProjectFindManyArgs";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { OrganizationProjectWhereUniqueInput } from "../../organizationProject/base/OrganizationProjectWhereUniqueInput";
import { OrganizationRecurringExpenseFindManyArgs } from "../../organizationRecurringExpense/base/OrganizationRecurringExpenseFindManyArgs";
import { OrganizationRecurringExpense } from "../../organizationRecurringExpense/base/OrganizationRecurringExpense";
import { OrganizationRecurringExpenseWhereUniqueInput } from "../../organizationRecurringExpense/base/OrganizationRecurringExpenseWhereUniqueInput";
import { OrganizationSprintFindManyArgs } from "../../organizationSprint/base/OrganizationSprintFindManyArgs";
import { OrganizationSprint } from "../../organizationSprint/base/OrganizationSprint";
import { OrganizationSprintWhereUniqueInput } from "../../organizationSprint/base/OrganizationSprintWhereUniqueInput";
import { OrganizationTaskSettingFindManyArgs } from "../../organizationTaskSetting/base/OrganizationTaskSettingFindManyArgs";
import { OrganizationTaskSetting } from "../../organizationTaskSetting/base/OrganizationTaskSetting";
import { OrganizationTaskSettingWhereUniqueInput } from "../../organizationTaskSetting/base/OrganizationTaskSettingWhereUniqueInput";
import { OrganizationTeamFindManyArgs } from "../../organizationTeam/base/OrganizationTeamFindManyArgs";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { OrganizationTeamWhereUniqueInput } from "../../organizationTeam/base/OrganizationTeamWhereUniqueInput";
import { OrganizationTeamEmployeeFindManyArgs } from "../../organizationTeamEmployee/base/OrganizationTeamEmployeeFindManyArgs";
import { OrganizationTeamEmployee } from "../../organizationTeamEmployee/base/OrganizationTeamEmployee";
import { OrganizationTeamEmployeeWhereUniqueInput } from "../../organizationTeamEmployee/base/OrganizationTeamEmployeeWhereUniqueInput";
import { OrganizationTeamJoinRequestFindManyArgs } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequestFindManyArgs";
import { OrganizationTeamJoinRequest } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequest";
import { OrganizationTeamJoinRequestWhereUniqueInput } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequestWhereUniqueInput";
import { OrganizationVendorFindManyArgs } from "../../organizationVendor/base/OrganizationVendorFindManyArgs";
import { OrganizationVendor } from "../../organizationVendor/base/OrganizationVendor";
import { OrganizationVendorWhereUniqueInput } from "../../organizationVendor/base/OrganizationVendorWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { PipelineFindManyArgs } from "../../pipeline/base/PipelineFindManyArgs";
import { Pipeline } from "../../pipeline/base/Pipeline";
import { PipelineWhereUniqueInput } from "../../pipeline/base/PipelineWhereUniqueInput";
import { PipelineStageFindManyArgs } from "../../pipelineStage/base/PipelineStageFindManyArgs";
import { PipelineStage } from "../../pipelineStage/base/PipelineStage";
import { PipelineStageWhereUniqueInput } from "../../pipelineStage/base/PipelineStageWhereUniqueInput";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { ProductWhereUniqueInput } from "../../product/base/ProductWhereUniqueInput";
import { ProductCategoryFindManyArgs } from "../../productCategory/base/ProductCategoryFindManyArgs";
import { ProductCategory } from "../../productCategory/base/ProductCategory";
import { ProductCategoryWhereUniqueInput } from "../../productCategory/base/ProductCategoryWhereUniqueInput";
import { ProductCategoryTranslationFindManyArgs } from "../../productCategoryTranslation/base/ProductCategoryTranslationFindManyArgs";
import { ProductCategoryTranslation } from "../../productCategoryTranslation/base/ProductCategoryTranslation";
import { ProductCategoryTranslationWhereUniqueInput } from "../../productCategoryTranslation/base/ProductCategoryTranslationWhereUniqueInput";
import { ProductOptionFindManyArgs } from "../../productOption/base/ProductOptionFindManyArgs";
import { ProductOption } from "../../productOption/base/ProductOption";
import { ProductOptionWhereUniqueInput } from "../../productOption/base/ProductOptionWhereUniqueInput";
import { ProductOptionGroupFindManyArgs } from "../../productOptionGroup/base/ProductOptionGroupFindManyArgs";
import { ProductOptionGroup } from "../../productOptionGroup/base/ProductOptionGroup";
import { ProductOptionGroupWhereUniqueInput } from "../../productOptionGroup/base/ProductOptionGroupWhereUniqueInput";
import { ProductOptionGroupTranslationFindManyArgs } from "../../productOptionGroupTranslation/base/ProductOptionGroupTranslationFindManyArgs";
import { ProductOptionGroupTranslation } from "../../productOptionGroupTranslation/base/ProductOptionGroupTranslation";
import { ProductOptionGroupTranslationWhereUniqueInput } from "../../productOptionGroupTranslation/base/ProductOptionGroupTranslationWhereUniqueInput";
import { ProductOptionTranslationFindManyArgs } from "../../productOptionTranslation/base/ProductOptionTranslationFindManyArgs";
import { ProductOptionTranslation } from "../../productOptionTranslation/base/ProductOptionTranslation";
import { ProductOptionTranslationWhereUniqueInput } from "../../productOptionTranslation/base/ProductOptionTranslationWhereUniqueInput";
import { ProductTranslationFindManyArgs } from "../../productTranslation/base/ProductTranslationFindManyArgs";
import { ProductTranslation } from "../../productTranslation/base/ProductTranslation";
import { ProductTranslationWhereUniqueInput } from "../../productTranslation/base/ProductTranslationWhereUniqueInput";
import { ProductTypeFindManyArgs } from "../../productType/base/ProductTypeFindManyArgs";
import { ProductType } from "../../productType/base/ProductType";
import { ProductTypeWhereUniqueInput } from "../../productType/base/ProductTypeWhereUniqueInput";
import { ProductTypeTranslationFindManyArgs } from "../../productTypeTranslation/base/ProductTypeTranslationFindManyArgs";
import { ProductTypeTranslation } from "../../productTypeTranslation/base/ProductTypeTranslation";
import { ProductTypeTranslationWhereUniqueInput } from "../../productTypeTranslation/base/ProductTypeTranslationWhereUniqueInput";
import { ProductVariantFindManyArgs } from "../../productVariant/base/ProductVariantFindManyArgs";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { ProductVariantWhereUniqueInput } from "../../productVariant/base/ProductVariantWhereUniqueInput";
import { ProductVariantPriceFindManyArgs } from "../../productVariantPrice/base/ProductVariantPriceFindManyArgs";
import { ProductVariantPrice } from "../../productVariantPrice/base/ProductVariantPrice";
import { ProductVariantPriceWhereUniqueInput } from "../../productVariantPrice/base/ProductVariantPriceWhereUniqueInput";
import { ProductVariantSettingFindManyArgs } from "../../productVariantSetting/base/ProductVariantSettingFindManyArgs";
import { ProductVariantSetting } from "../../productVariantSetting/base/ProductVariantSetting";
import { ProductVariantSettingWhereUniqueInput } from "../../productVariantSetting/base/ProductVariantSettingWhereUniqueInput";
import { ProposalFindManyArgs } from "../../proposal/base/ProposalFindManyArgs";
import { Proposal } from "../../proposal/base/Proposal";
import { ProposalWhereUniqueInput } from "../../proposal/base/ProposalWhereUniqueInput";
import { ReportOrganizationFindManyArgs } from "../../reportOrganization/base/ReportOrganizationFindManyArgs";
import { ReportOrganization } from "../../reportOrganization/base/ReportOrganization";
import { ReportOrganizationWhereUniqueInput } from "../../reportOrganization/base/ReportOrganizationWhereUniqueInput";
import { RequestApprovalFindManyArgs } from "../../requestApproval/base/RequestApprovalFindManyArgs";
import { RequestApproval } from "../../requestApproval/base/RequestApproval";
import { RequestApprovalWhereUniqueInput } from "../../requestApproval/base/RequestApprovalWhereUniqueInput";
import { RequestApprovalEmployeeFindManyArgs } from "../../requestApprovalEmployee/base/RequestApprovalEmployeeFindManyArgs";
import { RequestApprovalEmployee } from "../../requestApprovalEmployee/base/RequestApprovalEmployee";
import { RequestApprovalEmployeeWhereUniqueInput } from "../../requestApprovalEmployee/base/RequestApprovalEmployeeWhereUniqueInput";
import { RequestApprovalTeamFindManyArgs } from "../../requestApprovalTeam/base/RequestApprovalTeamFindManyArgs";
import { RequestApprovalTeam } from "../../requestApprovalTeam/base/RequestApprovalTeam";
import { RequestApprovalTeamWhereUniqueInput } from "../../requestApprovalTeam/base/RequestApprovalTeamWhereUniqueInput";
import { RoleFindManyArgs } from "../../role/base/RoleFindManyArgs";
import { Role } from "../../role/base/Role";
import { RoleWhereUniqueInput } from "../../role/base/RoleWhereUniqueInput";
import { RolePermissionFindManyArgs } from "../../rolePermission/base/RolePermissionFindManyArgs";
import { RolePermission } from "../../rolePermission/base/RolePermission";
import { RolePermissionWhereUniqueInput } from "../../rolePermission/base/RolePermissionWhereUniqueInput";
import { ScreenshotFindManyArgs } from "../../screenshot/base/ScreenshotFindManyArgs";
import { Screenshot } from "../../screenshot/base/Screenshot";
import { ScreenshotWhereUniqueInput } from "../../screenshot/base/ScreenshotWhereUniqueInput";
import { SkillFindManyArgs } from "../../skill/base/SkillFindManyArgs";
import { Skill } from "../../skill/base/Skill";
import { SkillWhereUniqueInput } from "../../skill/base/SkillWhereUniqueInput";
import { TagFindManyArgs } from "../../tag/base/TagFindManyArgs";
import { Tag } from "../../tag/base/Tag";
import { TagWhereUniqueInput } from "../../tag/base/TagWhereUniqueInput";
import { TaskFindManyArgs } from "../../task/base/TaskFindManyArgs";
import { Task } from "../../task/base/Task";
import { TaskWhereUniqueInput } from "../../task/base/TaskWhereUniqueInput";
import { TaskLinkedIssueFindManyArgs } from "../../taskLinkedIssue/base/TaskLinkedIssueFindManyArgs";
import { TaskLinkedIssue } from "../../taskLinkedIssue/base/TaskLinkedIssue";
import { TaskLinkedIssueWhereUniqueInput } from "../../taskLinkedIssue/base/TaskLinkedIssueWhereUniqueInput";
import { TaskPriorityFindManyArgs } from "../../taskPriority/base/TaskPriorityFindManyArgs";
import { TaskPriority } from "../../taskPriority/base/TaskPriority";
import { TaskPriorityWhereUniqueInput } from "../../taskPriority/base/TaskPriorityWhereUniqueInput";
import { TaskRelatedIssueTypeFindManyArgs } from "../../taskRelatedIssueType/base/TaskRelatedIssueTypeFindManyArgs";
import { TaskRelatedIssueType } from "../../taskRelatedIssueType/base/TaskRelatedIssueType";
import { TaskRelatedIssueTypeWhereUniqueInput } from "../../taskRelatedIssueType/base/TaskRelatedIssueTypeWhereUniqueInput";
import { TaskSizeFindManyArgs } from "../../taskSize/base/TaskSizeFindManyArgs";
import { TaskSize } from "../../taskSize/base/TaskSize";
import { TaskSizeWhereUniqueInput } from "../../taskSize/base/TaskSizeWhereUniqueInput";
import { TaskStatusFindManyArgs } from "../../taskStatus/base/TaskStatusFindManyArgs";
import { TaskStatus } from "../../taskStatus/base/TaskStatus";
import { TaskStatusWhereUniqueInput } from "../../taskStatus/base/TaskStatusWhereUniqueInput";
import { TaskVersionFindManyArgs } from "../../taskVersion/base/TaskVersionFindManyArgs";
import { TaskVersion } from "../../taskVersion/base/TaskVersion";
import { TaskVersionWhereUniqueInput } from "../../taskVersion/base/TaskVersionWhereUniqueInput";
import { TenantSettingFindManyArgs } from "../../tenantSetting/base/TenantSettingFindManyArgs";
import { TenantSetting } from "../../tenantSetting/base/TenantSetting";
import { TenantSettingWhereUniqueInput } from "../../tenantSetting/base/TenantSettingWhereUniqueInput";
import { TimeLogFindManyArgs } from "../../timeLog/base/TimeLogFindManyArgs";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { TimeLogWhereUniqueInput } from "../../timeLog/base/TimeLogWhereUniqueInput";
import { TimeOffPolicyFindManyArgs } from "../../timeOffPolicy/base/TimeOffPolicyFindManyArgs";
import { TimeOffPolicy } from "../../timeOffPolicy/base/TimeOffPolicy";
import { TimeOffPolicyWhereUniqueInput } from "../../timeOffPolicy/base/TimeOffPolicyWhereUniqueInput";
import { TimeOffRequestFindManyArgs } from "../../timeOffRequest/base/TimeOffRequestFindManyArgs";
import { TimeOffRequest } from "../../timeOffRequest/base/TimeOffRequest";
import { TimeOffRequestWhereUniqueInput } from "../../timeOffRequest/base/TimeOffRequestWhereUniqueInput";
import { TimeSlotFindManyArgs } from "../../timeSlot/base/TimeSlotFindManyArgs";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { TimeSlotWhereUniqueInput } from "../../timeSlot/base/TimeSlotWhereUniqueInput";
import { TimeSlotMinuteFindManyArgs } from "../../timeSlotMinute/base/TimeSlotMinuteFindManyArgs";
import { TimeSlotMinute } from "../../timeSlotMinute/base/TimeSlotMinute";
import { TimeSlotMinuteWhereUniqueInput } from "../../timeSlotMinute/base/TimeSlotMinuteWhereUniqueInput";
import { TimesheetFindManyArgs } from "../../timesheet/base/TimesheetFindManyArgs";
import { Timesheet } from "../../timesheet/base/Timesheet";
import { TimesheetWhereUniqueInput } from "../../timesheet/base/TimesheetWhereUniqueInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { UserOrganizationFindManyArgs } from "../../userOrganization/base/UserOrganizationFindManyArgs";
import { UserOrganization } from "../../userOrganization/base/UserOrganization";
import { UserOrganizationWhereUniqueInput } from "../../userOrganization/base/UserOrganizationWhereUniqueInput";
import { WarehouseFindManyArgs } from "../../warehouse/base/WarehouseFindManyArgs";
import { Warehouse } from "../../warehouse/base/Warehouse";
import { WarehouseWhereUniqueInput } from "../../warehouse/base/WarehouseWhereUniqueInput";
import { WarehouseProductFindManyArgs } from "../../warehouseProduct/base/WarehouseProductFindManyArgs";
import { WarehouseProduct } from "../../warehouseProduct/base/WarehouseProduct";
import { WarehouseProductWhereUniqueInput } from "../../warehouseProduct/base/WarehouseProductWhereUniqueInput";
import { WarehouseProductVariantFindManyArgs } from "../../warehouseProductVariant/base/WarehouseProductVariantFindManyArgs";
import { WarehouseProductVariant } from "../../warehouseProductVariant/base/WarehouseProductVariant";
import { WarehouseProductVariantWhereUniqueInput } from "../../warehouseProductVariant/base/WarehouseProductVariantWhereUniqueInput";

export class TenantControllerBase {
  constructor(protected readonly service: TenantService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tenant })
  async create(@common.Body() data: TenantCreateInput): Promise<Tenant> {
    return await this.service.create({
      data: {
        ...data,

        imageAssetTenantImageIdToimageAsset:
          data.imageAssetTenantImageIdToimageAsset
            ? {
                connect: data.imageAssetTenantImageIdToimageAsset,
              }
            : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        logo: true,

        imageAssetTenantImageIdToimageAsset: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Tenant] })
  @ApiNestedQuery(TenantFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Tenant[]> {
    const args = plainToClass(TenantFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        logo: true,

        imageAssetTenantImageIdToimageAsset: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tenant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Tenant | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        logo: true,

        imageAssetTenantImageIdToimageAsset: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tenant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() data: TenantUpdateInput
  ): Promise<Tenant | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          imageAssetTenantImageIdToimageAsset:
            data.imageAssetTenantImageIdToimageAsset
              ? {
                  connect: data.imageAssetTenantImageIdToimageAsset,
                }
              : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          logo: true,

          imageAssetTenantImageIdToimageAsset: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tenant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Tenant | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          logo: true,

          imageAssetTenantImageIdToimageAsset: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/accountingTemplate")
  @ApiNestedQuery(AccountingTemplateFindManyArgs)
  async findManyAccountingTemplate(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<AccountingTemplate[]> {
    const query = plainToClass(AccountingTemplateFindManyArgs, request.query);
    const results = await this.service.findAccountingTemplate(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        languageCode: true,
        mjml: true,
        hbs: true,
        templateType: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accountingTemplate")
  async connectAccountingTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AccountingTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountingTemplate: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accountingTemplate")
  async updateAccountingTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AccountingTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountingTemplate: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accountingTemplate")
  async disconnectAccountingTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AccountingTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountingTemplate: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/activity")
  @ApiNestedQuery(ActivityFindManyArgs)
  async findManyActivity(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Activity[]> {
    const query = plainToClass(ActivityFindManyArgs, request.query);
    const results = await this.service.findActivity(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        metaData: true,
        date: true,
        time: true,
        duration: true,
        typeField: true,
        source: true,
        deletedAt: true,
        recordedAt: true,

        task: {
          select: {
            id: true,
          },
        },

        timeSlot: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/activity")
  async connectActivity(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/activity")
  async updateActivity(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/activity")
  async disconnectActivity(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/appointmentEmployee")
  @ApiNestedQuery(AppointmentEmployeeFindManyArgs)
  async findManyAppointmentEmployee(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<AppointmentEmployee[]> {
    const query = plainToClass(AppointmentEmployeeFindManyArgs, request.query);
    const results = await this.service.findAppointmentEmployee(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        appointmentId: true,

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        employeeAppointment: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/appointmentEmployee")
  async connectAppointmentEmployee(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AppointmentEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/appointmentEmployee")
  async updateAppointmentEmployee(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AppointmentEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/appointmentEmployee")
  async disconnectAppointmentEmployee(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AppointmentEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/approvalPolicy")
  @ApiNestedQuery(ApprovalPolicyFindManyArgs)
  async findManyApprovalPolicy(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ApprovalPolicy[]> {
    const query = plainToClass(ApprovalPolicyFindManyArgs, request.query);
    const results = await this.service.findApprovalPolicy(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        approvalType: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/approvalPolicy")
  async connectApprovalPolicy(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ApprovalPolicyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approvalPolicy: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/approvalPolicy")
  async updateApprovalPolicy(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ApprovalPolicyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approvalPolicy: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/approvalPolicy")
  async disconnectApprovalPolicy(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ApprovalPolicyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approvalPolicy: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/availabilitySlot")
  @ApiNestedQuery(AvailabilitySlotFindManyArgs)
  async findManyAvailabilitySlot(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<AvailabilitySlot[]> {
    const query = plainToClass(AvailabilitySlotFindManyArgs, request.query);
    const results = await this.service.findAvailabilitySlot(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,
        allDay: true,
        typeField: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/availabilitySlot")
  async connectAvailabilitySlot(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AvailabilitySlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availabilitySlot: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/availabilitySlot")
  async updateAvailabilitySlot(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AvailabilitySlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availabilitySlot: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/availabilitySlot")
  async disconnectAvailabilitySlot(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AvailabilitySlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availabilitySlot: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidate")
  @ApiNestedQuery(CandidateFindManyArgs)
  async findManyCandidate(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Candidate[]> {
    const query = plainToClass(CandidateFindManyArgs, request.query);
    const results = await this.service.findCandidate(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        rating: true,
        valueDate: true,
        appliedDate: true,
        hiredDate: true,
        status: true,
        rejectDate: true,
        candidateLevel: true,
        reWeeklyLimit: true,
        billRateCurrency: true,
        billRateValue: true,
        payPeriod: true,
        cvUrl: true,
        isArchived: true,
        minimumBillingRate: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationPosition: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        candidateSource: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidate")
  async connectCandidate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidate: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidate")
  async updateCandidate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidate: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidate")
  async disconnectCandidate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidate: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateCriterionRating")
  @ApiNestedQuery(CandidateCriterionRatingFindManyArgs)
  async findManyCandidateCriterionRating(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<CandidateCriterionRating[]> {
    const query = plainToClass(
      CandidateCriterionRatingFindManyArgs,
      request.query
    );
    const results = await this.service.findCandidateCriterionRating(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        rating: true,

        candidateFeedback: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        candidatePersonalQuality: {
          select: {
            id: true,
          },
        },

        candidateTechnology: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateCriterionRating")
  async connectCandidateCriterionRating(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateCriterionRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateCriterionRating: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateCriterionRating")
  async updateCandidateCriterionRating(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateCriterionRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateCriterionRating: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateCriterionRating")
  async disconnectCandidateCriterionRating(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateCriterionRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateCriterionRating: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateDocument")
  @ApiNestedQuery(CandidateDocumentFindManyArgs)
  async findManyCandidateDocument(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<CandidateDocument[]> {
    const query = plainToClass(CandidateDocumentFindManyArgs, request.query);
    const results = await this.service.findCandidateDocument(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        documentUrl: true,

        candidate: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateDocument")
  async connectCandidateDocument(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateDocument: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateDocument")
  async updateCandidateDocument(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateDocument: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateDocument")
  async disconnectCandidateDocument(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateDocument: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateEducation")
  @ApiNestedQuery(CandidateEducationFindManyArgs)
  async findManyCandidateEducation(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<CandidateEducation[]> {
    const query = plainToClass(CandidateEducationFindManyArgs, request.query);
    const results = await this.service.findCandidateEducation(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        schoolName: true,
        degree: true,
        field: true,
        completionDate: true,
        notes: true,

        tenant: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateEducation")
  async connectCandidateEducation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateEducationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateEducation: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateEducation")
  async updateCandidateEducation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateEducationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateEducation: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateEducation")
  async disconnectCandidateEducation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateEducationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateEducation: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateExperience")
  @ApiNestedQuery(CandidateExperienceFindManyArgs)
  async findManyCandidateExperience(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<CandidateExperience[]> {
    const query = plainToClass(CandidateExperienceFindManyArgs, request.query);
    const results = await this.service.findCandidateExperience(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        occupation: true,
        duration: true,
        description: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateExperience")
  async connectCandidateExperience(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateExperience: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateExperience")
  async updateCandidateExperience(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateExperience: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateExperience")
  async disconnectCandidateExperience(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateExperience: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateFeedback")
  @ApiNestedQuery(CandidateFeedbackFindManyArgs)
  async findManyCandidateFeedback(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<CandidateFeedback[]> {
    const query = plainToClass(CandidateFeedbackFindManyArgs, request.query);
    const results = await this.service.findCandidateFeedback(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        rating: true,
        status: true,

        candidateInterview: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        candidateInterviewer: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateFeedback")
  async connectCandidateFeedback(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateFeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateFeedback: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateFeedback")
  async updateCandidateFeedback(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateFeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateFeedback: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateFeedback")
  async disconnectCandidateFeedback(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateFeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateFeedback: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateInterview")
  @ApiNestedQuery(CandidateInterviewFindManyArgs)
  async findManyCandidateInterview(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<CandidateInterview[]> {
    const query = plainToClass(CandidateInterviewFindManyArgs, request.query);
    const results = await this.service.findCandidateInterview(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        startTime: true,
        endTime: true,
        location: true,
        note: true,
        isArchived: true,
        rating: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateInterview")
  async connectCandidateInterview(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateInterviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateInterview: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateInterview")
  async updateCandidateInterview(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateInterviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateInterview: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateInterview")
  async disconnectCandidateInterview(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateInterviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateInterview: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateInterviewer")
  @ApiNestedQuery(CandidateInterviewerFindManyArgs)
  async findManyCandidateInterviewer(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<CandidateInterviewer[]> {
    const query = plainToClass(CandidateInterviewerFindManyArgs, request.query);
    const results = await this.service.findCandidateInterviewer(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        organization: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        candidateInterview: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        candidateFeedback: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateInterviewer")
  async connectCandidateInterviewer(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateInterviewerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateInterviewer: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateInterviewer")
  async updateCandidateInterviewer(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateInterviewerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateInterviewer: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateInterviewer")
  async disconnectCandidateInterviewer(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateInterviewerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateInterviewer: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidatePersonalQuality")
  @ApiNestedQuery(CandidatePersonalQualityFindManyArgs)
  async findManyCandidatePersonalQuality(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<CandidatePersonalQuality[]> {
    const query = plainToClass(
      CandidatePersonalQualityFindManyArgs,
      request.query
    );
    const results = await this.service.findCandidatePersonalQuality(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        rating: true,

        tenant: {
          select: {
            id: true,
          },
        },

        candidateInterview: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidatePersonalQuality")
  async connectCandidatePersonalQuality(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidatePersonalQualityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidatePersonalQuality: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidatePersonalQuality")
  async updateCandidatePersonalQuality(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidatePersonalQualityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidatePersonalQuality: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidatePersonalQuality")
  async disconnectCandidatePersonalQuality(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidatePersonalQualityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidatePersonalQuality: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateSkill")
  @ApiNestedQuery(CandidateSkillFindManyArgs)
  async findManyCandidateSkill(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<CandidateSkill[]> {
    const query = plainToClass(CandidateSkillFindManyArgs, request.query);
    const results = await this.service.findCandidateSkill(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        candidate: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateSkill")
  async connectCandidateSkill(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateSkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateSkill: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateSkill")
  async updateCandidateSkill(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateSkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateSkill: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateSkill")
  async disconnectCandidateSkill(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateSkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateSkill: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateSource")
  @ApiNestedQuery(CandidateSourceFindManyArgs)
  async findManyCandidateSource(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<CandidateSource[]> {
    const query = plainToClass(CandidateSourceFindManyArgs, request.query);
    const results = await this.service.findCandidateSource(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateSource")
  async connectCandidateSource(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateSourceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateSource: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateSource")
  async updateCandidateSource(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateSourceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateSource: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateSource")
  async disconnectCandidateSource(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateSourceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateSource: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/candidateTechnology")
  @ApiNestedQuery(CandidateTechnologyFindManyArgs)
  async findManyCandidateTechnology(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<CandidateTechnology[]> {
    const query = plainToClass(CandidateTechnologyFindManyArgs, request.query);
    const results = await this.service.findCandidateTechnology(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        rating: true,

        candidateInterview: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateTechnology")
  async connectCandidateTechnology(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateTechnologyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateTechnology: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateTechnology")
  async updateCandidateTechnology(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateTechnologyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateTechnology: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateTechnology")
  async disconnectCandidateTechnology(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CandidateTechnologyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateTechnology: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/changelog")
  @ApiNestedQuery(ChangelogFindManyArgs)
  async findManyChangelog(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Changelog[]> {
    const query = plainToClass(ChangelogFindManyArgs, request.query);
    const results = await this.service.findChangelog(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        icon: true,
        title: true,
        date: true,
        content: true,
        learnMoreUrl: true,
        isFeature: true,
        imageUrl: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/changelog")
  async connectChangelog(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ChangelogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      changelog: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/changelog")
  async updateChangelog(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ChangelogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      changelog: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/changelog")
  async disconnectChangelog(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ChangelogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      changelog: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/contact")
  @ApiNestedQuery(ContactFindManyArgs)
  async findManyContact(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Contact[]> {
    const query = plainToClass(ContactFindManyArgs, request.query);
    const results = await this.service.findContact(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        firstName: true,
        lastName: true,
        country: true,
        city: true,
        address: true,
        address2: true,
        postcode: true,
        regionCode: true,
        fax: true,
        fiscalInformation: true,
        website: true,
        latitude: true,
        longitude: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organizationContactOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        merchant: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        warehouse: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contact")
  async connectContact(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contact: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contact")
  async updateContact(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contact: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contact")
  async disconnectContact(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contact: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/customSmtp")
  @ApiNestedQuery(CustomSmtpFindManyArgs)
  async findManyCustomSmtp(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<CustomSmtp[]> {
    const query = plainToClass(CustomSmtpFindManyArgs, request.query);
    const results = await this.service.findCustomSmtp(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        host: true,
        port: true,
        secure: true,
        username: true,
        password: true,
        isValidate: true,
        fromAddress: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customSmtp")
  async connectCustomSmtp(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CustomSmtpWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customSmtp: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customSmtp")
  async updateCustomSmtp(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CustomSmtpWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customSmtp: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customSmtp")
  async disconnectCustomSmtp(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CustomSmtpWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customSmtp: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/deal")
  @ApiNestedQuery(DealFindManyArgs)
  async findManyDeal(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Deal[]> {
    const query = plainToClass(DealFindManyArgs, request.query);
    const results = await this.service.findDeal(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        probability: true,

        organizationContact: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        pipelineStage: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/deal")
  async connectDeal(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: DealWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deal: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/deal")
  async updateDeal(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: DealWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deal: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/deal")
  async disconnectDeal(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: DealWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deal: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/emailReset")
  @ApiNestedQuery(EmailResetFindManyArgs)
  async findManyEmailReset(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmailReset[]> {
    const query = plainToClass(EmailResetFindManyArgs, request.query);
    const results = await this.service.findEmailReset(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        oldEmail: true,
        code: true,
        token: true,
        expiredAt: true,

        tenant: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/emailReset")
  async connectEmailReset(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmailResetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailReset: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/emailReset")
  async updateEmailReset(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmailResetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailReset: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/emailReset")
  async disconnectEmailReset(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmailResetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailReset: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/emailSent")
  @ApiNestedQuery(EmailSentFindManyArgs)
  async findManyEmailSent(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmailSent[]> {
    const query = plainToClass(EmailSentFindManyArgs, request.query);
    const results = await this.service.findEmailSent(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        content: true,
        email: true,
        isArchived: true,

        tenant: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        emailTemplate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/emailSent")
  async connectEmailSent(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmailSentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailSent: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/emailSent")
  async updateEmailSent(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmailSentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailSent: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/emailSent")
  async disconnectEmailSent(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmailSentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailSent: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/emailTemplate")
  @ApiNestedQuery(EmailTemplateFindManyArgs)
  async findManyEmailTemplate(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmailTemplate[]> {
    const query = plainToClass(EmailTemplateFindManyArgs, request.query);
    const results = await this.service.findEmailTemplate(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        languageCode: true,
        mjml: true,
        hbs: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/emailTemplate")
  async connectEmailTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmailTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailTemplate: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/emailTemplate")
  async updateEmailTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmailTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailTemplate: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/emailTemplate")
  async disconnectEmailTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmailTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailTemplate: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employee")
  @ApiNestedQuery(EmployeeFindManyArgs)
  async findManyEmployee(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Employee[]> {
    const query = plainToClass(EmployeeFindManyArgs, request.query);
    const results = await this.service.findEmployee(params.id, {
      ...query,
      select: {
        endWork: true,
        facebookUrl: true,
        githubUrl: true,
        gitlabUrl: true,
        id: true,
        instagramUrl: true,
        isActive: true,
        isAway: true,
        isJobSearchActive: true,
        isOnline: true,
        isTrackingEnabled: true,
        isTrackingTime: true,
        isVerified: true,
        isVetted: true,
        jobSuccess: true,
        acceptDate: true,
        allowScreenshotCapture: true,
        anonymousBonus: true,
        averageBonus: true,
        averageExpenses: true,
        averageIncome: true,
        billRateCurrency: true,
        billRateValue: true,

        candidate: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deletedAt: true,
        description: true,
        employeeLevel: true,
        linkedInId: true,
        linkedInUrl: true,
        minimumBillingRate: true,
        offerDate: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationPosition: {
          select: {
            id: true,
          },
        },

        payPeriod: true,
        profileLink: true,
        rejectDate: true,
        reWeeklyLimit: true,
        shortDescription: true,
        showAnonymousBonus: true,
        showAverageBonus: true,
        showAverageExpenses: true,
        showAverageIncome: true,
        showBillrate: true,
        showPayperiod: true,
        showStartWorkOn: true,
        stackoverflowUrl: true,
        startedWorkOn: true,

        tenant: {
          select: {
            id: true,
          },
        },

        totalJobs: true,
        totalWorkHours: true,
        twitterUrl: true,
        updatedAt: true,
        upworkId: true,
        upworkUrl: true,

        user: {
          select: {
            id: true,
          },
        },

        valueDate: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employee")
  async connectEmployee(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employee")
  async updateEmployee(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employee")
  async disconnectEmployee(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeAppointment")
  @ApiNestedQuery(EmployeeAppointmentFindManyArgs)
  async findManyEmployeeAppointment(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmployeeAppointment[]> {
    const query = plainToClass(EmployeeAppointmentFindManyArgs, request.query);
    const results = await this.service.findEmployeeAppointment(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        agenda: true,
        description: true,
        location: true,
        startDateTime: true,
        endDateTime: true,
        bufferTimeStart: true,
        bufferTimeEnd: true,
        bufferTimeInMins: true,
        breakTimeInMins: true,
        breakStartTime: true,
        emails: true,
        status: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeAppointment")
  async connectEmployeeAppointment(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeAppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeAppointment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeAppointment")
  async updateEmployeeAppointment(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeAppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeAppointment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeAppointment")
  async disconnectEmployeeAppointment(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeAppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeAppointment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeAward")
  @ApiNestedQuery(EmployeeAwardFindManyArgs)
  async findManyEmployeeAward(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmployeeAward[]> {
    const query = plainToClass(EmployeeAwardFindManyArgs, request.query);
    const results = await this.service.findEmployeeAward(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        year: true,

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeAward")
  async connectEmployeeAward(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeAwardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeAward: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeAward")
  async updateEmployeeAward(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeAwardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeAward: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeAward")
  async disconnectEmployeeAward(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeAwardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeAward: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeLevel")
  @ApiNestedQuery(EmployeeLevelFindManyArgs)
  async findManyEmployeeLevel(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmployeeLevel[]> {
    const query = plainToClass(EmployeeLevelFindManyArgs, request.query);
    const results = await this.service.findEmployeeLevel(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        level: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeLevel")
  async connectEmployeeLevel(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeLevelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeLevel: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeLevel")
  async updateEmployeeLevel(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeLevelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeLevel: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeLevel")
  async disconnectEmployeeLevel(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeLevelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeLevel: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeePhone")
  @ApiNestedQuery(EmployeePhoneFindManyArgs)
  async findManyEmployeePhone(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmployeePhone[]> {
    const query = plainToClass(EmployeePhoneFindManyArgs, request.query);
    const results = await this.service.findEmployeePhone(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        phoneNumber: true,

        organization: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeePhone")
  async connectEmployeePhone(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeePhoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeePhone: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeePhone")
  async updateEmployeePhone(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeePhoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeePhone: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeePhone")
  async disconnectEmployeePhone(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeePhoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeePhone: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeProposalTemplate")
  @ApiNestedQuery(EmployeeProposalTemplateFindManyArgs)
  async findManyEmployeeProposalTemplate(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmployeeProposalTemplate[]> {
    const query = plainToClass(
      EmployeeProposalTemplateFindManyArgs,
      request.query
    );
    const results = await this.service.findEmployeeProposalTemplate(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        content: true,
        isDefault: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeProposalTemplate")
  async connectEmployeeProposalTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeProposalTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeProposalTemplate: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeProposalTemplate")
  async updateEmployeeProposalTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeProposalTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeProposalTemplate: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeProposalTemplate")
  async disconnectEmployeeProposalTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeProposalTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeProposalTemplate: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeRecurringExpense")
  @ApiNestedQuery(EmployeeRecurringExpenseFindManyArgs)
  async findManyEmployeeRecurringExpense(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmployeeRecurringExpense[]> {
    const query = plainToClass(
      EmployeeRecurringExpenseFindManyArgs,
      request.query
    );
    const results = await this.service.findEmployeeRecurringExpense(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startDay: true,
        startMonth: true,
        startYear: true,
        startDate: true,
        endDay: true,
        endMonth: true,
        endYear: true,
        endDate: true,
        categoryName: true,
        value: true,
        currency: true,
        parentRecurringExpenseId: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeRecurringExpense")
  async connectEmployeeRecurringExpense(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeRecurringExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeRecurringExpense: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeRecurringExpense")
  async updateEmployeeRecurringExpense(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeRecurringExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeRecurringExpense: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeRecurringExpense")
  async disconnectEmployeeRecurringExpense(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeRecurringExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeRecurringExpense: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeSetting")
  @ApiNestedQuery(EmployeeSettingFindManyArgs)
  async findManyEmployeeSetting(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmployeeSetting[]> {
    const query = plainToClass(EmployeeSettingFindManyArgs, request.query);
    const results = await this.service.findEmployeeSetting(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        month: true,
        year: true,
        settingType: true,
        value: true,
        currency: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeSetting")
  async connectEmployeeSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeSetting: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeSetting")
  async updateEmployeeSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeSetting: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeSetting")
  async disconnectEmployeeSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeSetting: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeUpworkJobSearchCriterion")
  @ApiNestedQuery(EmployeeUpworkJobSearchCriterionFindManyArgs)
  async findManyEmployeeUpworkJobSearchCriterion(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmployeeUpworkJobSearchCriterion[]> {
    const query = plainToClass(
      EmployeeUpworkJobSearchCriterionFindManyArgs,
      request.query
    );
    const results = await this.service.findEmployeeUpworkJobSearchCriterion(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          keyword: true,
          jobType: true,

          jobPreset: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          jobSearchOccupation: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          jobSearchCategory: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeUpworkJobSearchCriterion")
  async connectEmployeeUpworkJobSearchCriterion(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeUpworkJobSearchCriterionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeUpworkJobSearchCriterion: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeUpworkJobSearchCriterion")
  async updateEmployeeUpworkJobSearchCriterion(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeUpworkJobSearchCriterionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeUpworkJobSearchCriterion: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeUpworkJobSearchCriterion")
  async disconnectEmployeeUpworkJobSearchCriterion(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeUpworkJobSearchCriterionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeUpworkJobSearchCriterion: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/equipment")
  @ApiNestedQuery(EquipmentFindManyArgs)
  async findManyEquipment(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Equipment[]> {
    const query = plainToClass(EquipmentFindManyArgs, request.query);
    const results = await this.service.findEquipment(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,
        serialNumber: true,
        manufacturedYear: true,
        initialCost: true,
        currency: true,
        maxSharePeriod: true,
        autoApproveShare: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/equipment")
  async connectEquipment(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EquipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/equipment")
  async updateEquipment(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EquipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/equipment")
  async disconnectEquipment(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EquipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/equipmentSharing")
  @ApiNestedQuery(EquipmentSharingFindManyArgs)
  async findManyEquipmentSharing(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EquipmentSharing[]> {
    const query = plainToClass(EquipmentSharingFindManyArgs, request.query);
    const results = await this.service.findEquipmentSharing(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        shareRequestDay: true,
        shareStartDay: true,
        shareEndDay: true,
        status: true,
        createdBy: true,
        createdByName: true,

        equipmentSharingPolicy: {
          select: {
            id: true,
          },
        },

        equipment: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/equipmentSharing")
  async connectEquipmentSharing(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EquipmentSharingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharing: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/equipmentSharing")
  async updateEquipmentSharing(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EquipmentSharingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharing: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/equipmentSharing")
  async disconnectEquipmentSharing(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EquipmentSharingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharing: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/equipmentSharingPolicy")
  @ApiNestedQuery(EquipmentSharingPolicyFindManyArgs)
  async findManyEquipmentSharingPolicy(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EquipmentSharingPolicy[]> {
    const query = plainToClass(
      EquipmentSharingPolicyFindManyArgs,
      request.query
    );
    const results = await this.service.findEquipmentSharingPolicy(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/equipmentSharingPolicy")
  async connectEquipmentSharingPolicy(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EquipmentSharingPolicyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharingPolicy: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/equipmentSharingPolicy")
  async updateEquipmentSharingPolicy(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EquipmentSharingPolicyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharingPolicy: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/equipmentSharingPolicy")
  async disconnectEquipmentSharingPolicy(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EquipmentSharingPolicyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentSharingPolicy: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/estimateEmail")
  @ApiNestedQuery(EstimateEmailFindManyArgs)
  async findManyEstimateEmail(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EstimateEmail[]> {
    const query = plainToClass(EstimateEmailFindManyArgs, request.query);
    const results = await this.service.findEstimateEmail(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        token: true,
        email: true,
        expireDate: true,
        convertAcceptedEstimates: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/estimateEmail")
  async connectEstimateEmail(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EstimateEmailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      estimateEmail: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/estimateEmail")
  async updateEstimateEmail(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EstimateEmailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      estimateEmail: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/estimateEmail")
  async disconnectEstimateEmail(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EstimateEmailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      estimateEmail: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/eventType")
  @ApiNestedQuery(EventTypeFindManyArgs)
  async findManyEventType(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EventType[]> {
    const query = plainToClass(EventTypeFindManyArgs, request.query);
    const results = await this.service.findEventType(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        durationUnit: true,
        title: true,
        description: true,
        isActive: true,

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/eventType")
  async connectEventType(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventType: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/eventType")
  async updateEventType(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventType: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/eventType")
  async disconnectEventType(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventType: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/expense")
  @ApiNestedQuery(ExpenseFindManyArgs)
  async findManyExpense(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Expense[]> {
    const query = plainToClass(ExpenseFindManyArgs, request.query);
    const results = await this.service.findExpense(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        typeOfExpense: true,
        notes: true,
        currency: true,
        valueDate: true,
        purpose: true,
        taxType: true,
        taxLabel: true,
        rateValue: true,
        receipt: true,
        splitExpense: true,
        reference: true,
        status: true,

        organizationContact: {
          select: {
            id: true,
          },
        },

        expenseCategory: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationVendor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/expense")
  async connectExpense(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expense: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/expense")
  async updateExpense(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expense: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/expense")
  async disconnectExpense(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expense: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/expenseCategory")
  @ApiNestedQuery(ExpenseCategoryFindManyArgs)
  async findManyExpenseCategory(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ExpenseCategory[]> {
    const query = plainToClass(ExpenseCategoryFindManyArgs, request.query);
    const results = await this.service.findExpenseCategory(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/expenseCategory")
  async connectExpenseCategory(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ExpenseCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expenseCategory: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/expenseCategory")
  async updateExpenseCategory(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ExpenseCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expenseCategory: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/expenseCategory")
  async disconnectExpenseCategory(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ExpenseCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expenseCategory: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/featureOrganization")
  @ApiNestedQuery(FeatureOrganizationFindManyArgs)
  async findManyFeatureOrganization(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<FeatureOrganization[]> {
    const query = plainToClass(FeatureOrganizationFindManyArgs, request.query);
    const results = await this.service.findFeatureOrganization(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        isEnabled: true,

        organization: {
          select: {
            id: true,
          },
        },

        feature: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/featureOrganization")
  async connectFeatureOrganization(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: FeatureOrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      featureOrganization: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/featureOrganization")
  async updateFeatureOrganization(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: FeatureOrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      featureOrganization: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/featureOrganization")
  async disconnectFeatureOrganization(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: FeatureOrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      featureOrganization: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/goal")
  @ApiNestedQuery(GoalFindManyArgs)
  async findManyGoal(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Goal[]> {
    const query = plainToClass(GoalFindManyArgs, request.query);
    const results = await this.service.findGoal(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        deadline: true,
        level: true,
        progress: true,

        employeeGoalOwnerEmployeeIdToemployee: {
          select: {
            id: true,
          },
        },

        keyResultGoalAlignedKeyResultIdTokeyResult: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        employeeGoalLeadIdToemployee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/goal")
  async connectGoal(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goal: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/goal")
  async updateGoal(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goal: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/goal")
  async disconnectGoal(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goal: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/goalGeneralSetting")
  @ApiNestedQuery(GoalGeneralSettingFindManyArgs)
  async findManyGoalGeneralSetting(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<GoalGeneralSetting[]> {
    const query = plainToClass(GoalGeneralSettingFindManyArgs, request.query);
    const results = await this.service.findGoalGeneralSetting(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        maxObjectives: true,
        maxKeyResults: true,
        employeeCanCreateObjective: true,
        canOwnObjectives: true,
        canOwnKeyResult: true,
        krTypeKPI: true,
        krTypeTask: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/goalGeneralSetting")
  async connectGoalGeneralSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalGeneralSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalGeneralSetting: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/goalGeneralSetting")
  async updateGoalGeneralSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalGeneralSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalGeneralSetting: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/goalGeneralSetting")
  async disconnectGoalGeneralSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalGeneralSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalGeneralSetting: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/goalKpi")
  @ApiNestedQuery(GoalKpiFindManyArgs)
  async findManyGoalKpi(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<GoalKpi[]> {
    const query = plainToClass(GoalKpiFindManyArgs, request.query);
    const results = await this.service.findGoalKpi(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        typeField: true,
        unit: true,
        operator: true,
        currentValue: true,
        targetValue: true,

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/goalKpi")
  async connectGoalKpi(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalKpiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalKpi: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/goalKpi")
  async updateGoalKpi(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalKpiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalKpi: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/goalKpi")
  async disconnectGoalKpi(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalKpiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalKpi: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/goalKpiTemplate")
  @ApiNestedQuery(GoalKpiTemplateFindManyArgs)
  async findManyGoalKpiTemplate(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<GoalKpiTemplate[]> {
    const query = plainToClass(GoalKpiTemplateFindManyArgs, request.query);
    const results = await this.service.findGoalKpiTemplate(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        typeField: true,
        unit: true,
        operator: true,
        currentValue: true,
        targetValue: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/goalKpiTemplate")
  async connectGoalKpiTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalKpiTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalKpiTemplate: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/goalKpiTemplate")
  async updateGoalKpiTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalKpiTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalKpiTemplate: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/goalKpiTemplate")
  async disconnectGoalKpiTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalKpiTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalKpiTemplate: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/goalTemplate")
  @ApiNestedQuery(GoalTemplateFindManyArgs)
  async findManyGoalTemplate(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<GoalTemplate[]> {
    const query = plainToClass(GoalTemplateFindManyArgs, request.query);
    const results = await this.service.findGoalTemplate(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        level: true,
        category: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/goalTemplate")
  async connectGoalTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalTemplate: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/goalTemplate")
  async updateGoalTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalTemplate: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/goalTemplate")
  async disconnectGoalTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalTemplate: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/goalTimeFrame")
  @ApiNestedQuery(GoalTimeFrameFindManyArgs)
  async findManyGoalTimeFrame(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<GoalTimeFrame[]> {
    const query = plainToClass(GoalTimeFrameFindManyArgs, request.query);
    const results = await this.service.findGoalTimeFrame(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        status: true,
        startDate: true,
        endDate: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/goalTimeFrame")
  async connectGoalTimeFrame(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalTimeFrameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalTimeFrame: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/goalTimeFrame")
  async updateGoalTimeFrame(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalTimeFrameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalTimeFrame: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/goalTimeFrame")
  async disconnectGoalTimeFrame(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: GoalTimeFrameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goalTimeFrame: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/imageAssetImageAssetTenantIdTotenant")
  @ApiNestedQuery(ImageAssetFindManyArgs)
  async findManyImageAssetImageAssetTenantIdTotenant(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ImageAsset[]> {
    const query = plainToClass(ImageAssetFindManyArgs, request.query);
    const results = await this.service.findImageAssetImageAssetTenantIdTotenant(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          url: true,
          width: true,
          height: true,
          isFeatured: true,
          thumb: true,
          size: true,
          externalProviderId: true,
          storageProvider: true,
          deletedAt: true,

          tenantImageAssetTenantIdTotenant: {
            select: {
              id: true,
            },
          },

          organizationImageAssetOrganizationIdToorganization: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/imageAssetImageAssetTenantIdTotenant")
  async connectImageAssetImageAssetTenantIdTotenant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ImageAssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      imageAssetImageAssetTenantIdTotenant: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/imageAssetImageAssetTenantIdTotenant")
  async updateImageAssetImageAssetTenantIdTotenant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ImageAssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      imageAssetImageAssetTenantIdTotenant: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/imageAssetImageAssetTenantIdTotenant")
  async disconnectImageAssetImageAssetTenantIdTotenant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ImageAssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      imageAssetImageAssetTenantIdTotenant: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/importHistory")
  @ApiNestedQuery(ImportHistoryFindManyArgs)
  async findManyImportHistory(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ImportHistory[]> {
    const query = plainToClass(ImportHistoryFindManyArgs, request.query);
    const results = await this.service.findImportHistory(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        file: true,
        path: true,
        size: true,
        status: true,
        importDate: true,

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/importHistory")
  async connectImportHistory(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ImportHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      importHistory: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/importHistory")
  async updateImportHistory(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ImportHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      importHistory: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/importHistory")
  async disconnectImportHistory(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ImportHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      importHistory: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/importRecord")
  @ApiNestedQuery(ImportRecordFindManyArgs)
  async findManyImportRecord(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ImportRecord[]> {
    const query = plainToClass(ImportRecordFindManyArgs, request.query);
    const results = await this.service.findImportRecord(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        entityType: true,
        sourceId: true,
        destinationId: true,
        importDate: true,

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/importRecord")
  async connectImportRecord(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ImportRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      importRecord: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/importRecord")
  async updateImportRecord(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ImportRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      importRecord: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/importRecord")
  async disconnectImportRecord(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ImportRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      importRecord: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/income")
  @ApiNestedQuery(IncomeFindManyArgs)
  async findManyIncome(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Income[]> {
    const query = plainToClass(IncomeFindManyArgs, request.query);
    const results = await this.service.findIncome(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        currency: true,
        valueDate: true,
        notes: true,
        isBonus: true,
        reference: true,

        organizationContact: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/income")
  async connectIncome(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IncomeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      income: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/income")
  async updateIncome(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IncomeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      income: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/income")
  async disconnectIncome(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IncomeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      income: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/integrationEntitySetting")
  @ApiNestedQuery(IntegrationEntitySettingFindManyArgs)
  async findManyIntegrationEntitySetting(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<IntegrationEntitySetting[]> {
    const query = plainToClass(
      IntegrationEntitySettingFindManyArgs,
      request.query
    );
    const results = await this.service.findIntegrationEntitySetting(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        entity: true,
        sync: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        integrationTenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/integrationEntitySetting")
  async connectIntegrationEntitySetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IntegrationEntitySettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationEntitySetting: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/integrationEntitySetting")
  async updateIntegrationEntitySetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IntegrationEntitySettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationEntitySetting: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/integrationEntitySetting")
  async disconnectIntegrationEntitySetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IntegrationEntitySettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationEntitySetting: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/integrationEntitySettingTied")
  @ApiNestedQuery(IntegrationEntitySettingTiedFindManyArgs)
  async findManyIntegrationEntitySettingTied(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<IntegrationEntitySettingTied[]> {
    const query = plainToClass(
      IntegrationEntitySettingTiedFindManyArgs,
      request.query
    );
    const results = await this.service.findIntegrationEntitySettingTied(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          entity: true,
          sync: true,

          integrationEntitySetting: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/integrationEntitySettingTied")
  async connectIntegrationEntitySettingTied(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IntegrationEntitySettingTiedWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationEntitySettingTied: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/integrationEntitySettingTied")
  async updateIntegrationEntitySettingTied(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IntegrationEntitySettingTiedWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationEntitySettingTied: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/integrationEntitySettingTied")
  async disconnectIntegrationEntitySettingTied(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IntegrationEntitySettingTiedWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationEntitySettingTied: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/integrationMap")
  @ApiNestedQuery(IntegrationMapFindManyArgs)
  async findManyIntegrationMap(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<IntegrationMap[]> {
    const query = plainToClass(IntegrationMapFindManyArgs, request.query);
    const results = await this.service.findIntegrationMap(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        entity: true,
        sourceId: true,
        gauzyId: true,

        organization: {
          select: {
            id: true,
          },
        },

        integrationTenant: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/integrationMap")
  async connectIntegrationMap(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IntegrationMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationMap: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/integrationMap")
  async updateIntegrationMap(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IntegrationMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationMap: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/integrationMap")
  async disconnectIntegrationMap(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IntegrationMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationMap: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/integrationSetting")
  @ApiNestedQuery(IntegrationSettingFindManyArgs)
  async findManyIntegrationSetting(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<IntegrationSetting[]> {
    const query = plainToClass(IntegrationSettingFindManyArgs, request.query);
    const results = await this.service.findIntegrationSetting(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        settingsName: true,
        settingsValue: true,

        integrationTenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/integrationSetting")
  async connectIntegrationSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IntegrationSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationSetting: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/integrationSetting")
  async updateIntegrationSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IntegrationSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationSetting: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/integrationSetting")
  async disconnectIntegrationSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IntegrationSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationSetting: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/integrationTenant")
  @ApiNestedQuery(IntegrationTenantFindManyArgs)
  async findManyIntegrationTenant(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<IntegrationTenant[]> {
    const query = plainToClass(IntegrationTenantFindManyArgs, request.query);
    const results = await this.service.findIntegrationTenant(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/integrationTenant")
  async connectIntegrationTenant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IntegrationTenantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationTenant: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/integrationTenant")
  async updateIntegrationTenant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IntegrationTenantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationTenant: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/integrationTenant")
  async disconnectIntegrationTenant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IntegrationTenantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      integrationTenant: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/invite")
  @ApiNestedQuery(InviteFindManyArgs)
  async findManyInvite(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Invite[]> {
    const query = plainToClass(InviteFindManyArgs, request.query);
    const results = await this.service.findInvite(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        token: true,
        email: true,
        status: true,
        expireDate: true,
        actionDate: true,
        code: true,
        fullName: true,

        userInviteInvitedByIdTouser: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        userInviteUserIdTouser: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invite")
  async connectInvite(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InviteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invite: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invite")
  async updateInvite(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InviteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invite: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invite")
  async disconnectInvite(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InviteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invite: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/invoice")
  @ApiNestedQuery(InvoiceFindManyArgs)
  async findManyInvoice(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Invoice[]> {
    const query = plainToClass(InvoiceFindManyArgs, request.query);
    const results = await this.service.findInvoice(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        invoiceDate: true,
        invoiceNumber: true,
        dueDate: true,
        currency: true,
        discountValue: true,
        paid: true,
        tax: true,
        tax2: true,
        terms: true,
        totalValue: true,
        status: true,
        isEstimate: true,
        isAccepted: true,
        discountType: true,
        taxType: true,
        tax2Type: true,
        invoiceType: true,
        sentTo: true,
        organizationContactId: true,
        internalNote: true,
        alreadyPaid: true,
        amountDue: true,
        hasRemainingAmountInvoiced: true,
        token: true,
        isArchived: true,

        organizationInvoiceOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationInvoiceFromOrganizationIdToorganization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoice")
  async connectInvoice(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoice: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoice")
  async updateInvoice(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoice: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoice")
  async disconnectInvoice(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoice: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/invoiceEstimateHistory")
  @ApiNestedQuery(InvoiceEstimateHistoryFindManyArgs)
  async findManyInvoiceEstimateHistory(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<InvoiceEstimateHistory[]> {
    const query = plainToClass(
      InvoiceEstimateHistoryFindManyArgs,
      request.query
    );
    const results = await this.service.findInvoiceEstimateHistory(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        action: true,

        invoice: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoiceEstimateHistory")
  async connectInvoiceEstimateHistory(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InvoiceEstimateHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceEstimateHistory: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoiceEstimateHistory")
  async updateInvoiceEstimateHistory(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InvoiceEstimateHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceEstimateHistory: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoiceEstimateHistory")
  async disconnectInvoiceEstimateHistory(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InvoiceEstimateHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceEstimateHistory: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/invoiceItem")
  @ApiNestedQuery(InvoiceItemFindManyArgs)
  async findManyInvoiceItem(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<InvoiceItem[]> {
    const query = plainToClass(InvoiceItemFindManyArgs, request.query);
    const results = await this.service.findInvoiceItem(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        price: true,
        quantity: true,
        totalValue: true,
        applyTax: true,
        applyDiscount: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        invoice: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        expense: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoiceItem")
  async connectInvoiceItem(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoiceItem")
  async updateInvoiceItem(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoiceItem")
  async disconnectInvoiceItem(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InvoiceItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceItem: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/issueType")
  @ApiNestedQuery(IssueTypeFindManyArgs)
  async findManyIssueType(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<IssueType[]> {
    const query = plainToClass(IssueTypeFindManyArgs, request.query);
    const results = await this.service.findIssueType(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/issueType")
  async connectIssueType(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      issueType: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/issueType")
  async updateIssueType(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      issueType: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/issueType")
  async disconnectIssueType(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: IssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      issueType: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/jobPreset")
  @ApiNestedQuery(JobPresetFindManyArgs)
  async findManyJobPreset(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<JobPreset[]> {
    const query = plainToClass(JobPresetFindManyArgs, request.query);
    const results = await this.service.findJobPreset(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/jobPreset")
  async connectJobPreset(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: JobPresetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobPreset: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/jobPreset")
  async updateJobPreset(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: JobPresetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobPreset: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/jobPreset")
  async disconnectJobPreset(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: JobPresetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobPreset: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/jobPresetUpworkJobSearchCriterion")
  @ApiNestedQuery(JobPresetUpworkJobSearchCriterionFindManyArgs)
  async findManyJobPresetUpworkJobSearchCriterion(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<JobPresetUpworkJobSearchCriterion[]> {
    const query = plainToClass(
      JobPresetUpworkJobSearchCriterionFindManyArgs,
      request.query
    );
    const results = await this.service.findJobPresetUpworkJobSearchCriterion(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          keyword: true,
          jobType: true,

          tenant: {
            select: {
              id: true,
            },
          },

          jobPreset: {
            select: {
              id: true,
            },
          },

          jobSearchCategory: {
            select: {
              id: true,
            },
          },

          jobSearchOccupation: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/jobPresetUpworkJobSearchCriterion")
  async connectJobPresetUpworkJobSearchCriterion(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: JobPresetUpworkJobSearchCriterionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobPresetUpworkJobSearchCriterion: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/jobPresetUpworkJobSearchCriterion")
  async updateJobPresetUpworkJobSearchCriterion(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: JobPresetUpworkJobSearchCriterionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobPresetUpworkJobSearchCriterion: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/jobPresetUpworkJobSearchCriterion")
  async disconnectJobPresetUpworkJobSearchCriterion(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: JobPresetUpworkJobSearchCriterionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobPresetUpworkJobSearchCriterion: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/jobSearchCategory")
  @ApiNestedQuery(JobSearchCategoryFindManyArgs)
  async findManyJobSearchCategory(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<JobSearchCategory[]> {
    const query = plainToClass(JobSearchCategoryFindManyArgs, request.query);
    const results = await this.service.findJobSearchCategory(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        jobSourceCategoryId: true,
        jobSource: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/jobSearchCategory")
  async connectJobSearchCategory(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: JobSearchCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobSearchCategory: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/jobSearchCategory")
  async updateJobSearchCategory(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: JobSearchCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobSearchCategory: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/jobSearchCategory")
  async disconnectJobSearchCategory(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: JobSearchCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobSearchCategory: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/jobSearchOccupation")
  @ApiNestedQuery(JobSearchOccupationFindManyArgs)
  async findManyJobSearchOccupation(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<JobSearchOccupation[]> {
    const query = plainToClass(JobSearchOccupationFindManyArgs, request.query);
    const results = await this.service.findJobSearchOccupation(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        jobSourceOccupationId: true,
        jobSource: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/jobSearchOccupation")
  async connectJobSearchOccupation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: JobSearchOccupationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobSearchOccupation: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/jobSearchOccupation")
  async updateJobSearchOccupation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: JobSearchOccupationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobSearchOccupation: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/jobSearchOccupation")
  async disconnectJobSearchOccupation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: JobSearchOccupationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobSearchOccupation: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/keyResult")
  @ApiNestedQuery(KeyResultFindManyArgs)
  async findManyKeyResult(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<KeyResult[]> {
    const query = plainToClass(KeyResultFindManyArgs, request.query);
    const results = await this.service.findKeyResult(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        typeField: true,
        targetValue: true,
        initialValue: true,
        unit: true,
        update: true,
        progress: true,
        deadline: true,
        hardDeadline: true,
        softDeadline: true,
        status: true,
        weight: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        goalKpi: {
          select: {
            id: true,
          },
        },

        employeeKeyResultOwnerIdToemployee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employeeKeyResultLeadIdToemployee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        goalKeyResultGoalIdTogoal: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/keyResult")
  async connectKeyResult(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResult: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/keyResult")
  async updateKeyResult(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResult: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/keyResult")
  async disconnectKeyResult(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResult: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/keyResultTemplate")
  @ApiNestedQuery(KeyResultTemplateFindManyArgs)
  async findManyKeyResultTemplate(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<KeyResultTemplate[]> {
    const query = plainToClass(KeyResultTemplateFindManyArgs, request.query);
    const results = await this.service.findKeyResultTemplate(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,
        unit: true,
        targetValue: true,
        initialValue: true,
        deadline: true,

        goalTemplate: {
          select: {
            id: true,
          },
        },

        goalKpiTemplate: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/keyResultTemplate")
  async connectKeyResultTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KeyResultTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResultTemplate: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/keyResultTemplate")
  async updateKeyResultTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KeyResultTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResultTemplate: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/keyResultTemplate")
  async disconnectKeyResultTemplate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KeyResultTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResultTemplate: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/keyResultUpdate")
  @ApiNestedQuery(KeyResultUpdateFindManyArgs)
  async findManyKeyResultUpdate(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<KeyResultUpdate[]> {
    const query = plainToClass(KeyResultUpdateFindManyArgs, request.query);
    const results = await this.service.findKeyResultUpdate(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        update: true,
        progress: true,
        owner: true,
        status: true,

        keyResult: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/keyResultUpdate")
  async connectKeyResultUpdate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KeyResultUpdateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResultUpdate: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/keyResultUpdate")
  async updateKeyResultUpdate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KeyResultUpdateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResultUpdate: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/keyResultUpdate")
  async disconnectKeyResultUpdate(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KeyResultUpdateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResultUpdate: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/knowledgeBase")
  @ApiNestedQuery(KnowledgeBaseFindManyArgs)
  async findManyKnowledgeBase(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<KnowledgeBase[]> {
    const query = plainToClass(KnowledgeBaseFindManyArgs, request.query);
    const results = await this.service.findKnowledgeBase(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        flag: true,
        icon: true,
        privacy: true,
        language: true,
        color: true,
        description: true,
        data: true,
        index: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        knowledgeBase: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/knowledgeBase")
  async connectKnowledgeBase(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KnowledgeBaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      knowledgeBase: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/knowledgeBase")
  async updateKnowledgeBase(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KnowledgeBaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      knowledgeBase: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/knowledgeBase")
  async disconnectKnowledgeBase(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KnowledgeBaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      knowledgeBase: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/knowledgeBaseArticle")
  @ApiNestedQuery(KnowledgeBaseArticleFindManyArgs)
  async findManyKnowledgeBaseArticle(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<KnowledgeBaseArticle[]> {
    const query = plainToClass(KnowledgeBaseArticleFindManyArgs, request.query);
    const results = await this.service.findKnowledgeBaseArticle(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        data: true,
        draft: true,
        privacy: true,
        index: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        knowledgeBase: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/knowledgeBaseArticle")
  async connectKnowledgeBaseArticle(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KnowledgeBaseArticleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      knowledgeBaseArticle: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/knowledgeBaseArticle")
  async updateKnowledgeBaseArticle(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KnowledgeBaseArticleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      knowledgeBaseArticle: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/knowledgeBaseArticle")
  async disconnectKnowledgeBaseArticle(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KnowledgeBaseArticleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      knowledgeBaseArticle: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/knowledgeBaseAuthor")
  @ApiNestedQuery(KnowledgeBaseAuthorFindManyArgs)
  async findManyKnowledgeBaseAuthor(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<KnowledgeBaseAuthor[]> {
    const query = plainToClass(KnowledgeBaseAuthorFindManyArgs, request.query);
    const results = await this.service.findKnowledgeBaseAuthor(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        tenant: {
          select: {
            id: true,
          },
        },

        knowledgeBaseArticle: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/knowledgeBaseAuthor")
  async connectKnowledgeBaseAuthor(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KnowledgeBaseAuthorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      knowledgeBaseAuthor: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/knowledgeBaseAuthor")
  async updateKnowledgeBaseAuthor(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KnowledgeBaseAuthorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      knowledgeBaseAuthor: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/knowledgeBaseAuthor")
  async disconnectKnowledgeBaseAuthor(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: KnowledgeBaseAuthorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      knowledgeBaseAuthor: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/merchant")
  @ApiNestedQuery(MerchantFindManyArgs)
  async findManyMerchant(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Merchant[]> {
    const query = plainToClass(MerchantFindManyArgs, request.query);
    const results = await this.service.findMerchant(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        code: true,
        email: true,
        phone: true,
        description: true,
        active: true,
        currency: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/merchant")
  async connectMerchant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: MerchantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      merchant: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/merchant")
  async updateMerchant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: MerchantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      merchant: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/merchant")
  async disconnectMerchant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: MerchantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      merchant: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organization")
  @ApiNestedQuery(OrganizationFindManyArgs)
  async findManyOrganization(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Organization[]> {
    const query = plainToClass(OrganizationFindManyArgs, request.query);
    const results = await this.service.findOrganization(params.id, {
      ...query,
      select: {
        activityProofDuration: true,
        allowDeleteTime: true,
        allowManualTime: true,
        allowModifyTime: true,
        allowScreenshotCapture: true,
        allowTrackInactivity: true,
        banner: true,
        bonusPercentage: true,
        bonusType: true,
        brandColor: true,
        clientFocus: true,

        contactOrganizationContactIdTocontact: {
          select: {
            id: true,
          },
        },

        convertAcceptedEstimates: true,
        createdAt: true,
        currency: true,
        currencyPosition: true,
        dateFormat: true,
        daysUntilDue: true,
        defaultAlignmentType: true,
        defaultEndTime: true,
        defaultInvoiceEstimateTerms: true,
        defaultStartTime: true,
        defaultValueDateType: true,
        discountAfterTax: true,
        fiscalEndDate: true,
        fiscalInformation: true,
        fiscalStartDate: true,
        futureDateAllowed: true,
        id: true,

        imageAssetOrganizationImageIdToimageAsset: {
          select: {
            id: true,
          },
        },

        imageUrl: true,
        inactivityTimeLimit: true,
        inviteExpiryPeriod: true,
        invitesAllowed: true,
        isActive: true,
        isDefault: true,
        isRemoveIdleTime: true,
        minimumProjectSize: true,
        name: true,
        numberFormat: true,
        officialName: true,
        overview: true,
        profileLink: true,
        regionCode: true,
        registrationDate: true,
        requireClient: true,
        requireDescription: true,
        requireProject: true,
        requireReason: true,
        requireTask: true,
        separateInvoiceItemTaxAndDiscount: true,
        shortDescription: true,
        showBonusesPaid: true,
        showClients: true,
        showClientsCount: true,
        showEmployeesCount: true,
        showIncome: true,
        showMinimumProjectSize: true,
        showProfits: true,
        showProjectsCount: true,
        showTotalHours: true,
        startWeekOn: true,
        taxId: true,

        tenant: {
          select: {
            id: true,
          },
        },

        timeFormat: true,
        timeZone: true,
        totalEmployees: true,
        updatedAt: true,
        upworkOrganizationId: true,
        valueDate: true,
        website: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organization")
  async connectOrganization(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organization: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organization")
  async updateOrganization(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organization: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organization")
  async disconnectOrganization(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organization: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationAward")
  @ApiNestedQuery(OrganizationAwardFindManyArgs)
  async findManyOrganizationAward(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrganizationAward[]> {
    const query = plainToClass(OrganizationAwardFindManyArgs, request.query);
    const results = await this.service.findOrganizationAward(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        year: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationAward")
  async connectOrganizationAward(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationAwardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationAward: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationAward")
  async updateOrganizationAward(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationAwardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationAward: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationAward")
  async disconnectOrganizationAward(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationAwardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationAward: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationContact")
  @ApiNestedQuery(OrganizationContactFindManyArgs)
  async findManyOrganizationContact(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrganizationContact[]> {
    const query = plainToClass(OrganizationContactFindManyArgs, request.query);
    const results = await this.service.findOrganizationContact(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        primaryEmail: true,
        primaryPhone: true,
        notes: true,
        imageUrl: true,
        budget: true,
        createdBy: true,
        inviteStatus: true,
        contactType: true,
        budgetType: true,

        organization: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        contact: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        deal: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationContact")
  async connectOrganizationContact(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationContact: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationContact")
  async updateOrganizationContact(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationContact: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationContact")
  async disconnectOrganizationContact(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationContact: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationDepartment")
  @ApiNestedQuery(OrganizationDepartmentFindManyArgs)
  async findManyOrganizationDepartment(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrganizationDepartment[]> {
    const query = plainToClass(
      OrganizationDepartmentFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationDepartment(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationDepartment")
  async connectOrganizationDepartment(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationDepartment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationDepartment")
  async updateOrganizationDepartment(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationDepartment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationDepartment")
  async disconnectOrganizationDepartment(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationDepartment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationDocument")
  @ApiNestedQuery(OrganizationDocumentFindManyArgs)
  async findManyOrganizationDocument(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrganizationDocument[]> {
    const query = plainToClass(OrganizationDocumentFindManyArgs, request.query);
    const results = await this.service.findOrganizationDocument(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        documentUrl: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationDocument")
  async connectOrganizationDocument(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationDocument: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationDocument")
  async updateOrganizationDocument(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationDocument: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationDocument")
  async disconnectOrganizationDocument(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationDocument: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationEmploymentType")
  @ApiNestedQuery(OrganizationEmploymentTypeFindManyArgs)
  async findManyOrganizationEmploymentType(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrganizationEmploymentType[]> {
    const query = plainToClass(
      OrganizationEmploymentTypeFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationEmploymentType(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationEmploymentType")
  async connectOrganizationEmploymentType(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationEmploymentTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationEmploymentType: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationEmploymentType")
  async updateOrganizationEmploymentType(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationEmploymentTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationEmploymentType: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationEmploymentType")
  async disconnectOrganizationEmploymentType(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationEmploymentTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationEmploymentType: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationLanguage")
  @ApiNestedQuery(OrganizationLanguageFindManyArgs)
  async findManyOrganizationLanguage(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrganizationLanguage[]> {
    const query = plainToClass(OrganizationLanguageFindManyArgs, request.query);
    const results = await this.service.findOrganizationLanguage(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        level: true,

        language: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationLanguage")
  async connectOrganizationLanguage(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationLanguageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationLanguage: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationLanguage")
  async updateOrganizationLanguage(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationLanguageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationLanguage: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationLanguage")
  async disconnectOrganizationLanguage(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationLanguageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationLanguage: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationPosition")
  @ApiNestedQuery(OrganizationPositionFindManyArgs)
  async findManyOrganizationPosition(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrganizationPosition[]> {
    const query = plainToClass(OrganizationPositionFindManyArgs, request.query);
    const results = await this.service.findOrganizationPosition(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationPosition")
  async connectOrganizationPosition(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationPositionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationPosition: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationPosition")
  async updateOrganizationPosition(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationPositionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationPosition: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationPosition")
  async disconnectOrganizationPosition(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationPositionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationPosition: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationProject")
  @ApiNestedQuery(OrganizationProjectFindManyArgs)
  async findManyOrganizationProject(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrganizationProject[]> {
    const query = plainToClass(OrganizationProjectFindManyArgs, request.query);
    const results = await this.service.findOrganizationProject(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        startDate: true,
        endDate: true,
        billing: true,
        currency: true,
        publicField: true,
        owner: true,
        taskListType: true,
        code: true,
        description: true,
        color: true,
        billable: true,
        billingFlat: true,
        openSource: true,
        projectUrl: true,
        openSourceProjectUrl: true,
        budget: true,
        budgetType: true,
        membersCount: true,
        imageUrl: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationProject")
  async connectOrganizationProject(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationProject: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationProject")
  async updateOrganizationProject(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationProject: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationProject")
  async disconnectOrganizationProject(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationProject: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationRecurringExpense")
  @ApiNestedQuery(OrganizationRecurringExpenseFindManyArgs)
  async findManyOrganizationRecurringExpense(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrganizationRecurringExpense[]> {
    const query = plainToClass(
      OrganizationRecurringExpenseFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationRecurringExpense(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          startDay: true,
          startMonth: true,
          startYear: true,
          startDate: true,
          endDay: true,
          endMonth: true,
          endYear: true,
          endDate: true,
          categoryName: true,
          value: true,
          currency: true,
          splitExpense: true,
          parentRecurringExpenseId: true,

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationRecurringExpense")
  async connectOrganizationRecurringExpense(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationRecurringExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationRecurringExpense: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationRecurringExpense")
  async updateOrganizationRecurringExpense(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationRecurringExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationRecurringExpense: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationRecurringExpense")
  async disconnectOrganizationRecurringExpense(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationRecurringExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationRecurringExpense: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationSprint")
  @ApiNestedQuery(OrganizationSprintFindManyArgs)
  async findManyOrganizationSprint(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrganizationSprint[]> {
    const query = plainToClass(OrganizationSprintFindManyArgs, request.query);
    const results = await this.service.findOrganizationSprint(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        goal: true,

        tenant: {
          select: {
            id: true,
          },
        },

        length: true,
        startDate: true,
        endDate: true,
        dayStart: true,
        isActive: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationSprint")
  async connectOrganizationSprint(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationSprintWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationSprint: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationSprint")
  async updateOrganizationSprint(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationSprintWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationSprint: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationSprint")
  async disconnectOrganizationSprint(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationSprintWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationSprint: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationTaskSetting")
  @ApiNestedQuery(OrganizationTaskSettingFindManyArgs)
  async findManyOrganizationTaskSetting(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrganizationTaskSetting[]> {
    const query = plainToClass(
      OrganizationTaskSettingFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationTaskSetting(params.id, {
      ...query,
      select: {
        isTasksCommentsEnabled: true,
        id: true,
        createdAt: true,
        updatedAt: true,
        isTasksPrivacyEnabled: true,
        isTasksMultipleAssigneesEnabled: true,
        isTasksManualTimeEnabled: true,
        isTasksGroupEstimationEnabled: true,
        isTasksHistoryEnabled: true,
        isTasksAcceptanceCriteriaEnabled: true,
        isTasksDraftsEnabled: true,
        isTasksEstimationInHoursEnabled: true,
        isTasksEstimationInStoryPointsEnabled: true,
        isTasksProofOfCompletionEnabled: true,
        tasksProofOfCompletionType: true,
        isTasksLinkedEnabled: true,
        isTasksNotifyLeftEnabled: true,
        tasksNotifyLeftPeriodDays: true,
        isTasksAutoCloseEnabled: true,
        tasksAutoClosePeriodDays: true,
        isTasksAutoArchiveEnabled: true,
        tasksAutoArchivePeriodDays: true,
        isTasksAutoStatusEnabled: true,

        organizationProject: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationTaskSetting")
  async connectOrganizationTaskSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationTaskSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTaskSetting: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationTaskSetting")
  async updateOrganizationTaskSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationTaskSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTaskSetting: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationTaskSetting")
  async disconnectOrganizationTaskSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationTaskSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTaskSetting: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationTeam")
  @ApiNestedQuery(OrganizationTeamFindManyArgs)
  async findManyOrganizationTeam(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrganizationTeam[]> {
    const query = plainToClass(OrganizationTeamFindManyArgs, request.query);
    const results = await this.service.findOrganizationTeam(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        prefix: true,
        publicField: true,
        profileLink: true,
        logo: true,
        color: true,
        emoji: true,
        teamSize: true,

        tenant: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationTeam")
  async connectOrganizationTeam(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeam: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationTeam")
  async updateOrganizationTeam(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeam: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationTeam")
  async disconnectOrganizationTeam(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeam: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationTeamEmployee")
  @ApiNestedQuery(OrganizationTeamEmployeeFindManyArgs)
  async findManyOrganizationTeamEmployee(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrganizationTeamEmployee[]> {
    const query = plainToClass(
      OrganizationTeamEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationTeamEmployee(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        isTrackingEnabled: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationTeamEmployee")
  async connectOrganizationTeamEmployee(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationTeamEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationTeamEmployee")
  async updateOrganizationTeamEmployee(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationTeamEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationTeamEmployee")
  async disconnectOrganizationTeamEmployee(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationTeamEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationTeamJoinRequest")
  @ApiNestedQuery(OrganizationTeamJoinRequestFindManyArgs)
  async findManyOrganizationTeamJoinRequest(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrganizationTeamJoinRequest[]> {
    const query = plainToClass(
      OrganizationTeamJoinRequestFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationTeamJoinRequest(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,
          fullName: true,
          linkAddress: true,
          position: true,
          status: true,
          code: true,
          token: true,
          expiredAt: true,

          organizationTeam: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationTeamJoinRequest")
  async connectOrganizationTeamJoinRequest(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationTeamJoinRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamJoinRequest: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationTeamJoinRequest")
  async updateOrganizationTeamJoinRequest(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationTeamJoinRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamJoinRequest: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationTeamJoinRequest")
  async disconnectOrganizationTeamJoinRequest(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationTeamJoinRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamJoinRequest: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationVendor")
  @ApiNestedQuery(OrganizationVendorFindManyArgs)
  async findManyOrganizationVendor(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrganizationVendor[]> {
    const query = plainToClass(OrganizationVendorFindManyArgs, request.query);
    const results = await this.service.findOrganizationVendor(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
        phone: true,
        website: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationVendor")
  async connectOrganizationVendor(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationVendorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationVendor: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationVendor")
  async updateOrganizationVendor(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationVendorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationVendor: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationVendor")
  async disconnectOrganizationVendor(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationVendorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationVendor: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/payment")
  @ApiNestedQuery(PaymentFindManyArgs)
  async findManyPayment(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayment(params.id, {
      ...query,
      select: {
        invoice: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        id: true,
        createdAt: true,
        updatedAt: true,
        paymentDate: true,
        amount: true,
        note: true,
        currency: true,
        overdue: true,
        paymentMethod: true,

        user: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payment")
  async connectPayment(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payment")
  async updatePayment(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payment")
  async disconnectPayment(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/pipeline")
  @ApiNestedQuery(PipelineFindManyArgs)
  async findManyPipeline(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Pipeline[]> {
    const query = plainToClass(PipelineFindManyArgs, request.query);
    const results = await this.service.findPipeline(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
        isActive: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pipeline")
  async connectPipeline(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PipelineWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pipeline: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pipeline")
  async updatePipeline(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PipelineWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pipeline: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pipeline")
  async disconnectPipeline(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PipelineWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pipeline: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/pipelineStage")
  @ApiNestedQuery(PipelineStageFindManyArgs)
  async findManyPipelineStage(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<PipelineStage[]> {
    const query = plainToClass(PipelineStageFindManyArgs, request.query);
    const results = await this.service.findPipelineStage(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        index: true,
        name: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        pipeline: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pipelineStage")
  async connectPipelineStage(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PipelineStageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pipelineStage: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pipelineStage")
  async updatePipelineStage(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PipelineStageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pipelineStage: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pipelineStage")
  async disconnectPipelineStage(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PipelineStageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pipelineStage: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/product")
  @ApiNestedQuery(ProductFindManyArgs)
  async findManyProduct(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Product[]> {
    const query = plainToClass(ProductFindManyArgs, request.query);
    const results = await this.service.findProduct(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        enabled: true,
        code: true,
        imageUrl: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        productType: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        productCategory: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/product")
  async connectProduct(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      product: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/product")
  async updateProduct(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      product: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/product")
  async disconnectProduct(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      product: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productCategory")
  @ApiNestedQuery(ProductCategoryFindManyArgs)
  async findManyProductCategory(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductCategory[]> {
    const query = plainToClass(ProductCategoryFindManyArgs, request.query);
    const results = await this.service.findProductCategory(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        imageUrl: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productCategory")
  async connectProductCategory(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productCategory: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productCategory")
  async updateProductCategory(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productCategory: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productCategory")
  async disconnectProductCategory(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productCategory: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productCategoryTranslation")
  @ApiNestedQuery(ProductCategoryTranslationFindManyArgs)
  async findManyProductCategoryTranslation(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductCategoryTranslation[]> {
    const query = plainToClass(
      ProductCategoryTranslationFindManyArgs,
      request.query
    );
    const results = await this.service.findProductCategoryTranslation(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          languageCode: true,

          tenant: {
            select: {
              id: true,
            },
          },

          productCategory: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productCategoryTranslation")
  async connectProductCategoryTranslation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductCategoryTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productCategoryTranslation: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productCategoryTranslation")
  async updateProductCategoryTranslation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductCategoryTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productCategoryTranslation: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productCategoryTranslation")
  async disconnectProductCategoryTranslation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductCategoryTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productCategoryTranslation: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productOption")
  @ApiNestedQuery(ProductOptionFindManyArgs)
  async findManyProductOption(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductOption[]> {
    const query = plainToClass(ProductOptionFindManyArgs, request.query);
    const results = await this.service.findProductOption(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        code: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productOptionGroup: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productOption")
  async connectProductOption(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOption: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productOption")
  async updateProductOption(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOption: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productOption")
  async disconnectProductOption(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOption: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productOptionGroup")
  @ApiNestedQuery(ProductOptionGroupFindManyArgs)
  async findManyProductOptionGroup(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductOptionGroup[]> {
    const query = plainToClass(ProductOptionGroupFindManyArgs, request.query);
    const results = await this.service.findProductOptionGroup(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productOptionGroup")
  async connectProductOptionGroup(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductOptionGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionGroup: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productOptionGroup")
  async updateProductOptionGroup(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductOptionGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionGroup: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productOptionGroup")
  async disconnectProductOptionGroup(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductOptionGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionGroup: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productOptionGroupTranslation")
  @ApiNestedQuery(ProductOptionGroupTranslationFindManyArgs)
  async findManyProductOptionGroupTranslation(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductOptionGroupTranslation[]> {
    const query = plainToClass(
      ProductOptionGroupTranslationFindManyArgs,
      request.query
    );
    const results = await this.service.findProductOptionGroupTranslation(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          languageCode: true,

          organization: {
            select: {
              id: true,
            },
          },

          productOptionGroup: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productOptionGroupTranslation")
  async connectProductOptionGroupTranslation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductOptionGroupTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionGroupTranslation: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productOptionGroupTranslation")
  async updateProductOptionGroupTranslation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductOptionGroupTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionGroupTranslation: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productOptionGroupTranslation")
  async disconnectProductOptionGroupTranslation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductOptionGroupTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionGroupTranslation: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productOptionTranslation")
  @ApiNestedQuery(ProductOptionTranslationFindManyArgs)
  async findManyProductOptionTranslation(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductOptionTranslation[]> {
    const query = plainToClass(
      ProductOptionTranslationFindManyArgs,
      request.query
    );
    const results = await this.service.findProductOptionTranslation(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        languageCode: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productOption: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productOptionTranslation")
  async connectProductOptionTranslation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductOptionTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionTranslation: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productOptionTranslation")
  async updateProductOptionTranslation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductOptionTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionTranslation: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productOptionTranslation")
  async disconnectProductOptionTranslation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductOptionTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOptionTranslation: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productTranslation")
  @ApiNestedQuery(ProductTranslationFindManyArgs)
  async findManyProductTranslation(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductTranslation[]> {
    const query = plainToClass(ProductTranslationFindManyArgs, request.query);
    const results = await this.service.findProductTranslation(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        languageCode: true,

        tenant: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productTranslation")
  async connectProductTranslation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productTranslation: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productTranslation")
  async updateProductTranslation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productTranslation: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productTranslation")
  async disconnectProductTranslation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productTranslation: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productType")
  @ApiNestedQuery(ProductTypeFindManyArgs)
  async findManyProductType(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductType[]> {
    const query = plainToClass(ProductTypeFindManyArgs, request.query);
    const results = await this.service.findProductType(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        icon: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productType")
  async connectProductType(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productType: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productType")
  async updateProductType(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productType: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productType")
  async disconnectProductType(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productType: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productTypeTranslation")
  @ApiNestedQuery(ProductTypeTranslationFindManyArgs)
  async findManyProductTypeTranslation(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductTypeTranslation[]> {
    const query = plainToClass(
      ProductTypeTranslationFindManyArgs,
      request.query
    );
    const results = await this.service.findProductTypeTranslation(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        languageCode: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productType: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productTypeTranslation")
  async connectProductTypeTranslation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductTypeTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productTypeTranslation: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productTypeTranslation")
  async updateProductTypeTranslation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductTypeTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productTypeTranslation: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productTypeTranslation")
  async disconnectProductTypeTranslation(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductTypeTranslationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productTypeTranslation: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productVariant")
  @ApiNestedQuery(ProductVariantFindManyArgs)
  async findManyProductVariant(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductVariant[]> {
    const query = plainToClass(ProductVariantFindManyArgs, request.query);
    const results = await this.service.findProductVariant(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        taxes: true,
        notes: true,
        quantity: true,
        billingInvoicingPolicy: true,
        internalReference: true,
        enabled: true,

        productVariantPriceProductVariantPriceIdToproductVariantPrice: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productVariantSettingProductVariantSettingIdToproductVariantSetting: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        productVariantPriceProductVariantPriceProductVariantIdToproductVariant:
          {
            select: {
              id: true,
            },
          },

        productVariantSettingProductVariantSettingProductVariantIdToproductVariant:
          {
            select: {
              id: true,
            },
          },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productVariant")
  async connectProductVariant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariant: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productVariant")
  async updateProductVariant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariant: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productVariant")
  async disconnectProductVariant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariant: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productVariantPrice")
  @ApiNestedQuery(ProductVariantPriceFindManyArgs)
  async findManyProductVariantPrice(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductVariantPrice[]> {
    const query = plainToClass(ProductVariantPriceFindManyArgs, request.query);
    const results = await this.service.findProductVariantPrice(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        unitCost: true,
        unitCostCurrency: true,
        retailPrice: true,
        retailPriceCurrency: true,

        organization: {
          select: {
            id: true,
          },
        },

        productVariantProductVariantPriceProductVariantIdToproductVariant: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productVariantProductVariantPriceIdToproductVariantPrice: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productVariantPrice")
  async connectProductVariantPrice(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductVariantPriceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariantPrice: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productVariantPrice")
  async updateProductVariantPrice(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductVariantPriceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariantPrice: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productVariantPrice")
  async disconnectProductVariantPrice(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductVariantPriceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariantPrice: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/productVariantSetting")
  @ApiNestedQuery(ProductVariantSettingFindManyArgs)
  async findManyProductVariantSetting(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductVariantSetting[]> {
    const query = plainToClass(
      ProductVariantSettingFindManyArgs,
      request.query
    );
    const results = await this.service.findProductVariantSetting(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        isSubscription: true,
        isPurchaseAutomatically: true,
        canBeSold: true,
        canBePurchased: true,
        canBeCharged: true,
        canBeRented: true,
        isEquipment: true,
        trackInventory: true,

        tenant: {
          select: {
            id: true,
          },
        },

        productVariantProductVariantSettingProductVariantIdToproductVariant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        productVariantProductVariantSettingIdToproductVariantSetting: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productVariantSetting")
  async connectProductVariantSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductVariantSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariantSetting: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productVariantSetting")
  async updateProductVariantSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductVariantSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariantSetting: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productVariantSetting")
  async disconnectProductVariantSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductVariantSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariantSetting: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/proposal")
  @ApiNestedQuery(ProposalFindManyArgs)
  async findManyProposal(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Proposal[]> {
    const query = plainToClass(ProposalFindManyArgs, request.query);
    const results = await this.service.findProposal(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        jobPostUrl: true,
        valueDate: true,
        jobPostContent: true,
        proposalContent: true,
        status: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/proposal")
  async connectProposal(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProposalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proposal: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/proposal")
  async updateProposal(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProposalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proposal: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/proposal")
  async disconnectProposal(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProposalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proposal: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/reportOrganization")
  @ApiNestedQuery(ReportOrganizationFindManyArgs)
  async findManyReportOrganization(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ReportOrganization[]> {
    const query = plainToClass(ReportOrganizationFindManyArgs, request.query);
    const results = await this.service.findReportOrganization(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        isEnabled: true,

        organization: {
          select: {
            id: true,
          },
        },

        report: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reportOrganization")
  async connectReportOrganization(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ReportOrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reportOrganization: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reportOrganization")
  async updateReportOrganization(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ReportOrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reportOrganization: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reportOrganization")
  async disconnectReportOrganization(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ReportOrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reportOrganization: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/requestApproval")
  @ApiNestedQuery(RequestApprovalFindManyArgs)
  async findManyRequestApproval(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<RequestApproval[]> {
    const query = plainToClass(RequestApprovalFindManyArgs, request.query);
    const results = await this.service.findRequestApproval(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        status: true,
        createdBy: true,
        createdByName: true,
        minCount: true,
        requestId: true,
        requestType: true,

        approvalPolicy: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/requestApproval")
  async connectRequestApproval(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RequestApprovalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApproval: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/requestApproval")
  async updateRequestApproval(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RequestApprovalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApproval: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/requestApproval")
  async disconnectRequestApproval(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RequestApprovalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApproval: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/requestApprovalEmployee")
  @ApiNestedQuery(RequestApprovalEmployeeFindManyArgs)
  async findManyRequestApprovalEmployee(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<RequestApprovalEmployee[]> {
    const query = plainToClass(
      RequestApprovalEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findRequestApprovalEmployee(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        organization: {
          select: {
            id: true,
          },
        },

        requestApproval: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/requestApprovalEmployee")
  async connectRequestApprovalEmployee(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RequestApprovalEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/requestApprovalEmployee")
  async updateRequestApprovalEmployee(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RequestApprovalEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/requestApprovalEmployee")
  async disconnectRequestApprovalEmployee(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RequestApprovalEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/requestApprovalTeam")
  @ApiNestedQuery(RequestApprovalTeamFindManyArgs)
  async findManyRequestApprovalTeam(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<RequestApprovalTeam[]> {
    const query = plainToClass(RequestApprovalTeamFindManyArgs, request.query);
    const results = await this.service.findRequestApprovalTeam(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        requestApproval: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/requestApprovalTeam")
  async connectRequestApprovalTeam(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RequestApprovalTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalTeam: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/requestApprovalTeam")
  async updateRequestApprovalTeam(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RequestApprovalTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalTeam: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/requestApprovalTeam")
  async disconnectRequestApprovalTeam(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RequestApprovalTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requestApprovalTeam: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/role")
  @ApiNestedQuery(RoleFindManyArgs)
  async findManyRole(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Role[]> {
    const query = plainToClass(RoleFindManyArgs, request.query);
    const results = await this.service.findRole(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        isSystem: true,

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/role")
  async connectRole(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      role: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/role")
  async updateRole(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      role: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/role")
  async disconnectRole(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      role: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/rolePermission")
  @ApiNestedQuery(RolePermissionFindManyArgs)
  async findManyRolePermission(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<RolePermission[]> {
    const query = plainToClass(RolePermissionFindManyArgs, request.query);
    const results = await this.service.findRolePermission(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        permission: true,
        enabled: true,
        description: true,

        tenant: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rolePermission")
  async connectRolePermission(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RolePermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rolePermission: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rolePermission")
  async updateRolePermission(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RolePermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rolePermission: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rolePermission")
  async disconnectRolePermission(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RolePermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rolePermission: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/screenshot")
  @ApiNestedQuery(ScreenshotFindManyArgs)
  async findManyScreenshot(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Screenshot[]> {
    const query = plainToClass(ScreenshotFindManyArgs, request.query);
    const results = await this.service.findScreenshot(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        file: true,
        thumb: true,
        recordedAt: true,
        deletedAt: true,
        storageProvider: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        timeSlot: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/screenshot")
  async connectScreenshot(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ScreenshotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      screenshot: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/screenshot")
  async updateScreenshot(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ScreenshotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      screenshot: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/screenshot")
  async disconnectScreenshot(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ScreenshotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      screenshot: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/skill")
  @ApiNestedQuery(SkillFindManyArgs)
  async findManySkill(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Skill[]> {
    const query = plainToClass(SkillFindManyArgs, request.query);
    const results = await this.service.findSkill(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        color: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/skill")
  async connectSkill(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      skill: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/skill")
  async updateSkill(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      skill: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/skill")
  async disconnectSkill(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      skill: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tag")
  @ApiNestedQuery(TagFindManyArgs)
  async findManyTag(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Tag[]> {
    const query = plainToClass(TagFindManyArgs, request.query);
    const results = await this.service.findTag(params.id, {
      ...query,
      select: {
        updatedAt: true,
        name: true,
        id: true,
        createdAt: true,
        description: true,
        color: true,
        isSystem: true,
        icon: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tag")
  async connectTag(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tag: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tag")
  async updateTag(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tag: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tag")
  async disconnectTag(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tag: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/task")
  @ApiNestedQuery(TaskFindManyArgs)
  async findManyTask(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Task[]> {
    const query = plainToClass(TaskFindManyArgs, request.query);
    const results = await this.service.findTask(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        status: true,
        estimate: true,
        dueDate: true,
        numberField: true,
        prefix: true,
        priority: true,
        size: true,
        publicField: true,
        startDate: true,
        resolvedAt: true,
        version: true,
        issueType: true,

        organizationSprint: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/task")
  async connectTask(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      task: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/task")
  async updateTask(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      task: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/task")
  async disconnectTask(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      task: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskLinkedIssues")
  @ApiNestedQuery(TaskLinkedIssueFindManyArgs)
  async findManyTaskLinkedIssues(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<TaskLinkedIssue[]> {
    const query = plainToClass(TaskLinkedIssueFindManyArgs, request.query);
    const results = await this.service.findTaskLinkedIssues(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        action: true,

        taskTaskLinkedIssuesTaskToIdTotask: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        taskTaskLinkedIssuesTaskFromIdTotask: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskLinkedIssues")
  async connectTaskLinkedIssues(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskLinkedIssueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskLinkedIssues: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskLinkedIssues")
  async updateTaskLinkedIssues(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskLinkedIssueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskLinkedIssues: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskLinkedIssues")
  async disconnectTaskLinkedIssues(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskLinkedIssueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskLinkedIssues: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskPriority")
  @ApiNestedQuery(TaskPriorityFindManyArgs)
  async findManyTaskPriority(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<TaskPriority[]> {
    const query = plainToClass(TaskPriorityFindManyArgs, request.query);
    const results = await this.service.findTaskPriority(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskPriority")
  async connectTaskPriority(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskPriorityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskPriority: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskPriority")
  async updateTaskPriority(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskPriorityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskPriority: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskPriority")
  async disconnectTaskPriority(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskPriorityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskPriority: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskRelatedIssueType")
  @ApiNestedQuery(TaskRelatedIssueTypeFindManyArgs)
  async findManyTaskRelatedIssueType(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<TaskRelatedIssueType[]> {
    const query = plainToClass(TaskRelatedIssueTypeFindManyArgs, request.query);
    const results = await this.service.findTaskRelatedIssueType(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskRelatedIssueType")
  async connectTaskRelatedIssueType(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskRelatedIssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskRelatedIssueType: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskRelatedIssueType")
  async updateTaskRelatedIssueType(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskRelatedIssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskRelatedIssueType: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskRelatedIssueType")
  async disconnectTaskRelatedIssueType(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskRelatedIssueTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskRelatedIssueType: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskSize")
  @ApiNestedQuery(TaskSizeFindManyArgs)
  async findManyTaskSize(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<TaskSize[]> {
    const query = plainToClass(TaskSizeFindManyArgs, request.query);
    const results = await this.service.findTaskSize(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskSize")
  async connectTaskSize(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskSizeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskSize: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskSize")
  async updateTaskSize(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskSizeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskSize: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskSize")
  async disconnectTaskSize(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskSizeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskSize: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskStatus")
  @ApiNestedQuery(TaskStatusFindManyArgs)
  async findManyTaskStatus(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<TaskStatus[]> {
    const query = plainToClass(TaskStatusFindManyArgs, request.query);
    const results = await this.service.findTaskStatus(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskStatus")
  async connectTaskStatus(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskStatus: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskStatus")
  async updateTaskStatus(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskStatus: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskStatus")
  async disconnectTaskStatus(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskStatus: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/taskVersion")
  @ApiNestedQuery(TaskVersionFindManyArgs)
  async findManyTaskVersion(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<TaskVersion[]> {
    const query = plainToClass(TaskVersionFindManyArgs, request.query);
    const results = await this.service.findTaskVersion(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,
        description: true,
        icon: true,
        color: true,
        isSystem: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organizationTeam: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taskVersion")
  async connectTaskVersion(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskVersionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskVersion: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taskVersion")
  async updateTaskVersion(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskVersionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskVersion: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taskVersion")
  async disconnectTaskVersion(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TaskVersionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taskVersion: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tenantSetting")
  @ApiNestedQuery(TenantSettingFindManyArgs)
  async findManyTenantSetting(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<TenantSetting[]> {
    const query = plainToClass(TenantSettingFindManyArgs, request.query);
    const results = await this.service.findTenantSetting(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tenantSetting")
  async connectTenantSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TenantSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tenantSetting: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tenantSetting")
  async updateTenantSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TenantSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tenantSetting: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tenantSetting")
  async disconnectTenantSetting(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TenantSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tenantSetting: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeLog")
  @ApiNestedQuery(TimeLogFindManyArgs)
  async findManyTimeLog(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<TimeLog[]> {
    const query = plainToClass(TimeLogFindManyArgs, request.query);
    const results = await this.service.findTimeLog(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startedAt: true,
        stoppedAt: true,
        logType: true,
        source: true,
        description: true,
        reason: true,
        isBillable: true,
        deletedAt: true,
        isRunning: true,
        version: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        timesheet: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeLog")
  async connectTimeLog(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeLog")
  async updateTimeLog(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeLog")
  async disconnectTimeLog(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeOffPolicy")
  @ApiNestedQuery(TimeOffPolicyFindManyArgs)
  async findManyTimeOffPolicy(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<TimeOffPolicy[]> {
    const query = plainToClass(TimeOffPolicyFindManyArgs, request.query);
    const results = await this.service.findTimeOffPolicy(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        requiresApproval: true,
        paid: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeOffPolicy")
  async connectTimeOffPolicy(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimeOffPolicyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffPolicy: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeOffPolicy")
  async updateTimeOffPolicy(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimeOffPolicyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffPolicy: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeOffPolicy")
  async disconnectTimeOffPolicy(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimeOffPolicyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffPolicy: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeOffRequest")
  @ApiNestedQuery(TimeOffRequestFindManyArgs)
  async findManyTimeOffRequest(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<TimeOffRequest[]> {
    const query = plainToClass(TimeOffRequestFindManyArgs, request.query);
    const results = await this.service.findTimeOffRequest(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        documentUrl: true,
        description: true,
        start: true,
        end: true,
        requestDate: true,
        status: true,
        isHoliday: true,
        isArchived: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        timeOffPolicy: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeOffRequest")
  async connectTimeOffRequest(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimeOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffRequest: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeOffRequest")
  async updateTimeOffRequest(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimeOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffRequest: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeOffRequest")
  async disconnectTimeOffRequest(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimeOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffRequest: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeSlot")
  @ApiNestedQuery(TimeSlotFindManyArgs)
  async findManyTimeSlot(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<TimeSlot[]> {
    const query = plainToClass(TimeSlotFindManyArgs, request.query);
    const results = await this.service.findTimeSlot(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        keyboard: true,
        mouse: true,
        overall: true,
        startedAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeSlot")
  async connectTimeSlot(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlot: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeSlot")
  async updateTimeSlot(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlot: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeSlot")
  async disconnectTimeSlot(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlot: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeSlotMinute")
  @ApiNestedQuery(TimeSlotMinuteFindManyArgs)
  async findManyTimeSlotMinute(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<TimeSlotMinute[]> {
    const query = plainToClass(TimeSlotMinuteFindManyArgs, request.query);
    const results = await this.service.findTimeSlotMinute(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        keyboard: true,
        mouse: true,
        datetime: true,

        organization: {
          select: {
            id: true,
          },
        },

        timeSlot: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeSlotMinute")
  async connectTimeSlotMinute(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimeSlotMinuteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlotMinute: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeSlotMinute")
  async updateTimeSlotMinute(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimeSlotMinuteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlotMinute: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeSlotMinute")
  async disconnectTimeSlotMinute(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimeSlotMinuteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlotMinute: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timesheet")
  @ApiNestedQuery(TimesheetFindManyArgs)
  async findManyTimesheet(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Timesheet[]> {
    const query = plainToClass(TimesheetFindManyArgs, request.query);
    const results = await this.service.findTimesheet(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        keyboard: true,
        mouse: true,
        overall: true,
        startedAt: true,
        stoppedAt: true,
        approvedAt: true,
        submittedAt: true,
        lockedAt: true,
        isBilled: true,
        status: true,
        deletedAt: true,

        tenant: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timesheet")
  async connectTimesheet(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimesheetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timesheet: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timesheet")
  async updateTimesheet(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimesheetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timesheet: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timesheet")
  async disconnectTimesheet(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: TimesheetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timesheet: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/user")
  @ApiNestedQuery(UserFindManyArgs)
  async findManyUser(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUser(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        thirdPartyId: true,
        firstName: true,
        lastName: true,
        email: true,
        hash: true,
        imageUrl: true,
        preferredLanguage: true,
        refreshToken: true,
        isActive: true,
        preferredComponentLayout: true,
        code: true,
        codeExpireAt: true,
        emailVerifiedAt: true,
        emailToken: true,
        phoneNumber: true,
        timeZone: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/user")
  async connectUser(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      user: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/user")
  async updateUser(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      user: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/user")
  async disconnectUser(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      user: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userOrganization")
  @ApiNestedQuery(UserOrganizationFindManyArgs)
  async findManyUserOrganization(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<UserOrganization[]> {
    const query = plainToClass(UserOrganizationFindManyArgs, request.query);
    const results = await this.service.findUserOrganization(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        isDefault: true,
        isActive: true,

        user: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userOrganization")
  async connectUserOrganization(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: UserOrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userOrganization: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userOrganization")
  async updateUserOrganization(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: UserOrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userOrganization: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userOrganization")
  async disconnectUserOrganization(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: UserOrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userOrganization: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/warehouse")
  @ApiNestedQuery(WarehouseFindManyArgs)
  async findManyWarehouse(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Warehouse[]> {
    const query = plainToClass(WarehouseFindManyArgs, request.query);
    const results = await this.service.findWarehouse(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        code: true,
        email: true,
        description: true,
        active: true,

        contact: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/warehouse")
  async connectWarehouse(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: WarehouseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouse: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/warehouse")
  async updateWarehouse(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: WarehouseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouse: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/warehouse")
  async disconnectWarehouse(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: WarehouseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouse: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/warehouseProduct")
  @ApiNestedQuery(WarehouseProductFindManyArgs)
  async findManyWarehouseProduct(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<WarehouseProduct[]> {
    const query = plainToClass(WarehouseProductFindManyArgs, request.query);
    const results = await this.service.findWarehouseProduct(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        quantity: true,

        product: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        warehouse: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/warehouseProduct")
  async connectWarehouseProduct(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: WarehouseProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseProduct: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/warehouseProduct")
  async updateWarehouseProduct(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: WarehouseProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseProduct: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/warehouseProduct")
  async disconnectWarehouseProduct(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: WarehouseProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseProduct: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/warehouseProductVariant")
  @ApiNestedQuery(WarehouseProductVariantFindManyArgs)
  async findManyWarehouseProductVariant(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<WarehouseProductVariant[]> {
    const query = plainToClass(
      WarehouseProductVariantFindManyArgs,
      request.query
    );
    const results = await this.service.findWarehouseProductVariant(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        quantity: true,

        warehouseProduct: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        productVariant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/warehouseProductVariant")
  async connectWarehouseProductVariant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: WarehouseProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseProductVariant: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/warehouseProductVariant")
  async updateWarehouseProductVariant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: WarehouseProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseProductVariant: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/warehouseProductVariant")
  async disconnectWarehouseProductVariant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: WarehouseProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseProductVariant: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
