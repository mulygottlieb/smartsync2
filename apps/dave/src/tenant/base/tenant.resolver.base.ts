/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTenantArgs } from "./CreateTenantArgs";
import { UpdateTenantArgs } from "./UpdateTenantArgs";
import { DeleteTenantArgs } from "./DeleteTenantArgs";
import { TenantCountArgs } from "./TenantCountArgs";
import { TenantFindManyArgs } from "./TenantFindManyArgs";
import { TenantFindUniqueArgs } from "./TenantFindUniqueArgs";
import { Tenant } from "./Tenant";
import { AccountingTemplateFindManyArgs } from "../../accountingTemplate/base/AccountingTemplateFindManyArgs";
import { AccountingTemplate } from "../../accountingTemplate/base/AccountingTemplate";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { AppointmentEmployeeFindManyArgs } from "../../appointmentEmployee/base/AppointmentEmployeeFindManyArgs";
import { AppointmentEmployee } from "../../appointmentEmployee/base/AppointmentEmployee";
import { ApprovalPolicyFindManyArgs } from "../../approvalPolicy/base/ApprovalPolicyFindManyArgs";
import { ApprovalPolicy } from "../../approvalPolicy/base/ApprovalPolicy";
import { AvailabilitySlotFindManyArgs } from "../../availabilitySlot/base/AvailabilitySlotFindManyArgs";
import { AvailabilitySlot } from "../../availabilitySlot/base/AvailabilitySlot";
import { CandidateFindManyArgs } from "../../candidate/base/CandidateFindManyArgs";
import { Candidate } from "../../candidate/base/Candidate";
import { CandidateCriterionRatingFindManyArgs } from "../../candidateCriterionRating/base/CandidateCriterionRatingFindManyArgs";
import { CandidateCriterionRating } from "../../candidateCriterionRating/base/CandidateCriterionRating";
import { CandidateDocumentFindManyArgs } from "../../candidateDocument/base/CandidateDocumentFindManyArgs";
import { CandidateDocument } from "../../candidateDocument/base/CandidateDocument";
import { CandidateEducationFindManyArgs } from "../../candidateEducation/base/CandidateEducationFindManyArgs";
import { CandidateEducation } from "../../candidateEducation/base/CandidateEducation";
import { CandidateExperienceFindManyArgs } from "../../candidateExperience/base/CandidateExperienceFindManyArgs";
import { CandidateExperience } from "../../candidateExperience/base/CandidateExperience";
import { CandidateFeedbackFindManyArgs } from "../../candidateFeedback/base/CandidateFeedbackFindManyArgs";
import { CandidateFeedback } from "../../candidateFeedback/base/CandidateFeedback";
import { CandidateInterviewFindManyArgs } from "../../candidateInterview/base/CandidateInterviewFindManyArgs";
import { CandidateInterview } from "../../candidateInterview/base/CandidateInterview";
import { CandidateInterviewerFindManyArgs } from "../../candidateInterviewer/base/CandidateInterviewerFindManyArgs";
import { CandidateInterviewer } from "../../candidateInterviewer/base/CandidateInterviewer";
import { CandidatePersonalQualityFindManyArgs } from "../../candidatePersonalQuality/base/CandidatePersonalQualityFindManyArgs";
import { CandidatePersonalQuality } from "../../candidatePersonalQuality/base/CandidatePersonalQuality";
import { CandidateSkillFindManyArgs } from "../../candidateSkill/base/CandidateSkillFindManyArgs";
import { CandidateSkill } from "../../candidateSkill/base/CandidateSkill";
import { CandidateSourceFindManyArgs } from "../../candidateSource/base/CandidateSourceFindManyArgs";
import { CandidateSource } from "../../candidateSource/base/CandidateSource";
import { CandidateTechnologyFindManyArgs } from "../../candidateTechnology/base/CandidateTechnologyFindManyArgs";
import { CandidateTechnology } from "../../candidateTechnology/base/CandidateTechnology";
import { ChangelogFindManyArgs } from "../../changelog/base/ChangelogFindManyArgs";
import { Changelog } from "../../changelog/base/Changelog";
import { ContactFindManyArgs } from "../../contact/base/ContactFindManyArgs";
import { Contact } from "../../contact/base/Contact";
import { CustomSmtpFindManyArgs } from "../../customSmtp/base/CustomSmtpFindManyArgs";
import { CustomSmtp } from "../../customSmtp/base/CustomSmtp";
import { DealFindManyArgs } from "../../deal/base/DealFindManyArgs";
import { Deal } from "../../deal/base/Deal";
import { EmailResetFindManyArgs } from "../../emailReset/base/EmailResetFindManyArgs";
import { EmailReset } from "../../emailReset/base/EmailReset";
import { EmailSentFindManyArgs } from "../../emailSent/base/EmailSentFindManyArgs";
import { EmailSent } from "../../emailSent/base/EmailSent";
import { EmailTemplateFindManyArgs } from "../../emailTemplate/base/EmailTemplateFindManyArgs";
import { EmailTemplate } from "../../emailTemplate/base/EmailTemplate";
import { EmployeeFindManyArgs } from "../../employee/base/EmployeeFindManyArgs";
import { Employee } from "../../employee/base/Employee";
import { EmployeeAppointmentFindManyArgs } from "../../employeeAppointment/base/EmployeeAppointmentFindManyArgs";
import { EmployeeAppointment } from "../../employeeAppointment/base/EmployeeAppointment";
import { EmployeeAwardFindManyArgs } from "../../employeeAward/base/EmployeeAwardFindManyArgs";
import { EmployeeAward } from "../../employeeAward/base/EmployeeAward";
import { EmployeeLevelFindManyArgs } from "../../employeeLevel/base/EmployeeLevelFindManyArgs";
import { EmployeeLevel } from "../../employeeLevel/base/EmployeeLevel";
import { EmployeePhoneFindManyArgs } from "../../employeePhone/base/EmployeePhoneFindManyArgs";
import { EmployeePhone } from "../../employeePhone/base/EmployeePhone";
import { EmployeeProposalTemplateFindManyArgs } from "../../employeeProposalTemplate/base/EmployeeProposalTemplateFindManyArgs";
import { EmployeeProposalTemplate } from "../../employeeProposalTemplate/base/EmployeeProposalTemplate";
import { EmployeeRecurringExpenseFindManyArgs } from "../../employeeRecurringExpense/base/EmployeeRecurringExpenseFindManyArgs";
import { EmployeeRecurringExpense } from "../../employeeRecurringExpense/base/EmployeeRecurringExpense";
import { EmployeeSettingFindManyArgs } from "../../employeeSetting/base/EmployeeSettingFindManyArgs";
import { EmployeeSetting } from "../../employeeSetting/base/EmployeeSetting";
import { EmployeeUpworkJobSearchCriterionFindManyArgs } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterionFindManyArgs";
import { EmployeeUpworkJobSearchCriterion } from "../../employeeUpworkJobSearchCriterion/base/EmployeeUpworkJobSearchCriterion";
import { EquipmentFindManyArgs } from "../../equipment/base/EquipmentFindManyArgs";
import { Equipment } from "../../equipment/base/Equipment";
import { EquipmentSharingFindManyArgs } from "../../equipmentSharing/base/EquipmentSharingFindManyArgs";
import { EquipmentSharing } from "../../equipmentSharing/base/EquipmentSharing";
import { EquipmentSharingPolicyFindManyArgs } from "../../equipmentSharingPolicy/base/EquipmentSharingPolicyFindManyArgs";
import { EquipmentSharingPolicy } from "../../equipmentSharingPolicy/base/EquipmentSharingPolicy";
import { EstimateEmailFindManyArgs } from "../../estimateEmail/base/EstimateEmailFindManyArgs";
import { EstimateEmail } from "../../estimateEmail/base/EstimateEmail";
import { EventTypeFindManyArgs } from "../../eventType/base/EventTypeFindManyArgs";
import { EventType } from "../../eventType/base/EventType";
import { ExpenseFindManyArgs } from "../../expense/base/ExpenseFindManyArgs";
import { Expense } from "../../expense/base/Expense";
import { ExpenseCategoryFindManyArgs } from "../../expenseCategory/base/ExpenseCategoryFindManyArgs";
import { ExpenseCategory } from "../../expenseCategory/base/ExpenseCategory";
import { FeatureOrganizationFindManyArgs } from "../../featureOrganization/base/FeatureOrganizationFindManyArgs";
import { FeatureOrganization } from "../../featureOrganization/base/FeatureOrganization";
import { GoalFindManyArgs } from "../../goal/base/GoalFindManyArgs";
import { Goal } from "../../goal/base/Goal";
import { GoalGeneralSettingFindManyArgs } from "../../goalGeneralSetting/base/GoalGeneralSettingFindManyArgs";
import { GoalGeneralSetting } from "../../goalGeneralSetting/base/GoalGeneralSetting";
import { GoalKpiFindManyArgs } from "../../goalKpi/base/GoalKpiFindManyArgs";
import { GoalKpi } from "../../goalKpi/base/GoalKpi";
import { GoalKpiTemplateFindManyArgs } from "../../goalKpiTemplate/base/GoalKpiTemplateFindManyArgs";
import { GoalKpiTemplate } from "../../goalKpiTemplate/base/GoalKpiTemplate";
import { GoalTemplateFindManyArgs } from "../../goalTemplate/base/GoalTemplateFindManyArgs";
import { GoalTemplate } from "../../goalTemplate/base/GoalTemplate";
import { GoalTimeFrameFindManyArgs } from "../../goalTimeFrame/base/GoalTimeFrameFindManyArgs";
import { GoalTimeFrame } from "../../goalTimeFrame/base/GoalTimeFrame";
import { ImageAssetFindManyArgs } from "../../imageAsset/base/ImageAssetFindManyArgs";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { ImportHistoryFindManyArgs } from "../../importHistory/base/ImportHistoryFindManyArgs";
import { ImportHistory } from "../../importHistory/base/ImportHistory";
import { ImportRecordFindManyArgs } from "../../importRecord/base/ImportRecordFindManyArgs";
import { ImportRecord } from "../../importRecord/base/ImportRecord";
import { IncomeFindManyArgs } from "../../income/base/IncomeFindManyArgs";
import { Income } from "../../income/base/Income";
import { IntegrationEntitySettingFindManyArgs } from "../../integrationEntitySetting/base/IntegrationEntitySettingFindManyArgs";
import { IntegrationEntitySetting } from "../../integrationEntitySetting/base/IntegrationEntitySetting";
import { IntegrationEntitySettingTiedFindManyArgs } from "../../integrationEntitySettingTied/base/IntegrationEntitySettingTiedFindManyArgs";
import { IntegrationEntitySettingTied } from "../../integrationEntitySettingTied/base/IntegrationEntitySettingTied";
import { IntegrationMapFindManyArgs } from "../../integrationMap/base/IntegrationMapFindManyArgs";
import { IntegrationMap } from "../../integrationMap/base/IntegrationMap";
import { IntegrationSettingFindManyArgs } from "../../integrationSetting/base/IntegrationSettingFindManyArgs";
import { IntegrationSetting } from "../../integrationSetting/base/IntegrationSetting";
import { IntegrationTenantFindManyArgs } from "../../integrationTenant/base/IntegrationTenantFindManyArgs";
import { IntegrationTenant } from "../../integrationTenant/base/IntegrationTenant";
import { InviteFindManyArgs } from "../../invite/base/InviteFindManyArgs";
import { Invite } from "../../invite/base/Invite";
import { InvoiceFindManyArgs } from "../../invoice/base/InvoiceFindManyArgs";
import { Invoice } from "../../invoice/base/Invoice";
import { InvoiceEstimateHistoryFindManyArgs } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistoryFindManyArgs";
import { InvoiceEstimateHistory } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistory";
import { InvoiceItemFindManyArgs } from "../../invoiceItem/base/InvoiceItemFindManyArgs";
import { InvoiceItem } from "../../invoiceItem/base/InvoiceItem";
import { IssueTypeFindManyArgs } from "../../issueType/base/IssueTypeFindManyArgs";
import { IssueType } from "../../issueType/base/IssueType";
import { JobPresetFindManyArgs } from "../../jobPreset/base/JobPresetFindManyArgs";
import { JobPreset } from "../../jobPreset/base/JobPreset";
import { JobPresetUpworkJobSearchCriterionFindManyArgs } from "../../jobPresetUpworkJobSearchCriterion/base/JobPresetUpworkJobSearchCriterionFindManyArgs";
import { JobPresetUpworkJobSearchCriterion } from "../../jobPresetUpworkJobSearchCriterion/base/JobPresetUpworkJobSearchCriterion";
import { JobSearchCategoryFindManyArgs } from "../../jobSearchCategory/base/JobSearchCategoryFindManyArgs";
import { JobSearchCategory } from "../../jobSearchCategory/base/JobSearchCategory";
import { JobSearchOccupationFindManyArgs } from "../../jobSearchOccupation/base/JobSearchOccupationFindManyArgs";
import { JobSearchOccupation } from "../../jobSearchOccupation/base/JobSearchOccupation";
import { KeyResultFindManyArgs } from "../../keyResult/base/KeyResultFindManyArgs";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { KeyResultTemplateFindManyArgs } from "../../keyResultTemplate/base/KeyResultTemplateFindManyArgs";
import { KeyResultTemplate } from "../../keyResultTemplate/base/KeyResultTemplate";
import { KeyResultUpdateFindManyArgs } from "../../keyResultUpdate/base/KeyResultUpdateFindManyArgs";
import { KeyResultUpdate } from "../../keyResultUpdate/base/KeyResultUpdate";
import { KnowledgeBaseFindManyArgs } from "../../knowledgeBase/base/KnowledgeBaseFindManyArgs";
import { KnowledgeBase } from "../../knowledgeBase/base/KnowledgeBase";
import { KnowledgeBaseArticleFindManyArgs } from "../../knowledgeBaseArticle/base/KnowledgeBaseArticleFindManyArgs";
import { KnowledgeBaseArticle } from "../../knowledgeBaseArticle/base/KnowledgeBaseArticle";
import { KnowledgeBaseAuthorFindManyArgs } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthorFindManyArgs";
import { KnowledgeBaseAuthor } from "../../knowledgeBaseAuthor/base/KnowledgeBaseAuthor";
import { MerchantFindManyArgs } from "../../merchant/base/MerchantFindManyArgs";
import { Merchant } from "../../merchant/base/Merchant";
import { OrganizationFindManyArgs } from "../../organization/base/OrganizationFindManyArgs";
import { Organization } from "../../organization/base/Organization";
import { OrganizationAwardFindManyArgs } from "../../organizationAward/base/OrganizationAwardFindManyArgs";
import { OrganizationAward } from "../../organizationAward/base/OrganizationAward";
import { OrganizationContactFindManyArgs } from "../../organizationContact/base/OrganizationContactFindManyArgs";
import { OrganizationContact } from "../../organizationContact/base/OrganizationContact";
import { OrganizationDepartmentFindManyArgs } from "../../organizationDepartment/base/OrganizationDepartmentFindManyArgs";
import { OrganizationDepartment } from "../../organizationDepartment/base/OrganizationDepartment";
import { OrganizationDocumentFindManyArgs } from "../../organizationDocument/base/OrganizationDocumentFindManyArgs";
import { OrganizationDocument } from "../../organizationDocument/base/OrganizationDocument";
import { OrganizationEmploymentTypeFindManyArgs } from "../../organizationEmploymentType/base/OrganizationEmploymentTypeFindManyArgs";
import { OrganizationEmploymentType } from "../../organizationEmploymentType/base/OrganizationEmploymentType";
import { OrganizationLanguageFindManyArgs } from "../../organizationLanguage/base/OrganizationLanguageFindManyArgs";
import { OrganizationLanguage } from "../../organizationLanguage/base/OrganizationLanguage";
import { OrganizationPositionFindManyArgs } from "../../organizationPosition/base/OrganizationPositionFindManyArgs";
import { OrganizationPosition } from "../../organizationPosition/base/OrganizationPosition";
import { OrganizationProjectFindManyArgs } from "../../organizationProject/base/OrganizationProjectFindManyArgs";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { OrganizationRecurringExpenseFindManyArgs } from "../../organizationRecurringExpense/base/OrganizationRecurringExpenseFindManyArgs";
import { OrganizationRecurringExpense } from "../../organizationRecurringExpense/base/OrganizationRecurringExpense";
import { OrganizationSprintFindManyArgs } from "../../organizationSprint/base/OrganizationSprintFindManyArgs";
import { OrganizationSprint } from "../../organizationSprint/base/OrganizationSprint";
import { OrganizationTaskSettingFindManyArgs } from "../../organizationTaskSetting/base/OrganizationTaskSettingFindManyArgs";
import { OrganizationTaskSetting } from "../../organizationTaskSetting/base/OrganizationTaskSetting";
import { OrganizationTeamFindManyArgs } from "../../organizationTeam/base/OrganizationTeamFindManyArgs";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { OrganizationTeamEmployeeFindManyArgs } from "../../organizationTeamEmployee/base/OrganizationTeamEmployeeFindManyArgs";
import { OrganizationTeamEmployee } from "../../organizationTeamEmployee/base/OrganizationTeamEmployee";
import { OrganizationTeamJoinRequestFindManyArgs } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequestFindManyArgs";
import { OrganizationTeamJoinRequest } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequest";
import { OrganizationVendorFindManyArgs } from "../../organizationVendor/base/OrganizationVendorFindManyArgs";
import { OrganizationVendor } from "../../organizationVendor/base/OrganizationVendor";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PipelineFindManyArgs } from "../../pipeline/base/PipelineFindManyArgs";
import { Pipeline } from "../../pipeline/base/Pipeline";
import { PipelineStageFindManyArgs } from "../../pipelineStage/base/PipelineStageFindManyArgs";
import { PipelineStage } from "../../pipelineStage/base/PipelineStage";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { ProductCategoryFindManyArgs } from "../../productCategory/base/ProductCategoryFindManyArgs";
import { ProductCategory } from "../../productCategory/base/ProductCategory";
import { ProductCategoryTranslationFindManyArgs } from "../../productCategoryTranslation/base/ProductCategoryTranslationFindManyArgs";
import { ProductCategoryTranslation } from "../../productCategoryTranslation/base/ProductCategoryTranslation";
import { ProductOptionFindManyArgs } from "../../productOption/base/ProductOptionFindManyArgs";
import { ProductOption } from "../../productOption/base/ProductOption";
import { ProductOptionGroupFindManyArgs } from "../../productOptionGroup/base/ProductOptionGroupFindManyArgs";
import { ProductOptionGroup } from "../../productOptionGroup/base/ProductOptionGroup";
import { ProductOptionGroupTranslationFindManyArgs } from "../../productOptionGroupTranslation/base/ProductOptionGroupTranslationFindManyArgs";
import { ProductOptionGroupTranslation } from "../../productOptionGroupTranslation/base/ProductOptionGroupTranslation";
import { ProductOptionTranslationFindManyArgs } from "../../productOptionTranslation/base/ProductOptionTranslationFindManyArgs";
import { ProductOptionTranslation } from "../../productOptionTranslation/base/ProductOptionTranslation";
import { ProductTranslationFindManyArgs } from "../../productTranslation/base/ProductTranslationFindManyArgs";
import { ProductTranslation } from "../../productTranslation/base/ProductTranslation";
import { ProductTypeFindManyArgs } from "../../productType/base/ProductTypeFindManyArgs";
import { ProductType } from "../../productType/base/ProductType";
import { ProductTypeTranslationFindManyArgs } from "../../productTypeTranslation/base/ProductTypeTranslationFindManyArgs";
import { ProductTypeTranslation } from "../../productTypeTranslation/base/ProductTypeTranslation";
import { ProductVariantFindManyArgs } from "../../productVariant/base/ProductVariantFindManyArgs";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { ProductVariantPriceFindManyArgs } from "../../productVariantPrice/base/ProductVariantPriceFindManyArgs";
import { ProductVariantPrice } from "../../productVariantPrice/base/ProductVariantPrice";
import { ProductVariantSettingFindManyArgs } from "../../productVariantSetting/base/ProductVariantSettingFindManyArgs";
import { ProductVariantSetting } from "../../productVariantSetting/base/ProductVariantSetting";
import { ProposalFindManyArgs } from "../../proposal/base/ProposalFindManyArgs";
import { Proposal } from "../../proposal/base/Proposal";
import { ReportOrganizationFindManyArgs } from "../../reportOrganization/base/ReportOrganizationFindManyArgs";
import { ReportOrganization } from "../../reportOrganization/base/ReportOrganization";
import { RequestApprovalFindManyArgs } from "../../requestApproval/base/RequestApprovalFindManyArgs";
import { RequestApproval } from "../../requestApproval/base/RequestApproval";
import { RequestApprovalEmployeeFindManyArgs } from "../../requestApprovalEmployee/base/RequestApprovalEmployeeFindManyArgs";
import { RequestApprovalEmployee } from "../../requestApprovalEmployee/base/RequestApprovalEmployee";
import { RequestApprovalTeamFindManyArgs } from "../../requestApprovalTeam/base/RequestApprovalTeamFindManyArgs";
import { RequestApprovalTeam } from "../../requestApprovalTeam/base/RequestApprovalTeam";
import { RoleFindManyArgs } from "../../role/base/RoleFindManyArgs";
import { Role } from "../../role/base/Role";
import { RolePermissionFindManyArgs } from "../../rolePermission/base/RolePermissionFindManyArgs";
import { RolePermission } from "../../rolePermission/base/RolePermission";
import { ScreenshotFindManyArgs } from "../../screenshot/base/ScreenshotFindManyArgs";
import { Screenshot } from "../../screenshot/base/Screenshot";
import { SkillFindManyArgs } from "../../skill/base/SkillFindManyArgs";
import { Skill } from "../../skill/base/Skill";
import { TagFindManyArgs } from "../../tag/base/TagFindManyArgs";
import { Tag } from "../../tag/base/Tag";
import { TaskFindManyArgs } from "../../task/base/TaskFindManyArgs";
import { Task } from "../../task/base/Task";
import { TaskLinkedIssueFindManyArgs } from "../../taskLinkedIssue/base/TaskLinkedIssueFindManyArgs";
import { TaskLinkedIssue } from "../../taskLinkedIssue/base/TaskLinkedIssue";
import { TaskPriorityFindManyArgs } from "../../taskPriority/base/TaskPriorityFindManyArgs";
import { TaskPriority } from "../../taskPriority/base/TaskPriority";
import { TaskRelatedIssueTypeFindManyArgs } from "../../taskRelatedIssueType/base/TaskRelatedIssueTypeFindManyArgs";
import { TaskRelatedIssueType } from "../../taskRelatedIssueType/base/TaskRelatedIssueType";
import { TaskSizeFindManyArgs } from "../../taskSize/base/TaskSizeFindManyArgs";
import { TaskSize } from "../../taskSize/base/TaskSize";
import { TaskStatusFindManyArgs } from "../../taskStatus/base/TaskStatusFindManyArgs";
import { TaskStatus } from "../../taskStatus/base/TaskStatus";
import { TaskVersionFindManyArgs } from "../../taskVersion/base/TaskVersionFindManyArgs";
import { TaskVersion } from "../../taskVersion/base/TaskVersion";
import { TenantSettingFindManyArgs } from "../../tenantSetting/base/TenantSettingFindManyArgs";
import { TenantSetting } from "../../tenantSetting/base/TenantSetting";
import { TimeLogFindManyArgs } from "../../timeLog/base/TimeLogFindManyArgs";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { TimeOffPolicyFindManyArgs } from "../../timeOffPolicy/base/TimeOffPolicyFindManyArgs";
import { TimeOffPolicy } from "../../timeOffPolicy/base/TimeOffPolicy";
import { TimeOffRequestFindManyArgs } from "../../timeOffRequest/base/TimeOffRequestFindManyArgs";
import { TimeOffRequest } from "../../timeOffRequest/base/TimeOffRequest";
import { TimeSlotFindManyArgs } from "../../timeSlot/base/TimeSlotFindManyArgs";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { TimeSlotMinuteFindManyArgs } from "../../timeSlotMinute/base/TimeSlotMinuteFindManyArgs";
import { TimeSlotMinute } from "../../timeSlotMinute/base/TimeSlotMinute";
import { TimesheetFindManyArgs } from "../../timesheet/base/TimesheetFindManyArgs";
import { Timesheet } from "../../timesheet/base/Timesheet";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserOrganizationFindManyArgs } from "../../userOrganization/base/UserOrganizationFindManyArgs";
import { UserOrganization } from "../../userOrganization/base/UserOrganization";
import { WarehouseFindManyArgs } from "../../warehouse/base/WarehouseFindManyArgs";
import { Warehouse } from "../../warehouse/base/Warehouse";
import { WarehouseProductFindManyArgs } from "../../warehouseProduct/base/WarehouseProductFindManyArgs";
import { WarehouseProduct } from "../../warehouseProduct/base/WarehouseProduct";
import { WarehouseProductVariantFindManyArgs } from "../../warehouseProductVariant/base/WarehouseProductVariantFindManyArgs";
import { WarehouseProductVariant } from "../../warehouseProductVariant/base/WarehouseProductVariant";
import { TenantService } from "../tenant.service";
@graphql.Resolver(() => Tenant)
export class TenantResolverBase {
  constructor(protected readonly service: TenantService) {}

  async _tenantsMeta(
    @graphql.Args() args: TenantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Tenant])
  async tenants(@graphql.Args() args: TenantFindManyArgs): Promise<Tenant[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Tenant, { nullable: true })
  async tenant(
    @graphql.Args() args: TenantFindUniqueArgs
  ): Promise<Tenant | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Tenant)
  async createTenant(@graphql.Args() args: CreateTenantArgs): Promise<Tenant> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        imageAssetTenantImageIdToimageAsset: args.data
          .imageAssetTenantImageIdToimageAsset
          ? {
              connect: args.data.imageAssetTenantImageIdToimageAsset,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Tenant)
  async updateTenant(
    @graphql.Args() args: UpdateTenantArgs
  ): Promise<Tenant | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          imageAssetTenantImageIdToimageAsset: args.data
            .imageAssetTenantImageIdToimageAsset
            ? {
                connect: args.data.imageAssetTenantImageIdToimageAsset,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tenant)
  async deleteTenant(
    @graphql.Args() args: DeleteTenantArgs
  ): Promise<Tenant | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [AccountingTemplate], {
    name: "accountingTemplate",
  })
  async resolveFieldAccountingTemplate(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: AccountingTemplateFindManyArgs
  ): Promise<AccountingTemplate[]> {
    const results = await this.service.findAccountingTemplate(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Activity], { name: "activity" })
  async resolveFieldActivity(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ActivityFindManyArgs
  ): Promise<Activity[]> {
    const results = await this.service.findActivity(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [AppointmentEmployee], {
    name: "appointmentEmployee",
  })
  async resolveFieldAppointmentEmployee(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: AppointmentEmployeeFindManyArgs
  ): Promise<AppointmentEmployee[]> {
    const results = await this.service.findAppointmentEmployee(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ApprovalPolicy], { name: "approvalPolicy" })
  async resolveFieldApprovalPolicy(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ApprovalPolicyFindManyArgs
  ): Promise<ApprovalPolicy[]> {
    const results = await this.service.findApprovalPolicy(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [AvailabilitySlot], { name: "availabilitySlot" })
  async resolveFieldAvailabilitySlot(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: AvailabilitySlotFindManyArgs
  ): Promise<AvailabilitySlot[]> {
    const results = await this.service.findAvailabilitySlot(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Candidate], { name: "candidate" })
  async resolveFieldCandidate(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CandidateFindManyArgs
  ): Promise<Candidate[]> {
    const results = await this.service.findCandidate(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateCriterionRating], {
    name: "candidateCriterionRating",
  })
  async resolveFieldCandidateCriterionRating(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CandidateCriterionRatingFindManyArgs
  ): Promise<CandidateCriterionRating[]> {
    const results = await this.service.findCandidateCriterionRating(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateDocument], {
    name: "candidateDocument",
  })
  async resolveFieldCandidateDocument(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CandidateDocumentFindManyArgs
  ): Promise<CandidateDocument[]> {
    const results = await this.service.findCandidateDocument(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateEducation], {
    name: "candidateEducation",
  })
  async resolveFieldCandidateEducation(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CandidateEducationFindManyArgs
  ): Promise<CandidateEducation[]> {
    const results = await this.service.findCandidateEducation(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateExperience], {
    name: "candidateExperience",
  })
  async resolveFieldCandidateExperience(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CandidateExperienceFindManyArgs
  ): Promise<CandidateExperience[]> {
    const results = await this.service.findCandidateExperience(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateFeedback], {
    name: "candidateFeedback",
  })
  async resolveFieldCandidateFeedback(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CandidateFeedbackFindManyArgs
  ): Promise<CandidateFeedback[]> {
    const results = await this.service.findCandidateFeedback(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateInterview], {
    name: "candidateInterview",
  })
  async resolveFieldCandidateInterview(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CandidateInterviewFindManyArgs
  ): Promise<CandidateInterview[]> {
    const results = await this.service.findCandidateInterview(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateInterviewer], {
    name: "candidateInterviewer",
  })
  async resolveFieldCandidateInterviewer(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CandidateInterviewerFindManyArgs
  ): Promise<CandidateInterviewer[]> {
    const results = await this.service.findCandidateInterviewer(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidatePersonalQuality], {
    name: "candidatePersonalQuality",
  })
  async resolveFieldCandidatePersonalQuality(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CandidatePersonalQualityFindManyArgs
  ): Promise<CandidatePersonalQuality[]> {
    const results = await this.service.findCandidatePersonalQuality(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateSkill], { name: "candidateSkill" })
  async resolveFieldCandidateSkill(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CandidateSkillFindManyArgs
  ): Promise<CandidateSkill[]> {
    const results = await this.service.findCandidateSkill(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateSource], { name: "candidateSource" })
  async resolveFieldCandidateSource(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CandidateSourceFindManyArgs
  ): Promise<CandidateSource[]> {
    const results = await this.service.findCandidateSource(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CandidateTechnology], {
    name: "candidateTechnology",
  })
  async resolveFieldCandidateTechnology(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CandidateTechnologyFindManyArgs
  ): Promise<CandidateTechnology[]> {
    const results = await this.service.findCandidateTechnology(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Changelog], { name: "changelog" })
  async resolveFieldChangelog(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ChangelogFindManyArgs
  ): Promise<Changelog[]> {
    const results = await this.service.findChangelog(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Contact], { name: "contact" })
  async resolveFieldContact(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ContactFindManyArgs
  ): Promise<Contact[]> {
    const results = await this.service.findContact(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CustomSmtp], { name: "customSmtp" })
  async resolveFieldCustomSmtp(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CustomSmtpFindManyArgs
  ): Promise<CustomSmtp[]> {
    const results = await this.service.findCustomSmtp(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Deal], { name: "deal" })
  async resolveFieldDeal(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: DealFindManyArgs
  ): Promise<Deal[]> {
    const results = await this.service.findDeal(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmailReset], { name: "emailReset" })
  async resolveFieldEmailReset(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmailResetFindManyArgs
  ): Promise<EmailReset[]> {
    const results = await this.service.findEmailReset(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmailSent], { name: "emailSent" })
  async resolveFieldEmailSent(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmailSentFindManyArgs
  ): Promise<EmailSent[]> {
    const results = await this.service.findEmailSent(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmailTemplate], { name: "emailTemplate" })
  async resolveFieldEmailTemplate(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmailTemplateFindManyArgs
  ): Promise<EmailTemplate[]> {
    const results = await this.service.findEmailTemplate(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Employee], { name: "employee" })
  async resolveFieldEmployee(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeeFindManyArgs
  ): Promise<Employee[]> {
    const results = await this.service.findEmployee(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeAppointment], {
    name: "employeeAppointment",
  })
  async resolveFieldEmployeeAppointment(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeeAppointmentFindManyArgs
  ): Promise<EmployeeAppointment[]> {
    const results = await this.service.findEmployeeAppointment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeAward], { name: "employeeAward" })
  async resolveFieldEmployeeAward(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeeAwardFindManyArgs
  ): Promise<EmployeeAward[]> {
    const results = await this.service.findEmployeeAward(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeLevel], { name: "employeeLevel" })
  async resolveFieldEmployeeLevel(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeeLevelFindManyArgs
  ): Promise<EmployeeLevel[]> {
    const results = await this.service.findEmployeeLevel(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeePhone], { name: "employeePhone" })
  async resolveFieldEmployeePhone(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeePhoneFindManyArgs
  ): Promise<EmployeePhone[]> {
    const results = await this.service.findEmployeePhone(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeProposalTemplate], {
    name: "employeeProposalTemplate",
  })
  async resolveFieldEmployeeProposalTemplate(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeeProposalTemplateFindManyArgs
  ): Promise<EmployeeProposalTemplate[]> {
    const results = await this.service.findEmployeeProposalTemplate(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeRecurringExpense], {
    name: "employeeRecurringExpense",
  })
  async resolveFieldEmployeeRecurringExpense(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeeRecurringExpenseFindManyArgs
  ): Promise<EmployeeRecurringExpense[]> {
    const results = await this.service.findEmployeeRecurringExpense(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeSetting], { name: "employeeSetting" })
  async resolveFieldEmployeeSetting(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeeSettingFindManyArgs
  ): Promise<EmployeeSetting[]> {
    const results = await this.service.findEmployeeSetting(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeUpworkJobSearchCriterion], {
    name: "employeeUpworkJobSearchCriterion",
  })
  async resolveFieldEmployeeUpworkJobSearchCriterion(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeeUpworkJobSearchCriterionFindManyArgs
  ): Promise<EmployeeUpworkJobSearchCriterion[]> {
    const results = await this.service.findEmployeeUpworkJobSearchCriterion(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Equipment], { name: "equipment" })
  async resolveFieldEquipment(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EquipmentFindManyArgs
  ): Promise<Equipment[]> {
    const results = await this.service.findEquipment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EquipmentSharing], { name: "equipmentSharing" })
  async resolveFieldEquipmentSharing(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EquipmentSharingFindManyArgs
  ): Promise<EquipmentSharing[]> {
    const results = await this.service.findEquipmentSharing(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EquipmentSharingPolicy], {
    name: "equipmentSharingPolicy",
  })
  async resolveFieldEquipmentSharingPolicy(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EquipmentSharingPolicyFindManyArgs
  ): Promise<EquipmentSharingPolicy[]> {
    const results = await this.service.findEquipmentSharingPolicy(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EstimateEmail], { name: "estimateEmail" })
  async resolveFieldEstimateEmail(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EstimateEmailFindManyArgs
  ): Promise<EstimateEmail[]> {
    const results = await this.service.findEstimateEmail(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EventType], { name: "eventType" })
  async resolveFieldEventType(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EventTypeFindManyArgs
  ): Promise<EventType[]> {
    const results = await this.service.findEventType(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Expense], { name: "expense" })
  async resolveFieldExpense(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ExpenseFindManyArgs
  ): Promise<Expense[]> {
    const results = await this.service.findExpense(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ExpenseCategory], { name: "expenseCategory" })
  async resolveFieldExpenseCategory(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ExpenseCategoryFindManyArgs
  ): Promise<ExpenseCategory[]> {
    const results = await this.service.findExpenseCategory(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [FeatureOrganization], {
    name: "featureOrganization",
  })
  async resolveFieldFeatureOrganization(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: FeatureOrganizationFindManyArgs
  ): Promise<FeatureOrganization[]> {
    const results = await this.service.findFeatureOrganization(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Goal], { name: "goal" })
  async resolveFieldGoal(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: GoalFindManyArgs
  ): Promise<Goal[]> {
    const results = await this.service.findGoal(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [GoalGeneralSetting], {
    name: "goalGeneralSetting",
  })
  async resolveFieldGoalGeneralSetting(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: GoalGeneralSettingFindManyArgs
  ): Promise<GoalGeneralSetting[]> {
    const results = await this.service.findGoalGeneralSetting(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [GoalKpi], { name: "goalKpi" })
  async resolveFieldGoalKpi(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: GoalKpiFindManyArgs
  ): Promise<GoalKpi[]> {
    const results = await this.service.findGoalKpi(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [GoalKpiTemplate], { name: "goalKpiTemplate" })
  async resolveFieldGoalKpiTemplate(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: GoalKpiTemplateFindManyArgs
  ): Promise<GoalKpiTemplate[]> {
    const results = await this.service.findGoalKpiTemplate(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [GoalTemplate], { name: "goalTemplate" })
  async resolveFieldGoalTemplate(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: GoalTemplateFindManyArgs
  ): Promise<GoalTemplate[]> {
    const results = await this.service.findGoalTemplate(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [GoalTimeFrame], { name: "goalTimeFrame" })
  async resolveFieldGoalTimeFrame(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: GoalTimeFrameFindManyArgs
  ): Promise<GoalTimeFrame[]> {
    const results = await this.service.findGoalTimeFrame(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ImageAsset], {
    name: "imageAssetImageAssetTenantIdTotenant",
  })
  async resolveFieldImageAssetImageAssetTenantIdTotenant(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ImageAssetFindManyArgs
  ): Promise<ImageAsset[]> {
    const results = await this.service.findImageAssetImageAssetTenantIdTotenant(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ImportHistory], { name: "importHistory" })
  async resolveFieldImportHistory(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ImportHistoryFindManyArgs
  ): Promise<ImportHistory[]> {
    const results = await this.service.findImportHistory(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ImportRecord], { name: "importRecord" })
  async resolveFieldImportRecord(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ImportRecordFindManyArgs
  ): Promise<ImportRecord[]> {
    const results = await this.service.findImportRecord(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Income], { name: "income" })
  async resolveFieldIncome(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: IncomeFindManyArgs
  ): Promise<Income[]> {
    const results = await this.service.findIncome(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [IntegrationEntitySetting], {
    name: "integrationEntitySetting",
  })
  async resolveFieldIntegrationEntitySetting(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: IntegrationEntitySettingFindManyArgs
  ): Promise<IntegrationEntitySetting[]> {
    const results = await this.service.findIntegrationEntitySetting(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [IntegrationEntitySettingTied], {
    name: "integrationEntitySettingTied",
  })
  async resolveFieldIntegrationEntitySettingTied(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: IntegrationEntitySettingTiedFindManyArgs
  ): Promise<IntegrationEntitySettingTied[]> {
    const results = await this.service.findIntegrationEntitySettingTied(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [IntegrationMap], { name: "integrationMap" })
  async resolveFieldIntegrationMap(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: IntegrationMapFindManyArgs
  ): Promise<IntegrationMap[]> {
    const results = await this.service.findIntegrationMap(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [IntegrationSetting], {
    name: "integrationSetting",
  })
  async resolveFieldIntegrationSetting(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: IntegrationSettingFindManyArgs
  ): Promise<IntegrationSetting[]> {
    const results = await this.service.findIntegrationSetting(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [IntegrationTenant], {
    name: "integrationTenant",
  })
  async resolveFieldIntegrationTenant(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: IntegrationTenantFindManyArgs
  ): Promise<IntegrationTenant[]> {
    const results = await this.service.findIntegrationTenant(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Invite], { name: "invite" })
  async resolveFieldInvite(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: InviteFindManyArgs
  ): Promise<Invite[]> {
    const results = await this.service.findInvite(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Invoice], { name: "invoice" })
  async resolveFieldInvoice(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: InvoiceFindManyArgs
  ): Promise<Invoice[]> {
    const results = await this.service.findInvoice(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [InvoiceEstimateHistory], {
    name: "invoiceEstimateHistory",
  })
  async resolveFieldInvoiceEstimateHistory(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: InvoiceEstimateHistoryFindManyArgs
  ): Promise<InvoiceEstimateHistory[]> {
    const results = await this.service.findInvoiceEstimateHistory(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [InvoiceItem], { name: "invoiceItem" })
  async resolveFieldInvoiceItem(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: InvoiceItemFindManyArgs
  ): Promise<InvoiceItem[]> {
    const results = await this.service.findInvoiceItem(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [IssueType], { name: "issueType" })
  async resolveFieldIssueType(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: IssueTypeFindManyArgs
  ): Promise<IssueType[]> {
    const results = await this.service.findIssueType(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [JobPreset], { name: "jobPreset" })
  async resolveFieldJobPreset(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: JobPresetFindManyArgs
  ): Promise<JobPreset[]> {
    const results = await this.service.findJobPreset(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [JobPresetUpworkJobSearchCriterion], {
    name: "jobPresetUpworkJobSearchCriterion",
  })
  async resolveFieldJobPresetUpworkJobSearchCriterion(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: JobPresetUpworkJobSearchCriterionFindManyArgs
  ): Promise<JobPresetUpworkJobSearchCriterion[]> {
    const results = await this.service.findJobPresetUpworkJobSearchCriterion(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [JobSearchCategory], {
    name: "jobSearchCategory",
  })
  async resolveFieldJobSearchCategory(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: JobSearchCategoryFindManyArgs
  ): Promise<JobSearchCategory[]> {
    const results = await this.service.findJobSearchCategory(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [JobSearchOccupation], {
    name: "jobSearchOccupation",
  })
  async resolveFieldJobSearchOccupation(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: JobSearchOccupationFindManyArgs
  ): Promise<JobSearchOccupation[]> {
    const results = await this.service.findJobSearchOccupation(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [KeyResult], { name: "keyResult" })
  async resolveFieldKeyResult(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: KeyResultFindManyArgs
  ): Promise<KeyResult[]> {
    const results = await this.service.findKeyResult(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [KeyResultTemplate], {
    name: "keyResultTemplate",
  })
  async resolveFieldKeyResultTemplate(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: KeyResultTemplateFindManyArgs
  ): Promise<KeyResultTemplate[]> {
    const results = await this.service.findKeyResultTemplate(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [KeyResultUpdate], { name: "keyResultUpdate" })
  async resolveFieldKeyResultUpdate(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: KeyResultUpdateFindManyArgs
  ): Promise<KeyResultUpdate[]> {
    const results = await this.service.findKeyResultUpdate(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [KnowledgeBase], { name: "knowledgeBase" })
  async resolveFieldKnowledgeBase(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: KnowledgeBaseFindManyArgs
  ): Promise<KnowledgeBase[]> {
    const results = await this.service.findKnowledgeBase(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [KnowledgeBaseArticle], {
    name: "knowledgeBaseArticle",
  })
  async resolveFieldKnowledgeBaseArticle(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: KnowledgeBaseArticleFindManyArgs
  ): Promise<KnowledgeBaseArticle[]> {
    const results = await this.service.findKnowledgeBaseArticle(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [KnowledgeBaseAuthor], {
    name: "knowledgeBaseAuthor",
  })
  async resolveFieldKnowledgeBaseAuthor(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: KnowledgeBaseAuthorFindManyArgs
  ): Promise<KnowledgeBaseAuthor[]> {
    const results = await this.service.findKnowledgeBaseAuthor(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Merchant], { name: "merchant" })
  async resolveFieldMerchant(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: MerchantFindManyArgs
  ): Promise<Merchant[]> {
    const results = await this.service.findMerchant(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Organization], { name: "organization" })
  async resolveFieldOrganization(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationFindManyArgs
  ): Promise<Organization[]> {
    const results = await this.service.findOrganization(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationAward], {
    name: "organizationAward",
  })
  async resolveFieldOrganizationAward(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationAwardFindManyArgs
  ): Promise<OrganizationAward[]> {
    const results = await this.service.findOrganizationAward(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationContact], {
    name: "organizationContact",
  })
  async resolveFieldOrganizationContact(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationContactFindManyArgs
  ): Promise<OrganizationContact[]> {
    const results = await this.service.findOrganizationContact(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationDepartment], {
    name: "organizationDepartment",
  })
  async resolveFieldOrganizationDepartment(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationDepartmentFindManyArgs
  ): Promise<OrganizationDepartment[]> {
    const results = await this.service.findOrganizationDepartment(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationDocument], {
    name: "organizationDocument",
  })
  async resolveFieldOrganizationDocument(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationDocumentFindManyArgs
  ): Promise<OrganizationDocument[]> {
    const results = await this.service.findOrganizationDocument(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationEmploymentType], {
    name: "organizationEmploymentType",
  })
  async resolveFieldOrganizationEmploymentType(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationEmploymentTypeFindManyArgs
  ): Promise<OrganizationEmploymentType[]> {
    const results = await this.service.findOrganizationEmploymentType(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationLanguage], {
    name: "organizationLanguage",
  })
  async resolveFieldOrganizationLanguage(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationLanguageFindManyArgs
  ): Promise<OrganizationLanguage[]> {
    const results = await this.service.findOrganizationLanguage(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationPosition], {
    name: "organizationPosition",
  })
  async resolveFieldOrganizationPosition(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationPositionFindManyArgs
  ): Promise<OrganizationPosition[]> {
    const results = await this.service.findOrganizationPosition(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationProject], {
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationProjectFindManyArgs
  ): Promise<OrganizationProject[]> {
    const results = await this.service.findOrganizationProject(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationRecurringExpense], {
    name: "organizationRecurringExpense",
  })
  async resolveFieldOrganizationRecurringExpense(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationRecurringExpenseFindManyArgs
  ): Promise<OrganizationRecurringExpense[]> {
    const results = await this.service.findOrganizationRecurringExpense(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationSprint], {
    name: "organizationSprint",
  })
  async resolveFieldOrganizationSprint(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationSprintFindManyArgs
  ): Promise<OrganizationSprint[]> {
    const results = await this.service.findOrganizationSprint(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationTaskSetting], {
    name: "organizationTaskSetting",
  })
  async resolveFieldOrganizationTaskSetting(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationTaskSettingFindManyArgs
  ): Promise<OrganizationTaskSetting[]> {
    const results = await this.service.findOrganizationTaskSetting(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationTeam], { name: "organizationTeam" })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationTeamFindManyArgs
  ): Promise<OrganizationTeam[]> {
    const results = await this.service.findOrganizationTeam(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationTeamEmployee], {
    name: "organizationTeamEmployee",
  })
  async resolveFieldOrganizationTeamEmployee(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationTeamEmployeeFindManyArgs
  ): Promise<OrganizationTeamEmployee[]> {
    const results = await this.service.findOrganizationTeamEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationTeamJoinRequest], {
    name: "organizationTeamJoinRequest",
  })
  async resolveFieldOrganizationTeamJoinRequest(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationTeamJoinRequestFindManyArgs
  ): Promise<OrganizationTeamJoinRequest[]> {
    const results = await this.service.findOrganizationTeamJoinRequest(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationVendor], {
    name: "organizationVendor",
  })
  async resolveFieldOrganizationVendor(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrganizationVendorFindManyArgs
  ): Promise<OrganizationVendor[]> {
    const results = await this.service.findOrganizationVendor(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Payment], { name: "payment" })
  async resolveFieldPayment(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Pipeline], { name: "pipeline" })
  async resolveFieldPipeline(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PipelineFindManyArgs
  ): Promise<Pipeline[]> {
    const results = await this.service.findPipeline(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [PipelineStage], { name: "pipelineStage" })
  async resolveFieldPipelineStage(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PipelineStageFindManyArgs
  ): Promise<PipelineStage[]> {
    const results = await this.service.findPipelineStage(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Product], { name: "product" })
  async resolveFieldProduct(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProduct(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductCategory], { name: "productCategory" })
  async resolveFieldProductCategory(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductCategoryFindManyArgs
  ): Promise<ProductCategory[]> {
    const results = await this.service.findProductCategory(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductCategoryTranslation], {
    name: "productCategoryTranslation",
  })
  async resolveFieldProductCategoryTranslation(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductCategoryTranslationFindManyArgs
  ): Promise<ProductCategoryTranslation[]> {
    const results = await this.service.findProductCategoryTranslation(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductOption], { name: "productOption" })
  async resolveFieldProductOption(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductOptionFindManyArgs
  ): Promise<ProductOption[]> {
    const results = await this.service.findProductOption(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductOptionGroup], {
    name: "productOptionGroup",
  })
  async resolveFieldProductOptionGroup(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductOptionGroupFindManyArgs
  ): Promise<ProductOptionGroup[]> {
    const results = await this.service.findProductOptionGroup(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductOptionGroupTranslation], {
    name: "productOptionGroupTranslation",
  })
  async resolveFieldProductOptionGroupTranslation(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductOptionGroupTranslationFindManyArgs
  ): Promise<ProductOptionGroupTranslation[]> {
    const results = await this.service.findProductOptionGroupTranslation(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductOptionTranslation], {
    name: "productOptionTranslation",
  })
  async resolveFieldProductOptionTranslation(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductOptionTranslationFindManyArgs
  ): Promise<ProductOptionTranslation[]> {
    const results = await this.service.findProductOptionTranslation(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductTranslation], {
    name: "productTranslation",
  })
  async resolveFieldProductTranslation(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductTranslationFindManyArgs
  ): Promise<ProductTranslation[]> {
    const results = await this.service.findProductTranslation(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductType], { name: "productType" })
  async resolveFieldProductType(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductTypeFindManyArgs
  ): Promise<ProductType[]> {
    const results = await this.service.findProductType(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductTypeTranslation], {
    name: "productTypeTranslation",
  })
  async resolveFieldProductTypeTranslation(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductTypeTranslationFindManyArgs
  ): Promise<ProductTypeTranslation[]> {
    const results = await this.service.findProductTypeTranslation(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductVariant], { name: "productVariant" })
  async resolveFieldProductVariant(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductVariantFindManyArgs
  ): Promise<ProductVariant[]> {
    const results = await this.service.findProductVariant(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductVariantPrice], {
    name: "productVariantPrice",
  })
  async resolveFieldProductVariantPrice(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductVariantPriceFindManyArgs
  ): Promise<ProductVariantPrice[]> {
    const results = await this.service.findProductVariantPrice(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProductVariantSetting], {
    name: "productVariantSetting",
  })
  async resolveFieldProductVariantSetting(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductVariantSettingFindManyArgs
  ): Promise<ProductVariantSetting[]> {
    const results = await this.service.findProductVariantSetting(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Proposal], { name: "proposal" })
  async resolveFieldProposal(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProposalFindManyArgs
  ): Promise<Proposal[]> {
    const results = await this.service.findProposal(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ReportOrganization], {
    name: "reportOrganization",
  })
  async resolveFieldReportOrganization(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ReportOrganizationFindManyArgs
  ): Promise<ReportOrganization[]> {
    const results = await this.service.findReportOrganization(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [RequestApproval], { name: "requestApproval" })
  async resolveFieldRequestApproval(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: RequestApprovalFindManyArgs
  ): Promise<RequestApproval[]> {
    const results = await this.service.findRequestApproval(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [RequestApprovalEmployee], {
    name: "requestApprovalEmployee",
  })
  async resolveFieldRequestApprovalEmployee(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: RequestApprovalEmployeeFindManyArgs
  ): Promise<RequestApprovalEmployee[]> {
    const results = await this.service.findRequestApprovalEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [RequestApprovalTeam], {
    name: "requestApprovalTeam",
  })
  async resolveFieldRequestApprovalTeam(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: RequestApprovalTeamFindManyArgs
  ): Promise<RequestApprovalTeam[]> {
    const results = await this.service.findRequestApprovalTeam(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Role], { name: "role" })
  async resolveFieldRole(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: RoleFindManyArgs
  ): Promise<Role[]> {
    const results = await this.service.findRole(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [RolePermission], { name: "rolePermission" })
  async resolveFieldRolePermission(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: RolePermissionFindManyArgs
  ): Promise<RolePermission[]> {
    const results = await this.service.findRolePermission(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Screenshot], { name: "screenshot" })
  async resolveFieldScreenshot(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ScreenshotFindManyArgs
  ): Promise<Screenshot[]> {
    const results = await this.service.findScreenshot(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Skill], { name: "skill" })
  async resolveFieldSkill(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SkillFindManyArgs
  ): Promise<Skill[]> {
    const results = await this.service.findSkill(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Tag], { name: "tag" })
  async resolveFieldTag(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TagFindManyArgs
  ): Promise<Tag[]> {
    const results = await this.service.findTag(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Task], { name: "task" })
  async resolveFieldTask(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TaskFindManyArgs
  ): Promise<Task[]> {
    const results = await this.service.findTask(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskLinkedIssue], { name: "taskLinkedIssues" })
  async resolveFieldTaskLinkedIssues(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TaskLinkedIssueFindManyArgs
  ): Promise<TaskLinkedIssue[]> {
    const results = await this.service.findTaskLinkedIssues(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskPriority], { name: "taskPriority" })
  async resolveFieldTaskPriority(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TaskPriorityFindManyArgs
  ): Promise<TaskPriority[]> {
    const results = await this.service.findTaskPriority(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskRelatedIssueType], {
    name: "taskRelatedIssueType",
  })
  async resolveFieldTaskRelatedIssueType(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TaskRelatedIssueTypeFindManyArgs
  ): Promise<TaskRelatedIssueType[]> {
    const results = await this.service.findTaskRelatedIssueType(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskSize], { name: "taskSize" })
  async resolveFieldTaskSize(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TaskSizeFindManyArgs
  ): Promise<TaskSize[]> {
    const results = await this.service.findTaskSize(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskStatus], { name: "taskStatus" })
  async resolveFieldTaskStatus(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TaskStatusFindManyArgs
  ): Promise<TaskStatus[]> {
    const results = await this.service.findTaskStatus(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TaskVersion], { name: "taskVersion" })
  async resolveFieldTaskVersion(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TaskVersionFindManyArgs
  ): Promise<TaskVersion[]> {
    const results = await this.service.findTaskVersion(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TenantSetting], { name: "tenantSetting" })
  async resolveFieldTenantSetting(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TenantSettingFindManyArgs
  ): Promise<TenantSetting[]> {
    const results = await this.service.findTenantSetting(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeLog], { name: "timeLog" })
  async resolveFieldTimeLog(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TimeLogFindManyArgs
  ): Promise<TimeLog[]> {
    const results = await this.service.findTimeLog(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeOffPolicy], { name: "timeOffPolicy" })
  async resolveFieldTimeOffPolicy(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TimeOffPolicyFindManyArgs
  ): Promise<TimeOffPolicy[]> {
    const results = await this.service.findTimeOffPolicy(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeOffRequest], { name: "timeOffRequest" })
  async resolveFieldTimeOffRequest(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TimeOffRequestFindManyArgs
  ): Promise<TimeOffRequest[]> {
    const results = await this.service.findTimeOffRequest(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeSlot], { name: "timeSlot" })
  async resolveFieldTimeSlot(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TimeSlotFindManyArgs
  ): Promise<TimeSlot[]> {
    const results = await this.service.findTimeSlot(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeSlotMinute], { name: "timeSlotMinute" })
  async resolveFieldTimeSlotMinute(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TimeSlotMinuteFindManyArgs
  ): Promise<TimeSlotMinute[]> {
    const results = await this.service.findTimeSlotMinute(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Timesheet], { name: "timesheet" })
  async resolveFieldTimesheet(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TimesheetFindManyArgs
  ): Promise<Timesheet[]> {
    const results = await this.service.findTimesheet(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [User], { name: "user" })
  async resolveFieldUser(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUser(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [UserOrganization], { name: "userOrganization" })
  async resolveFieldUserOrganization(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: UserOrganizationFindManyArgs
  ): Promise<UserOrganization[]> {
    const results = await this.service.findUserOrganization(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Warehouse], { name: "warehouse" })
  async resolveFieldWarehouse(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WarehouseFindManyArgs
  ): Promise<Warehouse[]> {
    const results = await this.service.findWarehouse(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [WarehouseProduct], { name: "warehouseProduct" })
  async resolveFieldWarehouseProduct(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WarehouseProductFindManyArgs
  ): Promise<WarehouseProduct[]> {
    const results = await this.service.findWarehouseProduct(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [WarehouseProductVariant], {
    name: "warehouseProductVariant",
  })
  async resolveFieldWarehouseProductVariant(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WarehouseProductVariantFindManyArgs
  ): Promise<WarehouseProductVariant[]> {
    const results = await this.service.findWarehouseProductVariant(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => ImageAsset, {
    nullable: true,
    name: "imageAssetTenantImageIdToimageAsset",
  })
  async resolveFieldImageAssetTenantImageIdToimageAsset(
    @graphql.Parent() parent: Tenant
  ): Promise<ImageAsset | null> {
    const result = await this.service.getImageAssetTenantImageIdToimageAsset(
      parent.id
    );

    if (!result) {
      return null;
    }
    return result;
  }
}
