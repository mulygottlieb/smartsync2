/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTenantSettingArgs } from "./CreateTenantSettingArgs";
import { UpdateTenantSettingArgs } from "./UpdateTenantSettingArgs";
import { DeleteTenantSettingArgs } from "./DeleteTenantSettingArgs";
import { TenantSettingCountArgs } from "./TenantSettingCountArgs";
import { TenantSettingFindManyArgs } from "./TenantSettingFindManyArgs";
import { TenantSettingFindUniqueArgs } from "./TenantSettingFindUniqueArgs";
import { TenantSetting } from "./TenantSetting";
import { Tenant } from "../../tenant/base/Tenant";
import { TenantSettingService } from "../tenantSetting.service";
@graphql.Resolver(() => TenantSetting)
export class TenantSettingResolverBase {
  constructor(protected readonly service: TenantSettingService) {}

  async _tenantSettingsMeta(
    @graphql.Args() args: TenantSettingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TenantSetting])
  async tenantSettings(
    @graphql.Args() args: TenantSettingFindManyArgs
  ): Promise<TenantSetting[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TenantSetting, { nullable: true })
  async tenantSetting(
    @graphql.Args() args: TenantSettingFindUniqueArgs
  ): Promise<TenantSetting | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TenantSetting)
  async createTenantSetting(
    @graphql.Args() args: CreateTenantSettingArgs
  ): Promise<TenantSetting> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TenantSetting)
  async updateTenantSetting(
    @graphql.Args() args: UpdateTenantSettingArgs
  ): Promise<TenantSetting | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TenantSetting)
  async deleteTenantSetting(
    @graphql.Args() args: DeleteTenantSettingArgs
  ): Promise<TenantSetting | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: TenantSetting
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
