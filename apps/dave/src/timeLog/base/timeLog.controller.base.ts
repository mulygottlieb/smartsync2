/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TimeLogService } from "../timeLog.service";
import { TimeLogCreateInput } from "./TimeLogCreateInput";
import { TimeLogWhereInput } from "./TimeLogWhereInput";
import { TimeLogWhereUniqueInput } from "./TimeLogWhereUniqueInput";
import { TimeLogFindManyArgs } from "./TimeLogFindManyArgs";
import { TimeLogUpdateInput } from "./TimeLogUpdateInput";
import { TimeLog } from "./TimeLog";
import { TimeSlotTimeLogFindManyArgs } from "../../timeSlotTimeLog/base/TimeSlotTimeLogFindManyArgs";
import { TimeSlotTimeLog } from "../../timeSlotTimeLog/base/TimeSlotTimeLog";
import { TimeSlotTimeLogWhereUniqueInput } from "../../timeSlotTimeLog/base/TimeSlotTimeLogWhereUniqueInput";

export class TimeLogControllerBase {
  constructor(protected readonly service: TimeLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TimeLog })
  async create(@common.Body() data: TimeLogCreateInput): Promise<TimeLog> {
    return await this.service.create({
      data: {
        ...data,

        organizationTeam: data.organizationTeam
          ? {
              connect: data.organizationTeam,
            }
          : undefined,

        task: data.task
          ? {
              connect: data.task,
            }
          : undefined,

        organizationProject: data.organizationProject
          ? {
              connect: data.organizationProject,
            }
          : undefined,

        employee: {
          connect: data.employee,
        },

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        organizationContact: data.organizationContact
          ? {
              connect: data.organizationContact,
            }
          : undefined,

        timesheet: data.timesheet
          ? {
              connect: data.timesheet,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startedAt: true,
        stoppedAt: true,
        logType: true,
        source: true,
        description: true,
        reason: true,
        isBillable: true,
        deletedAt: true,
        isRunning: true,
        version: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        timesheet: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TimeLog] })
  @ApiNestedQuery(TimeLogFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<TimeLog[]> {
    const args = plainToClass(TimeLogFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startedAt: true,
        stoppedAt: true,
        logType: true,
        source: true,
        description: true,
        reason: true,
        isBillable: true,
        deletedAt: true,
        isRunning: true,
        version: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        timesheet: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TimeLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: TimeLogWhereUniqueInput
  ): Promise<TimeLog | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startedAt: true,
        stoppedAt: true,
        logType: true,
        source: true,
        description: true,
        reason: true,
        isBillable: true,
        deletedAt: true,
        isRunning: true,
        version: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        timesheet: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TimeLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: TimeLogWhereUniqueInput,
    @common.Body() data: TimeLogUpdateInput
  ): Promise<TimeLog | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          organizationTeam: data.organizationTeam
            ? {
                connect: data.organizationTeam,
              }
            : undefined,

          task: data.task
            ? {
                connect: data.task,
              }
            : undefined,

          organizationProject: data.organizationProject
            ? {
                connect: data.organizationProject,
              }
            : undefined,

          employee: {
            connect: data.employee,
          },

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          organizationContact: data.organizationContact
            ? {
                connect: data.organizationContact,
              }
            : undefined,

          timesheet: data.timesheet
            ? {
                connect: data.timesheet,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          startedAt: true,
          stoppedAt: true,
          logType: true,
          source: true,
          description: true,
          reason: true,
          isBillable: true,
          deletedAt: true,
          isRunning: true,
          version: true,

          organizationTeam: {
            select: {
              id: true,
            },
          },

          task: {
            select: {
              id: true,
            },
          },

          organizationProject: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          organizationContact: {
            select: {
              id: true,
            },
          },

          timesheet: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TimeLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: TimeLogWhereUniqueInput
  ): Promise<TimeLog | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          startedAt: true,
          stoppedAt: true,
          logType: true,
          source: true,
          description: true,
          reason: true,
          isBillable: true,
          deletedAt: true,
          isRunning: true,
          version: true,

          organizationTeam: {
            select: {
              id: true,
            },
          },

          task: {
            select: {
              id: true,
            },
          },

          organizationProject: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          organizationContact: {
            select: {
              id: true,
            },
          },

          timesheet: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/timeSlotTimeLogs")
  @ApiNestedQuery(TimeSlotTimeLogFindManyArgs)
  async findManyTimeSlotTimeLogs(
    @common.Req() request: Request,
    @common.Param() params: TimeLogWhereUniqueInput
  ): Promise<TimeSlotTimeLog[]> {
    const query = plainToClass(TimeSlotTimeLogFindManyArgs, request.query);
    const results = await this.service.findTimeSlotTimeLogs(params.id, {
      ...query,
      select: {
        timeLog: {
          select: {
            id: true,
          },
        },

        timeSlot: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeSlotTimeLogs")
  async connectTimeSlotTimeLogs(
    @common.Param() params: TimeLogWhereUniqueInput,
    @common.Body() body: TimeSlotTimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlotTimeLogs: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeSlotTimeLogs")
  async updateTimeSlotTimeLogs(
    @common.Param() params: TimeLogWhereUniqueInput,
    @common.Body() body: TimeSlotTimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlotTimeLogs: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeSlotTimeLogs")
  async disconnectTimeSlotTimeLogs(
    @common.Param() params: TimeLogWhereUniqueInput,
    @common.Body() body: TimeSlotTimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlotTimeLogs: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
