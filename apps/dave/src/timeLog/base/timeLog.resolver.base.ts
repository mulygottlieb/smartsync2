/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTimeLogArgs } from "./CreateTimeLogArgs";
import { UpdateTimeLogArgs } from "./UpdateTimeLogArgs";
import { DeleteTimeLogArgs } from "./DeleteTimeLogArgs";
import { TimeLogCountArgs } from "./TimeLogCountArgs";
import { TimeLogFindManyArgs } from "./TimeLogFindManyArgs";
import { TimeLogFindUniqueArgs } from "./TimeLogFindUniqueArgs";
import { TimeLog } from "./TimeLog";
import { TimeSlotTimeLogFindManyArgs } from "../../timeSlotTimeLog/base/TimeSlotTimeLogFindManyArgs";
import { TimeSlotTimeLog } from "../../timeSlotTimeLog/base/TimeSlotTimeLog";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { Task } from "../../task/base/Task";
import { OrganizationProject } from "../../organizationProject/base/OrganizationProject";
import { Employee } from "../../employee/base/Employee";
import { Organization } from "../../organization/base/Organization";
import { OrganizationContact } from "../../organizationContact/base/OrganizationContact";
import { Timesheet } from "../../timesheet/base/Timesheet";
import { Tenant } from "../../tenant/base/Tenant";
import { TimeLogService } from "../timeLog.service";
@graphql.Resolver(() => TimeLog)
export class TimeLogResolverBase {
  constructor(protected readonly service: TimeLogService) {}

  async _timeLogsMeta(
    @graphql.Args() args: TimeLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TimeLog])
  async timeLogs(
    @graphql.Args() args: TimeLogFindManyArgs
  ): Promise<TimeLog[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TimeLog, { nullable: true })
  async timeLog(
    @graphql.Args() args: TimeLogFindUniqueArgs
  ): Promise<TimeLog | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TimeLog)
  async createTimeLog(
    @graphql.Args() args: CreateTimeLogArgs
  ): Promise<TimeLog> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationTeam: args.data.organizationTeam
          ? {
              connect: args.data.organizationTeam,
            }
          : undefined,

        task: args.data.task
          ? {
              connect: args.data.task,
            }
          : undefined,

        organizationProject: args.data.organizationProject
          ? {
              connect: args.data.organizationProject,
            }
          : undefined,

        employee: {
          connect: args.data.employee,
        },

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        organizationContact: args.data.organizationContact
          ? {
              connect: args.data.organizationContact,
            }
          : undefined,

        timesheet: args.data.timesheet
          ? {
              connect: args.data.timesheet,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TimeLog)
  async updateTimeLog(
    @graphql.Args() args: UpdateTimeLogArgs
  ): Promise<TimeLog | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationTeam: args.data.organizationTeam
            ? {
                connect: args.data.organizationTeam,
              }
            : undefined,

          task: args.data.task
            ? {
                connect: args.data.task,
              }
            : undefined,

          organizationProject: args.data.organizationProject
            ? {
                connect: args.data.organizationProject,
              }
            : undefined,

          employee: {
            connect: args.data.employee,
          },

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          organizationContact: args.data.organizationContact
            ? {
                connect: args.data.organizationContact,
              }
            : undefined,

          timesheet: args.data.timesheet
            ? {
                connect: args.data.timesheet,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TimeLog)
  async deleteTimeLog(
    @graphql.Args() args: DeleteTimeLogArgs
  ): Promise<TimeLog | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TimeSlotTimeLog], { name: "timeSlotTimeLogs" })
  async resolveFieldTimeSlotTimeLogs(
    @graphql.Parent() parent: TimeLog,
    @graphql.Args() args: TimeSlotTimeLogFindManyArgs
  ): Promise<TimeSlotTimeLog[]> {
    const results = await this.service.findTimeSlotTimeLogs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => OrganizationTeam, {
    nullable: true,
    name: "organizationTeam",
  })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: TimeLog
  ): Promise<OrganizationTeam | null> {
    const result = await this.service.getOrganizationTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Task, {
    nullable: true,
    name: "task",
  })
  async resolveFieldTask(
    @graphql.Parent() parent: TimeLog
  ): Promise<Task | null> {
    const result = await this.service.getTask(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationProject, {
    nullable: true,
    name: "organizationProject",
  })
  async resolveFieldOrganizationProject(
    @graphql.Parent() parent: TimeLog
  ): Promise<OrganizationProject | null> {
    const result = await this.service.getOrganizationProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: TimeLog
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: TimeLog
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => OrganizationContact, {
    nullable: true,
    name: "organizationContact",
  })
  async resolveFieldOrganizationContact(
    @graphql.Parent() parent: TimeLog
  ): Promise<OrganizationContact | null> {
    const result = await this.service.getOrganizationContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Timesheet, {
    nullable: true,
    name: "timesheet",
  })
  async resolveFieldTimesheet(
    @graphql.Parent() parent: TimeLog
  ): Promise<Timesheet | null> {
    const result = await this.service.getTimesheet(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: TimeLog
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
