/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TimeOffPolicyService } from "../timeOffPolicy.service";
import { TimeOffPolicyCreateInput } from "./TimeOffPolicyCreateInput";
import { TimeOffPolicyWhereInput } from "./TimeOffPolicyWhereInput";
import { TimeOffPolicyWhereUniqueInput } from "./TimeOffPolicyWhereUniqueInput";
import { TimeOffPolicyFindManyArgs } from "./TimeOffPolicyFindManyArgs";
import { TimeOffPolicyUpdateInput } from "./TimeOffPolicyUpdateInput";
import { TimeOffPolicy } from "./TimeOffPolicy";
import { TimeOffPolicyEmployeeFindManyArgs } from "../../timeOffPolicyEmployee/base/TimeOffPolicyEmployeeFindManyArgs";
import { TimeOffPolicyEmployee } from "../../timeOffPolicyEmployee/base/TimeOffPolicyEmployee";
import { TimeOffPolicyEmployeeWhereUniqueInput } from "../../timeOffPolicyEmployee/base/TimeOffPolicyEmployeeWhereUniqueInput";
import { TimeOffRequestFindManyArgs } from "../../timeOffRequest/base/TimeOffRequestFindManyArgs";
import { TimeOffRequest } from "../../timeOffRequest/base/TimeOffRequest";
import { TimeOffRequestWhereUniqueInput } from "../../timeOffRequest/base/TimeOffRequestWhereUniqueInput";

export class TimeOffPolicyControllerBase {
  constructor(protected readonly service: TimeOffPolicyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TimeOffPolicy })
  async create(
    @common.Body() data: TimeOffPolicyCreateInput
  ): Promise<TimeOffPolicy> {
    return await this.service.create({
      data: {
        ...data,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        requiresApproval: true,
        paid: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TimeOffPolicy] })
  @ApiNestedQuery(TimeOffPolicyFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<TimeOffPolicy[]> {
    const args = plainToClass(TimeOffPolicyFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        requiresApproval: true,
        paid: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TimeOffPolicy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: TimeOffPolicyWhereUniqueInput
  ): Promise<TimeOffPolicy | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        requiresApproval: true,
        paid: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TimeOffPolicy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: TimeOffPolicyWhereUniqueInput,
    @common.Body() data: TimeOffPolicyUpdateInput
  ): Promise<TimeOffPolicy | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          requiresApproval: true,
          paid: true,

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TimeOffPolicy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: TimeOffPolicyWhereUniqueInput
  ): Promise<TimeOffPolicy | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          requiresApproval: true,
          paid: true,

          tenant: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/timeOffPolicyEmployee")
  @ApiNestedQuery(TimeOffPolicyEmployeeFindManyArgs)
  async findManyTimeOffPolicyEmployee(
    @common.Req() request: Request,
    @common.Param() params: TimeOffPolicyWhereUniqueInput
  ): Promise<TimeOffPolicyEmployee[]> {
    const query = plainToClass(
      TimeOffPolicyEmployeeFindManyArgs,
      request.query
    );
    const results = await this.service.findTimeOffPolicyEmployee(params.id, {
      ...query,
      select: {
        timeOffPolicy: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeOffPolicyEmployee")
  async connectTimeOffPolicyEmployee(
    @common.Param() params: TimeOffPolicyWhereUniqueInput,
    @common.Body() body: TimeOffPolicyEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffPolicyEmployee: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeOffPolicyEmployee")
  async updateTimeOffPolicyEmployee(
    @common.Param() params: TimeOffPolicyWhereUniqueInput,
    @common.Body() body: TimeOffPolicyEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffPolicyEmployee: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeOffPolicyEmployee")
  async disconnectTimeOffPolicyEmployee(
    @common.Param() params: TimeOffPolicyWhereUniqueInput,
    @common.Body() body: TimeOffPolicyEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffPolicyEmployee: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeOffRequest")
  @ApiNestedQuery(TimeOffRequestFindManyArgs)
  async findManyTimeOffRequest(
    @common.Req() request: Request,
    @common.Param() params: TimeOffPolicyWhereUniqueInput
  ): Promise<TimeOffRequest[]> {
    const query = plainToClass(TimeOffRequestFindManyArgs, request.query);
    const results = await this.service.findTimeOffRequest(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        documentUrl: true,
        description: true,
        start: true,
        end: true,
        requestDate: true,
        status: true,
        isHoliday: true,
        isArchived: true,

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        timeOffPolicy: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeOffRequest")
  async connectTimeOffRequest(
    @common.Param() params: TimeOffPolicyWhereUniqueInput,
    @common.Body() body: TimeOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffRequest: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeOffRequest")
  async updateTimeOffRequest(
    @common.Param() params: TimeOffPolicyWhereUniqueInput,
    @common.Body() body: TimeOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffRequest: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeOffRequest")
  async disconnectTimeOffRequest(
    @common.Param() params: TimeOffPolicyWhereUniqueInput,
    @common.Body() body: TimeOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeOffRequest: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
