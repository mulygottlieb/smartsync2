/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTimeOffPolicyArgs } from "./CreateTimeOffPolicyArgs";
import { UpdateTimeOffPolicyArgs } from "./UpdateTimeOffPolicyArgs";
import { DeleteTimeOffPolicyArgs } from "./DeleteTimeOffPolicyArgs";
import { TimeOffPolicyCountArgs } from "./TimeOffPolicyCountArgs";
import { TimeOffPolicyFindManyArgs } from "./TimeOffPolicyFindManyArgs";
import { TimeOffPolicyFindUniqueArgs } from "./TimeOffPolicyFindUniqueArgs";
import { TimeOffPolicy } from "./TimeOffPolicy";
import { TimeOffPolicyEmployeeFindManyArgs } from "../../timeOffPolicyEmployee/base/TimeOffPolicyEmployeeFindManyArgs";
import { TimeOffPolicyEmployee } from "../../timeOffPolicyEmployee/base/TimeOffPolicyEmployee";
import { TimeOffRequestFindManyArgs } from "../../timeOffRequest/base/TimeOffRequestFindManyArgs";
import { TimeOffRequest } from "../../timeOffRequest/base/TimeOffRequest";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { TimeOffPolicyService } from "../timeOffPolicy.service";
@graphql.Resolver(() => TimeOffPolicy)
export class TimeOffPolicyResolverBase {
  constructor(protected readonly service: TimeOffPolicyService) {}

  async _timeOffPoliciesMeta(
    @graphql.Args() args: TimeOffPolicyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TimeOffPolicy])
  async timeOffPolicies(
    @graphql.Args() args: TimeOffPolicyFindManyArgs
  ): Promise<TimeOffPolicy[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TimeOffPolicy, { nullable: true })
  async timeOffPolicy(
    @graphql.Args() args: TimeOffPolicyFindUniqueArgs
  ): Promise<TimeOffPolicy | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TimeOffPolicy)
  async createTimeOffPolicy(
    @graphql.Args() args: CreateTimeOffPolicyArgs
  ): Promise<TimeOffPolicy> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TimeOffPolicy)
  async updateTimeOffPolicy(
    @graphql.Args() args: UpdateTimeOffPolicyArgs
  ): Promise<TimeOffPolicy | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TimeOffPolicy)
  async deleteTimeOffPolicy(
    @graphql.Args() args: DeleteTimeOffPolicyArgs
  ): Promise<TimeOffPolicy | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TimeOffPolicyEmployee], {
    name: "timeOffPolicyEmployee",
  })
  async resolveFieldTimeOffPolicyEmployee(
    @graphql.Parent() parent: TimeOffPolicy,
    @graphql.Args() args: TimeOffPolicyEmployeeFindManyArgs
  ): Promise<TimeOffPolicyEmployee[]> {
    const results = await this.service.findTimeOffPolicyEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeOffRequest], { name: "timeOffRequest" })
  async resolveFieldTimeOffRequest(
    @graphql.Parent() parent: TimeOffPolicy,
    @graphql.Args() args: TimeOffRequestFindManyArgs
  ): Promise<TimeOffRequest[]> {
    const results = await this.service.findTimeOffRequest(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: TimeOffPolicy
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: TimeOffPolicy
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
