/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTimeOffPolicyEmployeeArgs } from "./CreateTimeOffPolicyEmployeeArgs";
import { UpdateTimeOffPolicyEmployeeArgs } from "./UpdateTimeOffPolicyEmployeeArgs";
import { DeleteTimeOffPolicyEmployeeArgs } from "./DeleteTimeOffPolicyEmployeeArgs";
import { TimeOffPolicyEmployeeCountArgs } from "./TimeOffPolicyEmployeeCountArgs";
import { TimeOffPolicyEmployeeFindManyArgs } from "./TimeOffPolicyEmployeeFindManyArgs";
import { TimeOffPolicyEmployeeFindUniqueArgs } from "./TimeOffPolicyEmployeeFindUniqueArgs";
import { TimeOffPolicyEmployee } from "./TimeOffPolicyEmployee";
import { TimeOffPolicy } from "../../timeOffPolicy/base/TimeOffPolicy";
import { Employee } from "../../employee/base/Employee";
import { TimeOffPolicyEmployeeService } from "../timeOffPolicyEmployee.service";
@graphql.Resolver(() => TimeOffPolicyEmployee)
export class TimeOffPolicyEmployeeResolverBase {
  constructor(protected readonly service: TimeOffPolicyEmployeeService) {}

  async _timeOffPolicyEmployeesMeta(
    @graphql.Args() args: TimeOffPolicyEmployeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TimeOffPolicyEmployee])
  async timeOffPolicyEmployees(
    @graphql.Args() args: TimeOffPolicyEmployeeFindManyArgs
  ): Promise<TimeOffPolicyEmployee[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TimeOffPolicyEmployee, { nullable: true })
  async timeOffPolicyEmployee(
    @graphql.Args() args: TimeOffPolicyEmployeeFindUniqueArgs
  ): Promise<TimeOffPolicyEmployee | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TimeOffPolicyEmployee)
  async createTimeOffPolicyEmployee(
    @graphql.Args() args: CreateTimeOffPolicyEmployeeArgs
  ): Promise<TimeOffPolicyEmployee> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        timeOffPolicy: {
          connect: args.data.timeOffPolicy,
        },

        employee: {
          connect: args.data.employee,
        },
      },
    });
  }

  @graphql.Mutation(() => TimeOffPolicyEmployee)
  async updateTimeOffPolicyEmployee(
    @graphql.Args() args: UpdateTimeOffPolicyEmployeeArgs
  ): Promise<TimeOffPolicyEmployee | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          timeOffPolicy: {
            connect: args.data.timeOffPolicy,
          },

          employee: {
            connect: args.data.employee,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TimeOffPolicyEmployee)
  async deleteTimeOffPolicyEmployee(
    @graphql.Args() args: DeleteTimeOffPolicyEmployeeArgs
  ): Promise<TimeOffPolicyEmployee | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => TimeOffPolicy, {
    nullable: true,
    name: "timeOffPolicy",
  })
  async resolveFieldTimeOffPolicy(
    @graphql.Parent() parent: TimeOffPolicyEmployee
  ): Promise<TimeOffPolicy | null> {
    const result = await this.service.getTimeOffPolicy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: TimeOffPolicyEmployee
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
