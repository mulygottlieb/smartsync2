/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTimeOffRequestArgs } from "./CreateTimeOffRequestArgs";
import { UpdateTimeOffRequestArgs } from "./UpdateTimeOffRequestArgs";
import { DeleteTimeOffRequestArgs } from "./DeleteTimeOffRequestArgs";
import { TimeOffRequestCountArgs } from "./TimeOffRequestCountArgs";
import { TimeOffRequestFindManyArgs } from "./TimeOffRequestFindManyArgs";
import { TimeOffRequestFindUniqueArgs } from "./TimeOffRequestFindUniqueArgs";
import { TimeOffRequest } from "./TimeOffRequest";
import { TimeOffRequestEmployeeFindManyArgs } from "../../timeOffRequestEmployee/base/TimeOffRequestEmployeeFindManyArgs";
import { TimeOffRequestEmployee } from "../../timeOffRequestEmployee/base/TimeOffRequestEmployee";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { TimeOffPolicy } from "../../timeOffPolicy/base/TimeOffPolicy";
import { TimeOffRequestService } from "../timeOffRequest.service";
@graphql.Resolver(() => TimeOffRequest)
export class TimeOffRequestResolverBase {
  constructor(protected readonly service: TimeOffRequestService) {}

  async _timeOffRequestsMeta(
    @graphql.Args() args: TimeOffRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TimeOffRequest])
  async timeOffRequests(
    @graphql.Args() args: TimeOffRequestFindManyArgs
  ): Promise<TimeOffRequest[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TimeOffRequest, { nullable: true })
  async timeOffRequest(
    @graphql.Args() args: TimeOffRequestFindUniqueArgs
  ): Promise<TimeOffRequest | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TimeOffRequest)
  async createTimeOffRequest(
    @graphql.Args() args: CreateTimeOffRequestArgs
  ): Promise<TimeOffRequest> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        imageAsset: args.data.imageAsset
          ? {
              connect: args.data.imageAsset,
            }
          : undefined,

        timeOffPolicy: {
          connect: args.data.timeOffPolicy,
        },
      },
    });
  }

  @graphql.Mutation(() => TimeOffRequest)
  async updateTimeOffRequest(
    @graphql.Args() args: UpdateTimeOffRequestArgs
  ): Promise<TimeOffRequest | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          imageAsset: args.data.imageAsset
            ? {
                connect: args.data.imageAsset,
              }
            : undefined,

          timeOffPolicy: {
            connect: args.data.timeOffPolicy,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TimeOffRequest)
  async deleteTimeOffRequest(
    @graphql.Args() args: DeleteTimeOffRequestArgs
  ): Promise<TimeOffRequest | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TimeOffRequestEmployee], {
    name: "timeOffRequestEmployee",
  })
  async resolveFieldTimeOffRequestEmployee(
    @graphql.Parent() parent: TimeOffRequest,
    @graphql.Args() args: TimeOffRequestEmployeeFindManyArgs
  ): Promise<TimeOffRequestEmployee[]> {
    const results = await this.service.findTimeOffRequestEmployee(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: TimeOffRequest
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: TimeOffRequest
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ImageAsset, {
    nullable: true,
    name: "imageAsset",
  })
  async resolveFieldImageAsset(
    @graphql.Parent() parent: TimeOffRequest
  ): Promise<ImageAsset | null> {
    const result = await this.service.getImageAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => TimeOffPolicy, {
    nullable: true,
    name: "timeOffPolicy",
  })
  async resolveFieldTimeOffPolicy(
    @graphql.Parent() parent: TimeOffRequest
  ): Promise<TimeOffPolicy | null> {
    const result = await this.service.getTimeOffPolicy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
