/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTimeOffRequestEmployeeArgs } from "./CreateTimeOffRequestEmployeeArgs";
import { UpdateTimeOffRequestEmployeeArgs } from "./UpdateTimeOffRequestEmployeeArgs";
import { DeleteTimeOffRequestEmployeeArgs } from "./DeleteTimeOffRequestEmployeeArgs";
import { TimeOffRequestEmployeeCountArgs } from "./TimeOffRequestEmployeeCountArgs";
import { TimeOffRequestEmployeeFindManyArgs } from "./TimeOffRequestEmployeeFindManyArgs";
import { TimeOffRequestEmployeeFindUniqueArgs } from "./TimeOffRequestEmployeeFindUniqueArgs";
import { TimeOffRequestEmployee } from "./TimeOffRequestEmployee";
import { TimeOffRequest } from "../../timeOffRequest/base/TimeOffRequest";
import { Employee } from "../../employee/base/Employee";
import { TimeOffRequestEmployeeService } from "../timeOffRequestEmployee.service";
@graphql.Resolver(() => TimeOffRequestEmployee)
export class TimeOffRequestEmployeeResolverBase {
  constructor(protected readonly service: TimeOffRequestEmployeeService) {}

  async _timeOffRequestEmployeesMeta(
    @graphql.Args() args: TimeOffRequestEmployeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TimeOffRequestEmployee])
  async timeOffRequestEmployees(
    @graphql.Args() args: TimeOffRequestEmployeeFindManyArgs
  ): Promise<TimeOffRequestEmployee[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TimeOffRequestEmployee, { nullable: true })
  async timeOffRequestEmployee(
    @graphql.Args() args: TimeOffRequestEmployeeFindUniqueArgs
  ): Promise<TimeOffRequestEmployee | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TimeOffRequestEmployee)
  async createTimeOffRequestEmployee(
    @graphql.Args() args: CreateTimeOffRequestEmployeeArgs
  ): Promise<TimeOffRequestEmployee> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        timeOffRequest: {
          connect: args.data.timeOffRequest,
        },

        employee: {
          connect: args.data.employee,
        },
      },
    });
  }

  @graphql.Mutation(() => TimeOffRequestEmployee)
  async updateTimeOffRequestEmployee(
    @graphql.Args() args: UpdateTimeOffRequestEmployeeArgs
  ): Promise<TimeOffRequestEmployee | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          timeOffRequest: {
            connect: args.data.timeOffRequest,
          },

          employee: {
            connect: args.data.employee,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TimeOffRequestEmployee)
  async deleteTimeOffRequestEmployee(
    @graphql.Args() args: DeleteTimeOffRequestEmployeeArgs
  ): Promise<TimeOffRequestEmployee | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => TimeOffRequest, {
    nullable: true,
    name: "timeOffRequest",
  })
  async resolveFieldTimeOffRequest(
    @graphql.Parent() parent: TimeOffRequestEmployee
  ): Promise<TimeOffRequest | null> {
    const result = await this.service.getTimeOffRequest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: TimeOffRequestEmployee
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
