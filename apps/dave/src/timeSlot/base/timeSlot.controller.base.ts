/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TimeSlotService } from "../timeSlot.service";
import { TimeSlotCreateInput } from "./TimeSlotCreateInput";
import { TimeSlotWhereInput } from "./TimeSlotWhereInput";
import { TimeSlotWhereUniqueInput } from "./TimeSlotWhereUniqueInput";
import { TimeSlotFindManyArgs } from "./TimeSlotFindManyArgs";
import { TimeSlotUpdateInput } from "./TimeSlotUpdateInput";
import { TimeSlot } from "./TimeSlot";
import { TimeSlotTimeLogFindManyArgs } from "../../timeSlotTimeLog/base/TimeSlotTimeLogFindManyArgs";
import { TimeSlotTimeLog } from "../../timeSlotTimeLog/base/TimeSlotTimeLog";
import { TimeSlotTimeLogWhereUniqueInput } from "../../timeSlotTimeLog/base/TimeSlotTimeLogWhereUniqueInput";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { ActivityWhereUniqueInput } from "../../activity/base/ActivityWhereUniqueInput";
import { ScreenshotFindManyArgs } from "../../screenshot/base/ScreenshotFindManyArgs";
import { Screenshot } from "../../screenshot/base/Screenshot";
import { ScreenshotWhereUniqueInput } from "../../screenshot/base/ScreenshotWhereUniqueInput";
import { TimeSlotMinuteFindManyArgs } from "../../timeSlotMinute/base/TimeSlotMinuteFindManyArgs";
import { TimeSlotMinute } from "../../timeSlotMinute/base/TimeSlotMinute";
import { TimeSlotMinuteWhereUniqueInput } from "../../timeSlotMinute/base/TimeSlotMinuteWhereUniqueInput";

export class TimeSlotControllerBase {
  constructor(protected readonly service: TimeSlotService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TimeSlot })
  async create(@common.Body() data: TimeSlotCreateInput): Promise<TimeSlot> {
    return await this.service.create({
      data: {
        ...data,

        employee: {
          connect: data.employee,
        },

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        keyboard: true,
        mouse: true,
        overall: true,
        startedAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TimeSlot] })
  @ApiNestedQuery(TimeSlotFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<TimeSlot[]> {
    const args = plainToClass(TimeSlotFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        keyboard: true,
        mouse: true,
        overall: true,
        startedAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TimeSlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: TimeSlotWhereUniqueInput
  ): Promise<TimeSlot | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        keyboard: true,
        mouse: true,
        overall: true,
        startedAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TimeSlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() data: TimeSlotUpdateInput
  ): Promise<TimeSlot | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          employee: {
            connect: data.employee,
          },

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          duration: true,
          keyboard: true,
          mouse: true,
          overall: true,
          startedAt: true,

          employee: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TimeSlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: TimeSlotWhereUniqueInput
  ): Promise<TimeSlot | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          duration: true,
          keyboard: true,
          mouse: true,
          overall: true,
          startedAt: true,

          employee: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/timeSlotTimeLogs")
  @ApiNestedQuery(TimeSlotTimeLogFindManyArgs)
  async findManyTimeSlotTimeLogs(
    @common.Req() request: Request,
    @common.Param() params: TimeSlotWhereUniqueInput
  ): Promise<TimeSlotTimeLog[]> {
    const query = plainToClass(TimeSlotTimeLogFindManyArgs, request.query);
    const results = await this.service.findTimeSlotTimeLogs(params.id, {
      ...query,
      select: {
        timeLog: {
          select: {
            id: true,
          },
        },

        timeSlot: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeSlotTimeLogs")
  async connectTimeSlotTimeLogs(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() body: TimeSlotTimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlotTimeLogs: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeSlotTimeLogs")
  async updateTimeSlotTimeLogs(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() body: TimeSlotTimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlotTimeLogs: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeSlotTimeLogs")
  async disconnectTimeSlotTimeLogs(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() body: TimeSlotTimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlotTimeLogs: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/activity")
  @ApiNestedQuery(ActivityFindManyArgs)
  async findManyActivity(
    @common.Req() request: Request,
    @common.Param() params: TimeSlotWhereUniqueInput
  ): Promise<Activity[]> {
    const query = plainToClass(ActivityFindManyArgs, request.query);
    const results = await this.service.findActivity(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        metaData: true,
        date: true,
        time: true,
        duration: true,
        typeField: true,
        source: true,
        deletedAt: true,
        recordedAt: true,

        task: {
          select: {
            id: true,
          },
        },

        timeSlot: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/activity")
  async connectActivity(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/activity")
  async updateActivity(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/activity")
  async disconnectActivity(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/screenshot")
  @ApiNestedQuery(ScreenshotFindManyArgs)
  async findManyScreenshot(
    @common.Req() request: Request,
    @common.Param() params: TimeSlotWhereUniqueInput
  ): Promise<Screenshot[]> {
    const query = plainToClass(ScreenshotFindManyArgs, request.query);
    const results = await this.service.findScreenshot(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        file: true,
        thumb: true,
        recordedAt: true,
        deletedAt: true,
        storageProvider: true,

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        timeSlot: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/screenshot")
  async connectScreenshot(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() body: ScreenshotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      screenshot: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/screenshot")
  async updateScreenshot(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() body: ScreenshotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      screenshot: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/screenshot")
  async disconnectScreenshot(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() body: ScreenshotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      screenshot: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeSlotMinute")
  @ApiNestedQuery(TimeSlotMinuteFindManyArgs)
  async findManyTimeSlotMinute(
    @common.Req() request: Request,
    @common.Param() params: TimeSlotWhereUniqueInput
  ): Promise<TimeSlotMinute[]> {
    const query = plainToClass(TimeSlotMinuteFindManyArgs, request.query);
    const results = await this.service.findTimeSlotMinute(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        keyboard: true,
        mouse: true,
        datetime: true,

        organization: {
          select: {
            id: true,
          },
        },

        timeSlot: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeSlotMinute")
  async connectTimeSlotMinute(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() body: TimeSlotMinuteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlotMinute: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeSlotMinute")
  async updateTimeSlotMinute(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() body: TimeSlotMinuteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlotMinute: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeSlotMinute")
  async disconnectTimeSlotMinute(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() body: TimeSlotMinuteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlotMinute: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
