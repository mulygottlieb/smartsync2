/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTimeSlotArgs } from "./CreateTimeSlotArgs";
import { UpdateTimeSlotArgs } from "./UpdateTimeSlotArgs";
import { DeleteTimeSlotArgs } from "./DeleteTimeSlotArgs";
import { TimeSlotCountArgs } from "./TimeSlotCountArgs";
import { TimeSlotFindManyArgs } from "./TimeSlotFindManyArgs";
import { TimeSlotFindUniqueArgs } from "./TimeSlotFindUniqueArgs";
import { TimeSlot } from "./TimeSlot";
import { TimeSlotTimeLogFindManyArgs } from "../../timeSlotTimeLog/base/TimeSlotTimeLogFindManyArgs";
import { TimeSlotTimeLog } from "../../timeSlotTimeLog/base/TimeSlotTimeLog";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { ScreenshotFindManyArgs } from "../../screenshot/base/ScreenshotFindManyArgs";
import { Screenshot } from "../../screenshot/base/Screenshot";
import { TimeSlotMinuteFindManyArgs } from "../../timeSlotMinute/base/TimeSlotMinuteFindManyArgs";
import { TimeSlotMinute } from "../../timeSlotMinute/base/TimeSlotMinute";
import { Employee } from "../../employee/base/Employee";
import { Organization } from "../../organization/base/Organization";
import { Tenant } from "../../tenant/base/Tenant";
import { TimeSlotService } from "../timeSlot.service";
@graphql.Resolver(() => TimeSlot)
export class TimeSlotResolverBase {
  constructor(protected readonly service: TimeSlotService) {}

  async _timeSlotsMeta(
    @graphql.Args() args: TimeSlotCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TimeSlot])
  async timeSlots(
    @graphql.Args() args: TimeSlotFindManyArgs
  ): Promise<TimeSlot[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TimeSlot, { nullable: true })
  async timeSlot(
    @graphql.Args() args: TimeSlotFindUniqueArgs
  ): Promise<TimeSlot | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TimeSlot)
  async createTimeSlot(
    @graphql.Args() args: CreateTimeSlotArgs
  ): Promise<TimeSlot> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        employee: {
          connect: args.data.employee,
        },

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TimeSlot)
  async updateTimeSlot(
    @graphql.Args() args: UpdateTimeSlotArgs
  ): Promise<TimeSlot | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          employee: {
            connect: args.data.employee,
          },

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TimeSlot)
  async deleteTimeSlot(
    @graphql.Args() args: DeleteTimeSlotArgs
  ): Promise<TimeSlot | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TimeSlotTimeLog], { name: "timeSlotTimeLogs" })
  async resolveFieldTimeSlotTimeLogs(
    @graphql.Parent() parent: TimeSlot,
    @graphql.Args() args: TimeSlotTimeLogFindManyArgs
  ): Promise<TimeSlotTimeLog[]> {
    const results = await this.service.findTimeSlotTimeLogs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Activity], { name: "activity" })
  async resolveFieldActivity(
    @graphql.Parent() parent: TimeSlot,
    @graphql.Args() args: ActivityFindManyArgs
  ): Promise<Activity[]> {
    const results = await this.service.findActivity(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Screenshot], { name: "screenshot" })
  async resolveFieldScreenshot(
    @graphql.Parent() parent: TimeSlot,
    @graphql.Args() args: ScreenshotFindManyArgs
  ): Promise<Screenshot[]> {
    const results = await this.service.findScreenshot(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TimeSlotMinute], { name: "timeSlotMinute" })
  async resolveFieldTimeSlotMinute(
    @graphql.Parent() parent: TimeSlot,
    @graphql.Args() args: TimeSlotMinuteFindManyArgs
  ): Promise<TimeSlotMinute[]> {
    const results = await this.service.findTimeSlotMinute(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: TimeSlot
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: TimeSlot
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: TimeSlot
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
