/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTimeSlotMinuteArgs } from "./CreateTimeSlotMinuteArgs";
import { UpdateTimeSlotMinuteArgs } from "./UpdateTimeSlotMinuteArgs";
import { DeleteTimeSlotMinuteArgs } from "./DeleteTimeSlotMinuteArgs";
import { TimeSlotMinuteCountArgs } from "./TimeSlotMinuteCountArgs";
import { TimeSlotMinuteFindManyArgs } from "./TimeSlotMinuteFindManyArgs";
import { TimeSlotMinuteFindUniqueArgs } from "./TimeSlotMinuteFindUniqueArgs";
import { TimeSlotMinute } from "./TimeSlotMinute";
import { Organization } from "../../organization/base/Organization";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { Tenant } from "../../tenant/base/Tenant";
import { TimeSlotMinuteService } from "../timeSlotMinute.service";
@graphql.Resolver(() => TimeSlotMinute)
export class TimeSlotMinuteResolverBase {
  constructor(protected readonly service: TimeSlotMinuteService) {}

  async _timeSlotMinutesMeta(
    @graphql.Args() args: TimeSlotMinuteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TimeSlotMinute])
  async timeSlotMinutes(
    @graphql.Args() args: TimeSlotMinuteFindManyArgs
  ): Promise<TimeSlotMinute[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TimeSlotMinute, { nullable: true })
  async timeSlotMinute(
    @graphql.Args() args: TimeSlotMinuteFindUniqueArgs
  ): Promise<TimeSlotMinute | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TimeSlotMinute)
  async createTimeSlotMinute(
    @graphql.Args() args: CreateTimeSlotMinuteArgs
  ): Promise<TimeSlotMinute> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        timeSlot: {
          connect: args.data.timeSlot,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TimeSlotMinute)
  async updateTimeSlotMinute(
    @graphql.Args() args: UpdateTimeSlotMinuteArgs
  ): Promise<TimeSlotMinute | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          timeSlot: {
            connect: args.data.timeSlot,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TimeSlotMinute)
  async deleteTimeSlotMinute(
    @graphql.Args() args: DeleteTimeSlotMinuteArgs
  ): Promise<TimeSlotMinute | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: TimeSlotMinute
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => TimeSlot, {
    nullable: true,
    name: "timeSlot",
  })
  async resolveFieldTimeSlot(
    @graphql.Parent() parent: TimeSlotMinute
  ): Promise<TimeSlot | null> {
    const result = await this.service.getTimeSlot(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: TimeSlotMinute
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
