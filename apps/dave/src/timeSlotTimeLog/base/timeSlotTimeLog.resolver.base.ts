/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTimeSlotTimeLogArgs } from "./CreateTimeSlotTimeLogArgs";
import { UpdateTimeSlotTimeLogArgs } from "./UpdateTimeSlotTimeLogArgs";
import { DeleteTimeSlotTimeLogArgs } from "./DeleteTimeSlotTimeLogArgs";
import { TimeSlotTimeLogCountArgs } from "./TimeSlotTimeLogCountArgs";
import { TimeSlotTimeLogFindManyArgs } from "./TimeSlotTimeLogFindManyArgs";
import { TimeSlotTimeLogFindUniqueArgs } from "./TimeSlotTimeLogFindUniqueArgs";
import { TimeSlotTimeLog } from "./TimeSlotTimeLog";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { TimeSlotTimeLogService } from "../timeSlotTimeLog.service";
@graphql.Resolver(() => TimeSlotTimeLog)
export class TimeSlotTimeLogResolverBase {
  constructor(protected readonly service: TimeSlotTimeLogService) {}

  async _timeSlotTimeLogsMeta(
    @graphql.Args() args: TimeSlotTimeLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TimeSlotTimeLog])
  async timeSlotTimeLogs(
    @graphql.Args() args: TimeSlotTimeLogFindManyArgs
  ): Promise<TimeSlotTimeLog[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TimeSlotTimeLog, { nullable: true })
  async timeSlotTimeLog(
    @graphql.Args() args: TimeSlotTimeLogFindUniqueArgs
  ): Promise<TimeSlotTimeLog | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TimeSlotTimeLog)
  async createTimeSlotTimeLog(
    @graphql.Args() args: CreateTimeSlotTimeLogArgs
  ): Promise<TimeSlotTimeLog> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        timeLog: {
          connect: args.data.timeLog,
        },

        timeSlot: {
          connect: args.data.timeSlot,
        },
      },
    });
  }

  @graphql.Mutation(() => TimeSlotTimeLog)
  async updateTimeSlotTimeLog(
    @graphql.Args() args: UpdateTimeSlotTimeLogArgs
  ): Promise<TimeSlotTimeLog | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          timeLog: {
            connect: args.data.timeLog,
          },

          timeSlot: {
            connect: args.data.timeSlot,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TimeSlotTimeLog)
  async deleteTimeSlotTimeLog(
    @graphql.Args() args: DeleteTimeSlotTimeLogArgs
  ): Promise<TimeSlotTimeLog | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => TimeLog, {
    nullable: true,
    name: "timeLog",
  })
  async resolveFieldTimeLog(
    @graphql.Parent() parent: TimeSlotTimeLog
  ): Promise<TimeLog | null> {
    const result = await this.service.getTimeLog(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => TimeSlot, {
    nullable: true,
    name: "timeSlot",
  })
  async resolveFieldTimeSlot(
    @graphql.Parent() parent: TimeSlotTimeLog
  ): Promise<TimeSlot | null> {
    const result = await this.service.getTimeSlot(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
