/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TimesheetService } from "../timesheet.service";
import { TimesheetCreateInput } from "./TimesheetCreateInput";
import { TimesheetWhereInput } from "./TimesheetWhereInput";
import { TimesheetWhereUniqueInput } from "./TimesheetWhereUniqueInput";
import { TimesheetFindManyArgs } from "./TimesheetFindManyArgs";
import { TimesheetUpdateInput } from "./TimesheetUpdateInput";
import { Timesheet } from "./Timesheet";
import { TimeLogFindManyArgs } from "../../timeLog/base/TimeLogFindManyArgs";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { TimeLogWhereUniqueInput } from "../../timeLog/base/TimeLogWhereUniqueInput";

export class TimesheetControllerBase {
  constructor(protected readonly service: TimesheetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Timesheet })
  async create(@common.Body() data: TimesheetCreateInput): Promise<Timesheet> {
    return await this.service.create({
      data: {
        ...data,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,

        employee: {
          connect: data.employee,
        },

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        keyboard: true,
        mouse: true,
        overall: true,
        startedAt: true,
        stoppedAt: true,
        approvedAt: true,
        submittedAt: true,
        lockedAt: true,
        isBilled: true,
        status: true,
        deletedAt: true,

        tenant: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Timesheet] })
  @ApiNestedQuery(TimesheetFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Timesheet[]> {
    const args = plainToClass(TimesheetFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        keyboard: true,
        mouse: true,
        overall: true,
        startedAt: true,
        stoppedAt: true,
        approvedAt: true,
        submittedAt: true,
        lockedAt: true,
        isBilled: true,
        status: true,
        deletedAt: true,

        tenant: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Timesheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: TimesheetWhereUniqueInput
  ): Promise<Timesheet | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        keyboard: true,
        mouse: true,
        overall: true,
        startedAt: true,
        stoppedAt: true,
        approvedAt: true,
        submittedAt: true,
        lockedAt: true,
        isBilled: true,
        status: true,
        deletedAt: true,

        tenant: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Timesheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: TimesheetWhereUniqueInput,
    @common.Body() data: TimesheetUpdateInput
  ): Promise<Timesheet | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,

          employee: {
            connect: data.employee,
          },

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          duration: true,
          keyboard: true,
          mouse: true,
          overall: true,
          startedAt: true,
          stoppedAt: true,
          approvedAt: true,
          submittedAt: true,
          lockedAt: true,
          isBilled: true,
          status: true,
          deletedAt: true,

          tenant: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Timesheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: TimesheetWhereUniqueInput
  ): Promise<Timesheet | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          duration: true,
          keyboard: true,
          mouse: true,
          overall: true,
          startedAt: true,
          stoppedAt: true,
          approvedAt: true,
          submittedAt: true,
          lockedAt: true,
          isBilled: true,
          status: true,
          deletedAt: true,

          tenant: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/timeLog")
  @ApiNestedQuery(TimeLogFindManyArgs)
  async findManyTimeLog(
    @common.Req() request: Request,
    @common.Param() params: TimesheetWhereUniqueInput
  ): Promise<TimeLog[]> {
    const query = plainToClass(TimeLogFindManyArgs, request.query);
    const results = await this.service.findTimeLog(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startedAt: true,
        stoppedAt: true,
        logType: true,
        source: true,
        description: true,
        reason: true,
        isBillable: true,
        deletedAt: true,
        isRunning: true,
        version: true,

        organizationTeam: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },

        timesheet: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeLog")
  async connectTimeLog(
    @common.Param() params: TimesheetWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeLog")
  async updateTimeLog(
    @common.Param() params: TimesheetWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeLog")
  async disconnectTimeLog(
    @common.Param() params: TimesheetWhereUniqueInput,
    @common.Body() body: TimeLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeLog: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
