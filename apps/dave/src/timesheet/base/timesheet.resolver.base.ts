/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTimesheetArgs } from "./CreateTimesheetArgs";
import { UpdateTimesheetArgs } from "./UpdateTimesheetArgs";
import { DeleteTimesheetArgs } from "./DeleteTimesheetArgs";
import { TimesheetCountArgs } from "./TimesheetCountArgs";
import { TimesheetFindManyArgs } from "./TimesheetFindManyArgs";
import { TimesheetFindUniqueArgs } from "./TimesheetFindUniqueArgs";
import { Timesheet } from "./Timesheet";
import { TimeLogFindManyArgs } from "../../timeLog/base/TimeLogFindManyArgs";
import { TimeLog } from "../../timeLog/base/TimeLog";
import { Tenant } from "../../tenant/base/Tenant";
import { User } from "../../user/base/User";
import { Employee } from "../../employee/base/Employee";
import { Organization } from "../../organization/base/Organization";
import { TimesheetService } from "../timesheet.service";
@graphql.Resolver(() => Timesheet)
export class TimesheetResolverBase {
  constructor(protected readonly service: TimesheetService) {}

  async _timesheetsMeta(
    @graphql.Args() args: TimesheetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Timesheet])
  async timesheets(
    @graphql.Args() args: TimesheetFindManyArgs
  ): Promise<Timesheet[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Timesheet, { nullable: true })
  async timesheet(
    @graphql.Args() args: TimesheetFindUniqueArgs
  ): Promise<Timesheet | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Timesheet)
  async createTimesheet(
    @graphql.Args() args: CreateTimesheetArgs
  ): Promise<Timesheet> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        employee: {
          connect: args.data.employee,
        },

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Timesheet)
  async updateTimesheet(
    @graphql.Args() args: UpdateTimesheetArgs
  ): Promise<Timesheet | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          employee: {
            connect: args.data.employee,
          },

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Timesheet)
  async deleteTimesheet(
    @graphql.Args() args: DeleteTimesheetArgs
  ): Promise<Timesheet | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TimeLog], { name: "timeLog" })
  async resolveFieldTimeLog(
    @graphql.Parent() parent: Timesheet,
    @graphql.Args() args: TimeLogFindManyArgs
  ): Promise<TimeLog[]> {
    const results = await this.service.findTimeLog(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: Timesheet
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: Timesheet
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: Timesheet
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: Timesheet
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
