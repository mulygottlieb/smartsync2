/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsDate,
  IsOptional,
  IsBoolean,
  IsEnum,
  IsInt,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumUserPreferredComponentLayout } from "./EnumUserPreferredComponentLayout";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { Tenant } from "../../tenant/base/Tenant";
import { Role } from "../../role/base/Role";
import { Candidate } from "../../candidate/base/Candidate";
import { Deal } from "../../deal/base/Deal";
import { EmailReset } from "../../emailReset/base/EmailReset";
import { EmailSent } from "../../emailSent/base/EmailSent";
import { Employee } from "../../employee/base/Employee";
import { Invite } from "../../invite/base/Invite";
import { InvoiceEstimateHistory } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistory";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { OrganizationTeamJoinRequest } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequest";
import { Payment } from "../../payment/base/Payment";
import { TagUser } from "../../tagUser/base/TagUser";
import { Task } from "../../task/base/Task";
import { Timesheet } from "../../timesheet/base/Timesheet";
import { UserOrganization } from "../../userOrganization/base/UserOrganization";

@ObjectType()
class User {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  thirdPartyId!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  hash!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  imageUrl!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  preferredLanguage!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  refreshToken!: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive!: boolean | null;

  @ApiProperty({
    required: false,
    enum: EnumUserPreferredComponentLayout,
  })
  @IsEnum(EnumUserPreferredComponentLayout)
  @IsOptional()
  @Field(() => EnumUserPreferredComponentLayout, {
    nullable: true,
  })
  preferredComponentLayout?: "CARDS_GRID" | "TABLE" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  code!: number | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  codeExpireAt!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  emailVerifiedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  emailToken!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phoneNumber!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  timeZone!: string | null;

  @ApiProperty({
    required: false,
    type: () => ImageAsset,
  })
  @ValidateNested()
  @Type(() => ImageAsset)
  @IsOptional()
  imageAsset?: ImageAsset | null;

  @ApiProperty({
    required: false,
    type: () => Tenant,
  })
  @ValidateNested()
  @Type(() => Tenant)
  @IsOptional()
  tenant?: Tenant | null;

  @ApiProperty({
    required: false,
    type: () => Role,
  })
  @ValidateNested()
  @Type(() => Role)
  @IsOptional()
  role?: Role | null;

  @ApiProperty({
    required: false,
    type: () => Candidate,
  })
  @ValidateNested()
  @Type(() => Candidate)
  @IsOptional()
  candidate?: Candidate | null;

  @ApiProperty({
    required: false,
    type: () => [Deal],
  })
  @ValidateNested()
  @Type(() => Deal)
  @IsOptional()
  deal?: Array<Deal>;

  @ApiProperty({
    required: false,
    type: () => [EmailReset],
  })
  @ValidateNested()
  @Type(() => EmailReset)
  @IsOptional()
  emailReset?: Array<EmailReset>;

  @ApiProperty({
    required: false,
    type: () => [EmailSent],
  })
  @ValidateNested()
  @Type(() => EmailSent)
  @IsOptional()
  emailSent?: Array<EmailSent>;

  @ApiProperty({
    required: false,
    type: () => Employee,
  })
  @ValidateNested()
  @Type(() => Employee)
  @IsOptional()
  employee?: Employee | null;

  @ApiProperty({
    required: false,
    type: () => [Invite],
  })
  @ValidateNested()
  @Type(() => Invite)
  @IsOptional()
  inviteInviteInvitedByIdTouser?: Array<Invite>;

  @ApiProperty({
    required: false,
    type: () => [Invite],
  })
  @ValidateNested()
  @Type(() => Invite)
  @IsOptional()
  inviteInviteUserIdTouser?: Array<Invite>;

  @ApiProperty({
    required: false,
    type: () => [InvoiceEstimateHistory],
  })
  @ValidateNested()
  @Type(() => InvoiceEstimateHistory)
  @IsOptional()
  invoiceEstimateHistory?: Array<InvoiceEstimateHistory>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationTeam],
  })
  @ValidateNested()
  @Type(() => OrganizationTeam)
  @IsOptional()
  organizationTeam?: Array<OrganizationTeam>;

  @ApiProperty({
    required: false,
    type: () => [OrganizationTeamJoinRequest],
  })
  @ValidateNested()
  @Type(() => OrganizationTeamJoinRequest)
  @IsOptional()
  organizationTeamJoinRequest?: Array<OrganizationTeamJoinRequest>;

  @ApiProperty({
    required: false,
    type: () => [Payment],
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payment?: Array<Payment>;

  @ApiProperty({
    required: false,
    type: () => [TagUser],
  })
  @ValidateNested()
  @Type(() => TagUser)
  @IsOptional()
  tagUser?: Array<TagUser>;

  @ApiProperty({
    required: false,
    type: () => [Task],
  })
  @ValidateNested()
  @Type(() => Task)
  @IsOptional()
  task?: Array<Task>;

  @ApiProperty({
    required: false,
    type: () => [Timesheet],
  })
  @ValidateNested()
  @Type(() => Timesheet)
  @IsOptional()
  timesheet?: Array<Timesheet>;

  @ApiProperty({
    required: false,
    type: () => [UserOrganization],
  })
  @ValidateNested()
  @Type(() => UserOrganization)
  @IsOptional()
  userOrganization?: Array<UserOrganization>;
}

export { User as User };
