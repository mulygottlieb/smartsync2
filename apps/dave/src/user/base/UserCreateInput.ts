/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsBoolean,
  IsEnum,
  IsInt,
  IsDate,
  ValidateNested,
} from "class-validator";
import { EnumUserPreferredComponentLayout } from "./EnumUserPreferredComponentLayout";
import { Type } from "class-transformer";
import { ImageAssetWhereUniqueInput } from "../../imageAsset/base/ImageAssetWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { RoleWhereUniqueInput } from "../../role/base/RoleWhereUniqueInput";
import { CandidateWhereUniqueInput } from "../../candidate/base/CandidateWhereUniqueInput";
import { DealCreateNestedManyWithoutUsersInput } from "./DealCreateNestedManyWithoutUsersInput";
import { EmailResetCreateNestedManyWithoutUsersInput } from "./EmailResetCreateNestedManyWithoutUsersInput";
import { EmailSentCreateNestedManyWithoutUsersInput } from "./EmailSentCreateNestedManyWithoutUsersInput";
import { EmployeeWhereUniqueInput } from "../../employee/base/EmployeeWhereUniqueInput";
import { InviteCreateNestedManyWithoutUsersInput } from "./InviteCreateNestedManyWithoutUsersInput";
import { InvoiceEstimateHistoryCreateNestedManyWithoutUsersInput } from "./InvoiceEstimateHistoryCreateNestedManyWithoutUsersInput";
import { OrganizationTeamCreateNestedManyWithoutUsersInput } from "./OrganizationTeamCreateNestedManyWithoutUsersInput";
import { OrganizationTeamJoinRequestCreateNestedManyWithoutUsersInput } from "./OrganizationTeamJoinRequestCreateNestedManyWithoutUsersInput";
import { PaymentCreateNestedManyWithoutUsersInput } from "./PaymentCreateNestedManyWithoutUsersInput";
import { TagUserCreateNestedManyWithoutUsersInput } from "./TagUserCreateNestedManyWithoutUsersInput";
import { TaskCreateNestedManyWithoutUsersInput } from "./TaskCreateNestedManyWithoutUsersInput";
import { TimesheetCreateNestedManyWithoutUsersInput } from "./TimesheetCreateNestedManyWithoutUsersInput";
import { UserOrganizationCreateNestedManyWithoutUsersInput } from "./UserOrganizationCreateNestedManyWithoutUsersInput";

@InputType()
class UserCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  thirdPartyId?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  hash?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  imageUrl?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  preferredLanguage?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  refreshToken?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive?: boolean | null;

  @ApiProperty({
    required: false,
    enum: EnumUserPreferredComponentLayout,
  })
  @IsEnum(EnumUserPreferredComponentLayout)
  @IsOptional()
  @Field(() => EnumUserPreferredComponentLayout, {
    nullable: true,
  })
  preferredComponentLayout?: "CARDS_GRID" | "TABLE" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  code?: number | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  codeExpireAt?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  emailVerifiedAt?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  emailToken?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phoneNumber?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  timeZone?: string | null;

  @ApiProperty({
    required: false,
    type: () => ImageAssetWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ImageAssetWhereUniqueInput)
  @IsOptional()
  @Field(() => ImageAssetWhereUniqueInput, {
    nullable: true,
  })
  imageAsset?: ImageAssetWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => RoleWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => RoleWhereUniqueInput)
  @IsOptional()
  @Field(() => RoleWhereUniqueInput, {
    nullable: true,
  })
  role?: RoleWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => CandidateWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CandidateWhereUniqueInput)
  @IsOptional()
  @Field(() => CandidateWhereUniqueInput, {
    nullable: true,
  })
  candidate?: CandidateWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => DealCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => DealCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => DealCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  deal?: DealCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => EmailResetCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => EmailResetCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => EmailResetCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  emailReset?: EmailResetCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => EmailSentCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => EmailSentCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => EmailSentCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  emailSent?: EmailSentCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => EmployeeWhereUniqueInput)
  @IsOptional()
  @Field(() => EmployeeWhereUniqueInput, {
    nullable: true,
  })
  employee?: EmployeeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => InviteCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => InviteCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => InviteCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  inviteInviteInvitedByIdTouser?: InviteCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => InviteCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => InviteCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => InviteCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  inviteInviteUserIdTouser?: InviteCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => InvoiceEstimateHistoryCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => InvoiceEstimateHistoryCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => InvoiceEstimateHistoryCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  invoiceEstimateHistory?: InvoiceEstimateHistoryCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => OrganizationTeamCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  organizationTeam?: OrganizationTeamCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamJoinRequestCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamJoinRequestCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => OrganizationTeamJoinRequestCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  organizationTeamJoinRequest?: OrganizationTeamJoinRequestCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => PaymentCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => PaymentCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => PaymentCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  payment?: PaymentCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => TagUserCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TagUserCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TagUserCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  tagUser?: TagUserCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => TaskCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TaskCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TaskCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  task?: TaskCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => TimesheetCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TimesheetCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TimesheetCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  timesheet?: TimesheetCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => UserOrganizationCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => UserOrganizationCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => UserOrganizationCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  userOrganization?: UserOrganizationCreateNestedManyWithoutUsersInput;
}

export { UserCreateInput as UserCreateInput };
