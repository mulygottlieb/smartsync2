/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, IsEnum, ValidateNested } from "class-validator";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { BooleanNullableFilter } from "../../util/BooleanNullableFilter";
import { EnumUserPreferredComponentLayout } from "./EnumUserPreferredComponentLayout";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { ImageAssetWhereUniqueInput } from "../../imageAsset/base/ImageAssetWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { RoleWhereUniqueInput } from "../../role/base/RoleWhereUniqueInput";
import { CandidateWhereUniqueInput } from "../../candidate/base/CandidateWhereUniqueInput";
import { DealListRelationFilter } from "../../deal/base/DealListRelationFilter";
import { EmailResetListRelationFilter } from "../../emailReset/base/EmailResetListRelationFilter";
import { EmailSentListRelationFilter } from "../../emailSent/base/EmailSentListRelationFilter";
import { EmployeeWhereUniqueInput } from "../../employee/base/EmployeeWhereUniqueInput";
import { InviteListRelationFilter } from "../../invite/base/InviteListRelationFilter";
import { InvoiceEstimateHistoryListRelationFilter } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistoryListRelationFilter";
import { OrganizationTeamListRelationFilter } from "../../organizationTeam/base/OrganizationTeamListRelationFilter";
import { OrganizationTeamJoinRequestListRelationFilter } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequestListRelationFilter";
import { PaymentListRelationFilter } from "../../payment/base/PaymentListRelationFilter";
import { TagUserListRelationFilter } from "../../tagUser/base/TagUserListRelationFilter";
import { TaskListRelationFilter } from "../../task/base/TaskListRelationFilter";
import { TimesheetListRelationFilter } from "../../timesheet/base/TimesheetListRelationFilter";
import { UserOrganizationListRelationFilter } from "../../userOrganization/base/UserOrganizationListRelationFilter";

@InputType()
class UserWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  createdAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  thirdPartyId?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  firstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  lastName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  email?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  hash?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  imageUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  preferredLanguage?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  refreshToken?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isActive?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumUserPreferredComponentLayout,
  })
  @IsEnum(EnumUserPreferredComponentLayout)
  @IsOptional()
  @Field(() => EnumUserPreferredComponentLayout, {
    nullable: true,
  })
  preferredComponentLayout?: "CARDS_GRID" | "TABLE";

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  code?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  codeExpireAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  emailVerifiedAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  emailToken?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  phoneNumber?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  timeZone?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ImageAssetWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ImageAssetWhereUniqueInput)
  @IsOptional()
  @Field(() => ImageAssetWhereUniqueInput, {
    nullable: true,
  })
  imageAsset?: ImageAssetWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenant?: TenantWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => RoleWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => RoleWhereUniqueInput)
  @IsOptional()
  @Field(() => RoleWhereUniqueInput, {
    nullable: true,
  })
  role?: RoleWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => CandidateWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CandidateWhereUniqueInput)
  @IsOptional()
  @Field(() => CandidateWhereUniqueInput, {
    nullable: true,
  })
  candidate?: CandidateWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => DealListRelationFilter,
  })
  @ValidateNested()
  @Type(() => DealListRelationFilter)
  @IsOptional()
  @Field(() => DealListRelationFilter, {
    nullable: true,
  })
  deal?: DealListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EmailResetListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmailResetListRelationFilter)
  @IsOptional()
  @Field(() => EmailResetListRelationFilter, {
    nullable: true,
  })
  emailReset?: EmailResetListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EmailSentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmailSentListRelationFilter)
  @IsOptional()
  @Field(() => EmailSentListRelationFilter, {
    nullable: true,
  })
  emailSent?: EmailSentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EmployeeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => EmployeeWhereUniqueInput)
  @IsOptional()
  @Field(() => EmployeeWhereUniqueInput, {
    nullable: true,
  })
  employee?: EmployeeWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => InviteListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InviteListRelationFilter)
  @IsOptional()
  @Field(() => InviteListRelationFilter, {
    nullable: true,
  })
  inviteInviteInvitedByIdTouser?: InviteListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => InviteListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InviteListRelationFilter)
  @IsOptional()
  @Field(() => InviteListRelationFilter, {
    nullable: true,
  })
  inviteInviteUserIdTouser?: InviteListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => InvoiceEstimateHistoryListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InvoiceEstimateHistoryListRelationFilter)
  @IsOptional()
  @Field(() => InvoiceEstimateHistoryListRelationFilter, {
    nullable: true,
  })
  invoiceEstimateHistory?: InvoiceEstimateHistoryListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationTeamListRelationFilter, {
    nullable: true,
  })
  organizationTeam?: OrganizationTeamListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizationTeamJoinRequestListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrganizationTeamJoinRequestListRelationFilter)
  @IsOptional()
  @Field(() => OrganizationTeamJoinRequestListRelationFilter, {
    nullable: true,
  })
  organizationTeamJoinRequest?: OrganizationTeamJoinRequestListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => PaymentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PaymentListRelationFilter)
  @IsOptional()
  @Field(() => PaymentListRelationFilter, {
    nullable: true,
  })
  payment?: PaymentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TagUserListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TagUserListRelationFilter)
  @IsOptional()
  @Field(() => TagUserListRelationFilter, {
    nullable: true,
  })
  tagUser?: TagUserListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TaskListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TaskListRelationFilter)
  @IsOptional()
  @Field(() => TaskListRelationFilter, {
    nullable: true,
  })
  task?: TaskListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TimesheetListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TimesheetListRelationFilter)
  @IsOptional()
  @Field(() => TimesheetListRelationFilter, {
    nullable: true,
  })
  timesheet?: TimesheetListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UserOrganizationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserOrganizationListRelationFilter)
  @IsOptional()
  @Field(() => UserOrganizationListRelationFilter, {
    nullable: true,
  })
  userOrganization?: UserOrganizationListRelationFilter;
}

export { UserWhereInput as UserWhereInput };
