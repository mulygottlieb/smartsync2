/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { UserWhereInput } from "./UserWhereInput";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserUpdateInput } from "./UserUpdateInput";
import { User } from "./User";
import { DealFindManyArgs } from "../../deal/base/DealFindManyArgs";
import { Deal } from "../../deal/base/Deal";
import { DealWhereUniqueInput } from "../../deal/base/DealWhereUniqueInput";
import { EmailResetFindManyArgs } from "../../emailReset/base/EmailResetFindManyArgs";
import { EmailReset } from "../../emailReset/base/EmailReset";
import { EmailResetWhereUniqueInput } from "../../emailReset/base/EmailResetWhereUniqueInput";
import { EmailSentFindManyArgs } from "../../emailSent/base/EmailSentFindManyArgs";
import { EmailSent } from "../../emailSent/base/EmailSent";
import { EmailSentWhereUniqueInput } from "../../emailSent/base/EmailSentWhereUniqueInput";
import { InviteFindManyArgs } from "../../invite/base/InviteFindManyArgs";
import { Invite } from "../../invite/base/Invite";
import { InviteWhereUniqueInput } from "../../invite/base/InviteWhereUniqueInput";
import { InvoiceEstimateHistoryFindManyArgs } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistoryFindManyArgs";
import { InvoiceEstimateHistory } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistory";
import { InvoiceEstimateHistoryWhereUniqueInput } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistoryWhereUniqueInput";
import { OrganizationTeamFindManyArgs } from "../../organizationTeam/base/OrganizationTeamFindManyArgs";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { OrganizationTeamWhereUniqueInput } from "../../organizationTeam/base/OrganizationTeamWhereUniqueInput";
import { OrganizationTeamJoinRequestFindManyArgs } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequestFindManyArgs";
import { OrganizationTeamJoinRequest } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequest";
import { OrganizationTeamJoinRequestWhereUniqueInput } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequestWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { TagUserFindManyArgs } from "../../tagUser/base/TagUserFindManyArgs";
import { TagUser } from "../../tagUser/base/TagUser";
import { TagUserWhereUniqueInput } from "../../tagUser/base/TagUserWhereUniqueInput";
import { TaskFindManyArgs } from "../../task/base/TaskFindManyArgs";
import { Task } from "../../task/base/Task";
import { TaskWhereUniqueInput } from "../../task/base/TaskWhereUniqueInput";
import { TimesheetFindManyArgs } from "../../timesheet/base/TimesheetFindManyArgs";
import { Timesheet } from "../../timesheet/base/Timesheet";
import { TimesheetWhereUniqueInput } from "../../timesheet/base/TimesheetWhereUniqueInput";
import { UserOrganizationFindManyArgs } from "../../userOrganization/base/UserOrganizationFindManyArgs";
import { UserOrganization } from "../../userOrganization/base/UserOrganization";
import { UserOrganizationWhereUniqueInput } from "../../userOrganization/base/UserOrganizationWhereUniqueInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async create(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.create({
      data: {
        ...data,

        imageAsset: data.imageAsset
          ? {
              connect: data.imageAsset,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        role: data.role
          ? {
              connect: data.role,
            }
          : undefined,

        candidate: data.candidate
          ? {
              connect: data.candidate,
            }
          : undefined,

        employee: data.employee
          ? {
              connect: data.employee,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        thirdPartyId: true,
        firstName: true,
        lastName: true,
        email: true,
        hash: true,
        imageUrl: true,
        preferredLanguage: true,
        refreshToken: true,
        isActive: true,
        preferredComponentLayout: true,
        code: true,
        codeExpireAt: true,
        emailVerifiedAt: true,
        emailToken: true,
        phoneNumber: true,
        timeZone: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        thirdPartyId: true,
        firstName: true,
        lastName: true,
        email: true,
        hash: true,
        imageUrl: true,
        preferredLanguage: true,
        refreshToken: true,
        isActive: true,
        preferredComponentLayout: true,
        code: true,
        codeExpireAt: true,
        emailVerifiedAt: true,
        emailToken: true,
        phoneNumber: true,
        timeZone: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        thirdPartyId: true,
        firstName: true,
        lastName: true,
        email: true,
        hash: true,
        imageUrl: true,
        preferredLanguage: true,
        refreshToken: true,
        isActive: true,
        preferredComponentLayout: true,
        code: true,
        codeExpireAt: true,
        emailVerifiedAt: true,
        emailToken: true,
        phoneNumber: true,
        timeZone: true,

        imageAsset: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          imageAsset: data.imageAsset
            ? {
                connect: data.imageAsset,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          role: data.role
            ? {
                connect: data.role,
              }
            : undefined,

          candidate: data.candidate
            ? {
                connect: data.candidate,
              }
            : undefined,

          employee: data.employee
            ? {
                connect: data.employee,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          thirdPartyId: true,
          firstName: true,
          lastName: true,
          email: true,
          hash: true,
          imageUrl: true,
          preferredLanguage: true,
          refreshToken: true,
          isActive: true,
          preferredComponentLayout: true,
          code: true,
          codeExpireAt: true,
          emailVerifiedAt: true,
          emailToken: true,
          phoneNumber: true,
          timeZone: true,

          imageAsset: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          role: {
            select: {
              id: true,
            },
          },

          candidate: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          thirdPartyId: true,
          firstName: true,
          lastName: true,
          email: true,
          hash: true,
          imageUrl: true,
          preferredLanguage: true,
          refreshToken: true,
          isActive: true,
          preferredComponentLayout: true,
          code: true,
          codeExpireAt: true,
          emailVerifiedAt: true,
          emailToken: true,
          phoneNumber: true,
          timeZone: true,

          imageAsset: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          role: {
            select: {
              id: true,
            },
          },

          candidate: {
            select: {
              id: true,
            },
          },

          employee: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/deal")
  @ApiNestedQuery(DealFindManyArgs)
  async findManyDeal(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Deal[]> {
    const query = plainToClass(DealFindManyArgs, request.query);
    const results = await this.service.findDeal(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        probability: true,

        organizationContact: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        pipelineStage: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/deal")
  async connectDeal(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DealWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deal: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/deal")
  async updateDeal(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DealWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deal: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/deal")
  async disconnectDeal(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DealWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deal: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/emailReset")
  @ApiNestedQuery(EmailResetFindManyArgs)
  async findManyEmailReset(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<EmailReset[]> {
    const query = plainToClass(EmailResetFindManyArgs, request.query);
    const results = await this.service.findEmailReset(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        oldEmail: true,
        code: true,
        token: true,
        expiredAt: true,

        tenant: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/emailReset")
  async connectEmailReset(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmailResetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailReset: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/emailReset")
  async updateEmailReset(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmailResetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailReset: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/emailReset")
  async disconnectEmailReset(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmailResetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailReset: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/emailSent")
  @ApiNestedQuery(EmailSentFindManyArgs)
  async findManyEmailSent(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<EmailSent[]> {
    const query = plainToClass(EmailSentFindManyArgs, request.query);
    const results = await this.service.findEmailSent(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        content: true,
        email: true,
        isArchived: true,

        tenant: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        emailTemplate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/emailSent")
  async connectEmailSent(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmailSentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailSent: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/emailSent")
  async updateEmailSent(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmailSentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailSent: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/emailSent")
  async disconnectEmailSent(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EmailSentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailSent: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/inviteInviteInvitedByIdTouser")
  @ApiNestedQuery(InviteFindManyArgs)
  async findManyInviteInviteInvitedByIdTouser(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Invite[]> {
    const query = plainToClass(InviteFindManyArgs, request.query);
    const results = await this.service.findInviteInviteInvitedByIdTouser(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          token: true,
          email: true,
          status: true,
          expireDate: true,
          actionDate: true,
          code: true,
          fullName: true,

          userInviteInvitedByIdTouser: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          role: {
            select: {
              id: true,
            },
          },

          userInviteUserIdTouser: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/inviteInviteInvitedByIdTouser")
  async connectInviteInviteInvitedByIdTouser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: InviteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteInviteInvitedByIdTouser: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/inviteInviteInvitedByIdTouser")
  async updateInviteInviteInvitedByIdTouser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: InviteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteInviteInvitedByIdTouser: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/inviteInviteInvitedByIdTouser")
  async disconnectInviteInviteInvitedByIdTouser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: InviteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteInviteInvitedByIdTouser: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/inviteInviteUserIdTouser")
  @ApiNestedQuery(InviteFindManyArgs)
  async findManyInviteInviteUserIdTouser(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Invite[]> {
    const query = plainToClass(InviteFindManyArgs, request.query);
    const results = await this.service.findInviteInviteUserIdTouser(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        token: true,
        email: true,
        status: true,
        expireDate: true,
        actionDate: true,
        code: true,
        fullName: true,

        userInviteInvitedByIdTouser: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },

        userInviteUserIdTouser: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/inviteInviteUserIdTouser")
  async connectInviteInviteUserIdTouser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: InviteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteInviteUserIdTouser: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/inviteInviteUserIdTouser")
  async updateInviteInviteUserIdTouser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: InviteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteInviteUserIdTouser: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/inviteInviteUserIdTouser")
  async disconnectInviteInviteUserIdTouser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: InviteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inviteInviteUserIdTouser: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/invoiceEstimateHistory")
  @ApiNestedQuery(InvoiceEstimateHistoryFindManyArgs)
  async findManyInvoiceEstimateHistory(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<InvoiceEstimateHistory[]> {
    const query = plainToClass(
      InvoiceEstimateHistoryFindManyArgs,
      request.query
    );
    const results = await this.service.findInvoiceEstimateHistory(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        action: true,

        invoice: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoiceEstimateHistory")
  async connectInvoiceEstimateHistory(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: InvoiceEstimateHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceEstimateHistory: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoiceEstimateHistory")
  async updateInvoiceEstimateHistory(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: InvoiceEstimateHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceEstimateHistory: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoiceEstimateHistory")
  async disconnectInvoiceEstimateHistory(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: InvoiceEstimateHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceEstimateHistory: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationTeam")
  @ApiNestedQuery(OrganizationTeamFindManyArgs)
  async findManyOrganizationTeam(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<OrganizationTeam[]> {
    const query = plainToClass(OrganizationTeamFindManyArgs, request.query);
    const results = await this.service.findOrganizationTeam(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        prefix: true,
        publicField: true,
        profileLink: true,
        logo: true,
        color: true,
        emoji: true,
        teamSize: true,

        tenant: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationTeam")
  async connectOrganizationTeam(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: OrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeam: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationTeam")
  async updateOrganizationTeam(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: OrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeam: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationTeam")
  async disconnectOrganizationTeam(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: OrganizationTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeam: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizationTeamJoinRequest")
  @ApiNestedQuery(OrganizationTeamJoinRequestFindManyArgs)
  async findManyOrganizationTeamJoinRequest(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<OrganizationTeamJoinRequest[]> {
    const query = plainToClass(
      OrganizationTeamJoinRequestFindManyArgs,
      request.query
    );
    const results = await this.service.findOrganizationTeamJoinRequest(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,
          fullName: true,
          linkAddress: true,
          position: true,
          status: true,
          code: true,
          token: true,
          expiredAt: true,

          organizationTeam: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizationTeamJoinRequest")
  async connectOrganizationTeamJoinRequest(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: OrganizationTeamJoinRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamJoinRequest: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizationTeamJoinRequest")
  async updateOrganizationTeamJoinRequest(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: OrganizationTeamJoinRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamJoinRequest: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizationTeamJoinRequest")
  async disconnectOrganizationTeamJoinRequest(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: OrganizationTeamJoinRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizationTeamJoinRequest: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/payment")
  @ApiNestedQuery(PaymentFindManyArgs)
  async findManyPayment(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayment(params.id, {
      ...query,
      select: {
        invoice: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        id: true,
        createdAt: true,
        updatedAt: true,
        paymentDate: true,
        amount: true,
        note: true,
        currency: true,
        overdue: true,
        paymentMethod: true,

        user: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organizationContact: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payment")
  async connectPayment(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payment")
  async updatePayment(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payment")
  async disconnectPayment(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagUser")
  @ApiNestedQuery(TagUserFindManyArgs)
  async findManyTagUser(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<TagUser[]> {
    const query = plainToClass(TagUserFindManyArgs, request.query);
    const results = await this.service.findTagUser(params.id, {
      ...query,
      select: {
        user: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagUser")
  async connectTagUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TagUserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagUser: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagUser")
  async updateTagUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TagUserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagUser: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagUser")
  async disconnectTagUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TagUserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagUser: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/task")
  @ApiNestedQuery(TaskFindManyArgs)
  async findManyTask(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Task[]> {
    const query = plainToClass(TaskFindManyArgs, request.query);
    const results = await this.service.findTask(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        status: true,
        estimate: true,
        dueDate: true,
        numberField: true,
        prefix: true,
        priority: true,
        size: true,
        publicField: true,
        startDate: true,
        resolvedAt: true,
        version: true,
        issueType: true,

        organizationSprint: {
          select: {
            id: true,
          },
        },

        organizationProject: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/task")
  async connectTask(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      task: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/task")
  async updateTask(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      task: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/task")
  async disconnectTask(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      task: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timesheet")
  @ApiNestedQuery(TimesheetFindManyArgs)
  async findManyTimesheet(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Timesheet[]> {
    const query = plainToClass(TimesheetFindManyArgs, request.query);
    const results = await this.service.findTimesheet(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        duration: true,
        keyboard: true,
        mouse: true,
        overall: true,
        startedAt: true,
        stoppedAt: true,
        approvedAt: true,
        submittedAt: true,
        lockedAt: true,
        isBilled: true,
        status: true,
        deletedAt: true,

        tenant: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timesheet")
  async connectTimesheet(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TimesheetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timesheet: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timesheet")
  async updateTimesheet(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TimesheetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timesheet: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timesheet")
  async disconnectTimesheet(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TimesheetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timesheet: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userOrganization")
  @ApiNestedQuery(UserOrganizationFindManyArgs)
  async findManyUserOrganization(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserOrganization[]> {
    const query = plainToClass(UserOrganizationFindManyArgs, request.query);
    const results = await this.service.findUserOrganization(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        isDefault: true,
        isActive: true,

        user: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userOrganization")
  async connectUserOrganization(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserOrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userOrganization: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userOrganization")
  async updateUserOrganization(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserOrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userOrganization: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userOrganization")
  async disconnectUserOrganization(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserOrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userOrganization: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
