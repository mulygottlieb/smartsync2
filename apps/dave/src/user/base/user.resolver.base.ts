/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateUserArgs } from "./CreateUserArgs";
import { UpdateUserArgs } from "./UpdateUserArgs";
import { DeleteUserArgs } from "./DeleteUserArgs";
import { UserCountArgs } from "./UserCountArgs";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserFindUniqueArgs } from "./UserFindUniqueArgs";
import { User } from "./User";
import { DealFindManyArgs } from "../../deal/base/DealFindManyArgs";
import { Deal } from "../../deal/base/Deal";
import { EmailResetFindManyArgs } from "../../emailReset/base/EmailResetFindManyArgs";
import { EmailReset } from "../../emailReset/base/EmailReset";
import { EmailSentFindManyArgs } from "../../emailSent/base/EmailSentFindManyArgs";
import { EmailSent } from "../../emailSent/base/EmailSent";
import { InviteFindManyArgs } from "../../invite/base/InviteFindManyArgs";
import { Invite } from "../../invite/base/Invite";
import { InvoiceEstimateHistoryFindManyArgs } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistoryFindManyArgs";
import { InvoiceEstimateHistory } from "../../invoiceEstimateHistory/base/InvoiceEstimateHistory";
import { OrganizationTeamFindManyArgs } from "../../organizationTeam/base/OrganizationTeamFindManyArgs";
import { OrganizationTeam } from "../../organizationTeam/base/OrganizationTeam";
import { OrganizationTeamJoinRequestFindManyArgs } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequestFindManyArgs";
import { OrganizationTeamJoinRequest } from "../../organizationTeamJoinRequest/base/OrganizationTeamJoinRequest";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { TagUserFindManyArgs } from "../../tagUser/base/TagUserFindManyArgs";
import { TagUser } from "../../tagUser/base/TagUser";
import { TaskFindManyArgs } from "../../task/base/TaskFindManyArgs";
import { Task } from "../../task/base/Task";
import { TimesheetFindManyArgs } from "../../timesheet/base/TimesheetFindManyArgs";
import { Timesheet } from "../../timesheet/base/Timesheet";
import { UserOrganizationFindManyArgs } from "../../userOrganization/base/UserOrganizationFindManyArgs";
import { UserOrganization } from "../../userOrganization/base/UserOrganization";
import { ImageAsset } from "../../imageAsset/base/ImageAsset";
import { Tenant } from "../../tenant/base/Tenant";
import { Role } from "../../role/base/Role";
import { Candidate } from "../../candidate/base/Candidate";
import { Employee } from "../../employee/base/Employee";
import { UserService } from "../user.service";
@graphql.Resolver(() => User)
export class UserResolverBase {
  constructor(protected readonly service: UserService) {}

  async _usersMeta(
    @graphql.Args() args: UserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [User])
  async users(@graphql.Args() args: UserFindManyArgs): Promise<User[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => User, { nullable: true })
  async user(@graphql.Args() args: UserFindUniqueArgs): Promise<User | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => User)
  async createUser(@graphql.Args() args: CreateUserArgs): Promise<User> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        imageAsset: args.data.imageAsset
          ? {
              connect: args.data.imageAsset,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        role: args.data.role
          ? {
              connect: args.data.role,
            }
          : undefined,

        candidate: args.data.candidate
          ? {
              connect: args.data.candidate,
            }
          : undefined,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => User)
  async updateUser(@graphql.Args() args: UpdateUserArgs): Promise<User | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          imageAsset: args.data.imageAsset
            ? {
                connect: args.data.imageAsset,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          role: args.data.role
            ? {
                connect: args.data.role,
              }
            : undefined,

          candidate: args.data.candidate
            ? {
                connect: args.data.candidate,
              }
            : undefined,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => User)
  async deleteUser(@graphql.Args() args: DeleteUserArgs): Promise<User | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Deal], { name: "deal" })
  async resolveFieldDeal(
    @graphql.Parent() parent: User,
    @graphql.Args() args: DealFindManyArgs
  ): Promise<Deal[]> {
    const results = await this.service.findDeal(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmailReset], { name: "emailReset" })
  async resolveFieldEmailReset(
    @graphql.Parent() parent: User,
    @graphql.Args() args: EmailResetFindManyArgs
  ): Promise<EmailReset[]> {
    const results = await this.service.findEmailReset(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmailSent], { name: "emailSent" })
  async resolveFieldEmailSent(
    @graphql.Parent() parent: User,
    @graphql.Args() args: EmailSentFindManyArgs
  ): Promise<EmailSent[]> {
    const results = await this.service.findEmailSent(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Invite], {
    name: "inviteInviteInvitedByIdTouser",
  })
  async resolveFieldInviteInviteInvitedByIdTouser(
    @graphql.Parent() parent: User,
    @graphql.Args() args: InviteFindManyArgs
  ): Promise<Invite[]> {
    const results = await this.service.findInviteInviteInvitedByIdTouser(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Invite], { name: "inviteInviteUserIdTouser" })
  async resolveFieldInviteInviteUserIdTouser(
    @graphql.Parent() parent: User,
    @graphql.Args() args: InviteFindManyArgs
  ): Promise<Invite[]> {
    const results = await this.service.findInviteInviteUserIdTouser(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [InvoiceEstimateHistory], {
    name: "invoiceEstimateHistory",
  })
  async resolveFieldInvoiceEstimateHistory(
    @graphql.Parent() parent: User,
    @graphql.Args() args: InvoiceEstimateHistoryFindManyArgs
  ): Promise<InvoiceEstimateHistory[]> {
    const results = await this.service.findInvoiceEstimateHistory(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationTeam], { name: "organizationTeam" })
  async resolveFieldOrganizationTeam(
    @graphql.Parent() parent: User,
    @graphql.Args() args: OrganizationTeamFindManyArgs
  ): Promise<OrganizationTeam[]> {
    const results = await this.service.findOrganizationTeam(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [OrganizationTeamJoinRequest], {
    name: "organizationTeamJoinRequest",
  })
  async resolveFieldOrganizationTeamJoinRequest(
    @graphql.Parent() parent: User,
    @graphql.Args() args: OrganizationTeamJoinRequestFindManyArgs
  ): Promise<OrganizationTeamJoinRequest[]> {
    const results = await this.service.findOrganizationTeamJoinRequest(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Payment], { name: "payment" })
  async resolveFieldPayment(
    @graphql.Parent() parent: User,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TagUser], { name: "tagUser" })
  async resolveFieldTagUser(
    @graphql.Parent() parent: User,
    @graphql.Args() args: TagUserFindManyArgs
  ): Promise<TagUser[]> {
    const results = await this.service.findTagUser(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Task], { name: "task" })
  async resolveFieldTask(
    @graphql.Parent() parent: User,
    @graphql.Args() args: TaskFindManyArgs
  ): Promise<Task[]> {
    const results = await this.service.findTask(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Timesheet], { name: "timesheet" })
  async resolveFieldTimesheet(
    @graphql.Parent() parent: User,
    @graphql.Args() args: TimesheetFindManyArgs
  ): Promise<Timesheet[]> {
    const results = await this.service.findTimesheet(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [UserOrganization], { name: "userOrganization" })
  async resolveFieldUserOrganization(
    @graphql.Parent() parent: User,
    @graphql.Args() args: UserOrganizationFindManyArgs
  ): Promise<UserOrganization[]> {
    const results = await this.service.findUserOrganization(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => ImageAsset, {
    nullable: true,
    name: "imageAsset",
  })
  async resolveFieldImageAsset(
    @graphql.Parent() parent: User
  ): Promise<ImageAsset | null> {
    const result = await this.service.getImageAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: User
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Role, {
    nullable: true,
    name: "role",
  })
  async resolveFieldRole(@graphql.Parent() parent: User): Promise<Role | null> {
    const result = await this.service.getRole(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Candidate, {
    nullable: true,
    name: "candidate",
  })
  async resolveFieldCandidate(
    @graphql.Parent() parent: User
  ): Promise<Candidate | null> {
    const result = await this.service.getCandidate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async resolveFieldEmployee(
    @graphql.Parent() parent: User
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
