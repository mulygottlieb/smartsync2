/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  User,
  Deal,
  EmailReset,
  EmailSent,
  Invite,
  InvoiceEstimateHistory,
  OrganizationTeam,
  OrganizationTeamJoinRequest,
  Payment,
  TagUser,
  Task,
  Timesheet,
  UserOrganization,
  ImageAsset,
  Tenant,
  Role,
  Candidate,
  Employee,
} from "@prisma/client";

export class UserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UserCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCountArgs>
  ): Promise<number> {
    return this.prisma.user.count(args);
  }

  async findMany<T extends Prisma.UserFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFindManyArgs>
  ): Promise<User[]> {
    return this.prisma.user.findMany(args);
  }
  async findOne<T extends Prisma.UserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFindUniqueArgs>
  ): Promise<User | null> {
    return this.prisma.user.findUnique(args);
  }
  async create<T extends Prisma.UserCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCreateArgs>
  ): Promise<User> {
    return this.prisma.user.create<T>(args);
  }
  async update<T extends Prisma.UserUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserUpdateArgs>
  ): Promise<User> {
    return this.prisma.user.update<T>(args);
  }
  async delete<T extends Prisma.UserDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserDeleteArgs>
  ): Promise<User> {
    return this.prisma.user.delete(args);
  }

  async findDeal(
    parentId: string,
    args: Prisma.DealFindManyArgs
  ): Promise<Deal[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .deal(args);
  }

  async findEmailReset(
    parentId: string,
    args: Prisma.EmailResetFindManyArgs
  ): Promise<EmailReset[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .emailReset(args);
  }

  async findEmailSent(
    parentId: string,
    args: Prisma.EmailSentFindManyArgs
  ): Promise<EmailSent[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .emailSent(args);
  }

  async findInviteInviteInvitedByIdTouser(
    parentId: string,
    args: Prisma.InviteFindManyArgs
  ): Promise<Invite[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .inviteInviteInvitedByIdTouser(args);
  }

  async findInviteInviteUserIdTouser(
    parentId: string,
    args: Prisma.InviteFindManyArgs
  ): Promise<Invite[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .inviteInviteUserIdTouser(args);
  }

  async findInvoiceEstimateHistory(
    parentId: string,
    args: Prisma.InvoiceEstimateHistoryFindManyArgs
  ): Promise<InvoiceEstimateHistory[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .invoiceEstimateHistory(args);
  }

  async findOrganizationTeam(
    parentId: string,
    args: Prisma.OrganizationTeamFindManyArgs
  ): Promise<OrganizationTeam[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationTeam(args);
  }

  async findOrganizationTeamJoinRequest(
    parentId: string,
    args: Prisma.OrganizationTeamJoinRequestFindManyArgs
  ): Promise<OrganizationTeamJoinRequest[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizationTeamJoinRequest(args);
  }

  async findPayment(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<Payment[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payment(args);
  }

  async findTagUser(
    parentId: string,
    args: Prisma.TagUserFindManyArgs
  ): Promise<TagUser[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tagUser(args);
  }

  async findTask(
    parentId: string,
    args: Prisma.TaskFindManyArgs
  ): Promise<Task[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .task(args);
  }

  async findTimesheet(
    parentId: string,
    args: Prisma.TimesheetFindManyArgs
  ): Promise<Timesheet[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timesheet(args);
  }

  async findUserOrganization(
    parentId: string,
    args: Prisma.UserOrganizationFindManyArgs
  ): Promise<UserOrganization[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userOrganization(args);
  }

  async getImageAsset(parentId: string): Promise<ImageAsset | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .imageAsset();
  }

  async getTenant(parentId: string): Promise<Tenant | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }

  async getRole(parentId: string): Promise<Role | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .role();
  }

  async getCandidate(parentId: string): Promise<Candidate | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .candidate();
  }

  async getEmployee(parentId: string): Promise<Employee | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }
}
