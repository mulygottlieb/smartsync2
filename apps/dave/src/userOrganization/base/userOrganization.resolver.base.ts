/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateUserOrganizationArgs } from "./CreateUserOrganizationArgs";
import { UpdateUserOrganizationArgs } from "./UpdateUserOrganizationArgs";
import { DeleteUserOrganizationArgs } from "./DeleteUserOrganizationArgs";
import { UserOrganizationCountArgs } from "./UserOrganizationCountArgs";
import { UserOrganizationFindManyArgs } from "./UserOrganizationFindManyArgs";
import { UserOrganizationFindUniqueArgs } from "./UserOrganizationFindUniqueArgs";
import { UserOrganization } from "./UserOrganization";
import { User } from "../../user/base/User";
import { Tenant } from "../../tenant/base/Tenant";
import { Organization } from "../../organization/base/Organization";
import { UserOrganizationService } from "../userOrganization.service";
@graphql.Resolver(() => UserOrganization)
export class UserOrganizationResolverBase {
  constructor(protected readonly service: UserOrganizationService) {}

  async _userOrganizationsMeta(
    @graphql.Args() args: UserOrganizationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserOrganization])
  async userOrganizations(
    @graphql.Args() args: UserOrganizationFindManyArgs
  ): Promise<UserOrganization[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => UserOrganization, { nullable: true })
  async userOrganization(
    @graphql.Args() args: UserOrganizationFindUniqueArgs
  ): Promise<UserOrganization | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserOrganization)
  async createUserOrganization(
    @graphql.Args() args: CreateUserOrganizationArgs
  ): Promise<UserOrganization> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: {
          connect: args.data.user,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserOrganization)
  async updateUserOrganization(
    @graphql.Args() args: UpdateUserOrganizationArgs
  ): Promise<UserOrganization | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: {
            connect: args.data.user,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserOrganization)
  async deleteUserOrganization(
    @graphql.Args() args: DeleteUserOrganizationArgs
  ): Promise<UserOrganization | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: UserOrganization
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: UserOrganization
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: UserOrganization
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
