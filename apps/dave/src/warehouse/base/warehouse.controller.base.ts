/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WarehouseService } from "../warehouse.service";
import { WarehouseCreateInput } from "./WarehouseCreateInput";
import { WarehouseWhereInput } from "./WarehouseWhereInput";
import { WarehouseWhereUniqueInput } from "./WarehouseWhereUniqueInput";
import { WarehouseFindManyArgs } from "./WarehouseFindManyArgs";
import { WarehouseUpdateInput } from "./WarehouseUpdateInput";
import { Warehouse } from "./Warehouse";
import { TagWarehouseFindManyArgs } from "../../tagWarehouse/base/TagWarehouseFindManyArgs";
import { TagWarehouse } from "../../tagWarehouse/base/TagWarehouse";
import { TagWarehouseWhereUniqueInput } from "../../tagWarehouse/base/TagWarehouseWhereUniqueInput";
import { WarehouseMerchantFindManyArgs } from "../../warehouseMerchant/base/WarehouseMerchantFindManyArgs";
import { WarehouseMerchant } from "../../warehouseMerchant/base/WarehouseMerchant";
import { WarehouseMerchantWhereUniqueInput } from "../../warehouseMerchant/base/WarehouseMerchantWhereUniqueInput";
import { WarehouseProductFindManyArgs } from "../../warehouseProduct/base/WarehouseProductFindManyArgs";
import { WarehouseProduct } from "../../warehouseProduct/base/WarehouseProduct";
import { WarehouseProductWhereUniqueInput } from "../../warehouseProduct/base/WarehouseProductWhereUniqueInput";

export class WarehouseControllerBase {
  constructor(protected readonly service: WarehouseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Warehouse })
  async create(@common.Body() data: WarehouseCreateInput): Promise<Warehouse> {
    return await this.service.create({
      data: {
        ...data,

        contact: data.contact
          ? {
              connect: data.contact,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,

        imageAsset: data.imageAsset
          ? {
              connect: data.imageAsset,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        code: true,
        email: true,
        description: true,
        active: true,

        contact: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Warehouse] })
  @ApiNestedQuery(WarehouseFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Warehouse[]> {
    const args = plainToClass(WarehouseFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        code: true,
        email: true,
        description: true,
        active: true,

        contact: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Warehouse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<Warehouse | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        code: true,
        email: true,
        description: true,
        active: true,

        contact: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        imageAsset: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Warehouse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() data: WarehouseUpdateInput
  ): Promise<Warehouse | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          contact: data.contact
            ? {
                connect: data.contact,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,

          imageAsset: data.imageAsset
            ? {
                connect: data.imageAsset,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          code: true,
          email: true,
          description: true,
          active: true,

          contact: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          imageAsset: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Warehouse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<Warehouse | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          code: true,
          email: true,
          description: true,
          active: true,

          contact: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          imageAsset: {
            select: {
              id: true,
            },
          },

          organization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/tagWarehouse")
  @ApiNestedQuery(TagWarehouseFindManyArgs)
  async findManyTagWarehouse(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<TagWarehouse[]> {
    const query = plainToClass(TagWarehouseFindManyArgs, request.query);
    const results = await this.service.findTagWarehouse(params.id, {
      ...query,
      select: {
        warehouse: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagWarehouse")
  async connectTagWarehouse(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: TagWarehouseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagWarehouse: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagWarehouse")
  async updateTagWarehouse(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: TagWarehouseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagWarehouse: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagWarehouse")
  async disconnectTagWarehouse(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: TagWarehouseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagWarehouse: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/warehouseMerchant")
  @ApiNestedQuery(WarehouseMerchantFindManyArgs)
  async findManyWarehouseMerchant(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<WarehouseMerchant[]> {
    const query = plainToClass(WarehouseMerchantFindManyArgs, request.query);
    const results = await this.service.findWarehouseMerchant(params.id, {
      ...query,
      select: {
        merchant: {
          select: {
            id: true,
          },
        },

        warehouse: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/warehouseMerchant")
  async connectWarehouseMerchant(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: WarehouseMerchantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseMerchant: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/warehouseMerchant")
  async updateWarehouseMerchant(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: WarehouseMerchantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseMerchant: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/warehouseMerchant")
  async disconnectWarehouseMerchant(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: WarehouseMerchantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseMerchant: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/warehouseProduct")
  @ApiNestedQuery(WarehouseProductFindManyArgs)
  async findManyWarehouseProduct(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<WarehouseProduct[]> {
    const query = plainToClass(WarehouseProductFindManyArgs, request.query);
    const results = await this.service.findWarehouseProduct(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        quantity: true,

        product: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        warehouse: {
          select: {
            id: true,
          },
        },

        organization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/warehouseProduct")
  async connectWarehouseProduct(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: WarehouseProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseProduct: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/warehouseProduct")
  async updateWarehouseProduct(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: WarehouseProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseProduct: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/warehouseProduct")
  async disconnectWarehouseProduct(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: WarehouseProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseProduct: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
