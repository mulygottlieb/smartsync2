/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateWarehouseMerchantArgs } from "./CreateWarehouseMerchantArgs";
import { UpdateWarehouseMerchantArgs } from "./UpdateWarehouseMerchantArgs";
import { DeleteWarehouseMerchantArgs } from "./DeleteWarehouseMerchantArgs";
import { WarehouseMerchantCountArgs } from "./WarehouseMerchantCountArgs";
import { WarehouseMerchantFindManyArgs } from "./WarehouseMerchantFindManyArgs";
import { WarehouseMerchantFindUniqueArgs } from "./WarehouseMerchantFindUniqueArgs";
import { WarehouseMerchant } from "./WarehouseMerchant";
import { Merchant } from "../../merchant/base/Merchant";
import { Warehouse } from "../../warehouse/base/Warehouse";
import { WarehouseMerchantService } from "../warehouseMerchant.service";
@graphql.Resolver(() => WarehouseMerchant)
export class WarehouseMerchantResolverBase {
  constructor(protected readonly service: WarehouseMerchantService) {}

  async _warehouseMerchantsMeta(
    @graphql.Args() args: WarehouseMerchantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WarehouseMerchant])
  async warehouseMerchants(
    @graphql.Args() args: WarehouseMerchantFindManyArgs
  ): Promise<WarehouseMerchant[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => WarehouseMerchant, { nullable: true })
  async warehouseMerchant(
    @graphql.Args() args: WarehouseMerchantFindUniqueArgs
  ): Promise<WarehouseMerchant | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WarehouseMerchant)
  async createWarehouseMerchant(
    @graphql.Args() args: CreateWarehouseMerchantArgs
  ): Promise<WarehouseMerchant> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        merchant: {
          connect: args.data.merchant,
        },

        warehouse: {
          connect: args.data.warehouse,
        },
      },
    });
  }

  @graphql.Mutation(() => WarehouseMerchant)
  async updateWarehouseMerchant(
    @graphql.Args() args: UpdateWarehouseMerchantArgs
  ): Promise<WarehouseMerchant | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          merchant: {
            connect: args.data.merchant,
          },

          warehouse: {
            connect: args.data.warehouse,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WarehouseMerchant)
  async deleteWarehouseMerchant(
    @graphql.Args() args: DeleteWarehouseMerchantArgs
  ): Promise<WarehouseMerchant | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Merchant, {
    nullable: true,
    name: "merchant",
  })
  async resolveFieldMerchant(
    @graphql.Parent() parent: WarehouseMerchant
  ): Promise<Merchant | null> {
    const result = await this.service.getMerchant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Warehouse, {
    nullable: true,
    name: "warehouse",
  })
  async resolveFieldWarehouse(
    @graphql.Parent() parent: WarehouseMerchant
  ): Promise<Warehouse | null> {
    const result = await this.service.getWarehouse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
