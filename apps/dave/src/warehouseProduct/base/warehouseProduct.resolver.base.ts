/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateWarehouseProductArgs } from "./CreateWarehouseProductArgs";
import { UpdateWarehouseProductArgs } from "./UpdateWarehouseProductArgs";
import { DeleteWarehouseProductArgs } from "./DeleteWarehouseProductArgs";
import { WarehouseProductCountArgs } from "./WarehouseProductCountArgs";
import { WarehouseProductFindManyArgs } from "./WarehouseProductFindManyArgs";
import { WarehouseProductFindUniqueArgs } from "./WarehouseProductFindUniqueArgs";
import { WarehouseProduct } from "./WarehouseProduct";
import { WarehouseProductVariantFindManyArgs } from "../../warehouseProductVariant/base/WarehouseProductVariantFindManyArgs";
import { WarehouseProductVariant } from "../../warehouseProductVariant/base/WarehouseProductVariant";
import { Product } from "../../product/base/Product";
import { Tenant } from "../../tenant/base/Tenant";
import { Warehouse } from "../../warehouse/base/Warehouse";
import { Organization } from "../../organization/base/Organization";
import { WarehouseProductService } from "../warehouseProduct.service";
@graphql.Resolver(() => WarehouseProduct)
export class WarehouseProductResolverBase {
  constructor(protected readonly service: WarehouseProductService) {}

  async _warehouseProductsMeta(
    @graphql.Args() args: WarehouseProductCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WarehouseProduct])
  async warehouseProducts(
    @graphql.Args() args: WarehouseProductFindManyArgs
  ): Promise<WarehouseProduct[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => WarehouseProduct, { nullable: true })
  async warehouseProduct(
    @graphql.Args() args: WarehouseProductFindUniqueArgs
  ): Promise<WarehouseProduct | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WarehouseProduct)
  async createWarehouseProduct(
    @graphql.Args() args: CreateWarehouseProductArgs
  ): Promise<WarehouseProduct> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        product: {
          connect: args.data.product,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        warehouse: {
          connect: args.data.warehouse,
        },

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => WarehouseProduct)
  async updateWarehouseProduct(
    @graphql.Args() args: UpdateWarehouseProductArgs
  ): Promise<WarehouseProduct | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          product: {
            connect: args.data.product,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          warehouse: {
            connect: args.data.warehouse,
          },

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WarehouseProduct)
  async deleteWarehouseProduct(
    @graphql.Args() args: DeleteWarehouseProductArgs
  ): Promise<WarehouseProduct | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [WarehouseProductVariant], {
    name: "warehouseProductVariant",
  })
  async resolveFieldWarehouseProductVariant(
    @graphql.Parent() parent: WarehouseProduct,
    @graphql.Args() args: WarehouseProductVariantFindManyArgs
  ): Promise<WarehouseProductVariant[]> {
    const results = await this.service.findWarehouseProductVariant(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  async resolveFieldProduct(
    @graphql.Parent() parent: WarehouseProduct
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: WarehouseProduct
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Warehouse, {
    nullable: true,
    name: "warehouse",
  })
  async resolveFieldWarehouse(
    @graphql.Parent() parent: WarehouseProduct
  ): Promise<Warehouse | null> {
    const result = await this.service.getWarehouse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: WarehouseProduct
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
