/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateWarehouseProductVariantArgs } from "./CreateWarehouseProductVariantArgs";
import { UpdateWarehouseProductVariantArgs } from "./UpdateWarehouseProductVariantArgs";
import { DeleteWarehouseProductVariantArgs } from "./DeleteWarehouseProductVariantArgs";
import { WarehouseProductVariantCountArgs } from "./WarehouseProductVariantCountArgs";
import { WarehouseProductVariantFindManyArgs } from "./WarehouseProductVariantFindManyArgs";
import { WarehouseProductVariantFindUniqueArgs } from "./WarehouseProductVariantFindUniqueArgs";
import { WarehouseProductVariant } from "./WarehouseProductVariant";
import { WarehouseProduct } from "../../warehouseProduct/base/WarehouseProduct";
import { Tenant } from "../../tenant/base/Tenant";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { Organization } from "../../organization/base/Organization";
import { WarehouseProductVariantService } from "../warehouseProductVariant.service";
@graphql.Resolver(() => WarehouseProductVariant)
export class WarehouseProductVariantResolverBase {
  constructor(protected readonly service: WarehouseProductVariantService) {}

  async _warehouseProductVariantsMeta(
    @graphql.Args() args: WarehouseProductVariantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WarehouseProductVariant])
  async warehouseProductVariants(
    @graphql.Args() args: WarehouseProductVariantFindManyArgs
  ): Promise<WarehouseProductVariant[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => WarehouseProductVariant, { nullable: true })
  async warehouseProductVariant(
    @graphql.Args() args: WarehouseProductVariantFindUniqueArgs
  ): Promise<WarehouseProductVariant | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WarehouseProductVariant)
  async createWarehouseProductVariant(
    @graphql.Args() args: CreateWarehouseProductVariantArgs
  ): Promise<WarehouseProductVariant> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        warehouseProduct: {
          connect: args.data.warehouseProduct,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        productVariant: {
          connect: args.data.productVariant,
        },

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => WarehouseProductVariant)
  async updateWarehouseProductVariant(
    @graphql.Args() args: UpdateWarehouseProductVariantArgs
  ): Promise<WarehouseProductVariant | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          warehouseProduct: {
            connect: args.data.warehouseProduct,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          productVariant: {
            connect: args.data.productVariant,
          },

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WarehouseProductVariant)
  async deleteWarehouseProductVariant(
    @graphql.Args() args: DeleteWarehouseProductVariantArgs
  ): Promise<WarehouseProductVariant | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => WarehouseProduct, {
    nullable: true,
    name: "warehouseProduct",
  })
  async resolveFieldWarehouseProduct(
    @graphql.Parent() parent: WarehouseProductVariant
  ): Promise<WarehouseProduct | null> {
    const result = await this.service.getWarehouseProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async resolveFieldTenant(
    @graphql.Parent() parent: WarehouseProductVariant
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProductVariant, {
    nullable: true,
    name: "productVariant",
  })
  async resolveFieldProductVariant(
    @graphql.Parent() parent: WarehouseProductVariant
  ): Promise<ProductVariant | null> {
    const result = await this.service.getProductVariant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async resolveFieldOrganization(
    @graphql.Parent() parent: WarehouseProductVariant
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
