/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteE3Args } from "./DeleteE3Args";
import { E3CountArgs } from "./E3CountArgs";
import { E3FindManyArgs } from "./E3FindManyArgs";
import { E3FindUniqueArgs } from "./E3FindUniqueArgs";
import { E3 } from "./E3";
import { E3Service } from "../e3.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => E3)
export class E3ResolverBase {
  constructor(
    protected readonly service: E3Service,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "E3",
    action: "read",
    possession: "any",
  })
  async _e3sMeta(@graphql.Args() args: E3CountArgs): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [E3])
  @nestAccessControl.UseRoles({
    resource: "E3",
    action: "read",
    possession: "any",
  })
  async e3s(@graphql.Args() args: E3FindManyArgs): Promise<E3[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => E3, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "E3",
    action: "read",
    possession: "own",
  })
  async e3(@graphql.Args() args: E3FindUniqueArgs): Promise<E3 | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => E3)
  @nestAccessControl.UseRoles({
    resource: "E3",
    action: "delete",
    possession: "any",
  })
  async deleteE3(@graphql.Args() args: DeleteE3Args): Promise<E3 | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
